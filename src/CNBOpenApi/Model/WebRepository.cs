// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebRepository
    /// </summary>
    public partial class WebRepository : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebRepository" /> class.
        /// </summary>
        /// <param name="headRef">headRef</param>
        /// <param name="httpCloneUrl">httpCloneUrl</param>
        /// <param name="slug">slug</param>
        /// <param name="sshCloneUrl">sshCloneUrl</param>
        /// <param name="usage">usage</param>
        [JsonConstructor]
        public WebRepository(Option<string?> headRef = default, Option<string?> httpCloneUrl = default, Option<string?> slug = default, Option<string?> sshCloneUrl = default, Option<WebRepositoryUsage?> usage = default)
        {
            HeadRefOption = headRef;
            HttpCloneUrlOption = httpCloneUrl;
            SlugOption = slug;
            SshCloneUrlOption = sshCloneUrl;
            UsageOption = usage;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of HeadRef
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HeadRefOption { get; private set; }

        /// <summary>
        /// Gets or Sets HeadRef
        /// </summary>
        [JsonPropertyName("head_ref")]
        public string? HeadRef { get { return this.HeadRefOption; } set { this.HeadRefOption = new(value); } }

        /// <summary>
        /// Used to track the state of HttpCloneUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HttpCloneUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets HttpCloneUrl
        /// </summary>
        [JsonPropertyName("http_clone_url")]
        public string? HttpCloneUrl { get { return this.HttpCloneUrlOption; } set { this.HttpCloneUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Slug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SlugOption { get; private set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [JsonPropertyName("slug")]
        public string? Slug { get { return this.SlugOption; } set { this.SlugOption = new(value); } }

        /// <summary>
        /// Used to track the state of SshCloneUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SshCloneUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets SshCloneUrl
        /// </summary>
        [JsonPropertyName("ssh_clone_url")]
        public string? SshCloneUrl { get { return this.SshCloneUrlOption; } set { this.SshCloneUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Usage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebRepositoryUsage?> UsageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [JsonPropertyName("usage")]
        public WebRepositoryUsage? Usage { get { return this.UsageOption; } set { this.UsageOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebRepository {\n");
            sb.Append("  HeadRef: ").Append(HeadRef).Append("\n");
            sb.Append("  HttpCloneUrl: ").Append(HttpCloneUrl).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  SshCloneUrl: ").Append(SshCloneUrl).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebRepository" />
    /// </summary>
    public class WebRepositoryJsonConverter : JsonConverter<WebRepository>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebRepository" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebRepository Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> headRef = default;
            Option<string?> httpCloneUrl = default;
            Option<string?> slug = default;
            Option<string?> sshCloneUrl = default;
            Option<WebRepositoryUsage?> usage = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "head_ref":
                            headRef = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "http_clone_url":
                            httpCloneUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "slug":
                            slug = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ssh_clone_url":
                            sshCloneUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "usage":
                            usage = new Option<WebRepositoryUsage?>(JsonSerializer.Deserialize<WebRepositoryUsage>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (headRef.IsSet && headRef.Value == null)
                throw new ArgumentNullException(nameof(headRef), "Property is not nullable for class WebRepository.");

            if (httpCloneUrl.IsSet && httpCloneUrl.Value == null)
                throw new ArgumentNullException(nameof(httpCloneUrl), "Property is not nullable for class WebRepository.");

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug), "Property is not nullable for class WebRepository.");

            if (sshCloneUrl.IsSet && sshCloneUrl.Value == null)
                throw new ArgumentNullException(nameof(sshCloneUrl), "Property is not nullable for class WebRepository.");

            if (usage.IsSet && usage.Value == null)
                throw new ArgumentNullException(nameof(usage), "Property is not nullable for class WebRepository.");

            return new WebRepository(headRef, httpCloneUrl, slug, sshCloneUrl, usage);
        }

        /// <summary>
        /// Serializes a <see cref="WebRepository" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webRepository"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebRepository webRepository, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webRepository, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebRepository" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webRepository"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebRepository webRepository, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webRepository.HeadRefOption.IsSet && webRepository.HeadRef == null)
                throw new ArgumentNullException(nameof(webRepository.HeadRef), "Property is required for class WebRepository.");

            if (webRepository.HttpCloneUrlOption.IsSet && webRepository.HttpCloneUrl == null)
                throw new ArgumentNullException(nameof(webRepository.HttpCloneUrl), "Property is required for class WebRepository.");

            if (webRepository.SlugOption.IsSet && webRepository.Slug == null)
                throw new ArgumentNullException(nameof(webRepository.Slug), "Property is required for class WebRepository.");

            if (webRepository.SshCloneUrlOption.IsSet && webRepository.SshCloneUrl == null)
                throw new ArgumentNullException(nameof(webRepository.SshCloneUrl), "Property is required for class WebRepository.");

            if (webRepository.UsageOption.IsSet && webRepository.Usage == null)
                throw new ArgumentNullException(nameof(webRepository.Usage), "Property is required for class WebRepository.");

            if (webRepository.HeadRefOption.IsSet)
                writer.WriteString("head_ref", webRepository.HeadRef);

            if (webRepository.HttpCloneUrlOption.IsSet)
                writer.WriteString("http_clone_url", webRepository.HttpCloneUrl);

            if (webRepository.SlugOption.IsSet)
                writer.WriteString("slug", webRepository.Slug);

            if (webRepository.SshCloneUrlOption.IsSet)
                writer.WriteString("ssh_clone_url", webRepository.SshCloneUrl);

            if (webRepository.UsageOption.IsSet)
            {
                writer.WritePropertyName("usage");
                JsonSerializer.Serialize(writer, webRepository.Usage, jsonSerializerOptions);
            }
        }
    }
}
