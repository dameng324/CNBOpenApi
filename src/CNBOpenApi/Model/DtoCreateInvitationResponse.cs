// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoCreateInvitationResponse
    /// </summary>
    public partial class DtoCreateInvitationResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoCreateInvitationResponse" /> class.
        /// </summary>
        /// <param name="linkToken">linkToken</param>
        /// <param name="resourceName">resourceName</param>
        /// <param name="resourceType">resourceType</param>
        /// <param name="username">username</param>
        [JsonConstructor]
        public DtoCreateInvitationResponse(Option<string?> linkToken = default, Option<string?> resourceName = default, Option<ConstantSlugType?> resourceType = default, Option<string?> username = default)
        {
            LinkTokenOption = linkToken;
            ResourceNameOption = resourceName;
            ResourceTypeOption = resourceType;
            UsernameOption = username;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ResourceType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantSlugType?> ResourceTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>
        [JsonPropertyName("resource_type")]
        public ConstantSlugType? ResourceType { get { return this.ResourceTypeOption; } set { this.ResourceTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of LinkToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LinkTokenOption { get; private set; }

        /// <summary>
        /// Gets or Sets LinkToken
        /// </summary>
        [JsonPropertyName("link_token")]
        public string? LinkToken { get { return this.LinkTokenOption; } set { this.LinkTokenOption = new(value); } }

        /// <summary>
        /// Used to track the state of ResourceName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ResourceNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResourceName
        /// </summary>
        [JsonPropertyName("resource_name")]
        public string? ResourceName { get { return this.ResourceNameOption; } set { this.ResourceNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Username
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UsernameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [JsonPropertyName("username")]
        public string? Username { get { return this.UsernameOption; } set { this.UsernameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoCreateInvitationResponse {\n");
            sb.Append("  LinkToken: ").Append(LinkToken).Append("\n");
            sb.Append("  ResourceName: ").Append(ResourceName).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoCreateInvitationResponse" />
    /// </summary>
    public class DtoCreateInvitationResponseJsonConverter : JsonConverter<DtoCreateInvitationResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoCreateInvitationResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoCreateInvitationResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> linkToken = default;
            Option<string?> resourceName = default;
            Option<ConstantSlugType?> resourceType = default;
            Option<string?> username = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "link_token":
                            linkToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "resource_name":
                            resourceName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "resource_type":
                            string? resourceTypeRawValue = utf8JsonReader.GetString();
                            if (resourceTypeRawValue != null)
                                resourceType = new Option<ConstantSlugType?>(ConstantSlugTypeValueConverter.FromStringOrDefault(resourceTypeRawValue));
                            break;
                        case "username":
                            username = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (linkToken.IsSet && linkToken.Value == null)
                throw new ArgumentNullException(nameof(linkToken), "Property is not nullable for class DtoCreateInvitationResponse.");

            if (resourceName.IsSet && resourceName.Value == null)
                throw new ArgumentNullException(nameof(resourceName), "Property is not nullable for class DtoCreateInvitationResponse.");

            if (resourceType.IsSet && resourceType.Value == null)
                throw new ArgumentNullException(nameof(resourceType), "Property is not nullable for class DtoCreateInvitationResponse.");

            if (username.IsSet && username.Value == null)
                throw new ArgumentNullException(nameof(username), "Property is not nullable for class DtoCreateInvitationResponse.");

            return new DtoCreateInvitationResponse(linkToken, resourceName, resourceType, username);
        }

        /// <summary>
        /// Serializes a <see cref="DtoCreateInvitationResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoCreateInvitationResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoCreateInvitationResponse dtoCreateInvitationResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoCreateInvitationResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoCreateInvitationResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoCreateInvitationResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoCreateInvitationResponse dtoCreateInvitationResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoCreateInvitationResponse.LinkTokenOption.IsSet && dtoCreateInvitationResponse.LinkToken == null)
                throw new ArgumentNullException(nameof(dtoCreateInvitationResponse.LinkToken), "Property is required for class DtoCreateInvitationResponse.");

            if (dtoCreateInvitationResponse.ResourceNameOption.IsSet && dtoCreateInvitationResponse.ResourceName == null)
                throw new ArgumentNullException(nameof(dtoCreateInvitationResponse.ResourceName), "Property is required for class DtoCreateInvitationResponse.");

            if (dtoCreateInvitationResponse.UsernameOption.IsSet && dtoCreateInvitationResponse.Username == null)
                throw new ArgumentNullException(nameof(dtoCreateInvitationResponse.Username), "Property is required for class DtoCreateInvitationResponse.");

            if (dtoCreateInvitationResponse.LinkTokenOption.IsSet)
                writer.WriteString("link_token", dtoCreateInvitationResponse.LinkToken);

            if (dtoCreateInvitationResponse.ResourceNameOption.IsSet)
                writer.WriteString("resource_name", dtoCreateInvitationResponse.ResourceName);

            if (dtoCreateInvitationResponse.ResourceTypeOption.IsSet)
            {
                var resourceTypeRawValue = ConstantSlugTypeValueConverter.ToJsonValue(dtoCreateInvitationResponse.ResourceType!.Value);
                writer.WriteNumber("resource_type", resourceTypeRawValue);
            }
            if (dtoCreateInvitationResponse.UsernameOption.IsSet)
                writer.WriteString("username", dtoCreateInvitationResponse.Username);
        }
    }
}
