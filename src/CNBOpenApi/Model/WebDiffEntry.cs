// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebDiffEntry
    /// </summary>
    public partial class WebDiffEntry : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebDiffEntry" /> class.
        /// </summary>
        /// <param name="changeType">changeType</param>
        /// <param name="deletions">deletions</param>
        /// <param name="fileIndex">fileIndex</param>
        /// <param name="insertions">insertions</param>
        /// <param name="isBin">isBin</param>
        /// <param name="oldPath">oldPath</param>
        /// <param name="path">path</param>
        [JsonConstructor]
        public WebDiffEntry(Option<string?> changeType = default, Option<int?> deletions = default, Option<int?> fileIndex = default, Option<int?> insertions = default, Option<bool?> isBin = default, Option<string?> oldPath = default, Option<string?> path = default)
        {
            ChangeTypeOption = changeType;
            DeletionsOption = deletions;
            FileIndexOption = fileIndex;
            InsertionsOption = insertions;
            IsBinOption = isBin;
            OldPathOption = oldPath;
            PathOption = path;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ChangeType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ChangeTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChangeType
        /// </summary>
        [JsonPropertyName("change_type")]
        public string? ChangeType { get { return this.ChangeTypeOption; } set { this.ChangeTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Deletions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DeletionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Deletions
        /// </summary>
        [JsonPropertyName("deletions")]
        public int? Deletions { get { return this.DeletionsOption; } set { this.DeletionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileIndex
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FileIndexOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileIndex
        /// </summary>
        [JsonPropertyName("file_index")]
        public int? FileIndex { get { return this.FileIndexOption; } set { this.FileIndexOption = new(value); } }

        /// <summary>
        /// Used to track the state of Insertions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> InsertionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Insertions
        /// </summary>
        [JsonPropertyName("insertions")]
        public int? Insertions { get { return this.InsertionsOption; } set { this.InsertionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsBin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsBinOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsBin
        /// </summary>
        [JsonPropertyName("is_bin")]
        public bool? IsBin { get { return this.IsBinOption; } set { this.IsBinOption = new(value); } }

        /// <summary>
        /// Used to track the state of OldPath
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OldPathOption { get; private set; }

        /// <summary>
        /// Gets or Sets OldPath
        /// </summary>
        [JsonPropertyName("old_path")]
        public string? OldPath { get { return this.OldPathOption; } set { this.OldPathOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebDiffEntry {\n");
            sb.Append("  ChangeType: ").Append(ChangeType).Append("\n");
            sb.Append("  Deletions: ").Append(Deletions).Append("\n");
            sb.Append("  FileIndex: ").Append(FileIndex).Append("\n");
            sb.Append("  Insertions: ").Append(Insertions).Append("\n");
            sb.Append("  IsBin: ").Append(IsBin).Append("\n");
            sb.Append("  OldPath: ").Append(OldPath).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebDiffEntry" />
    /// </summary>
    public class WebDiffEntryJsonConverter : JsonConverter<WebDiffEntry>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebDiffEntry" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebDiffEntry Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> changeType = default;
            Option<int?> deletions = default;
            Option<int?> fileIndex = default;
            Option<int?> insertions = default;
            Option<bool?> isBin = default;
            Option<string?> oldPath = default;
            Option<string?> path = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "change_type":
                            changeType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "deletions":
                            deletions = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "file_index":
                            fileIndex = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "insertions":
                            insertions = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "is_bin":
                            isBin = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "old_path":
                            oldPath = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (changeType.IsSet && changeType.Value == null)
                throw new ArgumentNullException(nameof(changeType), "Property is not nullable for class WebDiffEntry.");

            if (deletions.IsSet && deletions.Value == null)
                throw new ArgumentNullException(nameof(deletions), "Property is not nullable for class WebDiffEntry.");

            if (fileIndex.IsSet && fileIndex.Value == null)
                throw new ArgumentNullException(nameof(fileIndex), "Property is not nullable for class WebDiffEntry.");

            if (insertions.IsSet && insertions.Value == null)
                throw new ArgumentNullException(nameof(insertions), "Property is not nullable for class WebDiffEntry.");

            if (isBin.IsSet && isBin.Value == null)
                throw new ArgumentNullException(nameof(isBin), "Property is not nullable for class WebDiffEntry.");

            if (oldPath.IsSet && oldPath.Value == null)
                throw new ArgumentNullException(nameof(oldPath), "Property is not nullable for class WebDiffEntry.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class WebDiffEntry.");

            return new WebDiffEntry(changeType, deletions, fileIndex, insertions, isBin, oldPath, path);
        }

        /// <summary>
        /// Serializes a <see cref="WebDiffEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webDiffEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebDiffEntry webDiffEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webDiffEntry, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebDiffEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webDiffEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebDiffEntry webDiffEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webDiffEntry.ChangeTypeOption.IsSet && webDiffEntry.ChangeType == null)
                throw new ArgumentNullException(nameof(webDiffEntry.ChangeType), "Property is required for class WebDiffEntry.");

            if (webDiffEntry.OldPathOption.IsSet && webDiffEntry.OldPath == null)
                throw new ArgumentNullException(nameof(webDiffEntry.OldPath), "Property is required for class WebDiffEntry.");

            if (webDiffEntry.PathOption.IsSet && webDiffEntry.Path == null)
                throw new ArgumentNullException(nameof(webDiffEntry.Path), "Property is required for class WebDiffEntry.");

            if (webDiffEntry.ChangeTypeOption.IsSet)
                writer.WriteString("change_type", webDiffEntry.ChangeType);

            if (webDiffEntry.DeletionsOption.IsSet)
                writer.WriteNumber("deletions", webDiffEntry.DeletionsOption.Value!.Value);

            if (webDiffEntry.FileIndexOption.IsSet)
                writer.WriteNumber("file_index", webDiffEntry.FileIndexOption.Value!.Value);

            if (webDiffEntry.InsertionsOption.IsSet)
                writer.WriteNumber("insertions", webDiffEntry.InsertionsOption.Value!.Value);

            if (webDiffEntry.IsBinOption.IsSet)
                writer.WriteBoolean("is_bin", webDiffEntry.IsBinOption.Value!.Value);

            if (webDiffEntry.OldPathOption.IsSet)
                writer.WriteString("old_path", webDiffEntry.OldPath);

            if (webDiffEntry.PathOption.IsSet)
                writer.WriteString("path", webDiffEntry.Path);
        }
    }
}
