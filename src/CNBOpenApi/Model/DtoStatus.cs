// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoStatus
    /// </summary>
    public partial class DtoStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoStatus" /> class.
        /// </summary>
        /// <param name="budgetStatus">预算单状态，0-没有预算单，1-正常，2-欠费被隔离，3-被销毁</param>
        /// <param name="overruns">对应资源类型是否超限</param>
        /// <param name="usedPercent">对应资源类型目前的使用率，比如50就是50%</param>
        [JsonConstructor]
        public DtoStatus(Option<ConstantBudgetSts?> budgetStatus = default, Option<Dictionary<string, bool>?> overruns = default, Option<Dictionary<string, int>?> usedPercent = default)
        {
            BudgetStatusOption = budgetStatus;
            OverrunsOption = overruns;
            UsedPercentOption = usedPercent;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BudgetStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantBudgetSts?> BudgetStatusOption { get; private set; }

        /// <summary>
        /// 预算单状态，0-没有预算单，1-正常，2-欠费被隔离，3-被销毁
        /// </summary>
        /// <value>预算单状态，0-没有预算单，1-正常，2-欠费被隔离，3-被销毁</value>
        [JsonPropertyName("budget_status")]
        public ConstantBudgetSts? BudgetStatus { get { return this.BudgetStatusOption; } set { this.BudgetStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of Overruns
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, bool>?> OverrunsOption { get; private set; }

        /// <summary>
        /// 对应资源类型是否超限
        /// </summary>
        /// <value>对应资源类型是否超限</value>
        [JsonPropertyName("overruns")]
        public Dictionary<string, bool>? Overruns { get { return this.OverrunsOption; } set { this.OverrunsOption = new(value); } }

        /// <summary>
        /// Used to track the state of UsedPercent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, int>?> UsedPercentOption { get; private set; }

        /// <summary>
        /// 对应资源类型目前的使用率，比如50就是50%
        /// </summary>
        /// <value>对应资源类型目前的使用率，比如50就是50%</value>
        [JsonPropertyName("used_percent")]
        public Dictionary<string, int>? UsedPercent { get { return this.UsedPercentOption; } set { this.UsedPercentOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoStatus {\n");
            sb.Append("  BudgetStatus: ").Append(BudgetStatus).Append("\n");
            sb.Append("  Overruns: ").Append(Overruns).Append("\n");
            sb.Append("  UsedPercent: ").Append(UsedPercent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoStatus" />
    /// </summary>
    public class DtoStatusJsonConverter : JsonConverter<DtoStatus>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoStatus" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoStatus Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ConstantBudgetSts?> budgetStatus = default;
            Option<Dictionary<string, bool>?> overruns = default;
            Option<Dictionary<string, int>?> usedPercent = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "budget_status":
                            string? budgetStatusRawValue = utf8JsonReader.GetString();
                            if (budgetStatusRawValue != null)
                                budgetStatus = new Option<ConstantBudgetSts?>(ConstantBudgetStsValueConverter.FromStringOrDefault(budgetStatusRawValue));
                            break;
                        case "overruns":
                            overruns = new Option<Dictionary<string, bool>?>(JsonSerializer.Deserialize<Dictionary<string, bool>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "used_percent":
                            usedPercent = new Option<Dictionary<string, int>?>(JsonSerializer.Deserialize<Dictionary<string, int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (budgetStatus.IsSet && budgetStatus.Value == null)
                throw new ArgumentNullException(nameof(budgetStatus), "Property is not nullable for class DtoStatus.");

            if (overruns.IsSet && overruns.Value == null)
                throw new ArgumentNullException(nameof(overruns), "Property is not nullable for class DtoStatus.");

            if (usedPercent.IsSet && usedPercent.Value == null)
                throw new ArgumentNullException(nameof(usedPercent), "Property is not nullable for class DtoStatus.");

            return new DtoStatus(budgetStatus, overruns, usedPercent);
        }

        /// <summary>
        /// Serializes a <see cref="DtoStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoStatus dtoStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoStatus, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoStatus dtoStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoStatus.OverrunsOption.IsSet && dtoStatus.Overruns == null)
                throw new ArgumentNullException(nameof(dtoStatus.Overruns), "Property is required for class DtoStatus.");

            if (dtoStatus.UsedPercentOption.IsSet && dtoStatus.UsedPercent == null)
                throw new ArgumentNullException(nameof(dtoStatus.UsedPercent), "Property is required for class DtoStatus.");

            if (dtoStatus.BudgetStatusOption.IsSet)
            {
                var budgetStatusRawValue = ConstantBudgetStsValueConverter.ToJsonValue(dtoStatus.BudgetStatus!.Value);
                writer.WriteNumber("budget_status", budgetStatusRawValue);
            }
            if (dtoStatus.OverrunsOption.IsSet)
            {
                writer.WritePropertyName("overruns");
                JsonSerializer.Serialize(writer, dtoStatus.Overruns, jsonSerializerOptions);
            }
            if (dtoStatus.UsedPercentOption.IsSet)
            {
                writer.WritePropertyName("used_percent");
                JsonSerializer.Serialize(writer, dtoStatus.UsedPercent, jsonSerializerOptions);
            }
        }
    }
}
