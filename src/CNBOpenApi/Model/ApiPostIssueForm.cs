// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// ApiPostIssueForm
    /// </summary>
    public partial class ApiPostIssueForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiPostIssueForm" /> class.
        /// </summary>
        /// <param name="assignees">assignees</param>
        /// <param name="body">body</param>
        /// <param name="labels">labels</param>
        /// <param name="priority">Priority of this issue. Can be one of: &#x60;p0&#x60;, &#x60;p1&#x60;, &#x60;p2&#x60;, &#x60;p3&#x60;, &#x60;\&quot;\&quot;&#x60;.</param>
        /// <param name="title">title</param>
        [JsonConstructor]
        public ApiPostIssueForm(Option<List<string>?> assignees = default, Option<string?> body = default, Option<List<string>?> labels = default, Option<string?> priority = default, Option<string?> title = default)
        {
            AssigneesOption = assignees;
            BodyOption = body;
            LabelsOption = labels;
            PriorityOption = priority;
            TitleOption = title;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Assignees
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> AssigneesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Assignees
        /// </summary>
        [JsonPropertyName("assignees")]
        public List<string>? Assignees { get { return this.AssigneesOption; } set { this.AssigneesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BodyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public string? Body { get { return this.BodyOption; } set { this.BodyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Labels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> LabelsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [JsonPropertyName("labels")]
        public List<string>? Labels { get { return this.LabelsOption; } set { this.LabelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Priority
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PriorityOption { get; private set; }

        /// <summary>
        /// Priority of this issue. Can be one of: &#x60;p0&#x60;, &#x60;p1&#x60;, &#x60;p2&#x60;, &#x60;p3&#x60;, &#x60;\&quot;\&quot;&#x60;.
        /// </summary>
        /// <value>Priority of this issue. Can be one of: &#x60;p0&#x60;, &#x60;p1&#x60;, &#x60;p2&#x60;, &#x60;p3&#x60;, &#x60;\&quot;\&quot;&#x60;.</value>
        [JsonPropertyName("priority")]
        public string? Priority { get { return this.PriorityOption; } set { this.PriorityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiPostIssueForm {\n");
            sb.Append("  Assignees: ").Append(Assignees).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApiPostIssueForm" />
    /// </summary>
    public class ApiPostIssueFormJsonConverter : JsonConverter<ApiPostIssueForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApiPostIssueForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApiPostIssueForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> assignees = default;
            Option<string?> body = default;
            Option<List<string>?> labels = default;
            Option<string?> priority = default;
            Option<string?> title = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assignees":
                            assignees = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "body":
                            body = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "labels":
                            labels = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "priority":
                            priority = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (assignees.IsSet && assignees.Value == null)
                throw new ArgumentNullException(nameof(assignees), "Property is not nullable for class ApiPostIssueForm.");

            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body), "Property is not nullable for class ApiPostIssueForm.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class ApiPostIssueForm.");

            if (priority.IsSet && priority.Value == null)
                throw new ArgumentNullException(nameof(priority), "Property is not nullable for class ApiPostIssueForm.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class ApiPostIssueForm.");

            return new ApiPostIssueForm(assignees, body, labels, priority, title);
        }

        /// <summary>
        /// Serializes a <see cref="ApiPostIssueForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiPostIssueForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApiPostIssueForm apiPostIssueForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, apiPostIssueForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApiPostIssueForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiPostIssueForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApiPostIssueForm apiPostIssueForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (apiPostIssueForm.AssigneesOption.IsSet && apiPostIssueForm.Assignees == null)
                throw new ArgumentNullException(nameof(apiPostIssueForm.Assignees), "Property is required for class ApiPostIssueForm.");

            if (apiPostIssueForm.BodyOption.IsSet && apiPostIssueForm.Body == null)
                throw new ArgumentNullException(nameof(apiPostIssueForm.Body), "Property is required for class ApiPostIssueForm.");

            if (apiPostIssueForm.LabelsOption.IsSet && apiPostIssueForm.Labels == null)
                throw new ArgumentNullException(nameof(apiPostIssueForm.Labels), "Property is required for class ApiPostIssueForm.");

            if (apiPostIssueForm.PriorityOption.IsSet && apiPostIssueForm.Priority == null)
                throw new ArgumentNullException(nameof(apiPostIssueForm.Priority), "Property is required for class ApiPostIssueForm.");

            if (apiPostIssueForm.TitleOption.IsSet && apiPostIssueForm.Title == null)
                throw new ArgumentNullException(nameof(apiPostIssueForm.Title), "Property is required for class ApiPostIssueForm.");

            if (apiPostIssueForm.AssigneesOption.IsSet)
            {
                writer.WritePropertyName("assignees");
                JsonSerializer.Serialize(writer, apiPostIssueForm.Assignees, jsonSerializerOptions);
            }
            if (apiPostIssueForm.BodyOption.IsSet)
                writer.WriteString("body", apiPostIssueForm.Body);

            if (apiPostIssueForm.LabelsOption.IsSet)
            {
                writer.WritePropertyName("labels");
                JsonSerializer.Serialize(writer, apiPostIssueForm.Labels, jsonSerializerOptions);
            }
            if (apiPostIssueForm.PriorityOption.IsSet)
                writer.WriteString("priority", apiPostIssueForm.Priority);

            if (apiPostIssueForm.TitleOption.IsSet)
                writer.WriteString("title", apiPostIssueForm.Title);
        }
    }
}
