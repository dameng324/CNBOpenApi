// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebDiffStat
    /// </summary>
    public partial class WebDiffStat : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebDiffStat" /> class.
        /// </summary>
        /// <param name="deletions">deletions</param>
        /// <param name="entryExceeded">entryExceeded</param>
        /// <param name="entryLimit">entryLimit</param>
        /// <param name="insertions">insertions</param>
        /// <param name="paths">paths</param>
        [JsonConstructor]
        public WebDiffStat(Option<int?> deletions = default, Option<bool?> entryExceeded = default, Option<int?> entryLimit = default, Option<int?> insertions = default, Option<List<WebDiffEntry>?> paths = default)
        {
            DeletionsOption = deletions;
            EntryExceededOption = entryExceeded;
            EntryLimitOption = entryLimit;
            InsertionsOption = insertions;
            PathsOption = paths;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Deletions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DeletionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Deletions
        /// </summary>
        [JsonPropertyName("deletions")]
        public int? Deletions { get { return this.DeletionsOption; } set { this.DeletionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of EntryExceeded
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EntryExceededOption { get; private set; }

        /// <summary>
        /// Gets or Sets EntryExceeded
        /// </summary>
        [JsonPropertyName("entry_exceeded")]
        public bool? EntryExceeded { get { return this.EntryExceededOption; } set { this.EntryExceededOption = new(value); } }

        /// <summary>
        /// Used to track the state of EntryLimit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> EntryLimitOption { get; private set; }

        /// <summary>
        /// Gets or Sets EntryLimit
        /// </summary>
        [JsonPropertyName("entry_limit")]
        public int? EntryLimit { get { return this.EntryLimitOption; } set { this.EntryLimitOption = new(value); } }

        /// <summary>
        /// Used to track the state of Insertions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> InsertionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Insertions
        /// </summary>
        [JsonPropertyName("insertions")]
        public int? Insertions { get { return this.InsertionsOption; } set { this.InsertionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Paths
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebDiffEntry>?> PathsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Paths
        /// </summary>
        [JsonPropertyName("paths")]
        public List<WebDiffEntry>? Paths { get { return this.PathsOption; } set { this.PathsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebDiffStat {\n");
            sb.Append("  Deletions: ").Append(Deletions).Append("\n");
            sb.Append("  EntryExceeded: ").Append(EntryExceeded).Append("\n");
            sb.Append("  EntryLimit: ").Append(EntryLimit).Append("\n");
            sb.Append("  Insertions: ").Append(Insertions).Append("\n");
            sb.Append("  Paths: ").Append(Paths).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebDiffStat" />
    /// </summary>
    public class WebDiffStatJsonConverter : JsonConverter<WebDiffStat>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebDiffStat" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebDiffStat Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> deletions = default;
            Option<bool?> entryExceeded = default;
            Option<int?> entryLimit = default;
            Option<int?> insertions = default;
            Option<List<WebDiffEntry>?> paths = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "deletions":
                            deletions = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "entry_exceeded":
                            entryExceeded = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "entry_limit":
                            entryLimit = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "insertions":
                            insertions = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "paths":
                            paths = new Option<List<WebDiffEntry>?>(JsonSerializer.Deserialize<List<WebDiffEntry>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (deletions.IsSet && deletions.Value == null)
                throw new ArgumentNullException(nameof(deletions), "Property is not nullable for class WebDiffStat.");

            if (entryExceeded.IsSet && entryExceeded.Value == null)
                throw new ArgumentNullException(nameof(entryExceeded), "Property is not nullable for class WebDiffStat.");

            if (entryLimit.IsSet && entryLimit.Value == null)
                throw new ArgumentNullException(nameof(entryLimit), "Property is not nullable for class WebDiffStat.");

            if (insertions.IsSet && insertions.Value == null)
                throw new ArgumentNullException(nameof(insertions), "Property is not nullable for class WebDiffStat.");

            if (paths.IsSet && paths.Value == null)
                throw new ArgumentNullException(nameof(paths), "Property is not nullable for class WebDiffStat.");

            return new WebDiffStat(deletions, entryExceeded, entryLimit, insertions, paths);
        }

        /// <summary>
        /// Serializes a <see cref="WebDiffStat" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webDiffStat"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebDiffStat webDiffStat, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webDiffStat, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebDiffStat" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webDiffStat"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebDiffStat webDiffStat, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webDiffStat.PathsOption.IsSet && webDiffStat.Paths == null)
                throw new ArgumentNullException(nameof(webDiffStat.Paths), "Property is required for class WebDiffStat.");

            if (webDiffStat.DeletionsOption.IsSet)
                writer.WriteNumber("deletions", webDiffStat.DeletionsOption.Value!.Value);

            if (webDiffStat.EntryExceededOption.IsSet)
                writer.WriteBoolean("entry_exceeded", webDiffStat.EntryExceededOption.Value!.Value);

            if (webDiffStat.EntryLimitOption.IsSet)
                writer.WriteNumber("entry_limit", webDiffStat.EntryLimitOption.Value!.Value);

            if (webDiffStat.InsertionsOption.IsSet)
                writer.WriteNumber("insertions", webDiffStat.InsertionsOption.Value!.Value);

            if (webDiffStat.PathsOption.IsSet)
            {
                writer.WritePropertyName("paths");
                JsonSerializer.Serialize(writer, webDiffStat.Paths, jsonSerializerOptions);
            }
        }
    }
}
