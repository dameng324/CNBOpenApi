// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoRegistry4User
    /// </summary>
    public partial class DtoRegistry4User : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoRegistry4User" /> class.
        /// </summary>
        /// <param name="access">access</param>
        /// <param name="artifactPolicy">artifactPolicy (default to ArtifactPolicyEnum.All)</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="description">description</param>
        /// <param name="freeze">freeze</param>
        /// <param name="id">id</param>
        /// <param name="kind">kind</param>
        /// <param name="lastPushTime">lastPushTime</param>
        /// <param name="lastPushUser">lastPushUser</param>
        /// <param name="name">name</param>
        /// <param name="overwritePolicy">overwritePolicy (default to OverwritePolicyEnum.Forbid)</param>
        /// <param name="path">path</param>
        /// <param name="pkgCount">pkgCount</param>
        /// <param name="starTime">starTime</param>
        /// <param name="stared">stared</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="usedSize">usedSize</param>
        /// <param name="visibilityLevel">visibilityLevel</param>
        [JsonConstructor]
        public DtoRegistry4User(Option<ConstantAccessRole?> access = default, Option<ArtifactPolicyEnum?> artifactPolicy = default, Option<string?> createdAt = default, Option<string?> description = default, Option<bool?> freeze = default, Option<string?> id = default, Option<string?> kind = default, Option<string?> lastPushTime = default, Option<DtoUsers?> lastPushUser = default, Option<string?> name = default, Option<OverwritePolicyEnum?> overwritePolicy = default, Option<string?> path = default, Option<int?> pkgCount = default, Option<string?> starTime = default, Option<bool?> stared = default, Option<string?> updatedAt = default, Option<int?> usedSize = default, Option<ConstantVisibility?> visibilityLevel = default)
        {
            AccessOption = access;
            ArtifactPolicyOption = artifactPolicy;
            CreatedAtOption = createdAt;
            DescriptionOption = description;
            FreezeOption = freeze;
            IdOption = id;
            KindOption = kind;
            LastPushTimeOption = lastPushTime;
            LastPushUserOption = lastPushUser;
            NameOption = name;
            OverwritePolicyOption = overwritePolicy;
            PathOption = path;
            PkgCountOption = pkgCount;
            StarTimeOption = starTime;
            StaredOption = stared;
            UpdatedAtOption = updatedAt;
            UsedSizeOption = usedSize;
            VisibilityLevelOption = visibilityLevel;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Access
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantAccessRole?> AccessOption { get; private set; }

        /// <summary>
        /// Gets or Sets Access
        /// </summary>
        [JsonPropertyName("access")]
        public ConstantAccessRole? Access { get { return this.AccessOption; } set { this.AccessOption = new(value); } }

        /// <summary>
        /// Defines ArtifactPolicy
        /// </summary>
        public enum ArtifactPolicyEnum
        {
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            All = 1,

            /// <summary>
            /// Enum Snapshot for value: snapshot
            /// </summary>
            Snapshot = 2,

            /// <summary>
            /// Enum Release for value: release
            /// </summary>
            Release = 3
        }

        /// <summary>
        /// Returns a <see cref="ArtifactPolicyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ArtifactPolicyEnum ArtifactPolicyEnumFromString(string value)
        {
            if (value.Equals("all"))
                return ArtifactPolicyEnum.All;

            if (value.Equals("snapshot"))
                return ArtifactPolicyEnum.Snapshot;

            if (value.Equals("release"))
                return ArtifactPolicyEnum.Release;

            throw new NotImplementedException($"Could not convert value to type ArtifactPolicyEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ArtifactPolicyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ArtifactPolicyEnum? ArtifactPolicyEnumFromStringOrDefault(string value)
        {
            if (value.Equals("all"))
                return ArtifactPolicyEnum.All;

            if (value.Equals("snapshot"))
                return ArtifactPolicyEnum.Snapshot;

            if (value.Equals("release"))
                return ArtifactPolicyEnum.Release;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ArtifactPolicyEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ArtifactPolicyEnumToJsonValue(ArtifactPolicyEnum? value)
        {
            if (value == ArtifactPolicyEnum.All)
                return "all";

            if (value == ArtifactPolicyEnum.Snapshot)
                return "snapshot";

            if (value == ArtifactPolicyEnum.Release)
                return "release";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ArtifactPolicy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ArtifactPolicyEnum?> ArtifactPolicyOption { get; private set; }

        /// <summary>
        /// Gets or Sets ArtifactPolicy
        /// </summary>
        [JsonPropertyName("artifact_policy")]
        public ArtifactPolicyEnum? ArtifactPolicy { get { return this.ArtifactPolicyOption; } set { this.ArtifactPolicyOption = new(value); } }

        /// <summary>
        /// Defines OverwritePolicy
        /// </summary>
        public enum OverwritePolicyEnum
        {
            /// <summary>
            /// Enum Forbid for value: forbid
            /// </summary>
            Forbid = 1,

            /// <summary>
            /// Enum Allow for value: allow
            /// </summary>
            Allow = 2
        }

        /// <summary>
        /// Returns a <see cref="OverwritePolicyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static OverwritePolicyEnum OverwritePolicyEnumFromString(string value)
        {
            if (value.Equals("forbid"))
                return OverwritePolicyEnum.Forbid;

            if (value.Equals("allow"))
                return OverwritePolicyEnum.Allow;

            throw new NotImplementedException($"Could not convert value to type OverwritePolicyEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="OverwritePolicyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OverwritePolicyEnum? OverwritePolicyEnumFromStringOrDefault(string value)
        {
            if (value.Equals("forbid"))
                return OverwritePolicyEnum.Forbid;

            if (value.Equals("allow"))
                return OverwritePolicyEnum.Allow;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="OverwritePolicyEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string OverwritePolicyEnumToJsonValue(OverwritePolicyEnum? value)
        {
            if (value == OverwritePolicyEnum.Forbid)
                return "forbid";

            if (value == OverwritePolicyEnum.Allow)
                return "allow";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of OverwritePolicy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<OverwritePolicyEnum?> OverwritePolicyOption { get; private set; }

        /// <summary>
        /// Gets or Sets OverwritePolicy
        /// </summary>
        [JsonPropertyName("overwrite_policy")]
        public OverwritePolicyEnum? OverwritePolicy { get { return this.OverwritePolicyOption; } set { this.OverwritePolicyOption = new(value); } }

        /// <summary>
        /// Used to track the state of VisibilityLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantVisibility?> VisibilityLevelOption { get; private set; }

        /// <summary>
        /// Gets or Sets VisibilityLevel
        /// </summary>
        [JsonPropertyName("visibility_level")]
        public ConstantVisibility? VisibilityLevel { get { return this.VisibilityLevelOption; } set { this.VisibilityLevelOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Freeze
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FreezeOption { get; }

        /// <summary>
        /// Gets or Sets Freeze
        /// </summary>
        [JsonPropertyName("freeze")]
        public bool? Freeze { get { return this.FreezeOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Kind
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KindOption { get; private set; }

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [JsonPropertyName("kind")]
        public string? Kind { get { return this.KindOption; } set { this.KindOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastPushTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastPushTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastPushTime
        /// </summary>
        [JsonPropertyName("last_push_time")]
        public string? LastPushTime { get { return this.LastPushTimeOption; } set { this.LastPushTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastPushUser
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoUsers?> LastPushUserOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastPushUser
        /// </summary>
        [JsonPropertyName("last_push_user")]
        public DtoUsers? LastPushUser { get { return this.LastPushUserOption; } set { this.LastPushUserOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of PkgCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PkgCountOption { get; }

        /// <summary>
        /// Gets or Sets PkgCount
        /// </summary>
        [JsonPropertyName("pkg_count")]
        public int? PkgCount { get { return this.PkgCountOption; } }

        /// <summary>
        /// Used to track the state of StarTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StarTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets StarTime
        /// </summary>
        [JsonPropertyName("star_time")]
        public string? StarTime { get { return this.StarTimeOption; } set { this.StarTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Stared
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> StaredOption { get; private set; }

        /// <summary>
        /// Gets or Sets Stared
        /// </summary>
        [JsonPropertyName("stared")]
        public bool? Stared { get { return this.StaredOption; } set { this.StaredOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of UsedSize
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> UsedSizeOption { get; }

        /// <summary>
        /// Gets or Sets UsedSize
        /// </summary>
        [JsonPropertyName("used_size")]
        public int? UsedSize { get { return this.UsedSizeOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoRegistry4User {\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  ArtifactPolicy: ").Append(ArtifactPolicy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Freeze: ").Append(Freeze).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  LastPushTime: ").Append(LastPushTime).Append("\n");
            sb.Append("  LastPushUser: ").Append(LastPushUser).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OverwritePolicy: ").Append(OverwritePolicy).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  PkgCount: ").Append(PkgCount).Append("\n");
            sb.Append("  StarTime: ").Append(StarTime).Append("\n");
            sb.Append("  Stared: ").Append(Stared).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UsedSize: ").Append(UsedSize).Append("\n");
            sb.Append("  VisibilityLevel: ").Append(VisibilityLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoRegistry4User" />
    /// </summary>
    public class DtoRegistry4UserJsonConverter : JsonConverter<DtoRegistry4User>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoRegistry4User" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoRegistry4User Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ConstantAccessRole?> access = default;
            Option<DtoRegistry4User.ArtifactPolicyEnum?> artifactPolicy = default;
            Option<string?> createdAt = default;
            Option<string?> description = default;
            Option<bool?> freeze = default;
            Option<string?> id = default;
            Option<string?> kind = default;
            Option<string?> lastPushTime = default;
            Option<DtoUsers?> lastPushUser = default;
            Option<string?> name = default;
            Option<DtoRegistry4User.OverwritePolicyEnum?> overwritePolicy = default;
            Option<string?> path = default;
            Option<int?> pkgCount = default;
            Option<string?> starTime = default;
            Option<bool?> stared = default;
            Option<string?> updatedAt = default;
            Option<int?> usedSize = default;
            Option<ConstantVisibility?> visibilityLevel = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "access":
                            string? accessRawValue = utf8JsonReader.GetString();
                            if (accessRawValue != null)
                                access = new Option<ConstantAccessRole?>(ConstantAccessRoleValueConverter.FromStringOrDefault(accessRawValue));
                            break;
                        case "artifact_policy":
                            string? artifactPolicyRawValue = utf8JsonReader.GetString();
                            if (artifactPolicyRawValue != null)
                                artifactPolicy = new Option<DtoRegistry4User.ArtifactPolicyEnum?>(DtoRegistry4User.ArtifactPolicyEnumFromStringOrDefault(artifactPolicyRawValue));
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "freeze":
                            freeze = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "kind":
                            kind = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_push_time":
                            lastPushTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_push_user":
                            lastPushUser = new Option<DtoUsers?>(JsonSerializer.Deserialize<DtoUsers>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "overwrite_policy":
                            string? overwritePolicyRawValue = utf8JsonReader.GetString();
                            if (overwritePolicyRawValue != null)
                                overwritePolicy = new Option<DtoRegistry4User.OverwritePolicyEnum?>(DtoRegistry4User.OverwritePolicyEnumFromStringOrDefault(overwritePolicyRawValue));
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pkg_count":
                            pkgCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "star_time":
                            starTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "stared":
                            stared = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "used_size":
                            usedSize = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "visibility_level":
                            string? visibilityLevelRawValue = utf8JsonReader.GetString();
                            if (visibilityLevelRawValue != null)
                                visibilityLevel = new Option<ConstantVisibility?>(ConstantVisibilityValueConverter.FromStringOrDefault(visibilityLevelRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (access.IsSet && access.Value == null)
                throw new ArgumentNullException(nameof(access), "Property is not nullable for class DtoRegistry4User.");

            if (artifactPolicy.IsSet && artifactPolicy.Value == null)
                throw new ArgumentNullException(nameof(artifactPolicy), "Property is not nullable for class DtoRegistry4User.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class DtoRegistry4User.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class DtoRegistry4User.");

            if (freeze.IsSet && freeze.Value == null)
                throw new ArgumentNullException(nameof(freeze), "Property is not nullable for class DtoRegistry4User.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DtoRegistry4User.");

            if (kind.IsSet && kind.Value == null)
                throw new ArgumentNullException(nameof(kind), "Property is not nullable for class DtoRegistry4User.");

            if (lastPushTime.IsSet && lastPushTime.Value == null)
                throw new ArgumentNullException(nameof(lastPushTime), "Property is not nullable for class DtoRegistry4User.");

            if (lastPushUser.IsSet && lastPushUser.Value == null)
                throw new ArgumentNullException(nameof(lastPushUser), "Property is not nullable for class DtoRegistry4User.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class DtoRegistry4User.");

            if (overwritePolicy.IsSet && overwritePolicy.Value == null)
                throw new ArgumentNullException(nameof(overwritePolicy), "Property is not nullable for class DtoRegistry4User.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class DtoRegistry4User.");

            if (pkgCount.IsSet && pkgCount.Value == null)
                throw new ArgumentNullException(nameof(pkgCount), "Property is not nullable for class DtoRegistry4User.");

            if (starTime.IsSet && starTime.Value == null)
                throw new ArgumentNullException(nameof(starTime), "Property is not nullable for class DtoRegistry4User.");

            if (stared.IsSet && stared.Value == null)
                throw new ArgumentNullException(nameof(stared), "Property is not nullable for class DtoRegistry4User.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class DtoRegistry4User.");

            if (usedSize.IsSet && usedSize.Value == null)
                throw new ArgumentNullException(nameof(usedSize), "Property is not nullable for class DtoRegistry4User.");

            if (visibilityLevel.IsSet && visibilityLevel.Value == null)
                throw new ArgumentNullException(nameof(visibilityLevel), "Property is not nullable for class DtoRegistry4User.");

            return new DtoRegistry4User(access, artifactPolicy, createdAt, description, freeze, id, kind, lastPushTime, lastPushUser, name, overwritePolicy, path, pkgCount, starTime, stared, updatedAt, usedSize, visibilityLevel);
        }

        /// <summary>
        /// Serializes a <see cref="DtoRegistry4User" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoRegistry4User"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoRegistry4User dtoRegistry4User, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoRegistry4User, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoRegistry4User" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoRegistry4User"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoRegistry4User dtoRegistry4User, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoRegistry4User.CreatedAtOption.IsSet && dtoRegistry4User.CreatedAt == null)
                throw new ArgumentNullException(nameof(dtoRegistry4User.CreatedAt), "Property is required for class DtoRegistry4User.");

            if (dtoRegistry4User.DescriptionOption.IsSet && dtoRegistry4User.Description == null)
                throw new ArgumentNullException(nameof(dtoRegistry4User.Description), "Property is required for class DtoRegistry4User.");

            if (dtoRegistry4User.IdOption.IsSet && dtoRegistry4User.Id == null)
                throw new ArgumentNullException(nameof(dtoRegistry4User.Id), "Property is required for class DtoRegistry4User.");

            if (dtoRegistry4User.KindOption.IsSet && dtoRegistry4User.Kind == null)
                throw new ArgumentNullException(nameof(dtoRegistry4User.Kind), "Property is required for class DtoRegistry4User.");

            if (dtoRegistry4User.LastPushTimeOption.IsSet && dtoRegistry4User.LastPushTime == null)
                throw new ArgumentNullException(nameof(dtoRegistry4User.LastPushTime), "Property is required for class DtoRegistry4User.");

            if (dtoRegistry4User.LastPushUserOption.IsSet && dtoRegistry4User.LastPushUser == null)
                throw new ArgumentNullException(nameof(dtoRegistry4User.LastPushUser), "Property is required for class DtoRegistry4User.");

            if (dtoRegistry4User.NameOption.IsSet && dtoRegistry4User.Name == null)
                throw new ArgumentNullException(nameof(dtoRegistry4User.Name), "Property is required for class DtoRegistry4User.");

            if (dtoRegistry4User.PathOption.IsSet && dtoRegistry4User.Path == null)
                throw new ArgumentNullException(nameof(dtoRegistry4User.Path), "Property is required for class DtoRegistry4User.");

            if (dtoRegistry4User.StarTimeOption.IsSet && dtoRegistry4User.StarTime == null)
                throw new ArgumentNullException(nameof(dtoRegistry4User.StarTime), "Property is required for class DtoRegistry4User.");

            if (dtoRegistry4User.UpdatedAtOption.IsSet && dtoRegistry4User.UpdatedAt == null)
                throw new ArgumentNullException(nameof(dtoRegistry4User.UpdatedAt), "Property is required for class DtoRegistry4User.");

            if (dtoRegistry4User.AccessOption.IsSet)
            {
                var accessRawValue = ConstantAccessRoleValueConverter.ToJsonValue(dtoRegistry4User.Access!.Value);
                writer.WriteNumber("access", accessRawValue);
            }
            var artifactPolicyRawValue = DtoRegistry4User.ArtifactPolicyEnumToJsonValue(dtoRegistry4User.ArtifactPolicyOption.Value!.Value);
            writer.WriteString("artifact_policy", artifactPolicyRawValue);
            if (dtoRegistry4User.CreatedAtOption.IsSet)
                writer.WriteString("created_at", dtoRegistry4User.CreatedAt);

            if (dtoRegistry4User.DescriptionOption.IsSet)
                writer.WriteString("description", dtoRegistry4User.Description);

            if (dtoRegistry4User.FreezeOption.IsSet)
                writer.WriteBoolean("freeze", dtoRegistry4User.FreezeOption.Value!.Value);

            if (dtoRegistry4User.IdOption.IsSet)
                writer.WriteString("id", dtoRegistry4User.Id);

            if (dtoRegistry4User.KindOption.IsSet)
                writer.WriteString("kind", dtoRegistry4User.Kind);

            if (dtoRegistry4User.LastPushTimeOption.IsSet)
                writer.WriteString("last_push_time", dtoRegistry4User.LastPushTime);

            if (dtoRegistry4User.LastPushUserOption.IsSet)
            {
                writer.WritePropertyName("last_push_user");
                JsonSerializer.Serialize(writer, dtoRegistry4User.LastPushUser, jsonSerializerOptions);
            }
            if (dtoRegistry4User.NameOption.IsSet)
                writer.WriteString("name", dtoRegistry4User.Name);

            var overwritePolicyRawValue = DtoRegistry4User.OverwritePolicyEnumToJsonValue(dtoRegistry4User.OverwritePolicyOption.Value!.Value);
            writer.WriteString("overwrite_policy", overwritePolicyRawValue);
            if (dtoRegistry4User.PathOption.IsSet)
                writer.WriteString("path", dtoRegistry4User.Path);

            if (dtoRegistry4User.PkgCountOption.IsSet)
                writer.WriteNumber("pkg_count", dtoRegistry4User.PkgCountOption.Value!.Value);

            if (dtoRegistry4User.StarTimeOption.IsSet)
                writer.WriteString("star_time", dtoRegistry4User.StarTime);

            if (dtoRegistry4User.StaredOption.IsSet)
                writer.WriteBoolean("stared", dtoRegistry4User.StaredOption.Value!.Value);

            if (dtoRegistry4User.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", dtoRegistry4User.UpdatedAt);

            if (dtoRegistry4User.UsedSizeOption.IsSet)
                writer.WriteNumber("used_size", dtoRegistry4User.UsedSizeOption.Value!.Value);

            if (dtoRegistry4User.VisibilityLevelOption.IsSet)
            {
                var visibilityLevelRawValue = ConstantVisibilityValueConverter.ToJsonValue(dtoRegistry4User.VisibilityLevel!.Value);
                writer.WriteNumber("visibility_level", visibilityLevelRawValue);
            }
        }
    }
}
