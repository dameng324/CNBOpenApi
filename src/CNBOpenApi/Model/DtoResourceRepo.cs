// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoResourceRepo
    /// </summary>
    public partial class DtoResourceRepo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoResourceRepo" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="freeze">freeze</param>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="path">path</param>
        /// <param name="status">status</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="visibilityLevel">visibilityLevel</param>
        [JsonConstructor]
        public DtoResourceRepo(Option<string?> createdAt = default, Option<bool?> freeze = default, Option<int?> id = default, Option<string?> name = default, Option<string?> path = default, Option<ConstantRepoStatus?> status = default, Option<string?> updatedAt = default, Option<ConstantVisibility?> visibilityLevel = default)
        {
            CreatedAtOption = createdAt;
            FreezeOption = freeze;
            IdOption = id;
            NameOption = name;
            PathOption = path;
            StatusOption = status;
            UpdatedAtOption = updatedAt;
            VisibilityLevelOption = visibilityLevel;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantRepoStatus?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public ConstantRepoStatus? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of VisibilityLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantVisibility?> VisibilityLevelOption { get; private set; }

        /// <summary>
        /// Gets or Sets VisibilityLevel
        /// </summary>
        [JsonPropertyName("visibility_level")]
        public ConstantVisibility? VisibilityLevel { get { return this.VisibilityLevelOption; } set { this.VisibilityLevelOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Freeze
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FreezeOption { get; }

        /// <summary>
        /// Gets or Sets Freeze
        /// </summary>
        [JsonPropertyName("freeze")]
        public bool? Freeze { get { return this.FreezeOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoResourceRepo {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Freeze: ").Append(Freeze).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  VisibilityLevel: ").Append(VisibilityLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoResourceRepo" />
    /// </summary>
    public class DtoResourceRepoJsonConverter : JsonConverter<DtoResourceRepo>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoResourceRepo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoResourceRepo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> createdAt = default;
            Option<bool?> freeze = default;
            Option<int?> id = default;
            Option<string?> name = default;
            Option<string?> path = default;
            Option<ConstantRepoStatus?> status = default;
            Option<string?> updatedAt = default;
            Option<ConstantVisibility?> visibilityLevel = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "freeze":
                            freeze = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<ConstantRepoStatus?>(ConstantRepoStatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "visibility_level":
                            string? visibilityLevelRawValue = utf8JsonReader.GetString();
                            if (visibilityLevelRawValue != null)
                                visibilityLevel = new Option<ConstantVisibility?>(ConstantVisibilityValueConverter.FromStringOrDefault(visibilityLevelRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class DtoResourceRepo.");

            if (freeze.IsSet && freeze.Value == null)
                throw new ArgumentNullException(nameof(freeze), "Property is not nullable for class DtoResourceRepo.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DtoResourceRepo.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class DtoResourceRepo.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class DtoResourceRepo.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class DtoResourceRepo.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class DtoResourceRepo.");

            if (visibilityLevel.IsSet && visibilityLevel.Value == null)
                throw new ArgumentNullException(nameof(visibilityLevel), "Property is not nullable for class DtoResourceRepo.");

            return new DtoResourceRepo(createdAt, freeze, id, name, path, status, updatedAt, visibilityLevel);
        }

        /// <summary>
        /// Serializes a <see cref="DtoResourceRepo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoResourceRepo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoResourceRepo dtoResourceRepo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoResourceRepo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoResourceRepo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoResourceRepo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoResourceRepo dtoResourceRepo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoResourceRepo.CreatedAtOption.IsSet && dtoResourceRepo.CreatedAt == null)
                throw new ArgumentNullException(nameof(dtoResourceRepo.CreatedAt), "Property is required for class DtoResourceRepo.");

            if (dtoResourceRepo.NameOption.IsSet && dtoResourceRepo.Name == null)
                throw new ArgumentNullException(nameof(dtoResourceRepo.Name), "Property is required for class DtoResourceRepo.");

            if (dtoResourceRepo.PathOption.IsSet && dtoResourceRepo.Path == null)
                throw new ArgumentNullException(nameof(dtoResourceRepo.Path), "Property is required for class DtoResourceRepo.");

            if (dtoResourceRepo.UpdatedAtOption.IsSet && dtoResourceRepo.UpdatedAt == null)
                throw new ArgumentNullException(nameof(dtoResourceRepo.UpdatedAt), "Property is required for class DtoResourceRepo.");

            if (dtoResourceRepo.CreatedAtOption.IsSet)
                writer.WriteString("created_at", dtoResourceRepo.CreatedAt);

            if (dtoResourceRepo.FreezeOption.IsSet)
                writer.WriteBoolean("freeze", dtoResourceRepo.FreezeOption.Value!.Value);

            if (dtoResourceRepo.IdOption.IsSet)
                writer.WriteNumber("id", dtoResourceRepo.IdOption.Value!.Value);

            if (dtoResourceRepo.NameOption.IsSet)
                writer.WriteString("name", dtoResourceRepo.Name);

            if (dtoResourceRepo.PathOption.IsSet)
                writer.WriteString("path", dtoResourceRepo.Path);

            if (dtoResourceRepo.StatusOption.IsSet)
            {
                var statusRawValue = ConstantRepoStatusValueConverter.ToJsonValue(dtoResourceRepo.Status!.Value);
                writer.WriteNumber("status", statusRawValue);
            }
            if (dtoResourceRepo.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", dtoResourceRepo.UpdatedAt);

            if (dtoResourceRepo.VisibilityLevelOption.IsSet)
            {
                var visibilityLevelRawValue = ConstantVisibilityValueConverter.ToJsonValue(dtoResourceRepo.VisibilityLevel!.Value);
                writer.WriteNumber("visibility_level", visibilityLevelRawValue);
            }
        }
    }
}
