// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// ScopeGroupItem
    /// </summary>
    public partial class ScopeGroupItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScopeGroupItem" /> class.
        /// </summary>
        /// <param name="codes">codes</param>
        /// <param name="group">group</param>
        [JsonConstructor]
        public ScopeGroupItem(Option<List<ScopeRawItem>?> codes = default, Option<string?> group = default)
        {
            CodesOption = codes;
            GroupOption = group;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Codes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ScopeRawItem>?> CodesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Codes
        /// </summary>
        [JsonPropertyName("codes")]
        public List<ScopeRawItem>? Codes { get { return this.CodesOption; } set { this.CodesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Group
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GroupOption { get; private set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [JsonPropertyName("group")]
        public string? Group { get { return this.GroupOption; } set { this.GroupOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScopeGroupItem {\n");
            sb.Append("  Codes: ").Append(Codes).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ScopeGroupItem" />
    /// </summary>
    public class ScopeGroupItemJsonConverter : JsonConverter<ScopeGroupItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="ScopeGroupItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ScopeGroupItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<ScopeRawItem>?> codes = default;
            Option<string?> group = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "codes":
                            codes = new Option<List<ScopeRawItem>?>(JsonSerializer.Deserialize<List<ScopeRawItem>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "group":
                            group = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (codes.IsSet && codes.Value == null)
                throw new ArgumentNullException(nameof(codes), "Property is not nullable for class ScopeGroupItem.");

            if (group.IsSet && group.Value == null)
                throw new ArgumentNullException(nameof(group), "Property is not nullable for class ScopeGroupItem.");

            return new ScopeGroupItem(codes, group);
        }

        /// <summary>
        /// Serializes a <see cref="ScopeGroupItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="scopeGroupItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ScopeGroupItem scopeGroupItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, scopeGroupItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ScopeGroupItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="scopeGroupItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ScopeGroupItem scopeGroupItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (scopeGroupItem.CodesOption.IsSet && scopeGroupItem.Codes == null)
                throw new ArgumentNullException(nameof(scopeGroupItem.Codes), "Property is required for class ScopeGroupItem.");

            if (scopeGroupItem.GroupOption.IsSet && scopeGroupItem.Group == null)
                throw new ArgumentNullException(nameof(scopeGroupItem.Group), "Property is required for class ScopeGroupItem.");

            if (scopeGroupItem.CodesOption.IsSet)
            {
                writer.WritePropertyName("codes");
                JsonSerializer.Serialize(writer, scopeGroupItem.Codes, jsonSerializerOptions);
            }
            if (scopeGroupItem.GroupOption.IsSet)
                writer.WriteString("group", scopeGroupItem.Group);
        }
    }
}
