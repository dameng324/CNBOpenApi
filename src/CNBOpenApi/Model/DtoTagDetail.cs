// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoTagDetail
    /// </summary>
    public partial class DtoTagDetail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoTagDetail" /> class.
        /// </summary>
        /// <param name="docker">docker</param>
        /// <param name="helm">helm</param>
        /// <param name="maven">maven</param>
        /// <param name="npm">npm</param>
        /// <param name="ohpm">ohpm</param>
        [JsonConstructor]
        public DtoTagDetail(Option<DtoContainerTagDetail?> docker = default, Option<DtoChartTagDetail?> helm = default, Option<DtoMavenTagDetail?> maven = default, Option<DtoNpmTagDetail?> npm = default, Option<DtoOhpmTagDetail?> ohpm = default)
        {
            DockerOption = docker;
            HelmOption = helm;
            MavenOption = maven;
            NpmOption = npm;
            OhpmOption = ohpm;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Docker
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoContainerTagDetail?> DockerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Docker
        /// </summary>
        [JsonPropertyName("docker")]
        public DtoContainerTagDetail? Docker { get { return this.DockerOption; } set { this.DockerOption = new(value); } }

        /// <summary>
        /// Used to track the state of Helm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoChartTagDetail?> HelmOption { get; private set; }

        /// <summary>
        /// Gets or Sets Helm
        /// </summary>
        [JsonPropertyName("helm")]
        public DtoChartTagDetail? Helm { get { return this.HelmOption; } set { this.HelmOption = new(value); } }

        /// <summary>
        /// Used to track the state of Maven
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoMavenTagDetail?> MavenOption { get; private set; }

        /// <summary>
        /// Gets or Sets Maven
        /// </summary>
        [JsonPropertyName("maven")]
        public DtoMavenTagDetail? Maven { get { return this.MavenOption; } set { this.MavenOption = new(value); } }

        /// <summary>
        /// Used to track the state of Npm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoNpmTagDetail?> NpmOption { get; private set; }

        /// <summary>
        /// Gets or Sets Npm
        /// </summary>
        [JsonPropertyName("npm")]
        public DtoNpmTagDetail? Npm { get { return this.NpmOption; } set { this.NpmOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ohpm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoOhpmTagDetail?> OhpmOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ohpm
        /// </summary>
        [JsonPropertyName("ohpm")]
        public DtoOhpmTagDetail? Ohpm { get { return this.OhpmOption; } set { this.OhpmOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoTagDetail {\n");
            sb.Append("  Docker: ").Append(Docker).Append("\n");
            sb.Append("  Helm: ").Append(Helm).Append("\n");
            sb.Append("  Maven: ").Append(Maven).Append("\n");
            sb.Append("  Npm: ").Append(Npm).Append("\n");
            sb.Append("  Ohpm: ").Append(Ohpm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoTagDetail" />
    /// </summary>
    public class DtoTagDetailJsonConverter : JsonConverter<DtoTagDetail>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoTagDetail" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoTagDetail Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DtoContainerTagDetail?> docker = default;
            Option<DtoChartTagDetail?> helm = default;
            Option<DtoMavenTagDetail?> maven = default;
            Option<DtoNpmTagDetail?> npm = default;
            Option<DtoOhpmTagDetail?> ohpm = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "docker":
                            docker = new Option<DtoContainerTagDetail?>(JsonSerializer.Deserialize<DtoContainerTagDetail>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "helm":
                            helm = new Option<DtoChartTagDetail?>(JsonSerializer.Deserialize<DtoChartTagDetail>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "maven":
                            maven = new Option<DtoMavenTagDetail?>(JsonSerializer.Deserialize<DtoMavenTagDetail>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "npm":
                            npm = new Option<DtoNpmTagDetail?>(JsonSerializer.Deserialize<DtoNpmTagDetail>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ohpm":
                            ohpm = new Option<DtoOhpmTagDetail?>(JsonSerializer.Deserialize<DtoOhpmTagDetail>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (docker.IsSet && docker.Value == null)
                throw new ArgumentNullException(nameof(docker), "Property is not nullable for class DtoTagDetail.");

            if (helm.IsSet && helm.Value == null)
                throw new ArgumentNullException(nameof(helm), "Property is not nullable for class DtoTagDetail.");

            if (maven.IsSet && maven.Value == null)
                throw new ArgumentNullException(nameof(maven), "Property is not nullable for class DtoTagDetail.");

            if (npm.IsSet && npm.Value == null)
                throw new ArgumentNullException(nameof(npm), "Property is not nullable for class DtoTagDetail.");

            if (ohpm.IsSet && ohpm.Value == null)
                throw new ArgumentNullException(nameof(ohpm), "Property is not nullable for class DtoTagDetail.");

            return new DtoTagDetail(docker, helm, maven, npm, ohpm);
        }

        /// <summary>
        /// Serializes a <see cref="DtoTagDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoTagDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoTagDetail dtoTagDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoTagDetail, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoTagDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoTagDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoTagDetail dtoTagDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoTagDetail.DockerOption.IsSet && dtoTagDetail.Docker == null)
                throw new ArgumentNullException(nameof(dtoTagDetail.Docker), "Property is required for class DtoTagDetail.");

            if (dtoTagDetail.HelmOption.IsSet && dtoTagDetail.Helm == null)
                throw new ArgumentNullException(nameof(dtoTagDetail.Helm), "Property is required for class DtoTagDetail.");

            if (dtoTagDetail.MavenOption.IsSet && dtoTagDetail.Maven == null)
                throw new ArgumentNullException(nameof(dtoTagDetail.Maven), "Property is required for class DtoTagDetail.");

            if (dtoTagDetail.NpmOption.IsSet && dtoTagDetail.Npm == null)
                throw new ArgumentNullException(nameof(dtoTagDetail.Npm), "Property is required for class DtoTagDetail.");

            if (dtoTagDetail.OhpmOption.IsSet && dtoTagDetail.Ohpm == null)
                throw new ArgumentNullException(nameof(dtoTagDetail.Ohpm), "Property is required for class DtoTagDetail.");

            if (dtoTagDetail.DockerOption.IsSet)
            {
                writer.WritePropertyName("docker");
                JsonSerializer.Serialize(writer, dtoTagDetail.Docker, jsonSerializerOptions);
            }
            if (dtoTagDetail.HelmOption.IsSet)
            {
                writer.WritePropertyName("helm");
                JsonSerializer.Serialize(writer, dtoTagDetail.Helm, jsonSerializerOptions);
            }
            if (dtoTagDetail.MavenOption.IsSet)
            {
                writer.WritePropertyName("maven");
                JsonSerializer.Serialize(writer, dtoTagDetail.Maven, jsonSerializerOptions);
            }
            if (dtoTagDetail.NpmOption.IsSet)
            {
                writer.WritePropertyName("npm");
                JsonSerializer.Serialize(writer, dtoTagDetail.Npm, jsonSerializerOptions);
            }
            if (dtoTagDetail.OhpmOption.IsSet)
            {
                writer.WritePropertyName("ohpm");
                JsonSerializer.Serialize(writer, dtoTagDetail.Ohpm, jsonSerializerOptions);
            }
        }
    }
}
