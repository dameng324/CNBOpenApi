// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// HttpUpdateUserInfoPayload
    /// </summary>
    public partial class HttpUpdateUserInfoPayload : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HttpUpdateUserInfoPayload" /> class.
        /// </summary>
        /// <param name="address">address</param>
        /// <param name="bio">bio</param>
        /// <param name="company">company</param>
        /// <param name="location">location</param>
        /// <param name="name">name</param>
        /// <param name="nickname">nickname</param>
        /// <param name="site">site</param>
        /// <param name="wechatMp">wechatMp</param>
        /// <param name="wechatMpQrcode">wechatMpQrcode</param>
        [JsonConstructor]
        public HttpUpdateUserInfoPayload(Option<string?> address = default, Option<string?> bio = default, Option<string?> company = default, Option<string?> location = default, Option<string?> name = default, Option<string?> nickname = default, Option<string?> site = default, Option<string?> wechatMp = default, Option<string?> wechatMpQrcode = default)
        {
            AddressOption = address;
            BioOption = bio;
            CompanyOption = company;
            LocationOption = location;
            NameOption = name;
            NicknameOption = nickname;
            SiteOption = site;
            WechatMpOption = wechatMp;
            WechatMpQrcodeOption = wechatMpQrcode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Address
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public string? Address { get { return this.AddressOption; } set { this.AddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of Bio
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BioOption { get; private set; }

        /// <summary>
        /// Gets or Sets Bio
        /// </summary>
        [JsonPropertyName("bio")]
        public string? Bio { get { return this.BioOption; } set { this.BioOption = new(value); } }

        /// <summary>
        /// Used to track the state of Company
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CompanyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [JsonPropertyName("company")]
        public string? Company { get { return this.CompanyOption; } set { this.CompanyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [JsonPropertyName("location")]
        public string? Location { get { return this.LocationOption; } set { this.LocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Nickname
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NicknameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [JsonPropertyName("nickname")]
        public string? Nickname { get { return this.NicknameOption; } set { this.NicknameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Site
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SiteOption { get; private set; }

        /// <summary>
        /// Gets or Sets Site
        /// </summary>
        [JsonPropertyName("site")]
        public string? Site { get { return this.SiteOption; } set { this.SiteOption = new(value); } }

        /// <summary>
        /// Used to track the state of WechatMp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WechatMpOption { get; private set; }

        /// <summary>
        /// Gets or Sets WechatMp
        /// </summary>
        [JsonPropertyName("wechat_mp")]
        public string? WechatMp { get { return this.WechatMpOption; } set { this.WechatMpOption = new(value); } }

        /// <summary>
        /// Used to track the state of WechatMpQrcode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WechatMpQrcodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets WechatMpQrcode
        /// </summary>
        [JsonPropertyName("wechat_mp_qrcode")]
        public string? WechatMpQrcode { get { return this.WechatMpQrcodeOption; } set { this.WechatMpQrcodeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HttpUpdateUserInfoPayload {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Bio: ").Append(Bio).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  WechatMp: ").Append(WechatMp).Append("\n");
            sb.Append("  WechatMpQrcode: ").Append(WechatMpQrcode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HttpUpdateUserInfoPayload" />
    /// </summary>
    public class HttpUpdateUserInfoPayloadJsonConverter : JsonConverter<HttpUpdateUserInfoPayload>
    {
        /// <summary>
        /// Deserializes json to <see cref="HttpUpdateUserInfoPayload" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HttpUpdateUserInfoPayload Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> address = default;
            Option<string?> bio = default;
            Option<string?> company = default;
            Option<string?> location = default;
            Option<string?> name = default;
            Option<string?> nickname = default;
            Option<string?> site = default;
            Option<string?> wechatMp = default;
            Option<string?> wechatMpQrcode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "address":
                            address = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "bio":
                            bio = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "company":
                            company = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "location":
                            location = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "nickname":
                            nickname = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "site":
                            site = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "wechat_mp":
                            wechatMp = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "wechat_mp_qrcode":
                            wechatMpQrcode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address), "Property is not nullable for class HttpUpdateUserInfoPayload.");

            if (bio.IsSet && bio.Value == null)
                throw new ArgumentNullException(nameof(bio), "Property is not nullable for class HttpUpdateUserInfoPayload.");

            if (company.IsSet && company.Value == null)
                throw new ArgumentNullException(nameof(company), "Property is not nullable for class HttpUpdateUserInfoPayload.");

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location), "Property is not nullable for class HttpUpdateUserInfoPayload.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class HttpUpdateUserInfoPayload.");

            if (nickname.IsSet && nickname.Value == null)
                throw new ArgumentNullException(nameof(nickname), "Property is not nullable for class HttpUpdateUserInfoPayload.");

            if (site.IsSet && site.Value == null)
                throw new ArgumentNullException(nameof(site), "Property is not nullable for class HttpUpdateUserInfoPayload.");

            if (wechatMp.IsSet && wechatMp.Value == null)
                throw new ArgumentNullException(nameof(wechatMp), "Property is not nullable for class HttpUpdateUserInfoPayload.");

            if (wechatMpQrcode.IsSet && wechatMpQrcode.Value == null)
                throw new ArgumentNullException(nameof(wechatMpQrcode), "Property is not nullable for class HttpUpdateUserInfoPayload.");

            return new HttpUpdateUserInfoPayload(address, bio, company, location, name, nickname, site, wechatMp, wechatMpQrcode);
        }

        /// <summary>
        /// Serializes a <see cref="HttpUpdateUserInfoPayload" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="httpUpdateUserInfoPayload"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HttpUpdateUserInfoPayload httpUpdateUserInfoPayload, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, httpUpdateUserInfoPayload, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HttpUpdateUserInfoPayload" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="httpUpdateUserInfoPayload"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HttpUpdateUserInfoPayload httpUpdateUserInfoPayload, JsonSerializerOptions jsonSerializerOptions)
        {
            if (httpUpdateUserInfoPayload.AddressOption.IsSet && httpUpdateUserInfoPayload.Address == null)
                throw new ArgumentNullException(nameof(httpUpdateUserInfoPayload.Address), "Property is required for class HttpUpdateUserInfoPayload.");

            if (httpUpdateUserInfoPayload.BioOption.IsSet && httpUpdateUserInfoPayload.Bio == null)
                throw new ArgumentNullException(nameof(httpUpdateUserInfoPayload.Bio), "Property is required for class HttpUpdateUserInfoPayload.");

            if (httpUpdateUserInfoPayload.CompanyOption.IsSet && httpUpdateUserInfoPayload.Company == null)
                throw new ArgumentNullException(nameof(httpUpdateUserInfoPayload.Company), "Property is required for class HttpUpdateUserInfoPayload.");

            if (httpUpdateUserInfoPayload.LocationOption.IsSet && httpUpdateUserInfoPayload.Location == null)
                throw new ArgumentNullException(nameof(httpUpdateUserInfoPayload.Location), "Property is required for class HttpUpdateUserInfoPayload.");

            if (httpUpdateUserInfoPayload.NameOption.IsSet && httpUpdateUserInfoPayload.Name == null)
                throw new ArgumentNullException(nameof(httpUpdateUserInfoPayload.Name), "Property is required for class HttpUpdateUserInfoPayload.");

            if (httpUpdateUserInfoPayload.NicknameOption.IsSet && httpUpdateUserInfoPayload.Nickname == null)
                throw new ArgumentNullException(nameof(httpUpdateUserInfoPayload.Nickname), "Property is required for class HttpUpdateUserInfoPayload.");

            if (httpUpdateUserInfoPayload.SiteOption.IsSet && httpUpdateUserInfoPayload.Site == null)
                throw new ArgumentNullException(nameof(httpUpdateUserInfoPayload.Site), "Property is required for class HttpUpdateUserInfoPayload.");

            if (httpUpdateUserInfoPayload.WechatMpOption.IsSet && httpUpdateUserInfoPayload.WechatMp == null)
                throw new ArgumentNullException(nameof(httpUpdateUserInfoPayload.WechatMp), "Property is required for class HttpUpdateUserInfoPayload.");

            if (httpUpdateUserInfoPayload.WechatMpQrcodeOption.IsSet && httpUpdateUserInfoPayload.WechatMpQrcode == null)
                throw new ArgumentNullException(nameof(httpUpdateUserInfoPayload.WechatMpQrcode), "Property is required for class HttpUpdateUserInfoPayload.");

            if (httpUpdateUserInfoPayload.AddressOption.IsSet)
                writer.WriteString("address", httpUpdateUserInfoPayload.Address);

            if (httpUpdateUserInfoPayload.BioOption.IsSet)
                writer.WriteString("bio", httpUpdateUserInfoPayload.Bio);

            if (httpUpdateUserInfoPayload.CompanyOption.IsSet)
                writer.WriteString("company", httpUpdateUserInfoPayload.Company);

            if (httpUpdateUserInfoPayload.LocationOption.IsSet)
                writer.WriteString("location", httpUpdateUserInfoPayload.Location);

            if (httpUpdateUserInfoPayload.NameOption.IsSet)
                writer.WriteString("name", httpUpdateUserInfoPayload.Name);

            if (httpUpdateUserInfoPayload.NicknameOption.IsSet)
                writer.WriteString("nickname", httpUpdateUserInfoPayload.Nickname);

            if (httpUpdateUserInfoPayload.SiteOption.IsSet)
                writer.WriteString("site", httpUpdateUserInfoPayload.Site);

            if (httpUpdateUserInfoPayload.WechatMpOption.IsSet)
                writer.WriteString("wechat_mp", httpUpdateUserInfoPayload.WechatMp);

            if (httpUpdateUserInfoPayload.WechatMpQrcodeOption.IsSet)
                writer.WriteString("wechat_mp_qrcode", httpUpdateUserInfoPayload.WechatMpQrcode);
        }
    }
}
