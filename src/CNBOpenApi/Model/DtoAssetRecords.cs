// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoAssetRecords
    /// </summary>
    public partial class DtoAssetRecords : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoAssetRecords" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="originPath">来源地址，例如 release 附件的来源地址是对应的 release 页面。issue和pr文件没有。</param>
        /// <param name="path">path</param>
        /// <param name="referer">referer</param>
        /// <param name="sizeInByte">sizeInByte</param>
        [JsonConstructor]
        public DtoAssetRecords(Option<string?> id = default, Option<string?> originPath = default, Option<string?> path = default, Option<string?> referer = default, Option<int?> sizeInByte = default)
        {
            IdOption = id;
            OriginPathOption = originPath;
            PathOption = path;
            RefererOption = referer;
            SizeInByteOption = sizeInByte;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of OriginPath
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OriginPathOption { get; private set; }

        /// <summary>
        /// 来源地址，例如 release 附件的来源地址是对应的 release 页面。issue和pr文件没有。
        /// </summary>
        /// <value>来源地址，例如 release 附件的来源地址是对应的 release 页面。issue和pr文件没有。</value>
        [JsonPropertyName("origin_path")]
        public string? OriginPath { get { return this.OriginPathOption; } set { this.OriginPathOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of Referer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RefererOption { get; private set; }

        /// <summary>
        /// Gets or Sets Referer
        /// </summary>
        [JsonPropertyName("referer")]
        public string? Referer { get { return this.RefererOption; } set { this.RefererOption = new(value); } }

        /// <summary>
        /// Used to track the state of SizeInByte
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SizeInByteOption { get; private set; }

        /// <summary>
        /// Gets or Sets SizeInByte
        /// </summary>
        [JsonPropertyName("size_in_byte")]
        public int? SizeInByte { get { return this.SizeInByteOption; } set { this.SizeInByteOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoAssetRecords {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OriginPath: ").Append(OriginPath).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Referer: ").Append(Referer).Append("\n");
            sb.Append("  SizeInByte: ").Append(SizeInByte).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoAssetRecords" />
    /// </summary>
    public class DtoAssetRecordsJsonConverter : JsonConverter<DtoAssetRecords>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoAssetRecords" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoAssetRecords Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> originPath = default;
            Option<string?> path = default;
            Option<string?> referer = default;
            Option<int?> sizeInByte = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "origin_path":
                            originPath = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "referer":
                            referer = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "size_in_byte":
                            sizeInByte = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DtoAssetRecords.");

            if (originPath.IsSet && originPath.Value == null)
                throw new ArgumentNullException(nameof(originPath), "Property is not nullable for class DtoAssetRecords.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class DtoAssetRecords.");

            if (referer.IsSet && referer.Value == null)
                throw new ArgumentNullException(nameof(referer), "Property is not nullable for class DtoAssetRecords.");

            if (sizeInByte.IsSet && sizeInByte.Value == null)
                throw new ArgumentNullException(nameof(sizeInByte), "Property is not nullable for class DtoAssetRecords.");

            return new DtoAssetRecords(id, originPath, path, referer, sizeInByte);
        }

        /// <summary>
        /// Serializes a <see cref="DtoAssetRecords" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoAssetRecords"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoAssetRecords dtoAssetRecords, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoAssetRecords, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoAssetRecords" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoAssetRecords"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoAssetRecords dtoAssetRecords, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoAssetRecords.IdOption.IsSet && dtoAssetRecords.Id == null)
                throw new ArgumentNullException(nameof(dtoAssetRecords.Id), "Property is required for class DtoAssetRecords.");

            if (dtoAssetRecords.OriginPathOption.IsSet && dtoAssetRecords.OriginPath == null)
                throw new ArgumentNullException(nameof(dtoAssetRecords.OriginPath), "Property is required for class DtoAssetRecords.");

            if (dtoAssetRecords.PathOption.IsSet && dtoAssetRecords.Path == null)
                throw new ArgumentNullException(nameof(dtoAssetRecords.Path), "Property is required for class DtoAssetRecords.");

            if (dtoAssetRecords.RefererOption.IsSet && dtoAssetRecords.Referer == null)
                throw new ArgumentNullException(nameof(dtoAssetRecords.Referer), "Property is required for class DtoAssetRecords.");

            if (dtoAssetRecords.IdOption.IsSet)
                writer.WriteString("id", dtoAssetRecords.Id);

            if (dtoAssetRecords.OriginPathOption.IsSet)
                writer.WriteString("origin_path", dtoAssetRecords.OriginPath);

            if (dtoAssetRecords.PathOption.IsSet)
                writer.WriteString("path", dtoAssetRecords.Path);

            if (dtoAssetRecords.RefererOption.IsSet)
                writer.WriteString("referer", dtoAssetRecords.Referer);

            if (dtoAssetRecords.SizeInByteOption.IsSet)
                writer.WriteNumber("size_in_byte", dtoAssetRecords.SizeInByteOption.Value!.Value);
        }
    }
}
