// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoActivityRelease
    /// </summary>
    public partial class DtoActivityRelease : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoActivityRelease" /> class.
        /// </summary>
        /// <param name="commitHash">commitHash</param>
        /// <param name="tag">tag</param>
        /// <param name="title">title</param>
        [JsonConstructor]
        public DtoActivityRelease(Option<string?> commitHash = default, Option<string?> tag = default, Option<string?> title = default)
        {
            CommitHashOption = commitHash;
            TagOption = tag;
            TitleOption = title;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CommitHash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommitHashOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommitHash
        /// </summary>
        [JsonPropertyName("commit_hash")]
        public string? CommitHash { get { return this.CommitHashOption; } set { this.CommitHashOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TagOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [JsonPropertyName("tag")]
        public string? Tag { get { return this.TagOption; } set { this.TagOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoActivityRelease {\n");
            sb.Append("  CommitHash: ").Append(CommitHash).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoActivityRelease" />
    /// </summary>
    public class DtoActivityReleaseJsonConverter : JsonConverter<DtoActivityRelease>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoActivityRelease" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoActivityRelease Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> commitHash = default;
            Option<string?> tag = default;
            Option<string?> title = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "commit_hash":
                            commitHash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tag":
                            tag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (commitHash.IsSet && commitHash.Value == null)
                throw new ArgumentNullException(nameof(commitHash), "Property is not nullable for class DtoActivityRelease.");

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag), "Property is not nullable for class DtoActivityRelease.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class DtoActivityRelease.");

            return new DtoActivityRelease(commitHash, tag, title);
        }

        /// <summary>
        /// Serializes a <see cref="DtoActivityRelease" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoActivityRelease"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoActivityRelease dtoActivityRelease, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoActivityRelease, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoActivityRelease" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoActivityRelease"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoActivityRelease dtoActivityRelease, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoActivityRelease.CommitHashOption.IsSet && dtoActivityRelease.CommitHash == null)
                throw new ArgumentNullException(nameof(dtoActivityRelease.CommitHash), "Property is required for class DtoActivityRelease.");

            if (dtoActivityRelease.TagOption.IsSet && dtoActivityRelease.Tag == null)
                throw new ArgumentNullException(nameof(dtoActivityRelease.Tag), "Property is required for class DtoActivityRelease.");

            if (dtoActivityRelease.TitleOption.IsSet && dtoActivityRelease.Title == null)
                throw new ArgumentNullException(nameof(dtoActivityRelease.Title), "Property is required for class DtoActivityRelease.");

            if (dtoActivityRelease.CommitHashOption.IsSet)
                writer.WriteString("commit_hash", dtoActivityRelease.CommitHash);

            if (dtoActivityRelease.TagOption.IsSet)
                writer.WriteString("tag", dtoActivityRelease.Tag);

            if (dtoActivityRelease.TitleOption.IsSet)
                writer.WriteString("title", dtoActivityRelease.Title);
        }
    }
}
