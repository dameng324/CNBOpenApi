// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoOrganizationAccess
    /// </summary>
    public partial class DtoOrganizationAccess : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoOrganizationAccess" /> class.
        /// </summary>
        /// <param name="accessRole">AccessRole 用户在当前资源的最大权限</param>
        /// <param name="allMemberCount">allMemberCount</param>
        /// <param name="allSubGroupCount">下面所有层级子组织</param>
        /// <param name="allSubMissionCount">下面所有层级子任务</param>
        /// <param name="allSubRegistryCount">allSubRegistryCount</param>
        /// <param name="allSubRepoCount">下面所有层级子仓库</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="description">description</param>
        /// <param name="domain">domain</param>
        /// <param name="email">email</param>
        /// <param name="followCount">followCount</param>
        /// <param name="freeze">freeze</param>
        /// <param name="hasSubGroup">hasSubGroup</param>
        /// <param name="id">id</param>
        /// <param name="memberCount">memberCount</param>
        /// <param name="name">name</param>
        /// <param name="path">path</param>
        /// <param name="remark">remark</param>
        /// <param name="site">site</param>
        /// <param name="subGroupCount">下一级子组织数量</param>
        /// <param name="subMissionCount">subMissionCount</param>
        /// <param name="subRegistryCount">subRegistryCount</param>
        /// <param name="subRepoCount">下一级子仓库</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="wechatMp">wechatMp</param>
        [JsonConstructor]
        public DtoOrganizationAccess(Option<ConstantAccessRole?> accessRole = default, Option<int?> allMemberCount = default, Option<int?> allSubGroupCount = default, Option<int?> allSubMissionCount = default, Option<int?> allSubRegistryCount = default, Option<int?> allSubRepoCount = default, Option<string?> createdAt = default, Option<string?> description = default, Option<string?> domain = default, Option<string?> email = default, Option<int?> followCount = default, Option<bool?> freeze = default, Option<bool?> hasSubGroup = default, Option<int?> id = default, Option<int?> memberCount = default, Option<string?> name = default, Option<string?> path = default, Option<string?> remark = default, Option<string?> site = default, Option<int?> subGroupCount = default, Option<int?> subMissionCount = default, Option<int?> subRegistryCount = default, Option<int?> subRepoCount = default, Option<string?> updatedAt = default, Option<string?> wechatMp = default)
        {
            AccessRoleOption = accessRole;
            AllMemberCountOption = allMemberCount;
            AllSubGroupCountOption = allSubGroupCount;
            AllSubMissionCountOption = allSubMissionCount;
            AllSubRegistryCountOption = allSubRegistryCount;
            AllSubRepoCountOption = allSubRepoCount;
            CreatedAtOption = createdAt;
            DescriptionOption = description;
            DomainOption = domain;
            EmailOption = email;
            FollowCountOption = followCount;
            FreezeOption = freeze;
            HasSubGroupOption = hasSubGroup;
            IdOption = id;
            MemberCountOption = memberCount;
            NameOption = name;
            PathOption = path;
            RemarkOption = remark;
            SiteOption = site;
            SubGroupCountOption = subGroupCount;
            SubMissionCountOption = subMissionCount;
            SubRegistryCountOption = subRegistryCount;
            SubRepoCountOption = subRepoCount;
            UpdatedAtOption = updatedAt;
            WechatMpOption = wechatMp;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AccessRole
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantAccessRole?> AccessRoleOption { get; private set; }

        /// <summary>
        /// AccessRole 用户在当前资源的最大权限
        /// </summary>
        /// <value>AccessRole 用户在当前资源的最大权限</value>
        [JsonPropertyName("access_role")]
        public ConstantAccessRole? AccessRole { get { return this.AccessRoleOption; } set { this.AccessRoleOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllMemberCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AllMemberCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllMemberCount
        /// </summary>
        [JsonPropertyName("all_member_count")]
        public int? AllMemberCount { get { return this.AllMemberCountOption; } set { this.AllMemberCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllSubGroupCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AllSubGroupCountOption { get; private set; }

        /// <summary>
        /// 下面所有层级子组织
        /// </summary>
        /// <value>下面所有层级子组织</value>
        [JsonPropertyName("all_sub_group_count")]
        public int? AllSubGroupCount { get { return this.AllSubGroupCountOption; } set { this.AllSubGroupCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllSubMissionCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AllSubMissionCountOption { get; private set; }

        /// <summary>
        /// 下面所有层级子任务
        /// </summary>
        /// <value>下面所有层级子任务</value>
        [JsonPropertyName("all_sub_mission_count")]
        public int? AllSubMissionCount { get { return this.AllSubMissionCountOption; } set { this.AllSubMissionCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllSubRegistryCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AllSubRegistryCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllSubRegistryCount
        /// </summary>
        [JsonPropertyName("all_sub_registry_count")]
        public int? AllSubRegistryCount { get { return this.AllSubRegistryCountOption; } set { this.AllSubRegistryCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllSubRepoCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AllSubRepoCountOption { get; private set; }

        /// <summary>
        /// 下面所有层级子仓库
        /// </summary>
        /// <value>下面所有层级子仓库</value>
        [JsonPropertyName("all_sub_repo_count")]
        public int? AllSubRepoCount { get { return this.AllSubRepoCountOption; } set { this.AllSubRepoCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Domain
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DomainOption { get; private set; }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [JsonPropertyName("domain")]
        public string? Domain { get { return this.DomainOption; } set { this.DomainOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of FollowCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FollowCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets FollowCount
        /// </summary>
        [JsonPropertyName("follow_count")]
        public int? FollowCount { get { return this.FollowCountOption; } set { this.FollowCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Freeze
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FreezeOption { get; }

        /// <summary>
        /// Gets or Sets Freeze
        /// </summary>
        [JsonPropertyName("freeze")]
        public bool? Freeze { get { return this.FreezeOption; } }

        /// <summary>
        /// Used to track the state of HasSubGroup
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasSubGroupOption { get; private set; }

        /// <summary>
        /// Gets or Sets HasSubGroup
        /// </summary>
        [JsonPropertyName("has_sub_group")]
        public bool? HasSubGroup { get { return this.HasSubGroupOption; } set { this.HasSubGroupOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of MemberCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MemberCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets MemberCount
        /// </summary>
        [JsonPropertyName("member_count")]
        public int? MemberCount { get { return this.MemberCountOption; } set { this.MemberCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of Remark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RemarkOption { get; private set; }

        /// <summary>
        /// Gets or Sets Remark
        /// </summary>
        [JsonPropertyName("remark")]
        public string? Remark { get { return this.RemarkOption; } set { this.RemarkOption = new(value); } }

        /// <summary>
        /// Used to track the state of Site
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SiteOption { get; private set; }

        /// <summary>
        /// Gets or Sets Site
        /// </summary>
        [JsonPropertyName("site")]
        public string? Site { get { return this.SiteOption; } set { this.SiteOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubGroupCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SubGroupCountOption { get; private set; }

        /// <summary>
        /// 下一级子组织数量
        /// </summary>
        /// <value>下一级子组织数量</value>
        [JsonPropertyName("sub_group_count")]
        public int? SubGroupCount { get { return this.SubGroupCountOption; } set { this.SubGroupCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubMissionCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SubMissionCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubMissionCount
        /// </summary>
        [JsonPropertyName("sub_mission_count")]
        public int? SubMissionCount { get { return this.SubMissionCountOption; } set { this.SubMissionCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubRegistryCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SubRegistryCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubRegistryCount
        /// </summary>
        [JsonPropertyName("sub_registry_count")]
        public int? SubRegistryCount { get { return this.SubRegistryCountOption; } set { this.SubRegistryCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubRepoCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SubRepoCountOption { get; private set; }

        /// <summary>
        /// 下一级子仓库
        /// </summary>
        /// <value>下一级子仓库</value>
        [JsonPropertyName("sub_repo_count")]
        public int? SubRepoCount { get { return this.SubRepoCountOption; } set { this.SubRepoCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of WechatMp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WechatMpOption { get; private set; }

        /// <summary>
        /// Gets or Sets WechatMp
        /// </summary>
        [JsonPropertyName("wechat_mp")]
        public string? WechatMp { get { return this.WechatMpOption; } set { this.WechatMpOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoOrganizationAccess {\n");
            sb.Append("  AccessRole: ").Append(AccessRole).Append("\n");
            sb.Append("  AllMemberCount: ").Append(AllMemberCount).Append("\n");
            sb.Append("  AllSubGroupCount: ").Append(AllSubGroupCount).Append("\n");
            sb.Append("  AllSubMissionCount: ").Append(AllSubMissionCount).Append("\n");
            sb.Append("  AllSubRegistryCount: ").Append(AllSubRegistryCount).Append("\n");
            sb.Append("  AllSubRepoCount: ").Append(AllSubRepoCount).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FollowCount: ").Append(FollowCount).Append("\n");
            sb.Append("  Freeze: ").Append(Freeze).Append("\n");
            sb.Append("  HasSubGroup: ").Append(HasSubGroup).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MemberCount: ").Append(MemberCount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  SubGroupCount: ").Append(SubGroupCount).Append("\n");
            sb.Append("  SubMissionCount: ").Append(SubMissionCount).Append("\n");
            sb.Append("  SubRegistryCount: ").Append(SubRegistryCount).Append("\n");
            sb.Append("  SubRepoCount: ").Append(SubRepoCount).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  WechatMp: ").Append(WechatMp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoOrganizationAccess" />
    /// </summary>
    public class DtoOrganizationAccessJsonConverter : JsonConverter<DtoOrganizationAccess>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoOrganizationAccess" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoOrganizationAccess Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ConstantAccessRole?> accessRole = default;
            Option<int?> allMemberCount = default;
            Option<int?> allSubGroupCount = default;
            Option<int?> allSubMissionCount = default;
            Option<int?> allSubRegistryCount = default;
            Option<int?> allSubRepoCount = default;
            Option<string?> createdAt = default;
            Option<string?> description = default;
            Option<string?> domain = default;
            Option<string?> email = default;
            Option<int?> followCount = default;
            Option<bool?> freeze = default;
            Option<bool?> hasSubGroup = default;
            Option<int?> id = default;
            Option<int?> memberCount = default;
            Option<string?> name = default;
            Option<string?> path = default;
            Option<string?> remark = default;
            Option<string?> site = default;
            Option<int?> subGroupCount = default;
            Option<int?> subMissionCount = default;
            Option<int?> subRegistryCount = default;
            Option<int?> subRepoCount = default;
            Option<string?> updatedAt = default;
            Option<string?> wechatMp = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "access_role":
                            string? accessRoleRawValue = utf8JsonReader.GetString();
                            if (accessRoleRawValue != null)
                                accessRole = new Option<ConstantAccessRole?>(ConstantAccessRoleValueConverter.FromStringOrDefault(accessRoleRawValue));
                            break;
                        case "all_member_count":
                            allMemberCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "all_sub_group_count":
                            allSubGroupCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "all_sub_mission_count":
                            allSubMissionCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "all_sub_registry_count":
                            allSubRegistryCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "all_sub_repo_count":
                            allSubRepoCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "domain":
                            domain = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "follow_count":
                            followCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "freeze":
                            freeze = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "has_sub_group":
                            hasSubGroup = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "member_count":
                            memberCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "remark":
                            remark = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "site":
                            site = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sub_group_count":
                            subGroupCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "sub_mission_count":
                            subMissionCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "sub_registry_count":
                            subRegistryCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "sub_repo_count":
                            subRepoCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "wechat_mp":
                            wechatMp = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (accessRole.IsSet && accessRole.Value == null)
                throw new ArgumentNullException(nameof(accessRole), "Property is not nullable for class DtoOrganizationAccess.");

            if (allMemberCount.IsSet && allMemberCount.Value == null)
                throw new ArgumentNullException(nameof(allMemberCount), "Property is not nullable for class DtoOrganizationAccess.");

            if (allSubGroupCount.IsSet && allSubGroupCount.Value == null)
                throw new ArgumentNullException(nameof(allSubGroupCount), "Property is not nullable for class DtoOrganizationAccess.");

            if (allSubMissionCount.IsSet && allSubMissionCount.Value == null)
                throw new ArgumentNullException(nameof(allSubMissionCount), "Property is not nullable for class DtoOrganizationAccess.");

            if (allSubRegistryCount.IsSet && allSubRegistryCount.Value == null)
                throw new ArgumentNullException(nameof(allSubRegistryCount), "Property is not nullable for class DtoOrganizationAccess.");

            if (allSubRepoCount.IsSet && allSubRepoCount.Value == null)
                throw new ArgumentNullException(nameof(allSubRepoCount), "Property is not nullable for class DtoOrganizationAccess.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class DtoOrganizationAccess.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class DtoOrganizationAccess.");

            if (domain.IsSet && domain.Value == null)
                throw new ArgumentNullException(nameof(domain), "Property is not nullable for class DtoOrganizationAccess.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class DtoOrganizationAccess.");

            if (followCount.IsSet && followCount.Value == null)
                throw new ArgumentNullException(nameof(followCount), "Property is not nullable for class DtoOrganizationAccess.");

            if (freeze.IsSet && freeze.Value == null)
                throw new ArgumentNullException(nameof(freeze), "Property is not nullable for class DtoOrganizationAccess.");

            if (hasSubGroup.IsSet && hasSubGroup.Value == null)
                throw new ArgumentNullException(nameof(hasSubGroup), "Property is not nullable for class DtoOrganizationAccess.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DtoOrganizationAccess.");

            if (memberCount.IsSet && memberCount.Value == null)
                throw new ArgumentNullException(nameof(memberCount), "Property is not nullable for class DtoOrganizationAccess.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class DtoOrganizationAccess.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class DtoOrganizationAccess.");

            if (remark.IsSet && remark.Value == null)
                throw new ArgumentNullException(nameof(remark), "Property is not nullable for class DtoOrganizationAccess.");

            if (site.IsSet && site.Value == null)
                throw new ArgumentNullException(nameof(site), "Property is not nullable for class DtoOrganizationAccess.");

            if (subGroupCount.IsSet && subGroupCount.Value == null)
                throw new ArgumentNullException(nameof(subGroupCount), "Property is not nullable for class DtoOrganizationAccess.");

            if (subMissionCount.IsSet && subMissionCount.Value == null)
                throw new ArgumentNullException(nameof(subMissionCount), "Property is not nullable for class DtoOrganizationAccess.");

            if (subRegistryCount.IsSet && subRegistryCount.Value == null)
                throw new ArgumentNullException(nameof(subRegistryCount), "Property is not nullable for class DtoOrganizationAccess.");

            if (subRepoCount.IsSet && subRepoCount.Value == null)
                throw new ArgumentNullException(nameof(subRepoCount), "Property is not nullable for class DtoOrganizationAccess.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class DtoOrganizationAccess.");

            if (wechatMp.IsSet && wechatMp.Value == null)
                throw new ArgumentNullException(nameof(wechatMp), "Property is not nullable for class DtoOrganizationAccess.");

            return new DtoOrganizationAccess(accessRole, allMemberCount, allSubGroupCount, allSubMissionCount, allSubRegistryCount, allSubRepoCount, createdAt, description, domain, email, followCount, freeze, hasSubGroup, id, memberCount, name, path, remark, site, subGroupCount, subMissionCount, subRegistryCount, subRepoCount, updatedAt, wechatMp);
        }

        /// <summary>
        /// Serializes a <see cref="DtoOrganizationAccess" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoOrganizationAccess"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoOrganizationAccess dtoOrganizationAccess, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoOrganizationAccess, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoOrganizationAccess" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoOrganizationAccess"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoOrganizationAccess dtoOrganizationAccess, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoOrganizationAccess.CreatedAtOption.IsSet && dtoOrganizationAccess.CreatedAt == null)
                throw new ArgumentNullException(nameof(dtoOrganizationAccess.CreatedAt), "Property is required for class DtoOrganizationAccess.");

            if (dtoOrganizationAccess.DescriptionOption.IsSet && dtoOrganizationAccess.Description == null)
                throw new ArgumentNullException(nameof(dtoOrganizationAccess.Description), "Property is required for class DtoOrganizationAccess.");

            if (dtoOrganizationAccess.DomainOption.IsSet && dtoOrganizationAccess.Domain == null)
                throw new ArgumentNullException(nameof(dtoOrganizationAccess.Domain), "Property is required for class DtoOrganizationAccess.");

            if (dtoOrganizationAccess.EmailOption.IsSet && dtoOrganizationAccess.Email == null)
                throw new ArgumentNullException(nameof(dtoOrganizationAccess.Email), "Property is required for class DtoOrganizationAccess.");

            if (dtoOrganizationAccess.NameOption.IsSet && dtoOrganizationAccess.Name == null)
                throw new ArgumentNullException(nameof(dtoOrganizationAccess.Name), "Property is required for class DtoOrganizationAccess.");

            if (dtoOrganizationAccess.PathOption.IsSet && dtoOrganizationAccess.Path == null)
                throw new ArgumentNullException(nameof(dtoOrganizationAccess.Path), "Property is required for class DtoOrganizationAccess.");

            if (dtoOrganizationAccess.RemarkOption.IsSet && dtoOrganizationAccess.Remark == null)
                throw new ArgumentNullException(nameof(dtoOrganizationAccess.Remark), "Property is required for class DtoOrganizationAccess.");

            if (dtoOrganizationAccess.SiteOption.IsSet && dtoOrganizationAccess.Site == null)
                throw new ArgumentNullException(nameof(dtoOrganizationAccess.Site), "Property is required for class DtoOrganizationAccess.");

            if (dtoOrganizationAccess.UpdatedAtOption.IsSet && dtoOrganizationAccess.UpdatedAt == null)
                throw new ArgumentNullException(nameof(dtoOrganizationAccess.UpdatedAt), "Property is required for class DtoOrganizationAccess.");

            if (dtoOrganizationAccess.WechatMpOption.IsSet && dtoOrganizationAccess.WechatMp == null)
                throw new ArgumentNullException(nameof(dtoOrganizationAccess.WechatMp), "Property is required for class DtoOrganizationAccess.");

            if (dtoOrganizationAccess.AccessRoleOption.IsSet)
            {
                var accessRoleRawValue = ConstantAccessRoleValueConverter.ToJsonValue(dtoOrganizationAccess.AccessRole!.Value);
                writer.WriteNumber("access_role", accessRoleRawValue);
            }
            if (dtoOrganizationAccess.AllMemberCountOption.IsSet)
                writer.WriteNumber("all_member_count", dtoOrganizationAccess.AllMemberCountOption.Value!.Value);

            if (dtoOrganizationAccess.AllSubGroupCountOption.IsSet)
                writer.WriteNumber("all_sub_group_count", dtoOrganizationAccess.AllSubGroupCountOption.Value!.Value);

            if (dtoOrganizationAccess.AllSubMissionCountOption.IsSet)
                writer.WriteNumber("all_sub_mission_count", dtoOrganizationAccess.AllSubMissionCountOption.Value!.Value);

            if (dtoOrganizationAccess.AllSubRegistryCountOption.IsSet)
                writer.WriteNumber("all_sub_registry_count", dtoOrganizationAccess.AllSubRegistryCountOption.Value!.Value);

            if (dtoOrganizationAccess.AllSubRepoCountOption.IsSet)
                writer.WriteNumber("all_sub_repo_count", dtoOrganizationAccess.AllSubRepoCountOption.Value!.Value);

            if (dtoOrganizationAccess.CreatedAtOption.IsSet)
                writer.WriteString("created_at", dtoOrganizationAccess.CreatedAt);

            if (dtoOrganizationAccess.DescriptionOption.IsSet)
                writer.WriteString("description", dtoOrganizationAccess.Description);

            if (dtoOrganizationAccess.DomainOption.IsSet)
                writer.WriteString("domain", dtoOrganizationAccess.Domain);

            if (dtoOrganizationAccess.EmailOption.IsSet)
                writer.WriteString("email", dtoOrganizationAccess.Email);

            if (dtoOrganizationAccess.FollowCountOption.IsSet)
                writer.WriteNumber("follow_count", dtoOrganizationAccess.FollowCountOption.Value!.Value);

            if (dtoOrganizationAccess.FreezeOption.IsSet)
                writer.WriteBoolean("freeze", dtoOrganizationAccess.FreezeOption.Value!.Value);

            if (dtoOrganizationAccess.HasSubGroupOption.IsSet)
                writer.WriteBoolean("has_sub_group", dtoOrganizationAccess.HasSubGroupOption.Value!.Value);

            if (dtoOrganizationAccess.IdOption.IsSet)
                writer.WriteNumber("id", dtoOrganizationAccess.IdOption.Value!.Value);

            if (dtoOrganizationAccess.MemberCountOption.IsSet)
                writer.WriteNumber("member_count", dtoOrganizationAccess.MemberCountOption.Value!.Value);

            if (dtoOrganizationAccess.NameOption.IsSet)
                writer.WriteString("name", dtoOrganizationAccess.Name);

            if (dtoOrganizationAccess.PathOption.IsSet)
                writer.WriteString("path", dtoOrganizationAccess.Path);

            if (dtoOrganizationAccess.RemarkOption.IsSet)
                writer.WriteString("remark", dtoOrganizationAccess.Remark);

            if (dtoOrganizationAccess.SiteOption.IsSet)
                writer.WriteString("site", dtoOrganizationAccess.Site);

            if (dtoOrganizationAccess.SubGroupCountOption.IsSet)
                writer.WriteNumber("sub_group_count", dtoOrganizationAccess.SubGroupCountOption.Value!.Value);

            if (dtoOrganizationAccess.SubMissionCountOption.IsSet)
                writer.WriteNumber("sub_mission_count", dtoOrganizationAccess.SubMissionCountOption.Value!.Value);

            if (dtoOrganizationAccess.SubRegistryCountOption.IsSet)
                writer.WriteNumber("sub_registry_count", dtoOrganizationAccess.SubRegistryCountOption.Value!.Value);

            if (dtoOrganizationAccess.SubRepoCountOption.IsSet)
                writer.WriteNumber("sub_repo_count", dtoOrganizationAccess.SubRepoCountOption.Value!.Value);

            if (dtoOrganizationAccess.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", dtoOrganizationAccess.UpdatedAt);

            if (dtoOrganizationAccess.WechatMpOption.IsSet)
                writer.WriteString("wechat_mp", dtoOrganizationAccess.WechatMp);
        }
    }
}
