// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoPack
    /// </summary>
    public partial class DtoPack : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoPack" /> class.
        /// </summary>
        /// <param name="expireAt">expireAt</param>
        /// <param name="name">name</param>
        /// <param name="resType">resType</param>
        /// <param name="size">单位: GiB/核时</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public DtoPack(Option<string?> expireAt = default, Option<string?> name = default, Option<ConstantChargeResType?> resType = default, Option<int?> size = default, Option<DtoPackType?> type = default)
        {
            ExpireAtOption = expireAt;
            NameOption = name;
            ResTypeOption = resType;
            SizeOption = size;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ResType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantChargeResType?> ResTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResType
        /// </summary>
        [JsonPropertyName("res_type")]
        public ConstantChargeResType? ResType { get { return this.ResTypeOption; } set { this.ResTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoPackType?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public DtoPackType? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpireAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExpireAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExpireAt
        /// </summary>
        [JsonPropertyName("expire_at")]
        public string? ExpireAt { get { return this.ExpireAtOption; } set { this.ExpireAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SizeOption { get; private set; }

        /// <summary>
        /// 单位: GiB/核时
        /// </summary>
        /// <value>单位: GiB/核时</value>
        [JsonPropertyName("size")]
        public int? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoPack {\n");
            sb.Append("  ExpireAt: ").Append(ExpireAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ResType: ").Append(ResType).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoPack" />
    /// </summary>
    public class DtoPackJsonConverter : JsonConverter<DtoPack>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoPack" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoPack Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> expireAt = default;
            Option<string?> name = default;
            Option<ConstantChargeResType?> resType = default;
            Option<int?> size = default;
            Option<DtoPackType?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "expire_at":
                            expireAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "res_type":
                            string? resTypeRawValue = utf8JsonReader.GetString();
                            if (resTypeRawValue != null)
                                resType = new Option<ConstantChargeResType?>(ConstantChargeResTypeValueConverter.FromStringOrDefault(resTypeRawValue));
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<DtoPackType?>(DtoPackTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (expireAt.IsSet && expireAt.Value == null)
                throw new ArgumentNullException(nameof(expireAt), "Property is not nullable for class DtoPack.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class DtoPack.");

            if (resType.IsSet && resType.Value == null)
                throw new ArgumentNullException(nameof(resType), "Property is not nullable for class DtoPack.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class DtoPack.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class DtoPack.");

            return new DtoPack(expireAt, name, resType, size, type);
        }

        /// <summary>
        /// Serializes a <see cref="DtoPack" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoPack"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoPack dtoPack, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoPack, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoPack" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoPack"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoPack dtoPack, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoPack.ExpireAtOption.IsSet && dtoPack.ExpireAt == null)
                throw new ArgumentNullException(nameof(dtoPack.ExpireAt), "Property is required for class DtoPack.");

            if (dtoPack.NameOption.IsSet && dtoPack.Name == null)
                throw new ArgumentNullException(nameof(dtoPack.Name), "Property is required for class DtoPack.");

            if (dtoPack.ExpireAtOption.IsSet)
                writer.WriteString("expire_at", dtoPack.ExpireAt);

            if (dtoPack.NameOption.IsSet)
                writer.WriteString("name", dtoPack.Name);

            if (dtoPack.ResTypeOption.IsSet)
            {
                var resTypeRawValue = ConstantChargeResTypeValueConverter.ToJsonValue(dtoPack.ResType!.Value);
                writer.WriteString("res_type", resTypeRawValue);
            }
            if (dtoPack.SizeOption.IsSet)
                writer.WriteNumber("size", dtoPack.SizeOption.Value!.Value);

            if (dtoPack.TypeOption.IsSet)
            {
                var typeRawValue = DtoPackTypeValueConverter.ToJsonValue(dtoPack.Type!.Value);
                writer.WriteNumber("type", typeRawValue);
            }
        }
    }
}
