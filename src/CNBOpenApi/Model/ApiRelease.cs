// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// ApiRelease
    /// </summary>
    public partial class ApiRelease : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiRelease" /> class.
        /// </summary>
        /// <param name="assets">assets</param>
        /// <param name="author">author</param>
        /// <param name="body">body</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="draft">draft</param>
        /// <param name="id">id</param>
        /// <param name="isLatest">isLatest</param>
        /// <param name="name">name</param>
        /// <param name="prerelease">prerelease</param>
        /// <param name="publishedAt">publishedAt</param>
        /// <param name="tagCommitish">tagCommitish</param>
        /// <param name="tagName">tagName</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public ApiRelease(Option<List<ApiReleaseAsset>?> assets = default, Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo?> author = default, Option<string?> body = default, Option<string?> createdAt = default, Option<bool?> draft = default, Option<string?> id = default, Option<bool?> isLatest = default, Option<string?> name = default, Option<bool?> prerelease = default, Option<string?> publishedAt = default, Option<string?> tagCommitish = default, Option<string?> tagName = default, Option<string?> updatedAt = default)
        {
            AssetsOption = assets;
            AuthorOption = author;
            BodyOption = body;
            CreatedAtOption = createdAt;
            DraftOption = draft;
            IdOption = id;
            IsLatestOption = isLatest;
            NameOption = name;
            PrereleaseOption = prerelease;
            PublishedAtOption = publishedAt;
            TagCommitishOption = tagCommitish;
            TagNameOption = tagName;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Assets
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ApiReleaseAsset>?> AssetsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [JsonPropertyName("assets")]
        public List<ApiReleaseAsset>? Assets { get { return this.AssetsOption; } set { this.AssetsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Author
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo?> AuthorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [JsonPropertyName("author")]
        public GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo? Author { get { return this.AuthorOption; } set { this.AuthorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BodyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public string? Body { get { return this.BodyOption; } set { this.BodyOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Draft
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DraftOption { get; private set; }

        /// <summary>
        /// Gets or Sets Draft
        /// </summary>
        [JsonPropertyName("draft")]
        public bool? Draft { get { return this.DraftOption; } set { this.DraftOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsLatest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsLatestOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsLatest
        /// </summary>
        [JsonPropertyName("is_latest")]
        public bool? IsLatest { get { return this.IsLatestOption; } set { this.IsLatestOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Prerelease
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PrereleaseOption { get; private set; }

        /// <summary>
        /// Gets or Sets Prerelease
        /// </summary>
        [JsonPropertyName("prerelease")]
        public bool? Prerelease { get { return this.PrereleaseOption; } set { this.PrereleaseOption = new(value); } }

        /// <summary>
        /// Used to track the state of PublishedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PublishedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets PublishedAt
        /// </summary>
        [JsonPropertyName("published_at")]
        public string? PublishedAt { get { return this.PublishedAtOption; } set { this.PublishedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of TagCommitish
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TagCommitishOption { get; private set; }

        /// <summary>
        /// Gets or Sets TagCommitish
        /// </summary>
        [JsonPropertyName("tag_commitish")]
        public string? TagCommitish { get { return this.TagCommitishOption; } set { this.TagCommitishOption = new(value); } }

        /// <summary>
        /// Used to track the state of TagName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TagNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets TagName
        /// </summary>
        [JsonPropertyName("tag_name")]
        public string? TagName { get { return this.TagNameOption; } set { this.TagNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiRelease {\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Draft: ").Append(Draft).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsLatest: ").Append(IsLatest).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Prerelease: ").Append(Prerelease).Append("\n");
            sb.Append("  PublishedAt: ").Append(PublishedAt).Append("\n");
            sb.Append("  TagCommitish: ").Append(TagCommitish).Append("\n");
            sb.Append("  TagName: ").Append(TagName).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApiRelease" />
    /// </summary>
    public class ApiReleaseJsonConverter : JsonConverter<ApiRelease>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApiRelease" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApiRelease Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<ApiReleaseAsset>?> assets = default;
            Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo?> author = default;
            Option<string?> body = default;
            Option<string?> createdAt = default;
            Option<bool?> draft = default;
            Option<string?> id = default;
            Option<bool?> isLatest = default;
            Option<string?> name = default;
            Option<bool?> prerelease = default;
            Option<string?> publishedAt = default;
            Option<string?> tagCommitish = default;
            Option<string?> tagName = default;
            Option<string?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assets":
                            assets = new Option<List<ApiReleaseAsset>?>(JsonSerializer.Deserialize<List<ApiReleaseAsset>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "author":
                            author = new Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo?>(JsonSerializer.Deserialize<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "body":
                            body = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "draft":
                            draft = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_latest":
                            isLatest = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "prerelease":
                            prerelease = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "published_at":
                            publishedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tag_commitish":
                            tagCommitish = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tag_name":
                            tagName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (assets.IsSet && assets.Value == null)
                throw new ArgumentNullException(nameof(assets), "Property is not nullable for class ApiRelease.");

            if (author.IsSet && author.Value == null)
                throw new ArgumentNullException(nameof(author), "Property is not nullable for class ApiRelease.");

            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body), "Property is not nullable for class ApiRelease.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class ApiRelease.");

            if (draft.IsSet && draft.Value == null)
                throw new ArgumentNullException(nameof(draft), "Property is not nullable for class ApiRelease.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ApiRelease.");

            if (isLatest.IsSet && isLatest.Value == null)
                throw new ArgumentNullException(nameof(isLatest), "Property is not nullable for class ApiRelease.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ApiRelease.");

            if (prerelease.IsSet && prerelease.Value == null)
                throw new ArgumentNullException(nameof(prerelease), "Property is not nullable for class ApiRelease.");

            if (publishedAt.IsSet && publishedAt.Value == null)
                throw new ArgumentNullException(nameof(publishedAt), "Property is not nullable for class ApiRelease.");

            if (tagCommitish.IsSet && tagCommitish.Value == null)
                throw new ArgumentNullException(nameof(tagCommitish), "Property is not nullable for class ApiRelease.");

            if (tagName.IsSet && tagName.Value == null)
                throw new ArgumentNullException(nameof(tagName), "Property is not nullable for class ApiRelease.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class ApiRelease.");

            return new ApiRelease(assets, author, body, createdAt, draft, id, isLatest, name, prerelease, publishedAt, tagCommitish, tagName, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="ApiRelease" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiRelease"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApiRelease apiRelease, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, apiRelease, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApiRelease" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiRelease"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApiRelease apiRelease, JsonSerializerOptions jsonSerializerOptions)
        {
            if (apiRelease.AssetsOption.IsSet && apiRelease.Assets == null)
                throw new ArgumentNullException(nameof(apiRelease.Assets), "Property is required for class ApiRelease.");

            if (apiRelease.AuthorOption.IsSet && apiRelease.Author == null)
                throw new ArgumentNullException(nameof(apiRelease.Author), "Property is required for class ApiRelease.");

            if (apiRelease.BodyOption.IsSet && apiRelease.Body == null)
                throw new ArgumentNullException(nameof(apiRelease.Body), "Property is required for class ApiRelease.");

            if (apiRelease.CreatedAtOption.IsSet && apiRelease.CreatedAt == null)
                throw new ArgumentNullException(nameof(apiRelease.CreatedAt), "Property is required for class ApiRelease.");

            if (apiRelease.IdOption.IsSet && apiRelease.Id == null)
                throw new ArgumentNullException(nameof(apiRelease.Id), "Property is required for class ApiRelease.");

            if (apiRelease.NameOption.IsSet && apiRelease.Name == null)
                throw new ArgumentNullException(nameof(apiRelease.Name), "Property is required for class ApiRelease.");

            if (apiRelease.PublishedAtOption.IsSet && apiRelease.PublishedAt == null)
                throw new ArgumentNullException(nameof(apiRelease.PublishedAt), "Property is required for class ApiRelease.");

            if (apiRelease.TagCommitishOption.IsSet && apiRelease.TagCommitish == null)
                throw new ArgumentNullException(nameof(apiRelease.TagCommitish), "Property is required for class ApiRelease.");

            if (apiRelease.TagNameOption.IsSet && apiRelease.TagName == null)
                throw new ArgumentNullException(nameof(apiRelease.TagName), "Property is required for class ApiRelease.");

            if (apiRelease.UpdatedAtOption.IsSet && apiRelease.UpdatedAt == null)
                throw new ArgumentNullException(nameof(apiRelease.UpdatedAt), "Property is required for class ApiRelease.");

            if (apiRelease.AssetsOption.IsSet)
            {
                writer.WritePropertyName("assets");
                JsonSerializer.Serialize(writer, apiRelease.Assets, jsonSerializerOptions);
            }
            if (apiRelease.AuthorOption.IsSet)
            {
                writer.WritePropertyName("author");
                JsonSerializer.Serialize(writer, apiRelease.Author, jsonSerializerOptions);
            }
            if (apiRelease.BodyOption.IsSet)
                writer.WriteString("body", apiRelease.Body);

            if (apiRelease.CreatedAtOption.IsSet)
                writer.WriteString("created_at", apiRelease.CreatedAt);

            if (apiRelease.DraftOption.IsSet)
                writer.WriteBoolean("draft", apiRelease.DraftOption.Value!.Value);

            if (apiRelease.IdOption.IsSet)
                writer.WriteString("id", apiRelease.Id);

            if (apiRelease.IsLatestOption.IsSet)
                writer.WriteBoolean("is_latest", apiRelease.IsLatestOption.Value!.Value);

            if (apiRelease.NameOption.IsSet)
                writer.WriteString("name", apiRelease.Name);

            if (apiRelease.PrereleaseOption.IsSet)
                writer.WriteBoolean("prerelease", apiRelease.PrereleaseOption.Value!.Value);

            if (apiRelease.PublishedAtOption.IsSet)
                writer.WriteString("published_at", apiRelease.PublishedAt);

            if (apiRelease.TagCommitishOption.IsSet)
                writer.WriteString("tag_commitish", apiRelease.TagCommitish);

            if (apiRelease.TagNameOption.IsSet)
                writer.WriteString("tag_name", apiRelease.TagName);

            if (apiRelease.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", apiRelease.UpdatedAt);
        }
    }
}
