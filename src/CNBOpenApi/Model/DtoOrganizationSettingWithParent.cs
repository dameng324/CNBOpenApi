// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoOrganizationSettingWithParent
    /// </summary>
    public partial class DtoOrganizationSettingWithParent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoOrganizationSettingWithParent" /> class.
        /// </summary>
        /// <param name="canShowMembers">上级group设置了hide_members为1，则下级都不能显示</param>
        /// <param name="canShowSubGroups">上级group设置了hide_sub_groups为1，则下级都不能显示</param>
        /// <param name="canShowWatermark">canShowWatermark</param>
        /// <param name="emailVerification">emailVerification</param>
        /// <param name="groupProtection">groupProtection</param>
        /// <param name="hideMembers">是否对外隐藏组织成员，0 - 否, 1 - 是</param>
        /// <param name="hideSubGroups">是否对外隐藏子组织，0 - 否, 1 - 是</param>
        /// <param name="rootEmailVerification">rootEmailVerification</param>
        /// <param name="rootGroupProtection">rootGroupProtection</param>
        /// <param name="rootValues">rootValues</param>
        /// <param name="showPrivateRepoWatermark">showPrivateRepoWatermark</param>
        /// <param name="values">values</param>
        [JsonConstructor]
        public DtoOrganizationSettingWithParent(Option<bool?> canShowMembers = default, Option<bool?> canShowSubGroups = default, Option<bool?> canShowWatermark = default, Option<string?> emailVerification = default, Option<int?> groupProtection = default, Option<int?> hideMembers = default, Option<int?> hideSubGroups = default, Option<string?> rootEmailVerification = default, Option<bool?> rootGroupProtection = default, Option<OrganizationSettingValue?> rootValues = default, Option<int?> showPrivateRepoWatermark = default, Option<OrganizationSettingValue?> values = default)
        {
            CanShowMembersOption = canShowMembers;
            CanShowSubGroupsOption = canShowSubGroups;
            CanShowWatermarkOption = canShowWatermark;
            EmailVerificationOption = emailVerification;
            GroupProtectionOption = groupProtection;
            HideMembersOption = hideMembers;
            HideSubGroupsOption = hideSubGroups;
            RootEmailVerificationOption = rootEmailVerification;
            RootGroupProtectionOption = rootGroupProtection;
            RootValuesOption = rootValues;
            ShowPrivateRepoWatermarkOption = showPrivateRepoWatermark;
            ValuesOption = values;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of RootValues
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<OrganizationSettingValue?> RootValuesOption { get; private set; }

        /// <summary>
        /// Gets or Sets RootValues
        /// </summary>
        [JsonPropertyName("root_values")]
        public OrganizationSettingValue? RootValues { get { return this.RootValuesOption; } set { this.RootValuesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Values
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<OrganizationSettingValue?> ValuesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [JsonPropertyName("values")]
        public OrganizationSettingValue? Values { get { return this.ValuesOption; } set { this.ValuesOption = new(value); } }

        /// <summary>
        /// Used to track the state of CanShowMembers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CanShowMembersOption { get; private set; }

        /// <summary>
        /// 上级group设置了hide_members为1，则下级都不能显示
        /// </summary>
        /// <value>上级group设置了hide_members为1，则下级都不能显示</value>
        [JsonPropertyName("can_show_members")]
        public bool? CanShowMembers { get { return this.CanShowMembersOption; } set { this.CanShowMembersOption = new(value); } }

        /// <summary>
        /// Used to track the state of CanShowSubGroups
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CanShowSubGroupsOption { get; private set; }

        /// <summary>
        /// 上级group设置了hide_sub_groups为1，则下级都不能显示
        /// </summary>
        /// <value>上级group设置了hide_sub_groups为1，则下级都不能显示</value>
        [JsonPropertyName("can_show_sub_groups")]
        public bool? CanShowSubGroups { get { return this.CanShowSubGroupsOption; } set { this.CanShowSubGroupsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CanShowWatermark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CanShowWatermarkOption { get; private set; }

        /// <summary>
        /// Gets or Sets CanShowWatermark
        /// </summary>
        [JsonPropertyName("can_show_watermark")]
        public bool? CanShowWatermark { get { return this.CanShowWatermarkOption; } set { this.CanShowWatermarkOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmailVerification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailVerificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmailVerification
        /// </summary>
        [JsonPropertyName("email_verification")]
        public string? EmailVerification { get { return this.EmailVerificationOption; } set { this.EmailVerificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of GroupProtection
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> GroupProtectionOption { get; private set; }

        /// <summary>
        /// Gets or Sets GroupProtection
        /// </summary>
        [JsonPropertyName("group_protection")]
        public int? GroupProtection { get { return this.GroupProtectionOption; } set { this.GroupProtectionOption = new(value); } }

        /// <summary>
        /// Used to track the state of HideMembers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> HideMembersOption { get; private set; }

        /// <summary>
        /// 是否对外隐藏组织成员，0 - 否, 1 - 是
        /// </summary>
        /// <value>是否对外隐藏组织成员，0 - 否, 1 - 是</value>
        [JsonPropertyName("hide_members")]
        public int? HideMembers { get { return this.HideMembersOption; } set { this.HideMembersOption = new(value); } }

        /// <summary>
        /// Used to track the state of HideSubGroups
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> HideSubGroupsOption { get; private set; }

        /// <summary>
        /// 是否对外隐藏子组织，0 - 否, 1 - 是
        /// </summary>
        /// <value>是否对外隐藏子组织，0 - 否, 1 - 是</value>
        [JsonPropertyName("hide_sub_groups")]
        public int? HideSubGroups { get { return this.HideSubGroupsOption; } set { this.HideSubGroupsOption = new(value); } }

        /// <summary>
        /// Used to track the state of RootEmailVerification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RootEmailVerificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets RootEmailVerification
        /// </summary>
        [JsonPropertyName("root_email_verification")]
        public string? RootEmailVerification { get { return this.RootEmailVerificationOption; } set { this.RootEmailVerificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of RootGroupProtection
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RootGroupProtectionOption { get; private set; }

        /// <summary>
        /// Gets or Sets RootGroupProtection
        /// </summary>
        [JsonPropertyName("root_group_protection")]
        public bool? RootGroupProtection { get { return this.RootGroupProtectionOption; } set { this.RootGroupProtectionOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShowPrivateRepoWatermark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ShowPrivateRepoWatermarkOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShowPrivateRepoWatermark
        /// </summary>
        [JsonPropertyName("show_private_repo_watermark")]
        public int? ShowPrivateRepoWatermark { get { return this.ShowPrivateRepoWatermarkOption; } set { this.ShowPrivateRepoWatermarkOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoOrganizationSettingWithParent {\n");
            sb.Append("  CanShowMembers: ").Append(CanShowMembers).Append("\n");
            sb.Append("  CanShowSubGroups: ").Append(CanShowSubGroups).Append("\n");
            sb.Append("  CanShowWatermark: ").Append(CanShowWatermark).Append("\n");
            sb.Append("  EmailVerification: ").Append(EmailVerification).Append("\n");
            sb.Append("  GroupProtection: ").Append(GroupProtection).Append("\n");
            sb.Append("  HideMembers: ").Append(HideMembers).Append("\n");
            sb.Append("  HideSubGroups: ").Append(HideSubGroups).Append("\n");
            sb.Append("  RootEmailVerification: ").Append(RootEmailVerification).Append("\n");
            sb.Append("  RootGroupProtection: ").Append(RootGroupProtection).Append("\n");
            sb.Append("  RootValues: ").Append(RootValues).Append("\n");
            sb.Append("  ShowPrivateRepoWatermark: ").Append(ShowPrivateRepoWatermark).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoOrganizationSettingWithParent" />
    /// </summary>
    public class DtoOrganizationSettingWithParentJsonConverter : JsonConverter<DtoOrganizationSettingWithParent>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoOrganizationSettingWithParent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoOrganizationSettingWithParent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> canShowMembers = default;
            Option<bool?> canShowSubGroups = default;
            Option<bool?> canShowWatermark = default;
            Option<string?> emailVerification = default;
            Option<int?> groupProtection = default;
            Option<int?> hideMembers = default;
            Option<int?> hideSubGroups = default;
            Option<string?> rootEmailVerification = default;
            Option<bool?> rootGroupProtection = default;
            Option<OrganizationSettingValue?> rootValues = default;
            Option<int?> showPrivateRepoWatermark = default;
            Option<OrganizationSettingValue?> values = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "can_show_members":
                            canShowMembers = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "can_show_sub_groups":
                            canShowSubGroups = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "can_show_watermark":
                            canShowWatermark = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "email_verification":
                            emailVerification = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "group_protection":
                            groupProtection = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "hide_members":
                            hideMembers = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "hide_sub_groups":
                            hideSubGroups = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "root_email_verification":
                            rootEmailVerification = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "root_group_protection":
                            rootGroupProtection = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "root_values":
                            string? rootValuesRawValue = utf8JsonReader.GetString();
                            if (rootValuesRawValue != null)
                                rootValues = new Option<OrganizationSettingValue?>(OrganizationSettingValueValueConverter.FromStringOrDefault(rootValuesRawValue));
                            break;
                        case "show_private_repo_watermark":
                            showPrivateRepoWatermark = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "values":
                            string? valuesRawValue = utf8JsonReader.GetString();
                            if (valuesRawValue != null)
                                values = new Option<OrganizationSettingValue?>(OrganizationSettingValueValueConverter.FromStringOrDefault(valuesRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (canShowMembers.IsSet && canShowMembers.Value == null)
                throw new ArgumentNullException(nameof(canShowMembers), "Property is not nullable for class DtoOrganizationSettingWithParent.");

            if (canShowSubGroups.IsSet && canShowSubGroups.Value == null)
                throw new ArgumentNullException(nameof(canShowSubGroups), "Property is not nullable for class DtoOrganizationSettingWithParent.");

            if (canShowWatermark.IsSet && canShowWatermark.Value == null)
                throw new ArgumentNullException(nameof(canShowWatermark), "Property is not nullable for class DtoOrganizationSettingWithParent.");

            if (emailVerification.IsSet && emailVerification.Value == null)
                throw new ArgumentNullException(nameof(emailVerification), "Property is not nullable for class DtoOrganizationSettingWithParent.");

            if (groupProtection.IsSet && groupProtection.Value == null)
                throw new ArgumentNullException(nameof(groupProtection), "Property is not nullable for class DtoOrganizationSettingWithParent.");

            if (hideMembers.IsSet && hideMembers.Value == null)
                throw new ArgumentNullException(nameof(hideMembers), "Property is not nullable for class DtoOrganizationSettingWithParent.");

            if (hideSubGroups.IsSet && hideSubGroups.Value == null)
                throw new ArgumentNullException(nameof(hideSubGroups), "Property is not nullable for class DtoOrganizationSettingWithParent.");

            if (rootEmailVerification.IsSet && rootEmailVerification.Value == null)
                throw new ArgumentNullException(nameof(rootEmailVerification), "Property is not nullable for class DtoOrganizationSettingWithParent.");

            if (rootGroupProtection.IsSet && rootGroupProtection.Value == null)
                throw new ArgumentNullException(nameof(rootGroupProtection), "Property is not nullable for class DtoOrganizationSettingWithParent.");

            if (rootValues.IsSet && rootValues.Value == null)
                throw new ArgumentNullException(nameof(rootValues), "Property is not nullable for class DtoOrganizationSettingWithParent.");

            if (showPrivateRepoWatermark.IsSet && showPrivateRepoWatermark.Value == null)
                throw new ArgumentNullException(nameof(showPrivateRepoWatermark), "Property is not nullable for class DtoOrganizationSettingWithParent.");

            if (values.IsSet && values.Value == null)
                throw new ArgumentNullException(nameof(values), "Property is not nullable for class DtoOrganizationSettingWithParent.");

            return new DtoOrganizationSettingWithParent(canShowMembers, canShowSubGroups, canShowWatermark, emailVerification, groupProtection, hideMembers, hideSubGroups, rootEmailVerification, rootGroupProtection, rootValues, showPrivateRepoWatermark, values);
        }

        /// <summary>
        /// Serializes a <see cref="DtoOrganizationSettingWithParent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoOrganizationSettingWithParent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoOrganizationSettingWithParent dtoOrganizationSettingWithParent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoOrganizationSettingWithParent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoOrganizationSettingWithParent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoOrganizationSettingWithParent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoOrganizationSettingWithParent dtoOrganizationSettingWithParent, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoOrganizationSettingWithParent.EmailVerificationOption.IsSet && dtoOrganizationSettingWithParent.EmailVerification == null)
                throw new ArgumentNullException(nameof(dtoOrganizationSettingWithParent.EmailVerification), "Property is required for class DtoOrganizationSettingWithParent.");

            if (dtoOrganizationSettingWithParent.RootEmailVerificationOption.IsSet && dtoOrganizationSettingWithParent.RootEmailVerification == null)
                throw new ArgumentNullException(nameof(dtoOrganizationSettingWithParent.RootEmailVerification), "Property is required for class DtoOrganizationSettingWithParent.");

            if (dtoOrganizationSettingWithParent.CanShowMembersOption.IsSet)
                writer.WriteBoolean("can_show_members", dtoOrganizationSettingWithParent.CanShowMembersOption.Value!.Value);

            if (dtoOrganizationSettingWithParent.CanShowSubGroupsOption.IsSet)
                writer.WriteBoolean("can_show_sub_groups", dtoOrganizationSettingWithParent.CanShowSubGroupsOption.Value!.Value);

            if (dtoOrganizationSettingWithParent.CanShowWatermarkOption.IsSet)
                writer.WriteBoolean("can_show_watermark", dtoOrganizationSettingWithParent.CanShowWatermarkOption.Value!.Value);

            if (dtoOrganizationSettingWithParent.EmailVerificationOption.IsSet)
                writer.WriteString("email_verification", dtoOrganizationSettingWithParent.EmailVerification);

            if (dtoOrganizationSettingWithParent.GroupProtectionOption.IsSet)
                writer.WriteNumber("group_protection", dtoOrganizationSettingWithParent.GroupProtectionOption.Value!.Value);

            if (dtoOrganizationSettingWithParent.HideMembersOption.IsSet)
                writer.WriteNumber("hide_members", dtoOrganizationSettingWithParent.HideMembersOption.Value!.Value);

            if (dtoOrganizationSettingWithParent.HideSubGroupsOption.IsSet)
                writer.WriteNumber("hide_sub_groups", dtoOrganizationSettingWithParent.HideSubGroupsOption.Value!.Value);

            if (dtoOrganizationSettingWithParent.RootEmailVerificationOption.IsSet)
                writer.WriteString("root_email_verification", dtoOrganizationSettingWithParent.RootEmailVerification);

            if (dtoOrganizationSettingWithParent.RootGroupProtectionOption.IsSet)
                writer.WriteBoolean("root_group_protection", dtoOrganizationSettingWithParent.RootGroupProtectionOption.Value!.Value);

            if (dtoOrganizationSettingWithParent.RootValuesOption.IsSet)
            {
                var rootValuesRawValue = OrganizationSettingValueValueConverter.ToJsonValue(dtoOrganizationSettingWithParent.RootValues!.Value);
                writer.WriteNumber("root_values", rootValuesRawValue);
            }
            if (dtoOrganizationSettingWithParent.ShowPrivateRepoWatermarkOption.IsSet)
                writer.WriteNumber("show_private_repo_watermark", dtoOrganizationSettingWithParent.ShowPrivateRepoWatermarkOption.Value!.Value);

            if (dtoOrganizationSettingWithParent.ValuesOption.IsSet)
            {
                var valuesRawValue = OrganizationSettingValueValueConverter.ToJsonValue(dtoOrganizationSettingWithParent.Values!.Value);
                writer.WriteNumber("values", valuesRawValue);
            }
        }
    }
}
