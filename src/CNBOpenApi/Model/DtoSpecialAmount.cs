// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoSpecialAmount
    /// </summary>
    public partial class DtoSpecialAmount : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoSpecialAmount" /> class.
        /// </summary>
        /// <param name="computeBuildCorehour">computeBuildCorehour</param>
        /// <param name="computeBuildDesc">computeBuildDesc</param>
        /// <param name="computeBuildExpire">computeBuildExpire</param>
        /// <param name="computeDevelopCorehour">computeDevelopCorehour</param>
        /// <param name="computeDevelopDesc">computeDevelopDesc</param>
        /// <param name="computeDevelopExpire">computeDevelopExpire</param>
        /// <param name="storageGitDesc">storageGitDesc</param>
        /// <param name="storageGitExpire">storageGitExpire</param>
        /// <param name="storageGitGib">storageGitGib</param>
        /// <param name="storageObjectDesc">storageObjectDesc</param>
        /// <param name="storageObjectExpire">storageObjectExpire</param>
        /// <param name="storageObjectGib">storageObjectGib</param>
        [JsonConstructor]
        public DtoSpecialAmount(Option<int?> computeBuildCorehour = default, Option<string?> computeBuildDesc = default, Option<string?> computeBuildExpire = default, Option<int?> computeDevelopCorehour = default, Option<string?> computeDevelopDesc = default, Option<string?> computeDevelopExpire = default, Option<string?> storageGitDesc = default, Option<string?> storageGitExpire = default, Option<int?> storageGitGib = default, Option<string?> storageObjectDesc = default, Option<string?> storageObjectExpire = default, Option<int?> storageObjectGib = default)
        {
            ComputeBuildCorehourOption = computeBuildCorehour;
            ComputeBuildDescOption = computeBuildDesc;
            ComputeBuildExpireOption = computeBuildExpire;
            ComputeDevelopCorehourOption = computeDevelopCorehour;
            ComputeDevelopDescOption = computeDevelopDesc;
            ComputeDevelopExpireOption = computeDevelopExpire;
            StorageGitDescOption = storageGitDesc;
            StorageGitExpireOption = storageGitExpire;
            StorageGitGibOption = storageGitGib;
            StorageObjectDescOption = storageObjectDesc;
            StorageObjectExpireOption = storageObjectExpire;
            StorageObjectGibOption = storageObjectGib;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ComputeBuildCorehour
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ComputeBuildCorehourOption { get; private set; }

        /// <summary>
        /// Gets or Sets ComputeBuildCorehour
        /// </summary>
        [JsonPropertyName("compute_build_corehour")]
        public int? ComputeBuildCorehour { get { return this.ComputeBuildCorehourOption; } set { this.ComputeBuildCorehourOption = new(value); } }

        /// <summary>
        /// Used to track the state of ComputeBuildDesc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ComputeBuildDescOption { get; private set; }

        /// <summary>
        /// Gets or Sets ComputeBuildDesc
        /// </summary>
        [JsonPropertyName("compute_build_desc")]
        public string? ComputeBuildDesc { get { return this.ComputeBuildDescOption; } set { this.ComputeBuildDescOption = new(value); } }

        /// <summary>
        /// Used to track the state of ComputeBuildExpire
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ComputeBuildExpireOption { get; private set; }

        /// <summary>
        /// Gets or Sets ComputeBuildExpire
        /// </summary>
        [JsonPropertyName("compute_build_expire")]
        public string? ComputeBuildExpire { get { return this.ComputeBuildExpireOption; } set { this.ComputeBuildExpireOption = new(value); } }

        /// <summary>
        /// Used to track the state of ComputeDevelopCorehour
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ComputeDevelopCorehourOption { get; private set; }

        /// <summary>
        /// Gets or Sets ComputeDevelopCorehour
        /// </summary>
        [JsonPropertyName("compute_develop_corehour")]
        public int? ComputeDevelopCorehour { get { return this.ComputeDevelopCorehourOption; } set { this.ComputeDevelopCorehourOption = new(value); } }

        /// <summary>
        /// Used to track the state of ComputeDevelopDesc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ComputeDevelopDescOption { get; private set; }

        /// <summary>
        /// Gets or Sets ComputeDevelopDesc
        /// </summary>
        [JsonPropertyName("compute_develop_desc")]
        public string? ComputeDevelopDesc { get { return this.ComputeDevelopDescOption; } set { this.ComputeDevelopDescOption = new(value); } }

        /// <summary>
        /// Used to track the state of ComputeDevelopExpire
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ComputeDevelopExpireOption { get; private set; }

        /// <summary>
        /// Gets or Sets ComputeDevelopExpire
        /// </summary>
        [JsonPropertyName("compute_develop_expire")]
        public string? ComputeDevelopExpire { get { return this.ComputeDevelopExpireOption; } set { this.ComputeDevelopExpireOption = new(value); } }

        /// <summary>
        /// Used to track the state of StorageGitDesc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StorageGitDescOption { get; private set; }

        /// <summary>
        /// Gets or Sets StorageGitDesc
        /// </summary>
        [JsonPropertyName("storage_git_desc")]
        public string? StorageGitDesc { get { return this.StorageGitDescOption; } set { this.StorageGitDescOption = new(value); } }

        /// <summary>
        /// Used to track the state of StorageGitExpire
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StorageGitExpireOption { get; private set; }

        /// <summary>
        /// Gets or Sets StorageGitExpire
        /// </summary>
        [JsonPropertyName("storage_git_expire")]
        public string? StorageGitExpire { get { return this.StorageGitExpireOption; } set { this.StorageGitExpireOption = new(value); } }

        /// <summary>
        /// Used to track the state of StorageGitGib
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StorageGitGibOption { get; private set; }

        /// <summary>
        /// Gets or Sets StorageGitGib
        /// </summary>
        [JsonPropertyName("storage_git_gib")]
        public int? StorageGitGib { get { return this.StorageGitGibOption; } set { this.StorageGitGibOption = new(value); } }

        /// <summary>
        /// Used to track the state of StorageObjectDesc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StorageObjectDescOption { get; private set; }

        /// <summary>
        /// Gets or Sets StorageObjectDesc
        /// </summary>
        [JsonPropertyName("storage_object_desc")]
        public string? StorageObjectDesc { get { return this.StorageObjectDescOption; } set { this.StorageObjectDescOption = new(value); } }

        /// <summary>
        /// Used to track the state of StorageObjectExpire
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StorageObjectExpireOption { get; private set; }

        /// <summary>
        /// Gets or Sets StorageObjectExpire
        /// </summary>
        [JsonPropertyName("storage_object_expire")]
        public string? StorageObjectExpire { get { return this.StorageObjectExpireOption; } set { this.StorageObjectExpireOption = new(value); } }

        /// <summary>
        /// Used to track the state of StorageObjectGib
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StorageObjectGibOption { get; private set; }

        /// <summary>
        /// Gets or Sets StorageObjectGib
        /// </summary>
        [JsonPropertyName("storage_object_gib")]
        public int? StorageObjectGib { get { return this.StorageObjectGibOption; } set { this.StorageObjectGibOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoSpecialAmount {\n");
            sb.Append("  ComputeBuildCorehour: ").Append(ComputeBuildCorehour).Append("\n");
            sb.Append("  ComputeBuildDesc: ").Append(ComputeBuildDesc).Append("\n");
            sb.Append("  ComputeBuildExpire: ").Append(ComputeBuildExpire).Append("\n");
            sb.Append("  ComputeDevelopCorehour: ").Append(ComputeDevelopCorehour).Append("\n");
            sb.Append("  ComputeDevelopDesc: ").Append(ComputeDevelopDesc).Append("\n");
            sb.Append("  ComputeDevelopExpire: ").Append(ComputeDevelopExpire).Append("\n");
            sb.Append("  StorageGitDesc: ").Append(StorageGitDesc).Append("\n");
            sb.Append("  StorageGitExpire: ").Append(StorageGitExpire).Append("\n");
            sb.Append("  StorageGitGib: ").Append(StorageGitGib).Append("\n");
            sb.Append("  StorageObjectDesc: ").Append(StorageObjectDesc).Append("\n");
            sb.Append("  StorageObjectExpire: ").Append(StorageObjectExpire).Append("\n");
            sb.Append("  StorageObjectGib: ").Append(StorageObjectGib).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoSpecialAmount" />
    /// </summary>
    public class DtoSpecialAmountJsonConverter : JsonConverter<DtoSpecialAmount>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoSpecialAmount" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoSpecialAmount Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> computeBuildCorehour = default;
            Option<string?> computeBuildDesc = default;
            Option<string?> computeBuildExpire = default;
            Option<int?> computeDevelopCorehour = default;
            Option<string?> computeDevelopDesc = default;
            Option<string?> computeDevelopExpire = default;
            Option<string?> storageGitDesc = default;
            Option<string?> storageGitExpire = default;
            Option<int?> storageGitGib = default;
            Option<string?> storageObjectDesc = default;
            Option<string?> storageObjectExpire = default;
            Option<int?> storageObjectGib = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "compute_build_corehour":
                            computeBuildCorehour = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "compute_build_desc":
                            computeBuildDesc = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "compute_build_expire":
                            computeBuildExpire = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "compute_develop_corehour":
                            computeDevelopCorehour = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "compute_develop_desc":
                            computeDevelopDesc = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "compute_develop_expire":
                            computeDevelopExpire = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "storage_git_desc":
                            storageGitDesc = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "storage_git_expire":
                            storageGitExpire = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "storage_git_gib":
                            storageGitGib = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "storage_object_desc":
                            storageObjectDesc = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "storage_object_expire":
                            storageObjectExpire = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "storage_object_gib":
                            storageObjectGib = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (computeBuildCorehour.IsSet && computeBuildCorehour.Value == null)
                throw new ArgumentNullException(nameof(computeBuildCorehour), "Property is not nullable for class DtoSpecialAmount.");

            if (computeBuildDesc.IsSet && computeBuildDesc.Value == null)
                throw new ArgumentNullException(nameof(computeBuildDesc), "Property is not nullable for class DtoSpecialAmount.");

            if (computeBuildExpire.IsSet && computeBuildExpire.Value == null)
                throw new ArgumentNullException(nameof(computeBuildExpire), "Property is not nullable for class DtoSpecialAmount.");

            if (computeDevelopCorehour.IsSet && computeDevelopCorehour.Value == null)
                throw new ArgumentNullException(nameof(computeDevelopCorehour), "Property is not nullable for class DtoSpecialAmount.");

            if (computeDevelopDesc.IsSet && computeDevelopDesc.Value == null)
                throw new ArgumentNullException(nameof(computeDevelopDesc), "Property is not nullable for class DtoSpecialAmount.");

            if (computeDevelopExpire.IsSet && computeDevelopExpire.Value == null)
                throw new ArgumentNullException(nameof(computeDevelopExpire), "Property is not nullable for class DtoSpecialAmount.");

            if (storageGitDesc.IsSet && storageGitDesc.Value == null)
                throw new ArgumentNullException(nameof(storageGitDesc), "Property is not nullable for class DtoSpecialAmount.");

            if (storageGitExpire.IsSet && storageGitExpire.Value == null)
                throw new ArgumentNullException(nameof(storageGitExpire), "Property is not nullable for class DtoSpecialAmount.");

            if (storageGitGib.IsSet && storageGitGib.Value == null)
                throw new ArgumentNullException(nameof(storageGitGib), "Property is not nullable for class DtoSpecialAmount.");

            if (storageObjectDesc.IsSet && storageObjectDesc.Value == null)
                throw new ArgumentNullException(nameof(storageObjectDesc), "Property is not nullable for class DtoSpecialAmount.");

            if (storageObjectExpire.IsSet && storageObjectExpire.Value == null)
                throw new ArgumentNullException(nameof(storageObjectExpire), "Property is not nullable for class DtoSpecialAmount.");

            if (storageObjectGib.IsSet && storageObjectGib.Value == null)
                throw new ArgumentNullException(nameof(storageObjectGib), "Property is not nullable for class DtoSpecialAmount.");

            return new DtoSpecialAmount(computeBuildCorehour, computeBuildDesc, computeBuildExpire, computeDevelopCorehour, computeDevelopDesc, computeDevelopExpire, storageGitDesc, storageGitExpire, storageGitGib, storageObjectDesc, storageObjectExpire, storageObjectGib);
        }

        /// <summary>
        /// Serializes a <see cref="DtoSpecialAmount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoSpecialAmount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoSpecialAmount dtoSpecialAmount, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoSpecialAmount, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoSpecialAmount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoSpecialAmount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoSpecialAmount dtoSpecialAmount, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoSpecialAmount.ComputeBuildDescOption.IsSet && dtoSpecialAmount.ComputeBuildDesc == null)
                throw new ArgumentNullException(nameof(dtoSpecialAmount.ComputeBuildDesc), "Property is required for class DtoSpecialAmount.");

            if (dtoSpecialAmount.ComputeBuildExpireOption.IsSet && dtoSpecialAmount.ComputeBuildExpire == null)
                throw new ArgumentNullException(nameof(dtoSpecialAmount.ComputeBuildExpire), "Property is required for class DtoSpecialAmount.");

            if (dtoSpecialAmount.ComputeDevelopDescOption.IsSet && dtoSpecialAmount.ComputeDevelopDesc == null)
                throw new ArgumentNullException(nameof(dtoSpecialAmount.ComputeDevelopDesc), "Property is required for class DtoSpecialAmount.");

            if (dtoSpecialAmount.ComputeDevelopExpireOption.IsSet && dtoSpecialAmount.ComputeDevelopExpire == null)
                throw new ArgumentNullException(nameof(dtoSpecialAmount.ComputeDevelopExpire), "Property is required for class DtoSpecialAmount.");

            if (dtoSpecialAmount.StorageGitDescOption.IsSet && dtoSpecialAmount.StorageGitDesc == null)
                throw new ArgumentNullException(nameof(dtoSpecialAmount.StorageGitDesc), "Property is required for class DtoSpecialAmount.");

            if (dtoSpecialAmount.StorageGitExpireOption.IsSet && dtoSpecialAmount.StorageGitExpire == null)
                throw new ArgumentNullException(nameof(dtoSpecialAmount.StorageGitExpire), "Property is required for class DtoSpecialAmount.");

            if (dtoSpecialAmount.StorageObjectDescOption.IsSet && dtoSpecialAmount.StorageObjectDesc == null)
                throw new ArgumentNullException(nameof(dtoSpecialAmount.StorageObjectDesc), "Property is required for class DtoSpecialAmount.");

            if (dtoSpecialAmount.StorageObjectExpireOption.IsSet && dtoSpecialAmount.StorageObjectExpire == null)
                throw new ArgumentNullException(nameof(dtoSpecialAmount.StorageObjectExpire), "Property is required for class DtoSpecialAmount.");

            if (dtoSpecialAmount.ComputeBuildCorehourOption.IsSet)
                writer.WriteNumber("compute_build_corehour", dtoSpecialAmount.ComputeBuildCorehourOption.Value!.Value);

            if (dtoSpecialAmount.ComputeBuildDescOption.IsSet)
                writer.WriteString("compute_build_desc", dtoSpecialAmount.ComputeBuildDesc);

            if (dtoSpecialAmount.ComputeBuildExpireOption.IsSet)
                writer.WriteString("compute_build_expire", dtoSpecialAmount.ComputeBuildExpire);

            if (dtoSpecialAmount.ComputeDevelopCorehourOption.IsSet)
                writer.WriteNumber("compute_develop_corehour", dtoSpecialAmount.ComputeDevelopCorehourOption.Value!.Value);

            if (dtoSpecialAmount.ComputeDevelopDescOption.IsSet)
                writer.WriteString("compute_develop_desc", dtoSpecialAmount.ComputeDevelopDesc);

            if (dtoSpecialAmount.ComputeDevelopExpireOption.IsSet)
                writer.WriteString("compute_develop_expire", dtoSpecialAmount.ComputeDevelopExpire);

            if (dtoSpecialAmount.StorageGitDescOption.IsSet)
                writer.WriteString("storage_git_desc", dtoSpecialAmount.StorageGitDesc);

            if (dtoSpecialAmount.StorageGitExpireOption.IsSet)
                writer.WriteString("storage_git_expire", dtoSpecialAmount.StorageGitExpire);

            if (dtoSpecialAmount.StorageGitGibOption.IsSet)
                writer.WriteNumber("storage_git_gib", dtoSpecialAmount.StorageGitGibOption.Value!.Value);

            if (dtoSpecialAmount.StorageObjectDescOption.IsSet)
                writer.WriteString("storage_object_desc", dtoSpecialAmount.StorageObjectDesc);

            if (dtoSpecialAmount.StorageObjectExpireOption.IsSet)
                writer.WriteString("storage_object_expire", dtoSpecialAmount.StorageObjectExpire);

            if (dtoSpecialAmount.StorageObjectGibOption.IsSet)
                writer.WriteNumber("storage_object_gib", dtoSpecialAmount.StorageObjectGibOption.Value!.Value);
        }
    }
}
