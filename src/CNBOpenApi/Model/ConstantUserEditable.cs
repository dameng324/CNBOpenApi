// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// Defines constant.UserEditable
    /// </summary>
    public enum ConstantUserEditable
    {
        /// <summary>
        /// Enum UserEmailEditable for value: 1
        /// </summary>
        UserEmailEditable = 1,

        /// <summary>
        /// Enum UserNickEditable for value: 2
        /// </summary>
        UserNickEditable = 2,

        /// <summary>
        /// Enum UserNameEditable for value: 4
        /// </summary>
        UserNameEditable = 4,

        /// <summary>
        /// Enum UserAvatarEditable for value: 8
        /// </summary>
        UserAvatarEditable = 8,

        /// <summary>
        /// Enum UserLogOffEditable for value: 16
        /// </summary>
        UserLogOffEditable = 16,

        /// <summary>
        /// Enum UserSyncNickAvatarEditable for value: 32
        /// </summary>
        UserSyncNickAvatarEditable = 32
    }

    /// <summary>
    /// Converts <see cref="ConstantUserEditable"/> to and from the JSON value
    /// </summary>
    public static class ConstantUserEditableValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ConstantUserEditable"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConstantUserEditable FromString(string value)
        {
            if (value.Equals((1).ToString()))
                return ConstantUserEditable.UserEmailEditable;

            if (value.Equals((2).ToString()))
                return ConstantUserEditable.UserNickEditable;

            if (value.Equals((4).ToString()))
                return ConstantUserEditable.UserNameEditable;

            if (value.Equals((8).ToString()))
                return ConstantUserEditable.UserAvatarEditable;

            if (value.Equals((16).ToString()))
                return ConstantUserEditable.UserLogOffEditable;

            if (value.Equals((32).ToString()))
                return ConstantUserEditable.UserSyncNickAvatarEditable;

            throw new NotImplementedException($"Could not convert value to type ConstantUserEditable: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ConstantUserEditable"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConstantUserEditable? FromStringOrDefault(string value)
        {
            if (value.Equals((1).ToString()))
                return ConstantUserEditable.UserEmailEditable;

            if (value.Equals((2).ToString()))
                return ConstantUserEditable.UserNickEditable;

            if (value.Equals((4).ToString()))
                return ConstantUserEditable.UserNameEditable;

            if (value.Equals((8).ToString()))
                return ConstantUserEditable.UserAvatarEditable;

            if (value.Equals((16).ToString()))
                return ConstantUserEditable.UserLogOffEditable;

            if (value.Equals((32).ToString()))
                return ConstantUserEditable.UserSyncNickAvatarEditable;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ConstantUserEditable"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(ConstantUserEditable value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConstantUserEditable"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ConstantUserEditableJsonConverter : JsonConverter<ConstantUserEditable>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ConstantUserEditable Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ConstantUserEditable? result = rawValue == null
                ? null
                : ConstantUserEditableValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ConstantUserEditable to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="constantUserEditable"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ConstantUserEditable constantUserEditable, JsonSerializerOptions options)
        {
            writer.WriteStringValue(constantUserEditable.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConstantUserEditable"/>
    /// </summary>
    public class ConstantUserEditableNullableJsonConverter : JsonConverter<ConstantUserEditable?>
    {
        /// <summary>
        /// Returns a ConstantUserEditable from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ConstantUserEditable? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ConstantUserEditable? result = rawValue == null
                ? null
                : ConstantUserEditableValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="constantUserEditable"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ConstantUserEditable? constantUserEditable, JsonSerializerOptions options)
        {
            writer.WriteStringValue(constantUserEditable?.ToString() ?? "null");
        }
    }
}
