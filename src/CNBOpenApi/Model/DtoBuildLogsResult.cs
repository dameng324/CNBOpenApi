// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoBuildLogsResult
    /// </summary>
    public partial class DtoBuildLogsResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoBuildLogsResult" /> class.
        /// </summary>
        /// <param name="data">构建数据列表</param>
        /// <param name="init">当前仓库是否已经有构建记录，1 表示有构建记录，0 表示没有构建记录</param>
        /// <param name="timestamp">当前时间戳</param>
        /// <param name="total">总数</param>
        [JsonConstructor]
        public DtoBuildLogsResult(Option<List<DtoLogInfo>?> data = default, Option<bool?> init = default, Option<int?> timestamp = default, Option<int?> total = default)
        {
            DataOption = data;
            InitOption = init;
            TimestampOption = timestamp;
            TotalOption = total;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoLogInfo>?> DataOption { get; private set; }

        /// <summary>
        /// 构建数据列表
        /// </summary>
        /// <value>构建数据列表</value>
        [JsonPropertyName("data")]
        public List<DtoLogInfo>? Data { get { return this.DataOption; } set { this.DataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Init
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> InitOption { get; private set; }

        /// <summary>
        /// 当前仓库是否已经有构建记录，1 表示有构建记录，0 表示没有构建记录
        /// </summary>
        /// <value>当前仓库是否已经有构建记录，1 表示有构建记录，0 表示没有构建记录</value>
        [JsonPropertyName("init")]
        public bool? Init { get { return this.InitOption; } set { this.InitOption = new(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TimestampOption { get; private set; }

        /// <summary>
        /// 当前时间戳
        /// </summary>
        /// <value>当前时间戳</value>
        [JsonPropertyName("timestamp")]
        public int? Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new(value); } }

        /// <summary>
        /// Used to track the state of Total
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalOption { get; private set; }

        /// <summary>
        /// 总数
        /// </summary>
        /// <value>总数</value>
        [JsonPropertyName("total")]
        public int? Total { get { return this.TotalOption; } set { this.TotalOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoBuildLogsResult {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Init: ").Append(Init).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoBuildLogsResult" />
    /// </summary>
    public class DtoBuildLogsResultJsonConverter : JsonConverter<DtoBuildLogsResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoBuildLogsResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoBuildLogsResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<DtoLogInfo>?> data = default;
            Option<bool?> init = default;
            Option<int?> timestamp = default;
            Option<int?> total = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "data":
                            data = new Option<List<DtoLogInfo>?>(JsonSerializer.Deserialize<List<DtoLogInfo>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "init":
                            init = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "timestamp":
                            timestamp = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "total":
                            total = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class DtoBuildLogsResult.");

            if (init.IsSet && init.Value == null)
                throw new ArgumentNullException(nameof(init), "Property is not nullable for class DtoBuildLogsResult.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class DtoBuildLogsResult.");

            if (total.IsSet && total.Value == null)
                throw new ArgumentNullException(nameof(total), "Property is not nullable for class DtoBuildLogsResult.");

            return new DtoBuildLogsResult(data, init, timestamp, total);
        }

        /// <summary>
        /// Serializes a <see cref="DtoBuildLogsResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoBuildLogsResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoBuildLogsResult dtoBuildLogsResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoBuildLogsResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoBuildLogsResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoBuildLogsResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoBuildLogsResult dtoBuildLogsResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoBuildLogsResult.DataOption.IsSet && dtoBuildLogsResult.Data == null)
                throw new ArgumentNullException(nameof(dtoBuildLogsResult.Data), "Property is required for class DtoBuildLogsResult.");

            if (dtoBuildLogsResult.DataOption.IsSet)
            {
                writer.WritePropertyName("data");
                JsonSerializer.Serialize(writer, dtoBuildLogsResult.Data, jsonSerializerOptions);
            }
            if (dtoBuildLogsResult.InitOption.IsSet)
                writer.WriteBoolean("init", dtoBuildLogsResult.InitOption.Value!.Value);

            if (dtoBuildLogsResult.TimestampOption.IsSet)
                writer.WriteNumber("timestamp", dtoBuildLogsResult.TimestampOption.Value!.Value);

            if (dtoBuildLogsResult.TotalOption.IsSet)
                writer.WriteNumber("total", dtoBuildLogsResult.TotalOption.Value!.Value);
        }
    }
}
