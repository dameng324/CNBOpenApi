// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// ApiCommitObjectVerification
    /// </summary>
    public partial class ApiCommitObjectVerification : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiCommitObjectVerification" /> class.
        /// </summary>
        /// <param name="payload">payload</param>
        /// <param name="resone">resone</param>
        /// <param name="signature">signature</param>
        /// <param name="verified">verified</param>
        [JsonConstructor]
        public ApiCommitObjectVerification(Option<string?> payload = default, Option<string?> resone = default, Option<string?> signature = default, Option<bool?> verified = default)
        {
            PayloadOption = payload;
            ResoneOption = resone;
            SignatureOption = signature;
            VerifiedOption = verified;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Payload
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PayloadOption { get; private set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [JsonPropertyName("payload")]
        public string? Payload { get { return this.PayloadOption; } set { this.PayloadOption = new(value); } }

        /// <summary>
        /// Used to track the state of Resone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ResoneOption { get; private set; }

        /// <summary>
        /// Gets or Sets Resone
        /// </summary>
        [JsonPropertyName("resone")]
        public string? Resone { get { return this.ResoneOption; } set { this.ResoneOption = new(value); } }

        /// <summary>
        /// Used to track the state of Signature
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SignatureOption { get; private set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [JsonPropertyName("signature")]
        public string? Signature { get { return this.SignatureOption; } set { this.SignatureOption = new(value); } }

        /// <summary>
        /// Used to track the state of Verified
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> VerifiedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Verified
        /// </summary>
        [JsonPropertyName("verified")]
        public bool? Verified { get { return this.VerifiedOption; } set { this.VerifiedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiCommitObjectVerification {\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  Resone: ").Append(Resone).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApiCommitObjectVerification" />
    /// </summary>
    public class ApiCommitObjectVerificationJsonConverter : JsonConverter<ApiCommitObjectVerification>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApiCommitObjectVerification" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApiCommitObjectVerification Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> payload = default;
            Option<string?> resone = default;
            Option<string?> signature = default;
            Option<bool?> verified = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "payload":
                            payload = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "resone":
                            resone = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "signature":
                            signature = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "verified":
                            verified = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (payload.IsSet && payload.Value == null)
                throw new ArgumentNullException(nameof(payload), "Property is not nullable for class ApiCommitObjectVerification.");

            if (resone.IsSet && resone.Value == null)
                throw new ArgumentNullException(nameof(resone), "Property is not nullable for class ApiCommitObjectVerification.");

            if (signature.IsSet && signature.Value == null)
                throw new ArgumentNullException(nameof(signature), "Property is not nullable for class ApiCommitObjectVerification.");

            if (verified.IsSet && verified.Value == null)
                throw new ArgumentNullException(nameof(verified), "Property is not nullable for class ApiCommitObjectVerification.");

            return new ApiCommitObjectVerification(payload, resone, signature, verified);
        }

        /// <summary>
        /// Serializes a <see cref="ApiCommitObjectVerification" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiCommitObjectVerification"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApiCommitObjectVerification apiCommitObjectVerification, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, apiCommitObjectVerification, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApiCommitObjectVerification" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiCommitObjectVerification"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApiCommitObjectVerification apiCommitObjectVerification, JsonSerializerOptions jsonSerializerOptions)
        {
            if (apiCommitObjectVerification.PayloadOption.IsSet && apiCommitObjectVerification.Payload == null)
                throw new ArgumentNullException(nameof(apiCommitObjectVerification.Payload), "Property is required for class ApiCommitObjectVerification.");

            if (apiCommitObjectVerification.ResoneOption.IsSet && apiCommitObjectVerification.Resone == null)
                throw new ArgumentNullException(nameof(apiCommitObjectVerification.Resone), "Property is required for class ApiCommitObjectVerification.");

            if (apiCommitObjectVerification.SignatureOption.IsSet && apiCommitObjectVerification.Signature == null)
                throw new ArgumentNullException(nameof(apiCommitObjectVerification.Signature), "Property is required for class ApiCommitObjectVerification.");

            if (apiCommitObjectVerification.PayloadOption.IsSet)
                writer.WriteString("payload", apiCommitObjectVerification.Payload);

            if (apiCommitObjectVerification.ResoneOption.IsSet)
                writer.WriteString("resone", apiCommitObjectVerification.Resone);

            if (apiCommitObjectVerification.SignatureOption.IsSet)
                writer.WriteString("signature", apiCommitObjectVerification.Signature);

            if (apiCommitObjectVerification.VerifiedOption.IsSet)
                writer.WriteBoolean("verified", apiCommitObjectVerification.VerifiedOption.Value!.Value);
        }
    }
}
