// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebPullRawDiff
    /// </summary>
    public partial class WebPullRawDiff : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebPullRawDiff" /> class.
        /// </summary>
        /// <param name="baseCommit">baseCommit</param>
        /// <param name="diff">diff</param>
        /// <param name="headCommit">headCommit</param>
        /// <param name="mergeBaseCommit">mergeBaseCommit</param>
        [JsonConstructor]
        public WebPullRawDiff(Option<string?> baseCommit = default, Option<string?> diff = default, Option<string?> headCommit = default, Option<string?> mergeBaseCommit = default)
        {
            BaseCommitOption = baseCommit;
            DiffOption = diff;
            HeadCommitOption = headCommit;
            MergeBaseCommitOption = mergeBaseCommit;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BaseCommit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BaseCommitOption { get; private set; }

        /// <summary>
        /// Gets or Sets BaseCommit
        /// </summary>
        [JsonPropertyName("base_commit")]
        public string? BaseCommit { get { return this.BaseCommitOption; } set { this.BaseCommitOption = new(value); } }

        /// <summary>
        /// Used to track the state of Diff
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DiffOption { get; private set; }

        /// <summary>
        /// Gets or Sets Diff
        /// </summary>
        [JsonPropertyName("diff")]
        public string? Diff { get { return this.DiffOption; } set { this.DiffOption = new(value); } }

        /// <summary>
        /// Used to track the state of HeadCommit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HeadCommitOption { get; private set; }

        /// <summary>
        /// Gets or Sets HeadCommit
        /// </summary>
        [JsonPropertyName("head_commit")]
        public string? HeadCommit { get { return this.HeadCommitOption; } set { this.HeadCommitOption = new(value); } }

        /// <summary>
        /// Used to track the state of MergeBaseCommit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MergeBaseCommitOption { get; private set; }

        /// <summary>
        /// Gets or Sets MergeBaseCommit
        /// </summary>
        [JsonPropertyName("merge_base_commit")]
        public string? MergeBaseCommit { get { return this.MergeBaseCommitOption; } set { this.MergeBaseCommitOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebPullRawDiff {\n");
            sb.Append("  BaseCommit: ").Append(BaseCommit).Append("\n");
            sb.Append("  Diff: ").Append(Diff).Append("\n");
            sb.Append("  HeadCommit: ").Append(HeadCommit).Append("\n");
            sb.Append("  MergeBaseCommit: ").Append(MergeBaseCommit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebPullRawDiff" />
    /// </summary>
    public class WebPullRawDiffJsonConverter : JsonConverter<WebPullRawDiff>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebPullRawDiff" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebPullRawDiff Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> baseCommit = default;
            Option<string?> diff = default;
            Option<string?> headCommit = default;
            Option<string?> mergeBaseCommit = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "base_commit":
                            baseCommit = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "diff":
                            diff = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "head_commit":
                            headCommit = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "merge_base_commit":
                            mergeBaseCommit = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (baseCommit.IsSet && baseCommit.Value == null)
                throw new ArgumentNullException(nameof(baseCommit), "Property is not nullable for class WebPullRawDiff.");

            if (diff.IsSet && diff.Value == null)
                throw new ArgumentNullException(nameof(diff), "Property is not nullable for class WebPullRawDiff.");

            if (headCommit.IsSet && headCommit.Value == null)
                throw new ArgumentNullException(nameof(headCommit), "Property is not nullable for class WebPullRawDiff.");

            if (mergeBaseCommit.IsSet && mergeBaseCommit.Value == null)
                throw new ArgumentNullException(nameof(mergeBaseCommit), "Property is not nullable for class WebPullRawDiff.");

            return new WebPullRawDiff(baseCommit, diff, headCommit, mergeBaseCommit);
        }

        /// <summary>
        /// Serializes a <see cref="WebPullRawDiff" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webPullRawDiff"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebPullRawDiff webPullRawDiff, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webPullRawDiff, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebPullRawDiff" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webPullRawDiff"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebPullRawDiff webPullRawDiff, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webPullRawDiff.BaseCommitOption.IsSet && webPullRawDiff.BaseCommit == null)
                throw new ArgumentNullException(nameof(webPullRawDiff.BaseCommit), "Property is required for class WebPullRawDiff.");

            if (webPullRawDiff.DiffOption.IsSet && webPullRawDiff.Diff == null)
                throw new ArgumentNullException(nameof(webPullRawDiff.Diff), "Property is required for class WebPullRawDiff.");

            if (webPullRawDiff.HeadCommitOption.IsSet && webPullRawDiff.HeadCommit == null)
                throw new ArgumentNullException(nameof(webPullRawDiff.HeadCommit), "Property is required for class WebPullRawDiff.");

            if (webPullRawDiff.MergeBaseCommitOption.IsSet && webPullRawDiff.MergeBaseCommit == null)
                throw new ArgumentNullException(nameof(webPullRawDiff.MergeBaseCommit), "Property is required for class WebPullRawDiff.");

            if (webPullRawDiff.BaseCommitOption.IsSet)
                writer.WriteString("base_commit", webPullRawDiff.BaseCommit);

            if (webPullRawDiff.DiffOption.IsSet)
                writer.WriteString("diff", webPullRawDiff.Diff);

            if (webPullRawDiff.HeadCommitOption.IsSet)
                writer.WriteString("head_commit", webPullRawDiff.HeadCommit);

            if (webPullRawDiff.MergeBaseCommitOption.IsSet)
                writer.WriteString("merge_base_commit", webPullRawDiff.MergeBaseCommit);
        }
    }
}
