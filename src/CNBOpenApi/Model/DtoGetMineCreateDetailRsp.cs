// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoGetMineCreateDetailRsp
    /// </summary>
    public partial class DtoGetMineCreateDetailRsp : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoGetMineCreateDetailRsp" /> class.
        /// </summary>
        /// <param name="issueDatas">issueDatas</param>
        /// <param name="mineType">mineType</param>
        /// <param name="pullRequestDatas">pullRequestDatas</param>
        [JsonConstructor]
        public DtoGetMineCreateDetailRsp(Option<List<DtoIssueData>?> issueDatas = default, Option<string?> mineType = default, Option<List<DtoPullRequestData>?> pullRequestDatas = default)
        {
            IssueDatasOption = issueDatas;
            MineTypeOption = mineType;
            PullRequestDatasOption = pullRequestDatas;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of IssueDatas
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoIssueData>?> IssueDatasOption { get; private set; }

        /// <summary>
        /// Gets or Sets IssueDatas
        /// </summary>
        [JsonPropertyName("issue_datas")]
        public List<DtoIssueData>? IssueDatas { get { return this.IssueDatasOption; } set { this.IssueDatasOption = new(value); } }

        /// <summary>
        /// Used to track the state of MineType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MineTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets MineType
        /// </summary>
        [JsonPropertyName("mine_type")]
        public string? MineType { get { return this.MineTypeOption; } set { this.MineTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of PullRequestDatas
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoPullRequestData>?> PullRequestDatasOption { get; private set; }

        /// <summary>
        /// Gets or Sets PullRequestDatas
        /// </summary>
        [JsonPropertyName("pull_request_datas")]
        public List<DtoPullRequestData>? PullRequestDatas { get { return this.PullRequestDatasOption; } set { this.PullRequestDatasOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoGetMineCreateDetailRsp {\n");
            sb.Append("  IssueDatas: ").Append(IssueDatas).Append("\n");
            sb.Append("  MineType: ").Append(MineType).Append("\n");
            sb.Append("  PullRequestDatas: ").Append(PullRequestDatas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoGetMineCreateDetailRsp" />
    /// </summary>
    public class DtoGetMineCreateDetailRspJsonConverter : JsonConverter<DtoGetMineCreateDetailRsp>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoGetMineCreateDetailRsp" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoGetMineCreateDetailRsp Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<DtoIssueData>?> issueDatas = default;
            Option<string?> mineType = default;
            Option<List<DtoPullRequestData>?> pullRequestDatas = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "issue_datas":
                            issueDatas = new Option<List<DtoIssueData>?>(JsonSerializer.Deserialize<List<DtoIssueData>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "mine_type":
                            mineType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pull_request_datas":
                            pullRequestDatas = new Option<List<DtoPullRequestData>?>(JsonSerializer.Deserialize<List<DtoPullRequestData>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (issueDatas.IsSet && issueDatas.Value == null)
                throw new ArgumentNullException(nameof(issueDatas), "Property is not nullable for class DtoGetMineCreateDetailRsp.");

            if (mineType.IsSet && mineType.Value == null)
                throw new ArgumentNullException(nameof(mineType), "Property is not nullable for class DtoGetMineCreateDetailRsp.");

            if (pullRequestDatas.IsSet && pullRequestDatas.Value == null)
                throw new ArgumentNullException(nameof(pullRequestDatas), "Property is not nullable for class DtoGetMineCreateDetailRsp.");

            return new DtoGetMineCreateDetailRsp(issueDatas, mineType, pullRequestDatas);
        }

        /// <summary>
        /// Serializes a <see cref="DtoGetMineCreateDetailRsp" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoGetMineCreateDetailRsp"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoGetMineCreateDetailRsp dtoGetMineCreateDetailRsp, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoGetMineCreateDetailRsp, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoGetMineCreateDetailRsp" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoGetMineCreateDetailRsp"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoGetMineCreateDetailRsp dtoGetMineCreateDetailRsp, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoGetMineCreateDetailRsp.IssueDatasOption.IsSet && dtoGetMineCreateDetailRsp.IssueDatas == null)
                throw new ArgumentNullException(nameof(dtoGetMineCreateDetailRsp.IssueDatas), "Property is required for class DtoGetMineCreateDetailRsp.");

            if (dtoGetMineCreateDetailRsp.MineTypeOption.IsSet && dtoGetMineCreateDetailRsp.MineType == null)
                throw new ArgumentNullException(nameof(dtoGetMineCreateDetailRsp.MineType), "Property is required for class DtoGetMineCreateDetailRsp.");

            if (dtoGetMineCreateDetailRsp.PullRequestDatasOption.IsSet && dtoGetMineCreateDetailRsp.PullRequestDatas == null)
                throw new ArgumentNullException(nameof(dtoGetMineCreateDetailRsp.PullRequestDatas), "Property is required for class DtoGetMineCreateDetailRsp.");

            if (dtoGetMineCreateDetailRsp.IssueDatasOption.IsSet)
            {
                writer.WritePropertyName("issue_datas");
                JsonSerializer.Serialize(writer, dtoGetMineCreateDetailRsp.IssueDatas, jsonSerializerOptions);
            }
            if (dtoGetMineCreateDetailRsp.MineTypeOption.IsSet)
                writer.WriteString("mine_type", dtoGetMineCreateDetailRsp.MineType);

            if (dtoGetMineCreateDetailRsp.PullRequestDatasOption.IsSet)
            {
                writer.WritePropertyName("pull_request_datas");
                JsonSerializer.Serialize(writer, dtoGetMineCreateDetailRsp.PullRequestDatas, jsonSerializerOptions);
            }
        }
    }
}
