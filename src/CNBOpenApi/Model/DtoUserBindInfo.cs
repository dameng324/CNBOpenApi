// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoUserBindInfo
    /// </summary>
    public partial class DtoUserBindInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoUserBindInfo" /> class.
        /// </summary>
        /// <param name="code">code</param>
        /// <param name="expireAt">expireAt</param>
        /// <param name="name">name</param>
        /// <param name="nick">nick</param>
        /// <param name="url">url</param>
        /// <param name="user">user</param>
        [JsonConstructor]
        public DtoUserBindInfo(Option<string?> code = default, Option<string?> expireAt = default, Option<string?> name = default, Option<string?> nick = default, Option<string?> url = default, Option<string?> user = default)
        {
            CodeOption = code;
            ExpireAtOption = expireAt;
            NameOption = name;
            NickOption = nick;
            UrlOption = url;
            UserOption = user;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [JsonPropertyName("code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpireAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExpireAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExpireAt
        /// </summary>
        [JsonPropertyName("expire_at")]
        public string? ExpireAt { get { return this.ExpireAtOption; } set { this.ExpireAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Nick
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NickOption { get; private set; }

        /// <summary>
        /// Gets or Sets Nick
        /// </summary>
        [JsonPropertyName("nick")]
        public string? Nick { get { return this.NickOption; } set { this.NickOption = new(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of User
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserOption { get; private set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [JsonPropertyName("user")]
        public string? User { get { return this.UserOption; } set { this.UserOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoUserBindInfo {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ExpireAt: ").Append(ExpireAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Nick: ").Append(Nick).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoUserBindInfo" />
    /// </summary>
    public class DtoUserBindInfoJsonConverter : JsonConverter<DtoUserBindInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoUserBindInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoUserBindInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<string?> expireAt = default;
            Option<string?> name = default;
            Option<string?> nick = default;
            Option<string?> url = default;
            Option<string?> user = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expire_at":
                            expireAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "nick":
                            nick = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user":
                            user = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class DtoUserBindInfo.");

            if (expireAt.IsSet && expireAt.Value == null)
                throw new ArgumentNullException(nameof(expireAt), "Property is not nullable for class DtoUserBindInfo.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class DtoUserBindInfo.");

            if (nick.IsSet && nick.Value == null)
                throw new ArgumentNullException(nameof(nick), "Property is not nullable for class DtoUserBindInfo.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class DtoUserBindInfo.");

            if (user.IsSet && user.Value == null)
                throw new ArgumentNullException(nameof(user), "Property is not nullable for class DtoUserBindInfo.");

            return new DtoUserBindInfo(code, expireAt, name, nick, url, user);
        }

        /// <summary>
        /// Serializes a <see cref="DtoUserBindInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoUserBindInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoUserBindInfo dtoUserBindInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoUserBindInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoUserBindInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoUserBindInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoUserBindInfo dtoUserBindInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoUserBindInfo.CodeOption.IsSet && dtoUserBindInfo.Code == null)
                throw new ArgumentNullException(nameof(dtoUserBindInfo.Code), "Property is required for class DtoUserBindInfo.");

            if (dtoUserBindInfo.ExpireAtOption.IsSet && dtoUserBindInfo.ExpireAt == null)
                throw new ArgumentNullException(nameof(dtoUserBindInfo.ExpireAt), "Property is required for class DtoUserBindInfo.");

            if (dtoUserBindInfo.NameOption.IsSet && dtoUserBindInfo.Name == null)
                throw new ArgumentNullException(nameof(dtoUserBindInfo.Name), "Property is required for class DtoUserBindInfo.");

            if (dtoUserBindInfo.NickOption.IsSet && dtoUserBindInfo.Nick == null)
                throw new ArgumentNullException(nameof(dtoUserBindInfo.Nick), "Property is required for class DtoUserBindInfo.");

            if (dtoUserBindInfo.UrlOption.IsSet && dtoUserBindInfo.Url == null)
                throw new ArgumentNullException(nameof(dtoUserBindInfo.Url), "Property is required for class DtoUserBindInfo.");

            if (dtoUserBindInfo.UserOption.IsSet && dtoUserBindInfo.User == null)
                throw new ArgumentNullException(nameof(dtoUserBindInfo.User), "Property is required for class DtoUserBindInfo.");

            if (dtoUserBindInfo.CodeOption.IsSet)
                writer.WriteString("code", dtoUserBindInfo.Code);

            if (dtoUserBindInfo.ExpireAtOption.IsSet)
                writer.WriteString("expire_at", dtoUserBindInfo.ExpireAt);

            if (dtoUserBindInfo.NameOption.IsSet)
                writer.WriteString("name", dtoUserBindInfo.Name);

            if (dtoUserBindInfo.NickOption.IsSet)
                writer.WriteString("nick", dtoUserBindInfo.Nick);

            if (dtoUserBindInfo.UrlOption.IsSet)
                writer.WriteString("url", dtoUserBindInfo.Url);

            if (dtoUserBindInfo.UserOption.IsSet)
                writer.WriteString("user", dtoUserBindInfo.User);
        }
    }
}
