// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebPullRequestResource
    /// </summary>
    public partial class WebPullRequestResource : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebPullRequestResource" /> class.
        /// </summary>
        /// <param name="assignees">assignees</param>
        /// <param name="author">author</param>
        /// <param name="baseRepoRef">baseRepoRef</param>
        /// <param name="blockedOn">blockedOn</param>
        /// <param name="commentCount">commentCount</param>
        /// <param name="commitCount">commitCount</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="customerFields">customerFields</param>
        /// <param name="fileCount">fileCount</param>
        /// <param name="headRepoRef">headRepoRef</param>
        /// <param name="id">id</param>
        /// <param name="isMerged">isMerged</param>
        /// <param name="isReadyForMerge">isReadyForMerge</param>
        /// <param name="labels">labels</param>
        /// <param name="lastActedAt">lastActedAt</param>
        /// <param name="mergeStyle">mergeStyle</param>
        /// <param name="mergeableState">mergeableState</param>
        /// <param name="number">number</param>
        /// <param name="repoSlug">repoSlug</param>
        /// <param name="reviewers">reviewers</param>
        /// <param name="state">state</param>
        /// <param name="statusCheckCommitSha">statusCheckCommitSha</param>
        /// <param name="title">title</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public WebPullRequestResource(Option<List<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo>?> assignees = default, Option<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo?> author = default, Option<string?> baseRepoRef = default, Option<string?> blockedOn = default, Option<int?> commentCount = default, Option<int?> commitCount = default, Option<string?> createdAt = default, Option<List<WebCustomerField>?> customerFields = default, Option<int?> fileCount = default, Option<string?> headRepoRef = default, Option<string?> id = default, Option<bool?> isMerged = default, Option<bool?> isReadyForMerge = default, Option<List<WebLabelOption>?> labels = default, Option<string?> lastActedAt = default, Option<string?> mergeStyle = default, Option<string?> mergeableState = default, Option<string?> number = default, Option<string?> repoSlug = default, Option<List<WebPullRequestResourceReviewer>?> reviewers = default, Option<string?> state = default, Option<string?> statusCheckCommitSha = default, Option<string?> title = default, Option<string?> updatedAt = default)
        {
            AssigneesOption = assignees;
            AuthorOption = author;
            BaseRepoRefOption = baseRepoRef;
            BlockedOnOption = blockedOn;
            CommentCountOption = commentCount;
            CommitCountOption = commitCount;
            CreatedAtOption = createdAt;
            CustomerFieldsOption = customerFields;
            FileCountOption = fileCount;
            HeadRepoRefOption = headRepoRef;
            IdOption = id;
            IsMergedOption = isMerged;
            IsReadyForMergeOption = isReadyForMerge;
            LabelsOption = labels;
            LastActedAtOption = lastActedAt;
            MergeStyleOption = mergeStyle;
            MergeableStateOption = mergeableState;
            NumberOption = number;
            RepoSlugOption = repoSlug;
            ReviewersOption = reviewers;
            StateOption = state;
            StatusCheckCommitShaOption = statusCheckCommitSha;
            TitleOption = title;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Assignees
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo>?> AssigneesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Assignees
        /// </summary>
        [JsonPropertyName("assignees")]
        public List<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo>? Assignees { get { return this.AssigneesOption; } set { this.AssigneesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Author
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo?> AuthorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [JsonPropertyName("author")]
        public GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo? Author { get { return this.AuthorOption; } set { this.AuthorOption = new(value); } }

        /// <summary>
        /// Used to track the state of BaseRepoRef
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BaseRepoRefOption { get; private set; }

        /// <summary>
        /// Gets or Sets BaseRepoRef
        /// </summary>
        [JsonPropertyName("base_repo_ref")]
        public string? BaseRepoRef { get { return this.BaseRepoRefOption; } set { this.BaseRepoRefOption = new(value); } }

        /// <summary>
        /// Used to track the state of BlockedOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BlockedOnOption { get; private set; }

        /// <summary>
        /// Gets or Sets BlockedOn
        /// </summary>
        [JsonPropertyName("blocked_on")]
        public string? BlockedOn { get { return this.BlockedOnOption; } set { this.BlockedOnOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommentCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CommentCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommentCount
        /// </summary>
        [JsonPropertyName("comment_count")]
        public int? CommentCount { get { return this.CommentCountOption; } set { this.CommentCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommitCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CommitCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommitCount
        /// </summary>
        [JsonPropertyName("commit_count")]
        public int? CommitCount { get { return this.CommitCountOption; } set { this.CommitCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomerFields
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebCustomerField>?> CustomerFieldsOption { get; private set; }

        /// <summary>
        /// Gets or Sets CustomerFields
        /// </summary>
        [JsonPropertyName("customer_fields")]
        public List<WebCustomerField>? CustomerFields { get { return this.CustomerFieldsOption; } set { this.CustomerFieldsOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FileCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileCount
        /// </summary>
        [JsonPropertyName("file_count")]
        public int? FileCount { get { return this.FileCountOption; } set { this.FileCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of HeadRepoRef
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HeadRepoRefOption { get; private set; }

        /// <summary>
        /// Gets or Sets HeadRepoRef
        /// </summary>
        [JsonPropertyName("head_repo_ref")]
        public string? HeadRepoRef { get { return this.HeadRepoRefOption; } set { this.HeadRepoRefOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsMerged
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsMergedOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsMerged
        /// </summary>
        [JsonPropertyName("is_merged")]
        public bool? IsMerged { get { return this.IsMergedOption; } set { this.IsMergedOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsReadyForMerge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsReadyForMergeOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsReadyForMerge
        /// </summary>
        [JsonPropertyName("is_ready_for_merge")]
        public bool? IsReadyForMerge { get { return this.IsReadyForMergeOption; } set { this.IsReadyForMergeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Labels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebLabelOption>?> LabelsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [JsonPropertyName("labels")]
        public List<WebLabelOption>? Labels { get { return this.LabelsOption; } set { this.LabelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastActedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastActedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastActedAt
        /// </summary>
        [JsonPropertyName("last_acted_at")]
        public string? LastActedAt { get { return this.LastActedAtOption; } set { this.LastActedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of MergeStyle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MergeStyleOption { get; private set; }

        /// <summary>
        /// Gets or Sets MergeStyle
        /// </summary>
        [JsonPropertyName("merge_style")]
        public string? MergeStyle { get { return this.MergeStyleOption; } set { this.MergeStyleOption = new(value); } }

        /// <summary>
        /// Used to track the state of MergeableState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MergeableStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets MergeableState
        /// </summary>
        [JsonPropertyName("mergeable_state")]
        public string? MergeableState { get { return this.MergeableStateOption; } set { this.MergeableStateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public string? Number { get { return this.NumberOption; } set { this.NumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of RepoSlug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RepoSlugOption { get; private set; }

        /// <summary>
        /// Gets or Sets RepoSlug
        /// </summary>
        [JsonPropertyName("repo_slug")]
        public string? RepoSlug { get { return this.RepoSlugOption; } set { this.RepoSlugOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reviewers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebPullRequestResourceReviewer>?> ReviewersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Reviewers
        /// </summary>
        [JsonPropertyName("reviewers")]
        public List<WebPullRequestResourceReviewer>? Reviewers { get { return this.ReviewersOption; } set { this.ReviewersOption = new(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public string? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Used to track the state of StatusCheckCommitSha
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusCheckCommitShaOption { get; private set; }

        /// <summary>
        /// Gets or Sets StatusCheckCommitSha
        /// </summary>
        [JsonPropertyName("status_check_commit_sha")]
        public string? StatusCheckCommitSha { get { return this.StatusCheckCommitShaOption; } set { this.StatusCheckCommitShaOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebPullRequestResource {\n");
            sb.Append("  Assignees: ").Append(Assignees).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  BaseRepoRef: ").Append(BaseRepoRef).Append("\n");
            sb.Append("  BlockedOn: ").Append(BlockedOn).Append("\n");
            sb.Append("  CommentCount: ").Append(CommentCount).Append("\n");
            sb.Append("  CommitCount: ").Append(CommitCount).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CustomerFields: ").Append(CustomerFields).Append("\n");
            sb.Append("  FileCount: ").Append(FileCount).Append("\n");
            sb.Append("  HeadRepoRef: ").Append(HeadRepoRef).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsMerged: ").Append(IsMerged).Append("\n");
            sb.Append("  IsReadyForMerge: ").Append(IsReadyForMerge).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  LastActedAt: ").Append(LastActedAt).Append("\n");
            sb.Append("  MergeStyle: ").Append(MergeStyle).Append("\n");
            sb.Append("  MergeableState: ").Append(MergeableState).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  RepoSlug: ").Append(RepoSlug).Append("\n");
            sb.Append("  Reviewers: ").Append(Reviewers).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StatusCheckCommitSha: ").Append(StatusCheckCommitSha).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebPullRequestResource" />
    /// </summary>
    public class WebPullRequestResourceJsonConverter : JsonConverter<WebPullRequestResource>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebPullRequestResource" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebPullRequestResource Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo>?> assignees = default;
            Option<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo?> author = default;
            Option<string?> baseRepoRef = default;
            Option<string?> blockedOn = default;
            Option<int?> commentCount = default;
            Option<int?> commitCount = default;
            Option<string?> createdAt = default;
            Option<List<WebCustomerField>?> customerFields = default;
            Option<int?> fileCount = default;
            Option<string?> headRepoRef = default;
            Option<string?> id = default;
            Option<bool?> isMerged = default;
            Option<bool?> isReadyForMerge = default;
            Option<List<WebLabelOption>?> labels = default;
            Option<string?> lastActedAt = default;
            Option<string?> mergeStyle = default;
            Option<string?> mergeableState = default;
            Option<string?> number = default;
            Option<string?> repoSlug = default;
            Option<List<WebPullRequestResourceReviewer>?> reviewers = default;
            Option<string?> state = default;
            Option<string?> statusCheckCommitSha = default;
            Option<string?> title = default;
            Option<string?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assignees":
                            assignees = new Option<List<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo>?>(JsonSerializer.Deserialize<List<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "author":
                            author = new Option<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo?>(JsonSerializer.Deserialize<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "base_repo_ref":
                            baseRepoRef = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "blocked_on":
                            blockedOn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "comment_count":
                            commentCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "commit_count":
                            commitCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "customer_fields":
                            customerFields = new Option<List<WebCustomerField>?>(JsonSerializer.Deserialize<List<WebCustomerField>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "file_count":
                            fileCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "head_repo_ref":
                            headRepoRef = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_merged":
                            isMerged = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_ready_for_merge":
                            isReadyForMerge = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "labels":
                            labels = new Option<List<WebLabelOption>?>(JsonSerializer.Deserialize<List<WebLabelOption>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "last_acted_at":
                            lastActedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "merge_style":
                            mergeStyle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mergeable_state":
                            mergeableState = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "number":
                            number = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "repo_slug":
                            repoSlug = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "reviewers":
                            reviewers = new Option<List<WebPullRequestResourceReviewer>?>(JsonSerializer.Deserialize<List<WebPullRequestResourceReviewer>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status_check_commit_sha":
                            statusCheckCommitSha = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (assignees.IsSet && assignees.Value == null)
                throw new ArgumentNullException(nameof(assignees), "Property is not nullable for class WebPullRequestResource.");

            if (author.IsSet && author.Value == null)
                throw new ArgumentNullException(nameof(author), "Property is not nullable for class WebPullRequestResource.");

            if (baseRepoRef.IsSet && baseRepoRef.Value == null)
                throw new ArgumentNullException(nameof(baseRepoRef), "Property is not nullable for class WebPullRequestResource.");

            if (blockedOn.IsSet && blockedOn.Value == null)
                throw new ArgumentNullException(nameof(blockedOn), "Property is not nullable for class WebPullRequestResource.");

            if (commentCount.IsSet && commentCount.Value == null)
                throw new ArgumentNullException(nameof(commentCount), "Property is not nullable for class WebPullRequestResource.");

            if (commitCount.IsSet && commitCount.Value == null)
                throw new ArgumentNullException(nameof(commitCount), "Property is not nullable for class WebPullRequestResource.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class WebPullRequestResource.");

            if (customerFields.IsSet && customerFields.Value == null)
                throw new ArgumentNullException(nameof(customerFields), "Property is not nullable for class WebPullRequestResource.");

            if (fileCount.IsSet && fileCount.Value == null)
                throw new ArgumentNullException(nameof(fileCount), "Property is not nullable for class WebPullRequestResource.");

            if (headRepoRef.IsSet && headRepoRef.Value == null)
                throw new ArgumentNullException(nameof(headRepoRef), "Property is not nullable for class WebPullRequestResource.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class WebPullRequestResource.");

            if (isMerged.IsSet && isMerged.Value == null)
                throw new ArgumentNullException(nameof(isMerged), "Property is not nullable for class WebPullRequestResource.");

            if (isReadyForMerge.IsSet && isReadyForMerge.Value == null)
                throw new ArgumentNullException(nameof(isReadyForMerge), "Property is not nullable for class WebPullRequestResource.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class WebPullRequestResource.");

            if (lastActedAt.IsSet && lastActedAt.Value == null)
                throw new ArgumentNullException(nameof(lastActedAt), "Property is not nullable for class WebPullRequestResource.");

            if (mergeStyle.IsSet && mergeStyle.Value == null)
                throw new ArgumentNullException(nameof(mergeStyle), "Property is not nullable for class WebPullRequestResource.");

            if (mergeableState.IsSet && mergeableState.Value == null)
                throw new ArgumentNullException(nameof(mergeableState), "Property is not nullable for class WebPullRequestResource.");

            if (number.IsSet && number.Value == null)
                throw new ArgumentNullException(nameof(number), "Property is not nullable for class WebPullRequestResource.");

            if (repoSlug.IsSet && repoSlug.Value == null)
                throw new ArgumentNullException(nameof(repoSlug), "Property is not nullable for class WebPullRequestResource.");

            if (reviewers.IsSet && reviewers.Value == null)
                throw new ArgumentNullException(nameof(reviewers), "Property is not nullable for class WebPullRequestResource.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class WebPullRequestResource.");

            if (statusCheckCommitSha.IsSet && statusCheckCommitSha.Value == null)
                throw new ArgumentNullException(nameof(statusCheckCommitSha), "Property is not nullable for class WebPullRequestResource.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class WebPullRequestResource.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class WebPullRequestResource.");

            return new WebPullRequestResource(assignees, author, baseRepoRef, blockedOn, commentCount, commitCount, createdAt, customerFields, fileCount, headRepoRef, id, isMerged, isReadyForMerge, labels, lastActedAt, mergeStyle, mergeableState, number, repoSlug, reviewers, state, statusCheckCommitSha, title, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="WebPullRequestResource" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webPullRequestResource"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebPullRequestResource webPullRequestResource, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webPullRequestResource, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebPullRequestResource" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webPullRequestResource"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebPullRequestResource webPullRequestResource, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webPullRequestResource.AssigneesOption.IsSet && webPullRequestResource.Assignees == null)
                throw new ArgumentNullException(nameof(webPullRequestResource.Assignees), "Property is required for class WebPullRequestResource.");

            if (webPullRequestResource.AuthorOption.IsSet && webPullRequestResource.Author == null)
                throw new ArgumentNullException(nameof(webPullRequestResource.Author), "Property is required for class WebPullRequestResource.");

            if (webPullRequestResource.BaseRepoRefOption.IsSet && webPullRequestResource.BaseRepoRef == null)
                throw new ArgumentNullException(nameof(webPullRequestResource.BaseRepoRef), "Property is required for class WebPullRequestResource.");

            if (webPullRequestResource.BlockedOnOption.IsSet && webPullRequestResource.BlockedOn == null)
                throw new ArgumentNullException(nameof(webPullRequestResource.BlockedOn), "Property is required for class WebPullRequestResource.");

            if (webPullRequestResource.CreatedAtOption.IsSet && webPullRequestResource.CreatedAt == null)
                throw new ArgumentNullException(nameof(webPullRequestResource.CreatedAt), "Property is required for class WebPullRequestResource.");

            if (webPullRequestResource.CustomerFieldsOption.IsSet && webPullRequestResource.CustomerFields == null)
                throw new ArgumentNullException(nameof(webPullRequestResource.CustomerFields), "Property is required for class WebPullRequestResource.");

            if (webPullRequestResource.HeadRepoRefOption.IsSet && webPullRequestResource.HeadRepoRef == null)
                throw new ArgumentNullException(nameof(webPullRequestResource.HeadRepoRef), "Property is required for class WebPullRequestResource.");

            if (webPullRequestResource.IdOption.IsSet && webPullRequestResource.Id == null)
                throw new ArgumentNullException(nameof(webPullRequestResource.Id), "Property is required for class WebPullRequestResource.");

            if (webPullRequestResource.LabelsOption.IsSet && webPullRequestResource.Labels == null)
                throw new ArgumentNullException(nameof(webPullRequestResource.Labels), "Property is required for class WebPullRequestResource.");

            if (webPullRequestResource.LastActedAtOption.IsSet && webPullRequestResource.LastActedAt == null)
                throw new ArgumentNullException(nameof(webPullRequestResource.LastActedAt), "Property is required for class WebPullRequestResource.");

            if (webPullRequestResource.MergeStyleOption.IsSet && webPullRequestResource.MergeStyle == null)
                throw new ArgumentNullException(nameof(webPullRequestResource.MergeStyle), "Property is required for class WebPullRequestResource.");

            if (webPullRequestResource.MergeableStateOption.IsSet && webPullRequestResource.MergeableState == null)
                throw new ArgumentNullException(nameof(webPullRequestResource.MergeableState), "Property is required for class WebPullRequestResource.");

            if (webPullRequestResource.NumberOption.IsSet && webPullRequestResource.Number == null)
                throw new ArgumentNullException(nameof(webPullRequestResource.Number), "Property is required for class WebPullRequestResource.");

            if (webPullRequestResource.RepoSlugOption.IsSet && webPullRequestResource.RepoSlug == null)
                throw new ArgumentNullException(nameof(webPullRequestResource.RepoSlug), "Property is required for class WebPullRequestResource.");

            if (webPullRequestResource.ReviewersOption.IsSet && webPullRequestResource.Reviewers == null)
                throw new ArgumentNullException(nameof(webPullRequestResource.Reviewers), "Property is required for class WebPullRequestResource.");

            if (webPullRequestResource.StateOption.IsSet && webPullRequestResource.State == null)
                throw new ArgumentNullException(nameof(webPullRequestResource.State), "Property is required for class WebPullRequestResource.");

            if (webPullRequestResource.StatusCheckCommitShaOption.IsSet && webPullRequestResource.StatusCheckCommitSha == null)
                throw new ArgumentNullException(nameof(webPullRequestResource.StatusCheckCommitSha), "Property is required for class WebPullRequestResource.");

            if (webPullRequestResource.TitleOption.IsSet && webPullRequestResource.Title == null)
                throw new ArgumentNullException(nameof(webPullRequestResource.Title), "Property is required for class WebPullRequestResource.");

            if (webPullRequestResource.UpdatedAtOption.IsSet && webPullRequestResource.UpdatedAt == null)
                throw new ArgumentNullException(nameof(webPullRequestResource.UpdatedAt), "Property is required for class WebPullRequestResource.");

            if (webPullRequestResource.AssigneesOption.IsSet)
            {
                writer.WritePropertyName("assignees");
                JsonSerializer.Serialize(writer, webPullRequestResource.Assignees, jsonSerializerOptions);
            }
            if (webPullRequestResource.AuthorOption.IsSet)
            {
                writer.WritePropertyName("author");
                JsonSerializer.Serialize(writer, webPullRequestResource.Author, jsonSerializerOptions);
            }
            if (webPullRequestResource.BaseRepoRefOption.IsSet)
                writer.WriteString("base_repo_ref", webPullRequestResource.BaseRepoRef);

            if (webPullRequestResource.BlockedOnOption.IsSet)
                writer.WriteString("blocked_on", webPullRequestResource.BlockedOn);

            if (webPullRequestResource.CommentCountOption.IsSet)
                writer.WriteNumber("comment_count", webPullRequestResource.CommentCountOption.Value!.Value);

            if (webPullRequestResource.CommitCountOption.IsSet)
                writer.WriteNumber("commit_count", webPullRequestResource.CommitCountOption.Value!.Value);

            if (webPullRequestResource.CreatedAtOption.IsSet)
                writer.WriteString("created_at", webPullRequestResource.CreatedAt);

            if (webPullRequestResource.CustomerFieldsOption.IsSet)
            {
                writer.WritePropertyName("customer_fields");
                JsonSerializer.Serialize(writer, webPullRequestResource.CustomerFields, jsonSerializerOptions);
            }
            if (webPullRequestResource.FileCountOption.IsSet)
                writer.WriteNumber("file_count", webPullRequestResource.FileCountOption.Value!.Value);

            if (webPullRequestResource.HeadRepoRefOption.IsSet)
                writer.WriteString("head_repo_ref", webPullRequestResource.HeadRepoRef);

            if (webPullRequestResource.IdOption.IsSet)
                writer.WriteString("id", webPullRequestResource.Id);

            if (webPullRequestResource.IsMergedOption.IsSet)
                writer.WriteBoolean("is_merged", webPullRequestResource.IsMergedOption.Value!.Value);

            if (webPullRequestResource.IsReadyForMergeOption.IsSet)
                writer.WriteBoolean("is_ready_for_merge", webPullRequestResource.IsReadyForMergeOption.Value!.Value);

            if (webPullRequestResource.LabelsOption.IsSet)
            {
                writer.WritePropertyName("labels");
                JsonSerializer.Serialize(writer, webPullRequestResource.Labels, jsonSerializerOptions);
            }
            if (webPullRequestResource.LastActedAtOption.IsSet)
                writer.WriteString("last_acted_at", webPullRequestResource.LastActedAt);

            if (webPullRequestResource.MergeStyleOption.IsSet)
                writer.WriteString("merge_style", webPullRequestResource.MergeStyle);

            if (webPullRequestResource.MergeableStateOption.IsSet)
                writer.WriteString("mergeable_state", webPullRequestResource.MergeableState);

            if (webPullRequestResource.NumberOption.IsSet)
                writer.WriteString("number", webPullRequestResource.Number);

            if (webPullRequestResource.RepoSlugOption.IsSet)
                writer.WriteString("repo_slug", webPullRequestResource.RepoSlug);

            if (webPullRequestResource.ReviewersOption.IsSet)
            {
                writer.WritePropertyName("reviewers");
                JsonSerializer.Serialize(writer, webPullRequestResource.Reviewers, jsonSerializerOptions);
            }
            if (webPullRequestResource.StateOption.IsSet)
                writer.WriteString("state", webPullRequestResource.State);

            if (webPullRequestResource.StatusCheckCommitShaOption.IsSet)
                writer.WriteString("status_check_commit_sha", webPullRequestResource.StatusCheckCommitSha);

            if (webPullRequestResource.TitleOption.IsSet)
                writer.WriteString("title", webPullRequestResource.Title);

            if (webPullRequestResource.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", webPullRequestResource.UpdatedAt);
        }
    }
}
