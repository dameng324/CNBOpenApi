// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// ApiPatchIssueForm
    /// </summary>
    public partial class ApiPatchIssueForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiPatchIssueForm" /> class.
        /// </summary>
        /// <param name="body">body</param>
        /// <param name="priority">Priority of this issue. Can be one of: &#x60;p0&#x60;, &#x60;p1&#x60;, &#x60;p2&#x60;, &#x60;p3&#x60;, &#x60;\&quot;\&quot;&#x60;.</param>
        /// <param name="state">State of this issue. Either &#x60;open&#x60; or &#x60;closed&#x60;.</param>
        /// <param name="stateReason">StateReason can be one of: &#x60;completed&#x60;, &#x60;not_planned&#x60;, &#x60;reopened&#x60;</param>
        /// <param name="title">title</param>
        [JsonConstructor]
        public ApiPatchIssueForm(Option<string?> body = default, Option<string?> priority = default, Option<string?> state = default, Option<string?> stateReason = default, Option<string?> title = default)
        {
            BodyOption = body;
            PriorityOption = priority;
            StateOption = state;
            StateReasonOption = stateReason;
            TitleOption = title;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BodyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public string? Body { get { return this.BodyOption; } set { this.BodyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Priority
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PriorityOption { get; private set; }

        /// <summary>
        /// Priority of this issue. Can be one of: &#x60;p0&#x60;, &#x60;p1&#x60;, &#x60;p2&#x60;, &#x60;p3&#x60;, &#x60;\&quot;\&quot;&#x60;.
        /// </summary>
        /// <value>Priority of this issue. Can be one of: &#x60;p0&#x60;, &#x60;p1&#x60;, &#x60;p2&#x60;, &#x60;p3&#x60;, &#x60;\&quot;\&quot;&#x60;.</value>
        [JsonPropertyName("priority")]
        public string? Priority { get { return this.PriorityOption; } set { this.PriorityOption = new(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOption { get; private set; }

        /// <summary>
        /// State of this issue. Either &#x60;open&#x60; or &#x60;closed&#x60;.
        /// </summary>
        /// <value>State of this issue. Either &#x60;open&#x60; or &#x60;closed&#x60;.</value>
        [JsonPropertyName("state")]
        public string? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Used to track the state of StateReason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateReasonOption { get; private set; }

        /// <summary>
        /// StateReason can be one of: &#x60;completed&#x60;, &#x60;not_planned&#x60;, &#x60;reopened&#x60;
        /// </summary>
        /// <value>StateReason can be one of: &#x60;completed&#x60;, &#x60;not_planned&#x60;, &#x60;reopened&#x60;</value>
        [JsonPropertyName("state_reason")]
        public string? StateReason { get { return this.StateReasonOption; } set { this.StateReasonOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiPatchIssueForm {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StateReason: ").Append(StateReason).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApiPatchIssueForm" />
    /// </summary>
    public class ApiPatchIssueFormJsonConverter : JsonConverter<ApiPatchIssueForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApiPatchIssueForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApiPatchIssueForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> body = default;
            Option<string?> priority = default;
            Option<string?> state = default;
            Option<string?> stateReason = default;
            Option<string?> title = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "body":
                            body = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "priority":
                            priority = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "state_reason":
                            stateReason = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body), "Property is not nullable for class ApiPatchIssueForm.");

            if (priority.IsSet && priority.Value == null)
                throw new ArgumentNullException(nameof(priority), "Property is not nullable for class ApiPatchIssueForm.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class ApiPatchIssueForm.");

            if (stateReason.IsSet && stateReason.Value == null)
                throw new ArgumentNullException(nameof(stateReason), "Property is not nullable for class ApiPatchIssueForm.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class ApiPatchIssueForm.");

            return new ApiPatchIssueForm(body, priority, state, stateReason, title);
        }

        /// <summary>
        /// Serializes a <see cref="ApiPatchIssueForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiPatchIssueForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApiPatchIssueForm apiPatchIssueForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, apiPatchIssueForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApiPatchIssueForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiPatchIssueForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApiPatchIssueForm apiPatchIssueForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (apiPatchIssueForm.BodyOption.IsSet && apiPatchIssueForm.Body == null)
                throw new ArgumentNullException(nameof(apiPatchIssueForm.Body), "Property is required for class ApiPatchIssueForm.");

            if (apiPatchIssueForm.PriorityOption.IsSet && apiPatchIssueForm.Priority == null)
                throw new ArgumentNullException(nameof(apiPatchIssueForm.Priority), "Property is required for class ApiPatchIssueForm.");

            if (apiPatchIssueForm.StateOption.IsSet && apiPatchIssueForm.State == null)
                throw new ArgumentNullException(nameof(apiPatchIssueForm.State), "Property is required for class ApiPatchIssueForm.");

            if (apiPatchIssueForm.StateReasonOption.IsSet && apiPatchIssueForm.StateReason == null)
                throw new ArgumentNullException(nameof(apiPatchIssueForm.StateReason), "Property is required for class ApiPatchIssueForm.");

            if (apiPatchIssueForm.TitleOption.IsSet && apiPatchIssueForm.Title == null)
                throw new ArgumentNullException(nameof(apiPatchIssueForm.Title), "Property is required for class ApiPatchIssueForm.");

            if (apiPatchIssueForm.BodyOption.IsSet)
                writer.WriteString("body", apiPatchIssueForm.Body);

            if (apiPatchIssueForm.PriorityOption.IsSet)
                writer.WriteString("priority", apiPatchIssueForm.Priority);

            if (apiPatchIssueForm.StateOption.IsSet)
                writer.WriteString("state", apiPatchIssueForm.State);

            if (apiPatchIssueForm.StateReasonOption.IsSet)
                writer.WriteString("state_reason", apiPatchIssueForm.StateReason);

            if (apiPatchIssueForm.TitleOption.IsSet)
                writer.WriteString("title", apiPatchIssueForm.Title);
        }
    }
}
