// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoBudget
    /// </summary>
    public partial class DtoBudget : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoBudget" /> class.
        /// </summary>
        /// <param name="chargeTypeCi">单位：核时</param>
        /// <param name="chargeTypeCiPolicy">chargeTypeCiPolicy</param>
        /// <param name="chargeTypeCiPrice">ci价格，单位：分</param>
        /// <param name="chargeTypeDev">chargeTypeDev</param>
        /// <param name="chargeTypeDevPolicy">chargeTypeDevPolicy</param>
        /// <param name="chargeTypeDevPrice">开发价格，单位：分</param>
        /// <param name="chargeTypeGit">单位：Gib</param>
        /// <param name="chargeTypeGitPolicy">折扣，没折扣是100</param>
        /// <param name="chargeTypeGitPrice">git存储价格，单位：分</param>
        /// <param name="chargeTypeObject">chargeTypeObject</param>
        /// <param name="chargeTypeObjectPolicy">chargeTypeObjectPolicy</param>
        /// <param name="chargeTypeObjectPrice">对象存储价格，单位：分</param>
        /// <param name="name">预算单名称</param>
        /// <param name="status">预算单状态，1-正常，2-隔离，3-销毁</param>
        /// <param name="uin">云账号id</param>
        [JsonConstructor]
        public DtoBudget(Option<int?> chargeTypeCi = default, Option<decimal?> chargeTypeCiPolicy = default, Option<decimal?> chargeTypeCiPrice = default, Option<int?> chargeTypeDev = default, Option<decimal?> chargeTypeDevPolicy = default, Option<decimal?> chargeTypeDevPrice = default, Option<int?> chargeTypeGit = default, Option<decimal?> chargeTypeGitPolicy = default, Option<decimal?> chargeTypeGitPrice = default, Option<int?> chargeTypeObject = default, Option<decimal?> chargeTypeObjectPolicy = default, Option<decimal?> chargeTypeObjectPrice = default, Option<string?> name = default, Option<ConstantBudgetSts?> status = default, Option<string?> uin = default)
        {
            ChargeTypeCiOption = chargeTypeCi;
            ChargeTypeCiPolicyOption = chargeTypeCiPolicy;
            ChargeTypeCiPriceOption = chargeTypeCiPrice;
            ChargeTypeDevOption = chargeTypeDev;
            ChargeTypeDevPolicyOption = chargeTypeDevPolicy;
            ChargeTypeDevPriceOption = chargeTypeDevPrice;
            ChargeTypeGitOption = chargeTypeGit;
            ChargeTypeGitPolicyOption = chargeTypeGitPolicy;
            ChargeTypeGitPriceOption = chargeTypeGitPrice;
            ChargeTypeObjectOption = chargeTypeObject;
            ChargeTypeObjectPolicyOption = chargeTypeObjectPolicy;
            ChargeTypeObjectPriceOption = chargeTypeObjectPrice;
            NameOption = name;
            StatusOption = status;
            UinOption = uin;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantBudgetSts?> StatusOption { get; private set; }

        /// <summary>
        /// 预算单状态，1-正常，2-隔离，3-销毁
        /// </summary>
        /// <value>预算单状态，1-正常，2-隔离，3-销毁</value>
        [JsonPropertyName("status")]
        public ConstantBudgetSts? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChargeTypeCi
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ChargeTypeCiOption { get; private set; }

        /// <summary>
        /// 单位：核时
        /// </summary>
        /// <value>单位：核时</value>
        [JsonPropertyName("charge_type_ci")]
        public int? ChargeTypeCi { get { return this.ChargeTypeCiOption; } set { this.ChargeTypeCiOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChargeTypeCiPolicy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ChargeTypeCiPolicyOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChargeTypeCiPolicy
        /// </summary>
        [JsonPropertyName("charge_type_ci_policy")]
        public decimal? ChargeTypeCiPolicy { get { return this.ChargeTypeCiPolicyOption; } set { this.ChargeTypeCiPolicyOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChargeTypeCiPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ChargeTypeCiPriceOption { get; private set; }

        /// <summary>
        /// ci价格，单位：分
        /// </summary>
        /// <value>ci价格，单位：分</value>
        [JsonPropertyName("charge_type_ci_price")]
        public decimal? ChargeTypeCiPrice { get { return this.ChargeTypeCiPriceOption; } set { this.ChargeTypeCiPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChargeTypeDev
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ChargeTypeDevOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChargeTypeDev
        /// </summary>
        [JsonPropertyName("charge_type_dev")]
        public int? ChargeTypeDev { get { return this.ChargeTypeDevOption; } set { this.ChargeTypeDevOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChargeTypeDevPolicy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ChargeTypeDevPolicyOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChargeTypeDevPolicy
        /// </summary>
        [JsonPropertyName("charge_type_dev_policy")]
        public decimal? ChargeTypeDevPolicy { get { return this.ChargeTypeDevPolicyOption; } set { this.ChargeTypeDevPolicyOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChargeTypeDevPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ChargeTypeDevPriceOption { get; private set; }

        /// <summary>
        /// 开发价格，单位：分
        /// </summary>
        /// <value>开发价格，单位：分</value>
        [JsonPropertyName("charge_type_dev_price")]
        public decimal? ChargeTypeDevPrice { get { return this.ChargeTypeDevPriceOption; } set { this.ChargeTypeDevPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChargeTypeGit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ChargeTypeGitOption { get; private set; }

        /// <summary>
        /// 单位：Gib
        /// </summary>
        /// <value>单位：Gib</value>
        [JsonPropertyName("charge_type_git")]
        public int? ChargeTypeGit { get { return this.ChargeTypeGitOption; } set { this.ChargeTypeGitOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChargeTypeGitPolicy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ChargeTypeGitPolicyOption { get; private set; }

        /// <summary>
        /// 折扣，没折扣是100
        /// </summary>
        /// <value>折扣，没折扣是100</value>
        [JsonPropertyName("charge_type_git_policy")]
        public decimal? ChargeTypeGitPolicy { get { return this.ChargeTypeGitPolicyOption; } set { this.ChargeTypeGitPolicyOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChargeTypeGitPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ChargeTypeGitPriceOption { get; private set; }

        /// <summary>
        /// git存储价格，单位：分
        /// </summary>
        /// <value>git存储价格，单位：分</value>
        [JsonPropertyName("charge_type_git_price")]
        public decimal? ChargeTypeGitPrice { get { return this.ChargeTypeGitPriceOption; } set { this.ChargeTypeGitPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChargeTypeObject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ChargeTypeObjectOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChargeTypeObject
        /// </summary>
        [JsonPropertyName("charge_type_object")]
        public int? ChargeTypeObject { get { return this.ChargeTypeObjectOption; } set { this.ChargeTypeObjectOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChargeTypeObjectPolicy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ChargeTypeObjectPolicyOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChargeTypeObjectPolicy
        /// </summary>
        [JsonPropertyName("charge_type_object_policy")]
        public decimal? ChargeTypeObjectPolicy { get { return this.ChargeTypeObjectPolicyOption; } set { this.ChargeTypeObjectPolicyOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChargeTypeObjectPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ChargeTypeObjectPriceOption { get; private set; }

        /// <summary>
        /// 对象存储价格，单位：分
        /// </summary>
        /// <value>对象存储价格，单位：分</value>
        [JsonPropertyName("charge_type_object_price")]
        public decimal? ChargeTypeObjectPrice { get { return this.ChargeTypeObjectPriceOption; } set { this.ChargeTypeObjectPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// 预算单名称
        /// </summary>
        /// <value>预算单名称</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Uin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UinOption { get; private set; }

        /// <summary>
        /// 云账号id
        /// </summary>
        /// <value>云账号id</value>
        [JsonPropertyName("uin")]
        public string? Uin { get { return this.UinOption; } set { this.UinOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoBudget {\n");
            sb.Append("  ChargeTypeCi: ").Append(ChargeTypeCi).Append("\n");
            sb.Append("  ChargeTypeCiPolicy: ").Append(ChargeTypeCiPolicy).Append("\n");
            sb.Append("  ChargeTypeCiPrice: ").Append(ChargeTypeCiPrice).Append("\n");
            sb.Append("  ChargeTypeDev: ").Append(ChargeTypeDev).Append("\n");
            sb.Append("  ChargeTypeDevPolicy: ").Append(ChargeTypeDevPolicy).Append("\n");
            sb.Append("  ChargeTypeDevPrice: ").Append(ChargeTypeDevPrice).Append("\n");
            sb.Append("  ChargeTypeGit: ").Append(ChargeTypeGit).Append("\n");
            sb.Append("  ChargeTypeGitPolicy: ").Append(ChargeTypeGitPolicy).Append("\n");
            sb.Append("  ChargeTypeGitPrice: ").Append(ChargeTypeGitPrice).Append("\n");
            sb.Append("  ChargeTypeObject: ").Append(ChargeTypeObject).Append("\n");
            sb.Append("  ChargeTypeObjectPolicy: ").Append(ChargeTypeObjectPolicy).Append("\n");
            sb.Append("  ChargeTypeObjectPrice: ").Append(ChargeTypeObjectPrice).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Uin: ").Append(Uin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoBudget" />
    /// </summary>
    public class DtoBudgetJsonConverter : JsonConverter<DtoBudget>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoBudget" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoBudget Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> chargeTypeCi = default;
            Option<decimal?> chargeTypeCiPolicy = default;
            Option<decimal?> chargeTypeCiPrice = default;
            Option<int?> chargeTypeDev = default;
            Option<decimal?> chargeTypeDevPolicy = default;
            Option<decimal?> chargeTypeDevPrice = default;
            Option<int?> chargeTypeGit = default;
            Option<decimal?> chargeTypeGitPolicy = default;
            Option<decimal?> chargeTypeGitPrice = default;
            Option<int?> chargeTypeObject = default;
            Option<decimal?> chargeTypeObjectPolicy = default;
            Option<decimal?> chargeTypeObjectPrice = default;
            Option<string?> name = default;
            Option<ConstantBudgetSts?> status = default;
            Option<string?> uin = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "charge_type_ci":
                            chargeTypeCi = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "charge_type_ci_policy":
                            chargeTypeCiPolicy = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "charge_type_ci_price":
                            chargeTypeCiPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "charge_type_dev":
                            chargeTypeDev = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "charge_type_dev_policy":
                            chargeTypeDevPolicy = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "charge_type_dev_price":
                            chargeTypeDevPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "charge_type_git":
                            chargeTypeGit = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "charge_type_git_policy":
                            chargeTypeGitPolicy = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "charge_type_git_price":
                            chargeTypeGitPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "charge_type_object":
                            chargeTypeObject = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "charge_type_object_policy":
                            chargeTypeObjectPolicy = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "charge_type_object_price":
                            chargeTypeObjectPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<ConstantBudgetSts?>(ConstantBudgetStsValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "uin":
                            uin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (chargeTypeCi.IsSet && chargeTypeCi.Value == null)
                throw new ArgumentNullException(nameof(chargeTypeCi), "Property is not nullable for class DtoBudget.");

            if (chargeTypeCiPolicy.IsSet && chargeTypeCiPolicy.Value == null)
                throw new ArgumentNullException(nameof(chargeTypeCiPolicy), "Property is not nullable for class DtoBudget.");

            if (chargeTypeCiPrice.IsSet && chargeTypeCiPrice.Value == null)
                throw new ArgumentNullException(nameof(chargeTypeCiPrice), "Property is not nullable for class DtoBudget.");

            if (chargeTypeDev.IsSet && chargeTypeDev.Value == null)
                throw new ArgumentNullException(nameof(chargeTypeDev), "Property is not nullable for class DtoBudget.");

            if (chargeTypeDevPolicy.IsSet && chargeTypeDevPolicy.Value == null)
                throw new ArgumentNullException(nameof(chargeTypeDevPolicy), "Property is not nullable for class DtoBudget.");

            if (chargeTypeDevPrice.IsSet && chargeTypeDevPrice.Value == null)
                throw new ArgumentNullException(nameof(chargeTypeDevPrice), "Property is not nullable for class DtoBudget.");

            if (chargeTypeGit.IsSet && chargeTypeGit.Value == null)
                throw new ArgumentNullException(nameof(chargeTypeGit), "Property is not nullable for class DtoBudget.");

            if (chargeTypeGitPolicy.IsSet && chargeTypeGitPolicy.Value == null)
                throw new ArgumentNullException(nameof(chargeTypeGitPolicy), "Property is not nullable for class DtoBudget.");

            if (chargeTypeGitPrice.IsSet && chargeTypeGitPrice.Value == null)
                throw new ArgumentNullException(nameof(chargeTypeGitPrice), "Property is not nullable for class DtoBudget.");

            if (chargeTypeObject.IsSet && chargeTypeObject.Value == null)
                throw new ArgumentNullException(nameof(chargeTypeObject), "Property is not nullable for class DtoBudget.");

            if (chargeTypeObjectPolicy.IsSet && chargeTypeObjectPolicy.Value == null)
                throw new ArgumentNullException(nameof(chargeTypeObjectPolicy), "Property is not nullable for class DtoBudget.");

            if (chargeTypeObjectPrice.IsSet && chargeTypeObjectPrice.Value == null)
                throw new ArgumentNullException(nameof(chargeTypeObjectPrice), "Property is not nullable for class DtoBudget.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class DtoBudget.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class DtoBudget.");

            if (uin.IsSet && uin.Value == null)
                throw new ArgumentNullException(nameof(uin), "Property is not nullable for class DtoBudget.");

            return new DtoBudget(chargeTypeCi, chargeTypeCiPolicy, chargeTypeCiPrice, chargeTypeDev, chargeTypeDevPolicy, chargeTypeDevPrice, chargeTypeGit, chargeTypeGitPolicy, chargeTypeGitPrice, chargeTypeObject, chargeTypeObjectPolicy, chargeTypeObjectPrice, name, status, uin);
        }

        /// <summary>
        /// Serializes a <see cref="DtoBudget" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoBudget"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoBudget dtoBudget, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoBudget, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoBudget" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoBudget"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoBudget dtoBudget, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoBudget.NameOption.IsSet && dtoBudget.Name == null)
                throw new ArgumentNullException(nameof(dtoBudget.Name), "Property is required for class DtoBudget.");

            if (dtoBudget.UinOption.IsSet && dtoBudget.Uin == null)
                throw new ArgumentNullException(nameof(dtoBudget.Uin), "Property is required for class DtoBudget.");

            if (dtoBudget.ChargeTypeCiOption.IsSet)
                writer.WriteNumber("charge_type_ci", dtoBudget.ChargeTypeCiOption.Value!.Value);

            if (dtoBudget.ChargeTypeCiPolicyOption.IsSet)
                writer.WriteNumber("charge_type_ci_policy", dtoBudget.ChargeTypeCiPolicyOption.Value!.Value);

            if (dtoBudget.ChargeTypeCiPriceOption.IsSet)
                writer.WriteNumber("charge_type_ci_price", dtoBudget.ChargeTypeCiPriceOption.Value!.Value);

            if (dtoBudget.ChargeTypeDevOption.IsSet)
                writer.WriteNumber("charge_type_dev", dtoBudget.ChargeTypeDevOption.Value!.Value);

            if (dtoBudget.ChargeTypeDevPolicyOption.IsSet)
                writer.WriteNumber("charge_type_dev_policy", dtoBudget.ChargeTypeDevPolicyOption.Value!.Value);

            if (dtoBudget.ChargeTypeDevPriceOption.IsSet)
                writer.WriteNumber("charge_type_dev_price", dtoBudget.ChargeTypeDevPriceOption.Value!.Value);

            if (dtoBudget.ChargeTypeGitOption.IsSet)
                writer.WriteNumber("charge_type_git", dtoBudget.ChargeTypeGitOption.Value!.Value);

            if (dtoBudget.ChargeTypeGitPolicyOption.IsSet)
                writer.WriteNumber("charge_type_git_policy", dtoBudget.ChargeTypeGitPolicyOption.Value!.Value);

            if (dtoBudget.ChargeTypeGitPriceOption.IsSet)
                writer.WriteNumber("charge_type_git_price", dtoBudget.ChargeTypeGitPriceOption.Value!.Value);

            if (dtoBudget.ChargeTypeObjectOption.IsSet)
                writer.WriteNumber("charge_type_object", dtoBudget.ChargeTypeObjectOption.Value!.Value);

            if (dtoBudget.ChargeTypeObjectPolicyOption.IsSet)
                writer.WriteNumber("charge_type_object_policy", dtoBudget.ChargeTypeObjectPolicyOption.Value!.Value);

            if (dtoBudget.ChargeTypeObjectPriceOption.IsSet)
                writer.WriteNumber("charge_type_object_price", dtoBudget.ChargeTypeObjectPriceOption.Value!.Value);

            if (dtoBudget.NameOption.IsSet)
                writer.WriteString("name", dtoBudget.Name);

            if (dtoBudget.StatusOption.IsSet)
            {
                var statusRawValue = ConstantBudgetStsValueConverter.ToJsonValue(dtoBudget.Status!.Value);
                writer.WriteNumber("status", statusRawValue);
            }
            if (dtoBudget.UinOption.IsSet)
                writer.WriteString("uin", dtoBudget.Uin);
        }
    }
}
