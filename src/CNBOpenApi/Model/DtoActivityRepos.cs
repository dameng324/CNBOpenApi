// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoActivityRepos
    /// </summary>
    public partial class DtoActivityRepos : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoActivityRepos" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="description">description</param>
        /// <param name="displayModule">displayModule</param>
        /// <param name="forkCount">forkCount</param>
        /// <param name="forkTarget">forkTarget</param>
        /// <param name="forkedFrom">forkedFrom</param>
        /// <param name="freeze">freeze</param>
        /// <param name="id">id</param>
        /// <param name="isStar">isStar</param>
        /// <param name="language">仓库程序语言，预留</param>
        /// <param name="lastUpdatedAt">最新代码更新时间</param>
        /// <param name="license">license</param>
        /// <param name="markCount">markCount</param>
        /// <param name="name">name</param>
        /// <param name="path">path</param>
        /// <param name="site">site</param>
        /// <param name="starCount">starCount</param>
        /// <param name="status">status</param>
        /// <param name="topics">topics</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="visibilityLevel">visibilityLevel</param>
        [JsonConstructor]
        public DtoActivityRepos(Option<string?> createdAt = default, Option<string?> description = default, Option<ConstantRepoDisplayModule?> displayModule = default, Option<int?> forkCount = default, Option<string?> forkTarget = default, Option<string?> forkedFrom = default, Option<bool?> freeze = default, Option<int?> id = default, Option<bool?> isStar = default, Option<string?> language = default, Option<ConvertNullTime?> lastUpdatedAt = default, Option<string?> license = default, Option<int?> markCount = default, Option<string?> name = default, Option<string?> path = default, Option<string?> site = default, Option<int?> starCount = default, Option<ConstantRepoStatus?> status = default, Option<string?> topics = default, Option<string?> updatedAt = default, Option<ConstantVisibility?> visibilityLevel = default)
        {
            CreatedAtOption = createdAt;
            DescriptionOption = description;
            DisplayModuleOption = displayModule;
            ForkCountOption = forkCount;
            ForkTargetOption = forkTarget;
            ForkedFromOption = forkedFrom;
            FreezeOption = freeze;
            IdOption = id;
            IsStarOption = isStar;
            LanguageOption = language;
            LastUpdatedAtOption = lastUpdatedAt;
            LicenseOption = license;
            MarkCountOption = markCount;
            NameOption = name;
            PathOption = path;
            SiteOption = site;
            StarCountOption = starCount;
            StatusOption = status;
            TopicsOption = topics;
            UpdatedAtOption = updatedAt;
            VisibilityLevelOption = visibilityLevel;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DisplayModule
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantRepoDisplayModule?> DisplayModuleOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayModule
        /// </summary>
        [JsonPropertyName("display_module")]
        public ConstantRepoDisplayModule? DisplayModule { get { return this.DisplayModuleOption; } set { this.DisplayModuleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantRepoStatus?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public ConstantRepoStatus? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of VisibilityLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantVisibility?> VisibilityLevelOption { get; private set; }

        /// <summary>
        /// Gets or Sets VisibilityLevel
        /// </summary>
        [JsonPropertyName("visibility_level")]
        public ConstantVisibility? VisibilityLevel { get { return this.VisibilityLevelOption; } set { this.VisibilityLevelOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForkCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ForkCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets ForkCount
        /// </summary>
        [JsonPropertyName("fork_count")]
        public int? ForkCount { get { return this.ForkCountOption; } set { this.ForkCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForkTarget
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ForkTargetOption { get; private set; }

        /// <summary>
        /// Gets or Sets ForkTarget
        /// </summary>
        [JsonPropertyName("fork_target")]
        public string? ForkTarget { get { return this.ForkTargetOption; } set { this.ForkTargetOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForkedFrom
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ForkedFromOption { get; private set; }

        /// <summary>
        /// Gets or Sets ForkedFrom
        /// </summary>
        [JsonPropertyName("forked_from")]
        public string? ForkedFrom { get { return this.ForkedFromOption; } set { this.ForkedFromOption = new(value); } }

        /// <summary>
        /// Used to track the state of Freeze
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FreezeOption { get; }

        /// <summary>
        /// Gets or Sets Freeze
        /// </summary>
        [JsonPropertyName("freeze")]
        public bool? Freeze { get { return this.FreezeOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsStar
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsStarOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsStar
        /// </summary>
        [JsonPropertyName("is_star")]
        public bool? IsStar { get { return this.IsStarOption; } set { this.IsStarOption = new(value); } }

        /// <summary>
        /// Used to track the state of Language
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LanguageOption { get; private set; }

        /// <summary>
        /// 仓库程序语言，预留
        /// </summary>
        /// <value>仓库程序语言，预留</value>
        [JsonPropertyName("language")]
        public string? Language { get { return this.LanguageOption; } set { this.LanguageOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastUpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConvertNullTime?> LastUpdatedAtOption { get; private set; }

        /// <summary>
        /// 最新代码更新时间
        /// </summary>
        /// <value>最新代码更新时间</value>
        [JsonPropertyName("last_updated_at")]
        public ConvertNullTime? LastUpdatedAt { get { return this.LastUpdatedAtOption; } set { this.LastUpdatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of License
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LicenseOption { get; private set; }

        /// <summary>
        /// Gets or Sets License
        /// </summary>
        [JsonPropertyName("license")]
        public string? License { get { return this.LicenseOption; } set { this.LicenseOption = new(value); } }

        /// <summary>
        /// Used to track the state of MarkCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MarkCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets MarkCount
        /// </summary>
        [JsonPropertyName("mark_count")]
        public int? MarkCount { get { return this.MarkCountOption; } set { this.MarkCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of Site
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SiteOption { get; private set; }

        /// <summary>
        /// Gets or Sets Site
        /// </summary>
        [JsonPropertyName("site")]
        public string? Site { get { return this.SiteOption; } set { this.SiteOption = new(value); } }

        /// <summary>
        /// Used to track the state of StarCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StarCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets StarCount
        /// </summary>
        [JsonPropertyName("star_count")]
        public int? StarCount { get { return this.StarCountOption; } set { this.StarCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Topics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TopicsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Topics
        /// </summary>
        [JsonPropertyName("topics")]
        public string? Topics { get { return this.TopicsOption; } set { this.TopicsOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoActivityRepos {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayModule: ").Append(DisplayModule).Append("\n");
            sb.Append("  ForkCount: ").Append(ForkCount).Append("\n");
            sb.Append("  ForkTarget: ").Append(ForkTarget).Append("\n");
            sb.Append("  ForkedFrom: ").Append(ForkedFrom).Append("\n");
            sb.Append("  Freeze: ").Append(Freeze).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsStar: ").Append(IsStar).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  LastUpdatedAt: ").Append(LastUpdatedAt).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  MarkCount: ").Append(MarkCount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  StarCount: ").Append(StarCount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Topics: ").Append(Topics).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  VisibilityLevel: ").Append(VisibilityLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoActivityRepos" />
    /// </summary>
    public class DtoActivityReposJsonConverter : JsonConverter<DtoActivityRepos>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoActivityRepos" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoActivityRepos Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> createdAt = default;
            Option<string?> description = default;
            Option<ConstantRepoDisplayModule?> displayModule = default;
            Option<int?> forkCount = default;
            Option<string?> forkTarget = default;
            Option<string?> forkedFrom = default;
            Option<bool?> freeze = default;
            Option<int?> id = default;
            Option<bool?> isStar = default;
            Option<string?> language = default;
            Option<ConvertNullTime?> lastUpdatedAt = default;
            Option<string?> license = default;
            Option<int?> markCount = default;
            Option<string?> name = default;
            Option<string?> path = default;
            Option<string?> site = default;
            Option<int?> starCount = default;
            Option<ConstantRepoStatus?> status = default;
            Option<string?> topics = default;
            Option<string?> updatedAt = default;
            Option<ConstantVisibility?> visibilityLevel = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "display_module":
                            string? displayModuleRawValue = utf8JsonReader.GetString();
                            if (displayModuleRawValue != null)
                                displayModule = new Option<ConstantRepoDisplayModule?>(ConstantRepoDisplayModuleValueConverter.FromStringOrDefault(displayModuleRawValue));
                            break;
                        case "fork_count":
                            forkCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "fork_target":
                            forkTarget = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "forked_from":
                            forkedFrom = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "freeze":
                            freeze = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "is_star":
                            isStar = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "language":
                            language = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_updated_at":
                            lastUpdatedAt = new Option<ConvertNullTime?>(JsonSerializer.Deserialize<ConvertNullTime>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "license":
                            license = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mark_count":
                            markCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "site":
                            site = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "star_count":
                            starCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<ConstantRepoStatus?>(ConstantRepoStatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "topics":
                            topics = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "visibility_level":
                            string? visibilityLevelRawValue = utf8JsonReader.GetString();
                            if (visibilityLevelRawValue != null)
                                visibilityLevel = new Option<ConstantVisibility?>(ConstantVisibilityValueConverter.FromStringOrDefault(visibilityLevelRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class DtoActivityRepos.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class DtoActivityRepos.");

            if (displayModule.IsSet && displayModule.Value == null)
                throw new ArgumentNullException(nameof(displayModule), "Property is not nullable for class DtoActivityRepos.");

            if (forkCount.IsSet && forkCount.Value == null)
                throw new ArgumentNullException(nameof(forkCount), "Property is not nullable for class DtoActivityRepos.");

            if (forkTarget.IsSet && forkTarget.Value == null)
                throw new ArgumentNullException(nameof(forkTarget), "Property is not nullable for class DtoActivityRepos.");

            if (forkedFrom.IsSet && forkedFrom.Value == null)
                throw new ArgumentNullException(nameof(forkedFrom), "Property is not nullable for class DtoActivityRepos.");

            if (freeze.IsSet && freeze.Value == null)
                throw new ArgumentNullException(nameof(freeze), "Property is not nullable for class DtoActivityRepos.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DtoActivityRepos.");

            if (isStar.IsSet && isStar.Value == null)
                throw new ArgumentNullException(nameof(isStar), "Property is not nullable for class DtoActivityRepos.");

            if (language.IsSet && language.Value == null)
                throw new ArgumentNullException(nameof(language), "Property is not nullable for class DtoActivityRepos.");

            if (lastUpdatedAt.IsSet && lastUpdatedAt.Value == null)
                throw new ArgumentNullException(nameof(lastUpdatedAt), "Property is not nullable for class DtoActivityRepos.");

            if (license.IsSet && license.Value == null)
                throw new ArgumentNullException(nameof(license), "Property is not nullable for class DtoActivityRepos.");

            if (markCount.IsSet && markCount.Value == null)
                throw new ArgumentNullException(nameof(markCount), "Property is not nullable for class DtoActivityRepos.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class DtoActivityRepos.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class DtoActivityRepos.");

            if (site.IsSet && site.Value == null)
                throw new ArgumentNullException(nameof(site), "Property is not nullable for class DtoActivityRepos.");

            if (starCount.IsSet && starCount.Value == null)
                throw new ArgumentNullException(nameof(starCount), "Property is not nullable for class DtoActivityRepos.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class DtoActivityRepos.");

            if (topics.IsSet && topics.Value == null)
                throw new ArgumentNullException(nameof(topics), "Property is not nullable for class DtoActivityRepos.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class DtoActivityRepos.");

            if (visibilityLevel.IsSet && visibilityLevel.Value == null)
                throw new ArgumentNullException(nameof(visibilityLevel), "Property is not nullable for class DtoActivityRepos.");

            return new DtoActivityRepos(createdAt, description, displayModule, forkCount, forkTarget, forkedFrom, freeze, id, isStar, language, lastUpdatedAt, license, markCount, name, path, site, starCount, status, topics, updatedAt, visibilityLevel);
        }

        /// <summary>
        /// Serializes a <see cref="DtoActivityRepos" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoActivityRepos"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoActivityRepos dtoActivityRepos, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoActivityRepos, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoActivityRepos" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoActivityRepos"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoActivityRepos dtoActivityRepos, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoActivityRepos.CreatedAtOption.IsSet && dtoActivityRepos.CreatedAt == null)
                throw new ArgumentNullException(nameof(dtoActivityRepos.CreatedAt), "Property is required for class DtoActivityRepos.");

            if (dtoActivityRepos.DescriptionOption.IsSet && dtoActivityRepos.Description == null)
                throw new ArgumentNullException(nameof(dtoActivityRepos.Description), "Property is required for class DtoActivityRepos.");

            if (dtoActivityRepos.ForkTargetOption.IsSet && dtoActivityRepos.ForkTarget == null)
                throw new ArgumentNullException(nameof(dtoActivityRepos.ForkTarget), "Property is required for class DtoActivityRepos.");

            if (dtoActivityRepos.ForkedFromOption.IsSet && dtoActivityRepos.ForkedFrom == null)
                throw new ArgumentNullException(nameof(dtoActivityRepos.ForkedFrom), "Property is required for class DtoActivityRepos.");

            if (dtoActivityRepos.LanguageOption.IsSet && dtoActivityRepos.Language == null)
                throw new ArgumentNullException(nameof(dtoActivityRepos.Language), "Property is required for class DtoActivityRepos.");

            if (dtoActivityRepos.LastUpdatedAtOption.IsSet && dtoActivityRepos.LastUpdatedAt == null)
                throw new ArgumentNullException(nameof(dtoActivityRepos.LastUpdatedAt), "Property is required for class DtoActivityRepos.");

            if (dtoActivityRepos.LicenseOption.IsSet && dtoActivityRepos.License == null)
                throw new ArgumentNullException(nameof(dtoActivityRepos.License), "Property is required for class DtoActivityRepos.");

            if (dtoActivityRepos.NameOption.IsSet && dtoActivityRepos.Name == null)
                throw new ArgumentNullException(nameof(dtoActivityRepos.Name), "Property is required for class DtoActivityRepos.");

            if (dtoActivityRepos.PathOption.IsSet && dtoActivityRepos.Path == null)
                throw new ArgumentNullException(nameof(dtoActivityRepos.Path), "Property is required for class DtoActivityRepos.");

            if (dtoActivityRepos.SiteOption.IsSet && dtoActivityRepos.Site == null)
                throw new ArgumentNullException(nameof(dtoActivityRepos.Site), "Property is required for class DtoActivityRepos.");

            if (dtoActivityRepos.TopicsOption.IsSet && dtoActivityRepos.Topics == null)
                throw new ArgumentNullException(nameof(dtoActivityRepos.Topics), "Property is required for class DtoActivityRepos.");

            if (dtoActivityRepos.UpdatedAtOption.IsSet && dtoActivityRepos.UpdatedAt == null)
                throw new ArgumentNullException(nameof(dtoActivityRepos.UpdatedAt), "Property is required for class DtoActivityRepos.");

            if (dtoActivityRepos.CreatedAtOption.IsSet)
                writer.WriteString("created_at", dtoActivityRepos.CreatedAt);

            if (dtoActivityRepos.DescriptionOption.IsSet)
                writer.WriteString("description", dtoActivityRepos.Description);

            if (dtoActivityRepos.DisplayModuleOption.IsSet)
            {
                var displayModuleRawValue = ConstantRepoDisplayModuleValueConverter.ToJsonValue(dtoActivityRepos.DisplayModule!.Value);
                writer.WriteNumber("display_module", displayModuleRawValue);
            }
            if (dtoActivityRepos.ForkCountOption.IsSet)
                writer.WriteNumber("fork_count", dtoActivityRepos.ForkCountOption.Value!.Value);

            if (dtoActivityRepos.ForkTargetOption.IsSet)
                writer.WriteString("fork_target", dtoActivityRepos.ForkTarget);

            if (dtoActivityRepos.ForkedFromOption.IsSet)
                writer.WriteString("forked_from", dtoActivityRepos.ForkedFrom);

            if (dtoActivityRepos.FreezeOption.IsSet)
                writer.WriteBoolean("freeze", dtoActivityRepos.FreezeOption.Value!.Value);

            if (dtoActivityRepos.IdOption.IsSet)
                writer.WriteNumber("id", dtoActivityRepos.IdOption.Value!.Value);

            if (dtoActivityRepos.IsStarOption.IsSet)
                writer.WriteBoolean("is_star", dtoActivityRepos.IsStarOption.Value!.Value);

            if (dtoActivityRepos.LanguageOption.IsSet)
                writer.WriteString("language", dtoActivityRepos.Language);

            if (dtoActivityRepos.LastUpdatedAtOption.IsSet)
            {
                writer.WritePropertyName("last_updated_at");
                JsonSerializer.Serialize(writer, dtoActivityRepos.LastUpdatedAt, jsonSerializerOptions);
            }
            if (dtoActivityRepos.LicenseOption.IsSet)
                writer.WriteString("license", dtoActivityRepos.License);

            if (dtoActivityRepos.MarkCountOption.IsSet)
                writer.WriteNumber("mark_count", dtoActivityRepos.MarkCountOption.Value!.Value);

            if (dtoActivityRepos.NameOption.IsSet)
                writer.WriteString("name", dtoActivityRepos.Name);

            if (dtoActivityRepos.PathOption.IsSet)
                writer.WriteString("path", dtoActivityRepos.Path);

            if (dtoActivityRepos.SiteOption.IsSet)
                writer.WriteString("site", dtoActivityRepos.Site);

            if (dtoActivityRepos.StarCountOption.IsSet)
                writer.WriteNumber("star_count", dtoActivityRepos.StarCountOption.Value!.Value);

            if (dtoActivityRepos.StatusOption.IsSet)
            {
                var statusRawValue = ConstantRepoStatusValueConverter.ToJsonValue(dtoActivityRepos.Status!.Value);
                writer.WriteNumber("status", statusRawValue);
            }
            if (dtoActivityRepos.TopicsOption.IsSet)
                writer.WriteString("topics", dtoActivityRepos.Topics);

            if (dtoActivityRepos.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", dtoActivityRepos.UpdatedAt);

            if (dtoActivityRepos.VisibilityLevelOption.IsSet)
            {
                var visibilityLevelRawValue = ConstantVisibilityValueConverter.ToJsonValue(dtoActivityRepos.VisibilityLevel!.Value);
                writer.WriteNumber("visibility_level", visibilityLevelRawValue);
            }
        }
    }
}
