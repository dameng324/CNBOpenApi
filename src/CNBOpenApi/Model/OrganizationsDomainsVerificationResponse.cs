// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// OrganizationsDomainsVerificationResponse
    /// </summary>
    public partial class OrganizationsDomainsVerificationResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsDomainsVerificationResponse" /> class.
        /// </summary>
        /// <param name="domains">domains</param>
        /// <param name="domainsBy">domainsBy</param>
        /// <param name="message">message</param>
        /// <param name="result">result</param>
        /// <param name="txtMatch">txtMatch</param>
        /// <param name="txtValue">txtValue</param>
        /// <param name="valid">valid</param>
        [JsonConstructor]
        public OrganizationsDomainsVerificationResponse(Option<List<string>?> domains = default, Option<List<string>?> domainsBy = default, Option<string?> message = default, Option<bool?> result = default, Option<bool?> txtMatch = default, Option<string?> txtValue = default, Option<bool?> valid = default)
        {
            DomainsOption = domains;
            DomainsByOption = domainsBy;
            MessageOption = message;
            ResultOption = result;
            TxtMatchOption = txtMatch;
            TxtValueOption = txtValue;
            ValidOption = valid;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Domains
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> DomainsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Domains
        /// </summary>
        [JsonPropertyName("domains")]
        public List<string>? Domains { get { return this.DomainsOption; } set { this.DomainsOption = new(value); } }

        /// <summary>
        /// Used to track the state of DomainsBy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> DomainsByOption { get; private set; }

        /// <summary>
        /// Gets or Sets DomainsBy
        /// </summary>
        [JsonPropertyName("domains_by")]
        public List<string>? DomainsBy { get { return this.DomainsByOption; } set { this.DomainsByOption = new(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [JsonPropertyName("message")]
        public string? Message { get { return this.MessageOption; } set { this.MessageOption = new(value); } }

        /// <summary>
        /// Used to track the state of Result
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ResultOption { get; private set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [JsonPropertyName("result")]
        public bool? Result { get { return this.ResultOption; } set { this.ResultOption = new(value); } }

        /// <summary>
        /// Used to track the state of TxtMatch
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TxtMatchOption { get; private set; }

        /// <summary>
        /// Gets or Sets TxtMatch
        /// </summary>
        [JsonPropertyName("txt_match")]
        public bool? TxtMatch { get { return this.TxtMatchOption; } set { this.TxtMatchOption = new(value); } }

        /// <summary>
        /// Used to track the state of TxtValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TxtValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets TxtValue
        /// </summary>
        [JsonPropertyName("txt_value")]
        public string? TxtValue { get { return this.TxtValueOption; } set { this.TxtValueOption = new(value); } }

        /// <summary>
        /// Used to track the state of Valid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ValidOption { get; private set; }

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [JsonPropertyName("valid")]
        public bool? Valid { get { return this.ValidOption; } set { this.ValidOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrganizationsDomainsVerificationResponse {\n");
            sb.Append("  Domains: ").Append(Domains).Append("\n");
            sb.Append("  DomainsBy: ").Append(DomainsBy).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  TxtMatch: ").Append(TxtMatch).Append("\n");
            sb.Append("  TxtValue: ").Append(TxtValue).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OrganizationsDomainsVerificationResponse" />
    /// </summary>
    public class OrganizationsDomainsVerificationResponseJsonConverter : JsonConverter<OrganizationsDomainsVerificationResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="OrganizationsDomainsVerificationResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OrganizationsDomainsVerificationResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> domains = default;
            Option<List<string>?> domainsBy = default;
            Option<string?> message = default;
            Option<bool?> result = default;
            Option<bool?> txtMatch = default;
            Option<string?> txtValue = default;
            Option<bool?> valid = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "domains":
                            domains = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "domains_by":
                            domainsBy = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "result":
                            result = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "txt_match":
                            txtMatch = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "txt_value":
                            txtValue = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "valid":
                            valid = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (domains.IsSet && domains.Value == null)
                throw new ArgumentNullException(nameof(domains), "Property is not nullable for class OrganizationsDomainsVerificationResponse.");

            if (domainsBy.IsSet && domainsBy.Value == null)
                throw new ArgumentNullException(nameof(domainsBy), "Property is not nullable for class OrganizationsDomainsVerificationResponse.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class OrganizationsDomainsVerificationResponse.");

            if (result.IsSet && result.Value == null)
                throw new ArgumentNullException(nameof(result), "Property is not nullable for class OrganizationsDomainsVerificationResponse.");

            if (txtMatch.IsSet && txtMatch.Value == null)
                throw new ArgumentNullException(nameof(txtMatch), "Property is not nullable for class OrganizationsDomainsVerificationResponse.");

            if (txtValue.IsSet && txtValue.Value == null)
                throw new ArgumentNullException(nameof(txtValue), "Property is not nullable for class OrganizationsDomainsVerificationResponse.");

            if (valid.IsSet && valid.Value == null)
                throw new ArgumentNullException(nameof(valid), "Property is not nullable for class OrganizationsDomainsVerificationResponse.");

            return new OrganizationsDomainsVerificationResponse(domains, domainsBy, message, result, txtMatch, txtValue, valid);
        }

        /// <summary>
        /// Serializes a <see cref="OrganizationsDomainsVerificationResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="organizationsDomainsVerificationResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OrganizationsDomainsVerificationResponse organizationsDomainsVerificationResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, organizationsDomainsVerificationResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OrganizationsDomainsVerificationResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="organizationsDomainsVerificationResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OrganizationsDomainsVerificationResponse organizationsDomainsVerificationResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (organizationsDomainsVerificationResponse.DomainsOption.IsSet && organizationsDomainsVerificationResponse.Domains == null)
                throw new ArgumentNullException(nameof(organizationsDomainsVerificationResponse.Domains), "Property is required for class OrganizationsDomainsVerificationResponse.");

            if (organizationsDomainsVerificationResponse.DomainsByOption.IsSet && organizationsDomainsVerificationResponse.DomainsBy == null)
                throw new ArgumentNullException(nameof(organizationsDomainsVerificationResponse.DomainsBy), "Property is required for class OrganizationsDomainsVerificationResponse.");

            if (organizationsDomainsVerificationResponse.MessageOption.IsSet && organizationsDomainsVerificationResponse.Message == null)
                throw new ArgumentNullException(nameof(organizationsDomainsVerificationResponse.Message), "Property is required for class OrganizationsDomainsVerificationResponse.");

            if (organizationsDomainsVerificationResponse.TxtValueOption.IsSet && organizationsDomainsVerificationResponse.TxtValue == null)
                throw new ArgumentNullException(nameof(organizationsDomainsVerificationResponse.TxtValue), "Property is required for class OrganizationsDomainsVerificationResponse.");

            if (organizationsDomainsVerificationResponse.DomainsOption.IsSet)
            {
                writer.WritePropertyName("domains");
                JsonSerializer.Serialize(writer, organizationsDomainsVerificationResponse.Domains, jsonSerializerOptions);
            }
            if (organizationsDomainsVerificationResponse.DomainsByOption.IsSet)
            {
                writer.WritePropertyName("domains_by");
                JsonSerializer.Serialize(writer, organizationsDomainsVerificationResponse.DomainsBy, jsonSerializerOptions);
            }
            if (organizationsDomainsVerificationResponse.MessageOption.IsSet)
                writer.WriteString("message", organizationsDomainsVerificationResponse.Message);

            if (organizationsDomainsVerificationResponse.ResultOption.IsSet)
                writer.WriteBoolean("result", organizationsDomainsVerificationResponse.ResultOption.Value!.Value);

            if (organizationsDomainsVerificationResponse.TxtMatchOption.IsSet)
                writer.WriteBoolean("txt_match", organizationsDomainsVerificationResponse.TxtMatchOption.Value!.Value);

            if (organizationsDomainsVerificationResponse.TxtValueOption.IsSet)
                writer.WriteString("txt_value", organizationsDomainsVerificationResponse.TxtValue);

            if (organizationsDomainsVerificationResponse.ValidOption.IsSet)
                writer.WriteBoolean("valid", organizationsDomainsVerificationResponse.ValidOption.Value!.Value);
        }
    }
}
