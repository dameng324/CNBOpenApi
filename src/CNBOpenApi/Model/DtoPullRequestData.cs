// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoPullRequestData
    /// </summary>
    public partial class DtoPullRequestData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoPullRequestData" /> class.
        /// </summary>
        /// <param name="associatedIssueCounts">associatedIssueCounts</param>
        /// <param name="buildStatus">buildStatus</param>
        /// <param name="commentCounts">commentCounts</param>
        /// <param name="createdTime">createdTime</param>
        /// <param name="label">label</param>
        /// <param name="mergeableState">mergeableState</param>
        /// <param name="number">number</param>
        /// <param name="pinned">pinned</param>
        /// <param name="slug">slug</param>
        /// <param name="slugFreeze">slugFreeze</param>
        /// <param name="srcRef">srcRef</param>
        /// <param name="state">state</param>
        /// <param name="targetRef">targetRef</param>
        /// <param name="title">title</param>
        /// <param name="todoId">todoId</param>
        /// <param name="updatedTime">updatedTime</param>
        [JsonConstructor]
        public DtoPullRequestData(Option<int?> associatedIssueCounts = default, Option<string?> buildStatus = default, Option<int?> commentCounts = default, Option<string?> createdTime = default, Option<List<DtoLabel>?> label = default, Option<string?> mergeableState = default, Option<int?> number = default, Option<bool?> pinned = default, Option<string?> slug = default, Option<bool?> slugFreeze = default, Option<string?> srcRef = default, Option<string?> state = default, Option<string?> targetRef = default, Option<string?> title = default, Option<string?> todoId = default, Option<string?> updatedTime = default)
        {
            AssociatedIssueCountsOption = associatedIssueCounts;
            BuildStatusOption = buildStatus;
            CommentCountsOption = commentCounts;
            CreatedTimeOption = createdTime;
            LabelOption = label;
            MergeableStateOption = mergeableState;
            NumberOption = number;
            PinnedOption = pinned;
            SlugOption = slug;
            SlugFreezeOption = slugFreeze;
            SrcRefOption = srcRef;
            StateOption = state;
            TargetRefOption = targetRef;
            TitleOption = title;
            TodoIdOption = todoId;
            UpdatedTimeOption = updatedTime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AssociatedIssueCounts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AssociatedIssueCountsOption { get; private set; }

        /// <summary>
        /// Gets or Sets AssociatedIssueCounts
        /// </summary>
        [JsonPropertyName("associated_issue_counts")]
        public int? AssociatedIssueCounts { get { return this.AssociatedIssueCountsOption; } set { this.AssociatedIssueCountsOption = new(value); } }

        /// <summary>
        /// Used to track the state of BuildStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BuildStatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets BuildStatus
        /// </summary>
        [JsonPropertyName("build_status")]
        public string? BuildStatus { get { return this.BuildStatusOption; } set { this.BuildStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommentCounts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CommentCountsOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommentCounts
        /// </summary>
        [JsonPropertyName("comment_counts")]
        public int? CommentCounts { get { return this.CommentCountsOption; } set { this.CommentCountsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedTime
        /// </summary>
        [JsonPropertyName("created_time")]
        public string? CreatedTime { get { return this.CreatedTimeOption; } set { this.CreatedTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Label
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoLabel>?> LabelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [JsonPropertyName("label")]
        public List<DtoLabel>? Label { get { return this.LabelOption; } set { this.LabelOption = new(value); } }

        /// <summary>
        /// Used to track the state of MergeableState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MergeableStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets MergeableState
        /// </summary>
        [JsonPropertyName("mergeable_state")]
        public string? MergeableState { get { return this.MergeableStateOption; } set { this.MergeableStateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public int? Number { get { return this.NumberOption; } set { this.NumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Pinned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PinnedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Pinned
        /// </summary>
        [JsonPropertyName("pinned")]
        public bool? Pinned { get { return this.PinnedOption; } set { this.PinnedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Slug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SlugOption { get; private set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [JsonPropertyName("slug")]
        public string? Slug { get { return this.SlugOption; } set { this.SlugOption = new(value); } }

        /// <summary>
        /// Used to track the state of SlugFreeze
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SlugFreezeOption { get; private set; }

        /// <summary>
        /// Gets or Sets SlugFreeze
        /// </summary>
        [JsonPropertyName("slug_freeze")]
        public bool? SlugFreeze { get { return this.SlugFreezeOption; } set { this.SlugFreezeOption = new(value); } }

        /// <summary>
        /// Used to track the state of SrcRef
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SrcRefOption { get; private set; }

        /// <summary>
        /// Gets or Sets SrcRef
        /// </summary>
        [JsonPropertyName("src_ref")]
        public string? SrcRef { get { return this.SrcRefOption; } set { this.SrcRefOption = new(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public string? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Used to track the state of TargetRef
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TargetRefOption { get; private set; }

        /// <summary>
        /// Gets or Sets TargetRef
        /// </summary>
        [JsonPropertyName("target_ref")]
        public string? TargetRef { get { return this.TargetRefOption; } set { this.TargetRefOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of TodoId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TodoIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TodoId
        /// </summary>
        [JsonPropertyName("todo_id")]
        public string? TodoId { get { return this.TodoIdOption; } set { this.TodoIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedTime
        /// </summary>
        [JsonPropertyName("updated_time")]
        public string? UpdatedTime { get { return this.UpdatedTimeOption; } set { this.UpdatedTimeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoPullRequestData {\n");
            sb.Append("  AssociatedIssueCounts: ").Append(AssociatedIssueCounts).Append("\n");
            sb.Append("  BuildStatus: ").Append(BuildStatus).Append("\n");
            sb.Append("  CommentCounts: ").Append(CommentCounts).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  MergeableState: ").Append(MergeableState).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Pinned: ").Append(Pinned).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  SlugFreeze: ").Append(SlugFreeze).Append("\n");
            sb.Append("  SrcRef: ").Append(SrcRef).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TargetRef: ").Append(TargetRef).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TodoId: ").Append(TodoId).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoPullRequestData" />
    /// </summary>
    public class DtoPullRequestDataJsonConverter : JsonConverter<DtoPullRequestData>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoPullRequestData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoPullRequestData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> associatedIssueCounts = default;
            Option<string?> buildStatus = default;
            Option<int?> commentCounts = default;
            Option<string?> createdTime = default;
            Option<List<DtoLabel>?> label = default;
            Option<string?> mergeableState = default;
            Option<int?> number = default;
            Option<bool?> pinned = default;
            Option<string?> slug = default;
            Option<bool?> slugFreeze = default;
            Option<string?> srcRef = default;
            Option<string?> state = default;
            Option<string?> targetRef = default;
            Option<string?> title = default;
            Option<string?> todoId = default;
            Option<string?> updatedTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "associated_issue_counts":
                            associatedIssueCounts = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "build_status":
                            buildStatus = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "comment_counts":
                            commentCounts = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "created_time":
                            createdTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "label":
                            label = new Option<List<DtoLabel>?>(JsonSerializer.Deserialize<List<DtoLabel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "mergeable_state":
                            mergeableState = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "number":
                            number = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pinned":
                            pinned = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "slug":
                            slug = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "slug_freeze":
                            slugFreeze = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "src_ref":
                            srcRef = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "target_ref":
                            targetRef = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "todo_id":
                            todoId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_time":
                            updatedTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (associatedIssueCounts.IsSet && associatedIssueCounts.Value == null)
                throw new ArgumentNullException(nameof(associatedIssueCounts), "Property is not nullable for class DtoPullRequestData.");

            if (buildStatus.IsSet && buildStatus.Value == null)
                throw new ArgumentNullException(nameof(buildStatus), "Property is not nullable for class DtoPullRequestData.");

            if (commentCounts.IsSet && commentCounts.Value == null)
                throw new ArgumentNullException(nameof(commentCounts), "Property is not nullable for class DtoPullRequestData.");

            if (createdTime.IsSet && createdTime.Value == null)
                throw new ArgumentNullException(nameof(createdTime), "Property is not nullable for class DtoPullRequestData.");

            if (label.IsSet && label.Value == null)
                throw new ArgumentNullException(nameof(label), "Property is not nullable for class DtoPullRequestData.");

            if (mergeableState.IsSet && mergeableState.Value == null)
                throw new ArgumentNullException(nameof(mergeableState), "Property is not nullable for class DtoPullRequestData.");

            if (number.IsSet && number.Value == null)
                throw new ArgumentNullException(nameof(number), "Property is not nullable for class DtoPullRequestData.");

            if (pinned.IsSet && pinned.Value == null)
                throw new ArgumentNullException(nameof(pinned), "Property is not nullable for class DtoPullRequestData.");

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug), "Property is not nullable for class DtoPullRequestData.");

            if (slugFreeze.IsSet && slugFreeze.Value == null)
                throw new ArgumentNullException(nameof(slugFreeze), "Property is not nullable for class DtoPullRequestData.");

            if (srcRef.IsSet && srcRef.Value == null)
                throw new ArgumentNullException(nameof(srcRef), "Property is not nullable for class DtoPullRequestData.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class DtoPullRequestData.");

            if (targetRef.IsSet && targetRef.Value == null)
                throw new ArgumentNullException(nameof(targetRef), "Property is not nullable for class DtoPullRequestData.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class DtoPullRequestData.");

            if (todoId.IsSet && todoId.Value == null)
                throw new ArgumentNullException(nameof(todoId), "Property is not nullable for class DtoPullRequestData.");

            if (updatedTime.IsSet && updatedTime.Value == null)
                throw new ArgumentNullException(nameof(updatedTime), "Property is not nullable for class DtoPullRequestData.");

            return new DtoPullRequestData(associatedIssueCounts, buildStatus, commentCounts, createdTime, label, mergeableState, number, pinned, slug, slugFreeze, srcRef, state, targetRef, title, todoId, updatedTime);
        }

        /// <summary>
        /// Serializes a <see cref="DtoPullRequestData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoPullRequestData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoPullRequestData dtoPullRequestData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoPullRequestData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoPullRequestData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoPullRequestData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoPullRequestData dtoPullRequestData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoPullRequestData.BuildStatusOption.IsSet && dtoPullRequestData.BuildStatus == null)
                throw new ArgumentNullException(nameof(dtoPullRequestData.BuildStatus), "Property is required for class DtoPullRequestData.");

            if (dtoPullRequestData.CreatedTimeOption.IsSet && dtoPullRequestData.CreatedTime == null)
                throw new ArgumentNullException(nameof(dtoPullRequestData.CreatedTime), "Property is required for class DtoPullRequestData.");

            if (dtoPullRequestData.LabelOption.IsSet && dtoPullRequestData.Label == null)
                throw new ArgumentNullException(nameof(dtoPullRequestData.Label), "Property is required for class DtoPullRequestData.");

            if (dtoPullRequestData.MergeableStateOption.IsSet && dtoPullRequestData.MergeableState == null)
                throw new ArgumentNullException(nameof(dtoPullRequestData.MergeableState), "Property is required for class DtoPullRequestData.");

            if (dtoPullRequestData.SlugOption.IsSet && dtoPullRequestData.Slug == null)
                throw new ArgumentNullException(nameof(dtoPullRequestData.Slug), "Property is required for class DtoPullRequestData.");

            if (dtoPullRequestData.SrcRefOption.IsSet && dtoPullRequestData.SrcRef == null)
                throw new ArgumentNullException(nameof(dtoPullRequestData.SrcRef), "Property is required for class DtoPullRequestData.");

            if (dtoPullRequestData.StateOption.IsSet && dtoPullRequestData.State == null)
                throw new ArgumentNullException(nameof(dtoPullRequestData.State), "Property is required for class DtoPullRequestData.");

            if (dtoPullRequestData.TargetRefOption.IsSet && dtoPullRequestData.TargetRef == null)
                throw new ArgumentNullException(nameof(dtoPullRequestData.TargetRef), "Property is required for class DtoPullRequestData.");

            if (dtoPullRequestData.TitleOption.IsSet && dtoPullRequestData.Title == null)
                throw new ArgumentNullException(nameof(dtoPullRequestData.Title), "Property is required for class DtoPullRequestData.");

            if (dtoPullRequestData.TodoIdOption.IsSet && dtoPullRequestData.TodoId == null)
                throw new ArgumentNullException(nameof(dtoPullRequestData.TodoId), "Property is required for class DtoPullRequestData.");

            if (dtoPullRequestData.UpdatedTimeOption.IsSet && dtoPullRequestData.UpdatedTime == null)
                throw new ArgumentNullException(nameof(dtoPullRequestData.UpdatedTime), "Property is required for class DtoPullRequestData.");

            if (dtoPullRequestData.AssociatedIssueCountsOption.IsSet)
                writer.WriteNumber("associated_issue_counts", dtoPullRequestData.AssociatedIssueCountsOption.Value!.Value);

            if (dtoPullRequestData.BuildStatusOption.IsSet)
                writer.WriteString("build_status", dtoPullRequestData.BuildStatus);

            if (dtoPullRequestData.CommentCountsOption.IsSet)
                writer.WriteNumber("comment_counts", dtoPullRequestData.CommentCountsOption.Value!.Value);

            if (dtoPullRequestData.CreatedTimeOption.IsSet)
                writer.WriteString("created_time", dtoPullRequestData.CreatedTime);

            if (dtoPullRequestData.LabelOption.IsSet)
            {
                writer.WritePropertyName("label");
                JsonSerializer.Serialize(writer, dtoPullRequestData.Label, jsonSerializerOptions);
            }
            if (dtoPullRequestData.MergeableStateOption.IsSet)
                writer.WriteString("mergeable_state", dtoPullRequestData.MergeableState);

            if (dtoPullRequestData.NumberOption.IsSet)
                writer.WriteNumber("number", dtoPullRequestData.NumberOption.Value!.Value);

            if (dtoPullRequestData.PinnedOption.IsSet)
                writer.WriteBoolean("pinned", dtoPullRequestData.PinnedOption.Value!.Value);

            if (dtoPullRequestData.SlugOption.IsSet)
                writer.WriteString("slug", dtoPullRequestData.Slug);

            if (dtoPullRequestData.SlugFreezeOption.IsSet)
                writer.WriteBoolean("slug_freeze", dtoPullRequestData.SlugFreezeOption.Value!.Value);

            if (dtoPullRequestData.SrcRefOption.IsSet)
                writer.WriteString("src_ref", dtoPullRequestData.SrcRef);

            if (dtoPullRequestData.StateOption.IsSet)
                writer.WriteString("state", dtoPullRequestData.State);

            if (dtoPullRequestData.TargetRefOption.IsSet)
                writer.WriteString("target_ref", dtoPullRequestData.TargetRef);

            if (dtoPullRequestData.TitleOption.IsSet)
                writer.WriteString("title", dtoPullRequestData.Title);

            if (dtoPullRequestData.TodoIdOption.IsSet)
                writer.WriteString("todo_id", dtoPullRequestData.TodoId);

            if (dtoPullRequestData.UpdatedTimeOption.IsSet)
                writer.WriteString("updated_time", dtoPullRequestData.UpdatedTime);
        }
    }
}
