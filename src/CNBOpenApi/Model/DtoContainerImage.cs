// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoContainerImage
    /// </summary>
    public partial class DtoContainerImage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoContainerImage" /> class.
        /// </summary>
        /// <param name="arch">arch</param>
        /// <param name="digest">digest</param>
        /// <param name="layers">layers</param>
        /// <param name="os">os</param>
        /// <param name="size">size</param>
        [JsonConstructor]
        public DtoContainerImage(Option<string?> arch = default, Option<string?> digest = default, Option<List<DtoContainerImageLayer>?> layers = default, Option<string?> os = default, Option<int?> size = default)
        {
            ArchOption = arch;
            DigestOption = digest;
            LayersOption = layers;
            OsOption = os;
            SizeOption = size;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Arch
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ArchOption { get; private set; }

        /// <summary>
        /// Gets or Sets Arch
        /// </summary>
        [JsonPropertyName("arch")]
        public string? Arch { get { return this.ArchOption; } set { this.ArchOption = new(value); } }

        /// <summary>
        /// Used to track the state of Digest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DigestOption { get; private set; }

        /// <summary>
        /// Gets or Sets Digest
        /// </summary>
        [JsonPropertyName("digest")]
        public string? Digest { get { return this.DigestOption; } set { this.DigestOption = new(value); } }

        /// <summary>
        /// Used to track the state of Layers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoContainerImageLayer>?> LayersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Layers
        /// </summary>
        [JsonPropertyName("layers")]
        public List<DtoContainerImageLayer>? Layers { get { return this.LayersOption; } set { this.LayersOption = new(value); } }

        /// <summary>
        /// Used to track the state of Os
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Os
        /// </summary>
        [JsonPropertyName("os")]
        public string? Os { get { return this.OsOption; } set { this.OsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public int? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoContainerImage {\n");
            sb.Append("  Arch: ").Append(Arch).Append("\n");
            sb.Append("  Digest: ").Append(Digest).Append("\n");
            sb.Append("  Layers: ").Append(Layers).Append("\n");
            sb.Append("  Os: ").Append(Os).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoContainerImage" />
    /// </summary>
    public class DtoContainerImageJsonConverter : JsonConverter<DtoContainerImage>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoContainerImage" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoContainerImage Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> arch = default;
            Option<string?> digest = default;
            Option<List<DtoContainerImageLayer>?> layers = default;
            Option<string?> os = default;
            Option<int?> size = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "arch":
                            arch = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "digest":
                            digest = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "layers":
                            layers = new Option<List<DtoContainerImageLayer>?>(JsonSerializer.Deserialize<List<DtoContainerImageLayer>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "os":
                            os = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (arch.IsSet && arch.Value == null)
                throw new ArgumentNullException(nameof(arch), "Property is not nullable for class DtoContainerImage.");

            if (digest.IsSet && digest.Value == null)
                throw new ArgumentNullException(nameof(digest), "Property is not nullable for class DtoContainerImage.");

            if (layers.IsSet && layers.Value == null)
                throw new ArgumentNullException(nameof(layers), "Property is not nullable for class DtoContainerImage.");

            if (os.IsSet && os.Value == null)
                throw new ArgumentNullException(nameof(os), "Property is not nullable for class DtoContainerImage.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class DtoContainerImage.");

            return new DtoContainerImage(arch, digest, layers, os, size);
        }

        /// <summary>
        /// Serializes a <see cref="DtoContainerImage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoContainerImage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoContainerImage dtoContainerImage, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoContainerImage, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoContainerImage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoContainerImage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoContainerImage dtoContainerImage, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoContainerImage.ArchOption.IsSet && dtoContainerImage.Arch == null)
                throw new ArgumentNullException(nameof(dtoContainerImage.Arch), "Property is required for class DtoContainerImage.");

            if (dtoContainerImage.DigestOption.IsSet && dtoContainerImage.Digest == null)
                throw new ArgumentNullException(nameof(dtoContainerImage.Digest), "Property is required for class DtoContainerImage.");

            if (dtoContainerImage.LayersOption.IsSet && dtoContainerImage.Layers == null)
                throw new ArgumentNullException(nameof(dtoContainerImage.Layers), "Property is required for class DtoContainerImage.");

            if (dtoContainerImage.OsOption.IsSet && dtoContainerImage.Os == null)
                throw new ArgumentNullException(nameof(dtoContainerImage.Os), "Property is required for class DtoContainerImage.");

            if (dtoContainerImage.ArchOption.IsSet)
                writer.WriteString("arch", dtoContainerImage.Arch);

            if (dtoContainerImage.DigestOption.IsSet)
                writer.WriteString("digest", dtoContainerImage.Digest);

            if (dtoContainerImage.LayersOption.IsSet)
            {
                writer.WritePropertyName("layers");
                JsonSerializer.Serialize(writer, dtoContainerImage.Layers, jsonSerializerOptions);
            }
            if (dtoContainerImage.OsOption.IsSet)
                writer.WriteString("os", dtoContainerImage.Os);

            if (dtoContainerImage.SizeOption.IsSet)
                writer.WriteNumber("size", dtoContainerImage.SizeOption.Value!.Value);
        }
    }
}
