// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoActivityUsers
    /// </summary>
    public partial class DtoActivityUsers : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoActivityUsers" /> class.
        /// </summary>
        /// <param name="address">address</param>
        /// <param name="appreciateStatus">用户赞赏码状态，0-无赞赏码，1-有</param>
        /// <param name="avatar">avatar</param>
        /// <param name="bio">bio</param>
        /// <param name="company">company</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="email">email</param>
        /// <param name="followCount">followCount</param>
        /// <param name="followMissionCount">followMissionCount</param>
        /// <param name="followRepoCount">followRepoCount</param>
        /// <param name="followerCount">followerCount</param>
        /// <param name="freeze">freeze</param>
        /// <param name="gender">gender</param>
        /// <param name="groupCount">groupCount</param>
        /// <param name="id">id</param>
        /// <param name="isFollow">isFollow</param>
        /// <param name="location">location</param>
        /// <param name="missionCount">missionCount</param>
        /// <param name="nickname">nickname</param>
        /// <param name="registryCount">registryCount</param>
        /// <param name="repoCount">repoCount</param>
        /// <param name="rewardAmount">rewardAmount</param>
        /// <param name="rewardCount">rewardCount</param>
        /// <param name="site">site</param>
        /// <param name="starsCount">starsCount</param>
        /// <param name="type">type</param>
        /// <param name="username">username</param>
        /// <param name="verified">认证类型</param>
        /// <param name="verifiedExpireIn">认证过期时间</param>
        /// <param name="wechatMp">wechatMp</param>
        /// <param name="wechatMpQrcode">wechatMpQrcode</param>
        [JsonConstructor]
        public DtoActivityUsers(Option<string?> address = default, Option<int?> appreciateStatus = default, Option<string?> avatar = default, Option<string?> bio = default, Option<string?> company = default, Option<string?> createdAt = default, Option<string?> email = default, Option<int?> followCount = default, Option<int?> followMissionCount = default, Option<int?> followRepoCount = default, Option<int?> followerCount = default, Option<bool?> freeze = default, Option<int?> gender = default, Option<int?> groupCount = default, Option<string?> id = default, Option<bool?> isFollow = default, Option<string?> location = default, Option<int?> missionCount = default, Option<string?> nickname = default, Option<int?> registryCount = default, Option<int?> repoCount = default, Option<int?> rewardAmount = default, Option<int?> rewardCount = default, Option<string?> site = default, Option<int?> starsCount = default, Option<ConstantUserType?> type = default, Option<string?> username = default, Option<int?> verified = default, Option<string?> verifiedExpireIn = default, Option<string?> wechatMp = default, Option<string?> wechatMpQrcode = default)
        {
            AddressOption = address;
            AppreciateStatusOption = appreciateStatus;
            AvatarOption = avatar;
            BioOption = bio;
            CompanyOption = company;
            CreatedAtOption = createdAt;
            EmailOption = email;
            FollowCountOption = followCount;
            FollowMissionCountOption = followMissionCount;
            FollowRepoCountOption = followRepoCount;
            FollowerCountOption = followerCount;
            FreezeOption = freeze;
            GenderOption = gender;
            GroupCountOption = groupCount;
            IdOption = id;
            IsFollowOption = isFollow;
            LocationOption = location;
            MissionCountOption = missionCount;
            NicknameOption = nickname;
            RegistryCountOption = registryCount;
            RepoCountOption = repoCount;
            RewardAmountOption = rewardAmount;
            RewardCountOption = rewardCount;
            SiteOption = site;
            StarsCountOption = starsCount;
            TypeOption = type;
            UsernameOption = username;
            VerifiedOption = verified;
            VerifiedExpireInOption = verifiedExpireIn;
            WechatMpOption = wechatMp;
            WechatMpQrcodeOption = wechatMpQrcode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantUserType?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public ConstantUserType? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Address
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public string? Address { get { return this.AddressOption; } set { this.AddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of AppreciateStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AppreciateStatusOption { get; private set; }

        /// <summary>
        /// 用户赞赏码状态，0-无赞赏码，1-有
        /// </summary>
        /// <value>用户赞赏码状态，0-无赞赏码，1-有</value>
        [JsonPropertyName("appreciate_status")]
        public int? AppreciateStatus { get { return this.AppreciateStatusOption; } set { this.AppreciateStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of Avatar
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AvatarOption { get; private set; }

        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        [JsonPropertyName("avatar")]
        public string? Avatar { get { return this.AvatarOption; } set { this.AvatarOption = new(value); } }

        /// <summary>
        /// Used to track the state of Bio
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BioOption { get; private set; }

        /// <summary>
        /// Gets or Sets Bio
        /// </summary>
        [JsonPropertyName("bio")]
        public string? Bio { get { return this.BioOption; } set { this.BioOption = new(value); } }

        /// <summary>
        /// Used to track the state of Company
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CompanyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [JsonPropertyName("company")]
        public string? Company { get { return this.CompanyOption; } set { this.CompanyOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of FollowCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FollowCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets FollowCount
        /// </summary>
        [JsonPropertyName("follow_count")]
        public int? FollowCount { get { return this.FollowCountOption; } set { this.FollowCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of FollowMissionCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FollowMissionCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets FollowMissionCount
        /// </summary>
        [JsonPropertyName("follow_mission_count")]
        public int? FollowMissionCount { get { return this.FollowMissionCountOption; } set { this.FollowMissionCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of FollowRepoCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FollowRepoCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets FollowRepoCount
        /// </summary>
        [JsonPropertyName("follow_repo_count")]
        public int? FollowRepoCount { get { return this.FollowRepoCountOption; } set { this.FollowRepoCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of FollowerCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FollowerCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets FollowerCount
        /// </summary>
        [JsonPropertyName("follower_count")]
        public int? FollowerCount { get { return this.FollowerCountOption; } set { this.FollowerCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Freeze
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FreezeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Freeze
        /// </summary>
        [JsonPropertyName("freeze")]
        public bool? Freeze { get { return this.FreezeOption; } set { this.FreezeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Gender
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> GenderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [JsonPropertyName("gender")]
        public int? Gender { get { return this.GenderOption; } set { this.GenderOption = new(value); } }

        /// <summary>
        /// Used to track the state of GroupCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> GroupCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets GroupCount
        /// </summary>
        [JsonPropertyName("group_count")]
        public int? GroupCount { get { return this.GroupCountOption; } set { this.GroupCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsFollow
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsFollowOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsFollow
        /// </summary>
        [JsonPropertyName("is_follow")]
        public bool? IsFollow { get { return this.IsFollowOption; } set { this.IsFollowOption = new(value); } }

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [JsonPropertyName("location")]
        public string? Location { get { return this.LocationOption; } set { this.LocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of MissionCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MissionCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets MissionCount
        /// </summary>
        [JsonPropertyName("mission_count")]
        public int? MissionCount { get { return this.MissionCountOption; } set { this.MissionCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Nickname
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NicknameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [JsonPropertyName("nickname")]
        public string? Nickname { get { return this.NicknameOption; } set { this.NicknameOption = new(value); } }

        /// <summary>
        /// Used to track the state of RegistryCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RegistryCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets RegistryCount
        /// </summary>
        [JsonPropertyName("registry_count")]
        public int? RegistryCount { get { return this.RegistryCountOption; } set { this.RegistryCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of RepoCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RepoCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets RepoCount
        /// </summary>
        [JsonPropertyName("repo_count")]
        public int? RepoCount { get { return this.RepoCountOption; } set { this.RepoCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of RewardAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RewardAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets RewardAmount
        /// </summary>
        [JsonPropertyName("reward_amount")]
        public int? RewardAmount { get { return this.RewardAmountOption; } set { this.RewardAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of RewardCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RewardCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets RewardCount
        /// </summary>
        [JsonPropertyName("reward_count")]
        public int? RewardCount { get { return this.RewardCountOption; } set { this.RewardCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Site
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SiteOption { get; private set; }

        /// <summary>
        /// Gets or Sets Site
        /// </summary>
        [JsonPropertyName("site")]
        public string? Site { get { return this.SiteOption; } set { this.SiteOption = new(value); } }

        /// <summary>
        /// Used to track the state of StarsCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StarsCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets StarsCount
        /// </summary>
        [JsonPropertyName("stars_count")]
        public int? StarsCount { get { return this.StarsCountOption; } set { this.StarsCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Username
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UsernameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [JsonPropertyName("username")]
        public string? Username { get { return this.UsernameOption; } set { this.UsernameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Verified
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VerifiedOption { get; private set; }

        /// <summary>
        /// 认证类型
        /// </summary>
        /// <value>认证类型</value>
        [JsonPropertyName("verified")]
        public int? Verified { get { return this.VerifiedOption; } set { this.VerifiedOption = new(value); } }

        /// <summary>
        /// Used to track the state of VerifiedExpireIn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VerifiedExpireInOption { get; private set; }

        /// <summary>
        /// 认证过期时间
        /// </summary>
        /// <value>认证过期时间</value>
        [JsonPropertyName("verified_expire_in")]
        public string? VerifiedExpireIn { get { return this.VerifiedExpireInOption; } set { this.VerifiedExpireInOption = new(value); } }

        /// <summary>
        /// Used to track the state of WechatMp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WechatMpOption { get; private set; }

        /// <summary>
        /// Gets or Sets WechatMp
        /// </summary>
        [JsonPropertyName("wechat_mp")]
        public string? WechatMp { get { return this.WechatMpOption; } set { this.WechatMpOption = new(value); } }

        /// <summary>
        /// Used to track the state of WechatMpQrcode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WechatMpQrcodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets WechatMpQrcode
        /// </summary>
        [JsonPropertyName("wechat_mp_qrcode")]
        public string? WechatMpQrcode { get { return this.WechatMpQrcodeOption; } set { this.WechatMpQrcodeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoActivityUsers {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AppreciateStatus: ").Append(AppreciateStatus).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  Bio: ").Append(Bio).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FollowCount: ").Append(FollowCount).Append("\n");
            sb.Append("  FollowMissionCount: ").Append(FollowMissionCount).Append("\n");
            sb.Append("  FollowRepoCount: ").Append(FollowRepoCount).Append("\n");
            sb.Append("  FollowerCount: ").Append(FollowerCount).Append("\n");
            sb.Append("  Freeze: ").Append(Freeze).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  GroupCount: ").Append(GroupCount).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsFollow: ").Append(IsFollow).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  MissionCount: ").Append(MissionCount).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  RegistryCount: ").Append(RegistryCount).Append("\n");
            sb.Append("  RepoCount: ").Append(RepoCount).Append("\n");
            sb.Append("  RewardAmount: ").Append(RewardAmount).Append("\n");
            sb.Append("  RewardCount: ").Append(RewardCount).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  StarsCount: ").Append(StarsCount).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  VerifiedExpireIn: ").Append(VerifiedExpireIn).Append("\n");
            sb.Append("  WechatMp: ").Append(WechatMp).Append("\n");
            sb.Append("  WechatMpQrcode: ").Append(WechatMpQrcode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoActivityUsers" />
    /// </summary>
    public class DtoActivityUsersJsonConverter : JsonConverter<DtoActivityUsers>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoActivityUsers" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoActivityUsers Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> address = default;
            Option<int?> appreciateStatus = default;
            Option<string?> avatar = default;
            Option<string?> bio = default;
            Option<string?> company = default;
            Option<string?> createdAt = default;
            Option<string?> email = default;
            Option<int?> followCount = default;
            Option<int?> followMissionCount = default;
            Option<int?> followRepoCount = default;
            Option<int?> followerCount = default;
            Option<bool?> freeze = default;
            Option<int?> gender = default;
            Option<int?> groupCount = default;
            Option<string?> id = default;
            Option<bool?> isFollow = default;
            Option<string?> location = default;
            Option<int?> missionCount = default;
            Option<string?> nickname = default;
            Option<int?> registryCount = default;
            Option<int?> repoCount = default;
            Option<int?> rewardAmount = default;
            Option<int?> rewardCount = default;
            Option<string?> site = default;
            Option<int?> starsCount = default;
            Option<ConstantUserType?> type = default;
            Option<string?> username = default;
            Option<int?> verified = default;
            Option<string?> verifiedExpireIn = default;
            Option<string?> wechatMp = default;
            Option<string?> wechatMpQrcode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "address":
                            address = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "appreciate_status":
                            appreciateStatus = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "avatar":
                            avatar = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "bio":
                            bio = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "company":
                            company = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "follow_count":
                            followCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "follow_mission_count":
                            followMissionCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "follow_repo_count":
                            followRepoCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "follower_count":
                            followerCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "freeze":
                            freeze = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "gender":
                            gender = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "group_count":
                            groupCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_follow":
                            isFollow = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "location":
                            location = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mission_count":
                            missionCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "nickname":
                            nickname = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "registry_count":
                            registryCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "repo_count":
                            repoCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "reward_amount":
                            rewardAmount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "reward_count":
                            rewardCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "site":
                            site = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "stars_count":
                            starsCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ConstantUserType?>(ConstantUserTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "username":
                            username = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "verified":
                            verified = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "verified_expire_in":
                            verifiedExpireIn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "wechat_mp":
                            wechatMp = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "wechat_mp_qrcode":
                            wechatMpQrcode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address), "Property is not nullable for class DtoActivityUsers.");

            if (appreciateStatus.IsSet && appreciateStatus.Value == null)
                throw new ArgumentNullException(nameof(appreciateStatus), "Property is not nullable for class DtoActivityUsers.");

            if (avatar.IsSet && avatar.Value == null)
                throw new ArgumentNullException(nameof(avatar), "Property is not nullable for class DtoActivityUsers.");

            if (bio.IsSet && bio.Value == null)
                throw new ArgumentNullException(nameof(bio), "Property is not nullable for class DtoActivityUsers.");

            if (company.IsSet && company.Value == null)
                throw new ArgumentNullException(nameof(company), "Property is not nullable for class DtoActivityUsers.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class DtoActivityUsers.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class DtoActivityUsers.");

            if (followCount.IsSet && followCount.Value == null)
                throw new ArgumentNullException(nameof(followCount), "Property is not nullable for class DtoActivityUsers.");

            if (followMissionCount.IsSet && followMissionCount.Value == null)
                throw new ArgumentNullException(nameof(followMissionCount), "Property is not nullable for class DtoActivityUsers.");

            if (followRepoCount.IsSet && followRepoCount.Value == null)
                throw new ArgumentNullException(nameof(followRepoCount), "Property is not nullable for class DtoActivityUsers.");

            if (followerCount.IsSet && followerCount.Value == null)
                throw new ArgumentNullException(nameof(followerCount), "Property is not nullable for class DtoActivityUsers.");

            if (freeze.IsSet && freeze.Value == null)
                throw new ArgumentNullException(nameof(freeze), "Property is not nullable for class DtoActivityUsers.");

            if (gender.IsSet && gender.Value == null)
                throw new ArgumentNullException(nameof(gender), "Property is not nullable for class DtoActivityUsers.");

            if (groupCount.IsSet && groupCount.Value == null)
                throw new ArgumentNullException(nameof(groupCount), "Property is not nullable for class DtoActivityUsers.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DtoActivityUsers.");

            if (isFollow.IsSet && isFollow.Value == null)
                throw new ArgumentNullException(nameof(isFollow), "Property is not nullable for class DtoActivityUsers.");

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location), "Property is not nullable for class DtoActivityUsers.");

            if (missionCount.IsSet && missionCount.Value == null)
                throw new ArgumentNullException(nameof(missionCount), "Property is not nullable for class DtoActivityUsers.");

            if (nickname.IsSet && nickname.Value == null)
                throw new ArgumentNullException(nameof(nickname), "Property is not nullable for class DtoActivityUsers.");

            if (registryCount.IsSet && registryCount.Value == null)
                throw new ArgumentNullException(nameof(registryCount), "Property is not nullable for class DtoActivityUsers.");

            if (repoCount.IsSet && repoCount.Value == null)
                throw new ArgumentNullException(nameof(repoCount), "Property is not nullable for class DtoActivityUsers.");

            if (rewardAmount.IsSet && rewardAmount.Value == null)
                throw new ArgumentNullException(nameof(rewardAmount), "Property is not nullable for class DtoActivityUsers.");

            if (rewardCount.IsSet && rewardCount.Value == null)
                throw new ArgumentNullException(nameof(rewardCount), "Property is not nullable for class DtoActivityUsers.");

            if (site.IsSet && site.Value == null)
                throw new ArgumentNullException(nameof(site), "Property is not nullable for class DtoActivityUsers.");

            if (starsCount.IsSet && starsCount.Value == null)
                throw new ArgumentNullException(nameof(starsCount), "Property is not nullable for class DtoActivityUsers.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class DtoActivityUsers.");

            if (username.IsSet && username.Value == null)
                throw new ArgumentNullException(nameof(username), "Property is not nullable for class DtoActivityUsers.");

            if (verified.IsSet && verified.Value == null)
                throw new ArgumentNullException(nameof(verified), "Property is not nullable for class DtoActivityUsers.");

            if (verifiedExpireIn.IsSet && verifiedExpireIn.Value == null)
                throw new ArgumentNullException(nameof(verifiedExpireIn), "Property is not nullable for class DtoActivityUsers.");

            if (wechatMp.IsSet && wechatMp.Value == null)
                throw new ArgumentNullException(nameof(wechatMp), "Property is not nullable for class DtoActivityUsers.");

            if (wechatMpQrcode.IsSet && wechatMpQrcode.Value == null)
                throw new ArgumentNullException(nameof(wechatMpQrcode), "Property is not nullable for class DtoActivityUsers.");

            return new DtoActivityUsers(address, appreciateStatus, avatar, bio, company, createdAt, email, followCount, followMissionCount, followRepoCount, followerCount, freeze, gender, groupCount, id, isFollow, location, missionCount, nickname, registryCount, repoCount, rewardAmount, rewardCount, site, starsCount, type, username, verified, verifiedExpireIn, wechatMp, wechatMpQrcode);
        }

        /// <summary>
        /// Serializes a <see cref="DtoActivityUsers" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoActivityUsers"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoActivityUsers dtoActivityUsers, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoActivityUsers, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoActivityUsers" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoActivityUsers"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoActivityUsers dtoActivityUsers, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoActivityUsers.AddressOption.IsSet && dtoActivityUsers.Address == null)
                throw new ArgumentNullException(nameof(dtoActivityUsers.Address), "Property is required for class DtoActivityUsers.");

            if (dtoActivityUsers.AvatarOption.IsSet && dtoActivityUsers.Avatar == null)
                throw new ArgumentNullException(nameof(dtoActivityUsers.Avatar), "Property is required for class DtoActivityUsers.");

            if (dtoActivityUsers.BioOption.IsSet && dtoActivityUsers.Bio == null)
                throw new ArgumentNullException(nameof(dtoActivityUsers.Bio), "Property is required for class DtoActivityUsers.");

            if (dtoActivityUsers.CompanyOption.IsSet && dtoActivityUsers.Company == null)
                throw new ArgumentNullException(nameof(dtoActivityUsers.Company), "Property is required for class DtoActivityUsers.");

            if (dtoActivityUsers.CreatedAtOption.IsSet && dtoActivityUsers.CreatedAt == null)
                throw new ArgumentNullException(nameof(dtoActivityUsers.CreatedAt), "Property is required for class DtoActivityUsers.");

            if (dtoActivityUsers.EmailOption.IsSet && dtoActivityUsers.Email == null)
                throw new ArgumentNullException(nameof(dtoActivityUsers.Email), "Property is required for class DtoActivityUsers.");

            if (dtoActivityUsers.IdOption.IsSet && dtoActivityUsers.Id == null)
                throw new ArgumentNullException(nameof(dtoActivityUsers.Id), "Property is required for class DtoActivityUsers.");

            if (dtoActivityUsers.LocationOption.IsSet && dtoActivityUsers.Location == null)
                throw new ArgumentNullException(nameof(dtoActivityUsers.Location), "Property is required for class DtoActivityUsers.");

            if (dtoActivityUsers.NicknameOption.IsSet && dtoActivityUsers.Nickname == null)
                throw new ArgumentNullException(nameof(dtoActivityUsers.Nickname), "Property is required for class DtoActivityUsers.");

            if (dtoActivityUsers.SiteOption.IsSet && dtoActivityUsers.Site == null)
                throw new ArgumentNullException(nameof(dtoActivityUsers.Site), "Property is required for class DtoActivityUsers.");

            if (dtoActivityUsers.UsernameOption.IsSet && dtoActivityUsers.Username == null)
                throw new ArgumentNullException(nameof(dtoActivityUsers.Username), "Property is required for class DtoActivityUsers.");

            if (dtoActivityUsers.VerifiedExpireInOption.IsSet && dtoActivityUsers.VerifiedExpireIn == null)
                throw new ArgumentNullException(nameof(dtoActivityUsers.VerifiedExpireIn), "Property is required for class DtoActivityUsers.");

            if (dtoActivityUsers.WechatMpOption.IsSet && dtoActivityUsers.WechatMp == null)
                throw new ArgumentNullException(nameof(dtoActivityUsers.WechatMp), "Property is required for class DtoActivityUsers.");

            if (dtoActivityUsers.WechatMpQrcodeOption.IsSet && dtoActivityUsers.WechatMpQrcode == null)
                throw new ArgumentNullException(nameof(dtoActivityUsers.WechatMpQrcode), "Property is required for class DtoActivityUsers.");

            if (dtoActivityUsers.AddressOption.IsSet)
                writer.WriteString("address", dtoActivityUsers.Address);

            if (dtoActivityUsers.AppreciateStatusOption.IsSet)
                writer.WriteNumber("appreciate_status", dtoActivityUsers.AppreciateStatusOption.Value!.Value);

            if (dtoActivityUsers.AvatarOption.IsSet)
                writer.WriteString("avatar", dtoActivityUsers.Avatar);

            if (dtoActivityUsers.BioOption.IsSet)
                writer.WriteString("bio", dtoActivityUsers.Bio);

            if (dtoActivityUsers.CompanyOption.IsSet)
                writer.WriteString("company", dtoActivityUsers.Company);

            if (dtoActivityUsers.CreatedAtOption.IsSet)
                writer.WriteString("created_at", dtoActivityUsers.CreatedAt);

            if (dtoActivityUsers.EmailOption.IsSet)
                writer.WriteString("email", dtoActivityUsers.Email);

            if (dtoActivityUsers.FollowCountOption.IsSet)
                writer.WriteNumber("follow_count", dtoActivityUsers.FollowCountOption.Value!.Value);

            if (dtoActivityUsers.FollowMissionCountOption.IsSet)
                writer.WriteNumber("follow_mission_count", dtoActivityUsers.FollowMissionCountOption.Value!.Value);

            if (dtoActivityUsers.FollowRepoCountOption.IsSet)
                writer.WriteNumber("follow_repo_count", dtoActivityUsers.FollowRepoCountOption.Value!.Value);

            if (dtoActivityUsers.FollowerCountOption.IsSet)
                writer.WriteNumber("follower_count", dtoActivityUsers.FollowerCountOption.Value!.Value);

            if (dtoActivityUsers.FreezeOption.IsSet)
                writer.WriteBoolean("freeze", dtoActivityUsers.FreezeOption.Value!.Value);

            if (dtoActivityUsers.GenderOption.IsSet)
                writer.WriteNumber("gender", dtoActivityUsers.GenderOption.Value!.Value);

            if (dtoActivityUsers.GroupCountOption.IsSet)
                writer.WriteNumber("group_count", dtoActivityUsers.GroupCountOption.Value!.Value);

            if (dtoActivityUsers.IdOption.IsSet)
                writer.WriteString("id", dtoActivityUsers.Id);

            if (dtoActivityUsers.IsFollowOption.IsSet)
                writer.WriteBoolean("is_follow", dtoActivityUsers.IsFollowOption.Value!.Value);

            if (dtoActivityUsers.LocationOption.IsSet)
                writer.WriteString("location", dtoActivityUsers.Location);

            if (dtoActivityUsers.MissionCountOption.IsSet)
                writer.WriteNumber("mission_count", dtoActivityUsers.MissionCountOption.Value!.Value);

            if (dtoActivityUsers.NicknameOption.IsSet)
                writer.WriteString("nickname", dtoActivityUsers.Nickname);

            if (dtoActivityUsers.RegistryCountOption.IsSet)
                writer.WriteNumber("registry_count", dtoActivityUsers.RegistryCountOption.Value!.Value);

            if (dtoActivityUsers.RepoCountOption.IsSet)
                writer.WriteNumber("repo_count", dtoActivityUsers.RepoCountOption.Value!.Value);

            if (dtoActivityUsers.RewardAmountOption.IsSet)
                writer.WriteNumber("reward_amount", dtoActivityUsers.RewardAmountOption.Value!.Value);

            if (dtoActivityUsers.RewardCountOption.IsSet)
                writer.WriteNumber("reward_count", dtoActivityUsers.RewardCountOption.Value!.Value);

            if (dtoActivityUsers.SiteOption.IsSet)
                writer.WriteString("site", dtoActivityUsers.Site);

            if (dtoActivityUsers.StarsCountOption.IsSet)
                writer.WriteNumber("stars_count", dtoActivityUsers.StarsCountOption.Value!.Value);

            if (dtoActivityUsers.TypeOption.IsSet)
            {
                var typeRawValue = ConstantUserTypeValueConverter.ToJsonValue(dtoActivityUsers.Type!.Value);
                writer.WriteNumber("type", typeRawValue);
            }
            if (dtoActivityUsers.UsernameOption.IsSet)
                writer.WriteString("username", dtoActivityUsers.Username);

            if (dtoActivityUsers.VerifiedOption.IsSet)
                writer.WriteNumber("verified", dtoActivityUsers.VerifiedOption.Value!.Value);

            if (dtoActivityUsers.VerifiedExpireInOption.IsSet)
                writer.WriteString("verified_expire_in", dtoActivityUsers.VerifiedExpireIn);

            if (dtoActivityUsers.WechatMpOption.IsSet)
                writer.WriteString("wechat_mp", dtoActivityUsers.WechatMp);

            if (dtoActivityUsers.WechatMpQrcodeOption.IsSet)
                writer.WriteString("wechat_mp_qrcode", dtoActivityUsers.WechatMpQrcode);
        }
    }
}
