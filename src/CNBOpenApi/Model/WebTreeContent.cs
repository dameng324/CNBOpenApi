// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebTreeContent
    /// </summary>
    public partial class WebTreeContent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebTreeContent" /> class.
        /// </summary>
        /// <param name="branchCount">branchCount</param>
        /// <param name="cnbSettings">cnbSettings</param>
        /// <param name="commitCount">commitCount</param>
        /// <param name="commitCountExceeded">commitCountExceeded</param>
        /// <param name="entries">entries</param>
        /// <param name="fileListExceeded">fileListExceeded</param>
        /// <param name="fileListLimit">fileListLimit</param>
        /// <param name="hasWebTrigger">hasWebTrigger</param>
        /// <param name="initialized">initialized</param>
        /// <param name="isProtected">如果当前访问的是分支，那么表示是否是保护分支</param>
        /// <param name="lastCommit">lastCommit</param>
        /// <param name="name">name</param>
        /// <param name="path">path</param>
        /// <param name="readMe">readMe</param>
        /// <param name="repository">repository</param>
        /// <param name="tagCount">tagCount</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public WebTreeContent(Option<int?> branchCount = default, Option<WebPreloadFile?> cnbSettings = default, Option<int?> commitCount = default, Option<bool?> commitCountExceeded = default, Option<List<WebTreeEntry>?> entries = default, Option<bool?> fileListExceeded = default, Option<int?> fileListLimit = default, Option<bool?> hasWebTrigger = default, Option<bool?> initialized = default, Option<bool?> isProtected = default, Option<WebCommit?> lastCommit = default, Option<string?> name = default, Option<string?> path = default, Option<WebPreloadFile?> readMe = default, Option<WebRepository?> repository = default, Option<int?> tagCount = default, Option<string?> type = default)
        {
            BranchCountOption = branchCount;
            CnbSettingsOption = cnbSettings;
            CommitCountOption = commitCount;
            CommitCountExceededOption = commitCountExceeded;
            EntriesOption = entries;
            FileListExceededOption = fileListExceeded;
            FileListLimitOption = fileListLimit;
            HasWebTriggerOption = hasWebTrigger;
            InitializedOption = initialized;
            IsProtectedOption = isProtected;
            LastCommitOption = lastCommit;
            NameOption = name;
            PathOption = path;
            ReadMeOption = readMe;
            RepositoryOption = repository;
            TagCountOption = tagCount;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BranchCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BranchCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets BranchCount
        /// </summary>
        [JsonPropertyName("branch_count")]
        public int? BranchCount { get { return this.BranchCountOption; } set { this.BranchCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CnbSettings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebPreloadFile?> CnbSettingsOption { get; private set; }

        /// <summary>
        /// Gets or Sets CnbSettings
        /// </summary>
        [JsonPropertyName("cnb_settings")]
        public WebPreloadFile? CnbSettings { get { return this.CnbSettingsOption; } set { this.CnbSettingsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommitCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CommitCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommitCount
        /// </summary>
        [JsonPropertyName("commit_count")]
        public int? CommitCount { get { return this.CommitCountOption; } set { this.CommitCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommitCountExceeded
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CommitCountExceededOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommitCountExceeded
        /// </summary>
        [JsonPropertyName("commit_count_exceeded")]
        public bool? CommitCountExceeded { get { return this.CommitCountExceededOption; } set { this.CommitCountExceededOption = new(value); } }

        /// <summary>
        /// Used to track the state of Entries
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebTreeEntry>?> EntriesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Entries
        /// </summary>
        [JsonPropertyName("entries")]
        public List<WebTreeEntry>? Entries { get { return this.EntriesOption; } set { this.EntriesOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileListExceeded
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FileListExceededOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileListExceeded
        /// </summary>
        [JsonPropertyName("file_list_exceeded")]
        public bool? FileListExceeded { get { return this.FileListExceededOption; } set { this.FileListExceededOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileListLimit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FileListLimitOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileListLimit
        /// </summary>
        [JsonPropertyName("file_list_limit")]
        public int? FileListLimit { get { return this.FileListLimitOption; } set { this.FileListLimitOption = new(value); } }

        /// <summary>
        /// Used to track the state of HasWebTrigger
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasWebTriggerOption { get; private set; }

        /// <summary>
        /// Gets or Sets HasWebTrigger
        /// </summary>
        [JsonPropertyName("has_web_trigger")]
        public bool? HasWebTrigger { get { return this.HasWebTriggerOption; } set { this.HasWebTriggerOption = new(value); } }

        /// <summary>
        /// Used to track the state of Initialized
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> InitializedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Initialized
        /// </summary>
        [JsonPropertyName("initialized")]
        public bool? Initialized { get { return this.InitializedOption; } set { this.InitializedOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsProtected
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsProtectedOption { get; private set; }

        /// <summary>
        /// 如果当前访问的是分支，那么表示是否是保护分支
        /// </summary>
        /// <value>如果当前访问的是分支，那么表示是否是保护分支</value>
        [JsonPropertyName("is_protected")]
        public bool? IsProtected { get { return this.IsProtectedOption; } set { this.IsProtectedOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastCommit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebCommit?> LastCommitOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastCommit
        /// </summary>
        [JsonPropertyName("last_commit")]
        public WebCommit? LastCommit { get { return this.LastCommitOption; } set { this.LastCommitOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReadMe
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebPreloadFile?> ReadMeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReadMe
        /// </summary>
        [JsonPropertyName("read_me")]
        public WebPreloadFile? ReadMe { get { return this.ReadMeOption; } set { this.ReadMeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Repository
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebRepository?> RepositoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Repository
        /// </summary>
        [JsonPropertyName("repository")]
        public WebRepository? Repository { get { return this.RepositoryOption; } set { this.RepositoryOption = new(value); } }

        /// <summary>
        /// Used to track the state of TagCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TagCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets TagCount
        /// </summary>
        [JsonPropertyName("tag_count")]
        public int? TagCount { get { return this.TagCountOption; } set { this.TagCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebTreeContent {\n");
            sb.Append("  BranchCount: ").Append(BranchCount).Append("\n");
            sb.Append("  CnbSettings: ").Append(CnbSettings).Append("\n");
            sb.Append("  CommitCount: ").Append(CommitCount).Append("\n");
            sb.Append("  CommitCountExceeded: ").Append(CommitCountExceeded).Append("\n");
            sb.Append("  Entries: ").Append(Entries).Append("\n");
            sb.Append("  FileListExceeded: ").Append(FileListExceeded).Append("\n");
            sb.Append("  FileListLimit: ").Append(FileListLimit).Append("\n");
            sb.Append("  HasWebTrigger: ").Append(HasWebTrigger).Append("\n");
            sb.Append("  Initialized: ").Append(Initialized).Append("\n");
            sb.Append("  IsProtected: ").Append(IsProtected).Append("\n");
            sb.Append("  LastCommit: ").Append(LastCommit).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ReadMe: ").Append(ReadMe).Append("\n");
            sb.Append("  Repository: ").Append(Repository).Append("\n");
            sb.Append("  TagCount: ").Append(TagCount).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebTreeContent" />
    /// </summary>
    public class WebTreeContentJsonConverter : JsonConverter<WebTreeContent>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebTreeContent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebTreeContent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> branchCount = default;
            Option<WebPreloadFile?> cnbSettings = default;
            Option<int?> commitCount = default;
            Option<bool?> commitCountExceeded = default;
            Option<List<WebTreeEntry>?> entries = default;
            Option<bool?> fileListExceeded = default;
            Option<int?> fileListLimit = default;
            Option<bool?> hasWebTrigger = default;
            Option<bool?> initialized = default;
            Option<bool?> isProtected = default;
            Option<WebCommit?> lastCommit = default;
            Option<string?> name = default;
            Option<string?> path = default;
            Option<WebPreloadFile?> readMe = default;
            Option<WebRepository?> repository = default;
            Option<int?> tagCount = default;
            Option<string?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "branch_count":
                            branchCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "cnb_settings":
                            cnbSettings = new Option<WebPreloadFile?>(JsonSerializer.Deserialize<WebPreloadFile>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "commit_count":
                            commitCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "commit_count_exceeded":
                            commitCountExceeded = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "entries":
                            entries = new Option<List<WebTreeEntry>?>(JsonSerializer.Deserialize<List<WebTreeEntry>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "file_list_exceeded":
                            fileListExceeded = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "file_list_limit":
                            fileListLimit = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "has_web_trigger":
                            hasWebTrigger = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "initialized":
                            initialized = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_protected":
                            isProtected = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "last_commit":
                            lastCommit = new Option<WebCommit?>(JsonSerializer.Deserialize<WebCommit>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "read_me":
                            readMe = new Option<WebPreloadFile?>(JsonSerializer.Deserialize<WebPreloadFile>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "repository":
                            repository = new Option<WebRepository?>(JsonSerializer.Deserialize<WebRepository>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tag_count":
                            tagCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (branchCount.IsSet && branchCount.Value == null)
                throw new ArgumentNullException(nameof(branchCount), "Property is not nullable for class WebTreeContent.");

            if (cnbSettings.IsSet && cnbSettings.Value == null)
                throw new ArgumentNullException(nameof(cnbSettings), "Property is not nullable for class WebTreeContent.");

            if (commitCount.IsSet && commitCount.Value == null)
                throw new ArgumentNullException(nameof(commitCount), "Property is not nullable for class WebTreeContent.");

            if (commitCountExceeded.IsSet && commitCountExceeded.Value == null)
                throw new ArgumentNullException(nameof(commitCountExceeded), "Property is not nullable for class WebTreeContent.");

            if (entries.IsSet && entries.Value == null)
                throw new ArgumentNullException(nameof(entries), "Property is not nullable for class WebTreeContent.");

            if (fileListExceeded.IsSet && fileListExceeded.Value == null)
                throw new ArgumentNullException(nameof(fileListExceeded), "Property is not nullable for class WebTreeContent.");

            if (fileListLimit.IsSet && fileListLimit.Value == null)
                throw new ArgumentNullException(nameof(fileListLimit), "Property is not nullable for class WebTreeContent.");

            if (hasWebTrigger.IsSet && hasWebTrigger.Value == null)
                throw new ArgumentNullException(nameof(hasWebTrigger), "Property is not nullable for class WebTreeContent.");

            if (initialized.IsSet && initialized.Value == null)
                throw new ArgumentNullException(nameof(initialized), "Property is not nullable for class WebTreeContent.");

            if (isProtected.IsSet && isProtected.Value == null)
                throw new ArgumentNullException(nameof(isProtected), "Property is not nullable for class WebTreeContent.");

            if (lastCommit.IsSet && lastCommit.Value == null)
                throw new ArgumentNullException(nameof(lastCommit), "Property is not nullable for class WebTreeContent.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class WebTreeContent.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class WebTreeContent.");

            if (readMe.IsSet && readMe.Value == null)
                throw new ArgumentNullException(nameof(readMe), "Property is not nullable for class WebTreeContent.");

            if (repository.IsSet && repository.Value == null)
                throw new ArgumentNullException(nameof(repository), "Property is not nullable for class WebTreeContent.");

            if (tagCount.IsSet && tagCount.Value == null)
                throw new ArgumentNullException(nameof(tagCount), "Property is not nullable for class WebTreeContent.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class WebTreeContent.");

            return new WebTreeContent(branchCount, cnbSettings, commitCount, commitCountExceeded, entries, fileListExceeded, fileListLimit, hasWebTrigger, initialized, isProtected, lastCommit, name, path, readMe, repository, tagCount, type);
        }

        /// <summary>
        /// Serializes a <see cref="WebTreeContent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webTreeContent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebTreeContent webTreeContent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webTreeContent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebTreeContent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webTreeContent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebTreeContent webTreeContent, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webTreeContent.CnbSettingsOption.IsSet && webTreeContent.CnbSettings == null)
                throw new ArgumentNullException(nameof(webTreeContent.CnbSettings), "Property is required for class WebTreeContent.");

            if (webTreeContent.EntriesOption.IsSet && webTreeContent.Entries == null)
                throw new ArgumentNullException(nameof(webTreeContent.Entries), "Property is required for class WebTreeContent.");

            if (webTreeContent.LastCommitOption.IsSet && webTreeContent.LastCommit == null)
                throw new ArgumentNullException(nameof(webTreeContent.LastCommit), "Property is required for class WebTreeContent.");

            if (webTreeContent.NameOption.IsSet && webTreeContent.Name == null)
                throw new ArgumentNullException(nameof(webTreeContent.Name), "Property is required for class WebTreeContent.");

            if (webTreeContent.PathOption.IsSet && webTreeContent.Path == null)
                throw new ArgumentNullException(nameof(webTreeContent.Path), "Property is required for class WebTreeContent.");

            if (webTreeContent.ReadMeOption.IsSet && webTreeContent.ReadMe == null)
                throw new ArgumentNullException(nameof(webTreeContent.ReadMe), "Property is required for class WebTreeContent.");

            if (webTreeContent.RepositoryOption.IsSet && webTreeContent.Repository == null)
                throw new ArgumentNullException(nameof(webTreeContent.Repository), "Property is required for class WebTreeContent.");

            if (webTreeContent.TypeOption.IsSet && webTreeContent.Type == null)
                throw new ArgumentNullException(nameof(webTreeContent.Type), "Property is required for class WebTreeContent.");

            if (webTreeContent.BranchCountOption.IsSet)
                writer.WriteNumber("branch_count", webTreeContent.BranchCountOption.Value!.Value);

            if (webTreeContent.CnbSettingsOption.IsSet)
            {
                writer.WritePropertyName("cnb_settings");
                JsonSerializer.Serialize(writer, webTreeContent.CnbSettings, jsonSerializerOptions);
            }
            if (webTreeContent.CommitCountOption.IsSet)
                writer.WriteNumber("commit_count", webTreeContent.CommitCountOption.Value!.Value);

            if (webTreeContent.CommitCountExceededOption.IsSet)
                writer.WriteBoolean("commit_count_exceeded", webTreeContent.CommitCountExceededOption.Value!.Value);

            if (webTreeContent.EntriesOption.IsSet)
            {
                writer.WritePropertyName("entries");
                JsonSerializer.Serialize(writer, webTreeContent.Entries, jsonSerializerOptions);
            }
            if (webTreeContent.FileListExceededOption.IsSet)
                writer.WriteBoolean("file_list_exceeded", webTreeContent.FileListExceededOption.Value!.Value);

            if (webTreeContent.FileListLimitOption.IsSet)
                writer.WriteNumber("file_list_limit", webTreeContent.FileListLimitOption.Value!.Value);

            if (webTreeContent.HasWebTriggerOption.IsSet)
                writer.WriteBoolean("has_web_trigger", webTreeContent.HasWebTriggerOption.Value!.Value);

            if (webTreeContent.InitializedOption.IsSet)
                writer.WriteBoolean("initialized", webTreeContent.InitializedOption.Value!.Value);

            if (webTreeContent.IsProtectedOption.IsSet)
                writer.WriteBoolean("is_protected", webTreeContent.IsProtectedOption.Value!.Value);

            if (webTreeContent.LastCommitOption.IsSet)
            {
                writer.WritePropertyName("last_commit");
                JsonSerializer.Serialize(writer, webTreeContent.LastCommit, jsonSerializerOptions);
            }
            if (webTreeContent.NameOption.IsSet)
                writer.WriteString("name", webTreeContent.Name);

            if (webTreeContent.PathOption.IsSet)
                writer.WriteString("path", webTreeContent.Path);

            if (webTreeContent.ReadMeOption.IsSet)
            {
                writer.WritePropertyName("read_me");
                JsonSerializer.Serialize(writer, webTreeContent.ReadMe, jsonSerializerOptions);
            }
            if (webTreeContent.RepositoryOption.IsSet)
            {
                writer.WritePropertyName("repository");
                JsonSerializer.Serialize(writer, webTreeContent.Repository, jsonSerializerOptions);
            }
            if (webTreeContent.TagCountOption.IsSet)
                writer.WriteNumber("tag_count", webTreeContent.TagCountOption.Value!.Value);

            if (webTreeContent.TypeOption.IsSet)
                writer.WriteString("type", webTreeContent.Type);
        }
    }
}
