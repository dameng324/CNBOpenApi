// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// ApiPushLimitSettings
    /// </summary>
    public partial class ApiPushLimitSettings : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiPushLimitSettings" /> class.
        /// </summary>
        /// <param name="allowSinglePushNumber">allowSinglePushNumber</param>
        /// <param name="checkSinglePushNumber">checkSinglePushNumber</param>
        /// <param name="onlyMasterCanPushTag">onlyMasterCanPushTag</param>
        /// <param name="pushCommitMustBe">pushCommitMustBe</param>
        [JsonConstructor]
        public ApiPushLimitSettings(Option<int?> allowSinglePushNumber = default, Option<bool?> checkSinglePushNumber = default, Option<bool?> onlyMasterCanPushTag = default, Option<string?> pushCommitMustBe = default)
        {
            AllowSinglePushNumberOption = allowSinglePushNumber;
            CheckSinglePushNumberOption = checkSinglePushNumber;
            OnlyMasterCanPushTagOption = onlyMasterCanPushTag;
            PushCommitMustBeOption = pushCommitMustBe;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AllowSinglePushNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AllowSinglePushNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowSinglePushNumber
        /// </summary>
        [JsonPropertyName("allow_single_push_number")]
        public int? AllowSinglePushNumber { get { return this.AllowSinglePushNumberOption; } set { this.AllowSinglePushNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of CheckSinglePushNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckSinglePushNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets CheckSinglePushNumber
        /// </summary>
        [JsonPropertyName("check_single_push_number")]
        public bool? CheckSinglePushNumber { get { return this.CheckSinglePushNumberOption; } set { this.CheckSinglePushNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of OnlyMasterCanPushTag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> OnlyMasterCanPushTagOption { get; private set; }

        /// <summary>
        /// Gets or Sets OnlyMasterCanPushTag
        /// </summary>
        [JsonPropertyName("only_master_can_push_tag")]
        public bool? OnlyMasterCanPushTag { get { return this.OnlyMasterCanPushTagOption; } set { this.OnlyMasterCanPushTagOption = new(value); } }

        /// <summary>
        /// Used to track the state of PushCommitMustBe
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PushCommitMustBeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PushCommitMustBe
        /// </summary>
        [JsonPropertyName("push_commit_must_be")]
        public string? PushCommitMustBe { get { return this.PushCommitMustBeOption; } set { this.PushCommitMustBeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiPushLimitSettings {\n");
            sb.Append("  AllowSinglePushNumber: ").Append(AllowSinglePushNumber).Append("\n");
            sb.Append("  CheckSinglePushNumber: ").Append(CheckSinglePushNumber).Append("\n");
            sb.Append("  OnlyMasterCanPushTag: ").Append(OnlyMasterCanPushTag).Append("\n");
            sb.Append("  PushCommitMustBe: ").Append(PushCommitMustBe).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApiPushLimitSettings" />
    /// </summary>
    public class ApiPushLimitSettingsJsonConverter : JsonConverter<ApiPushLimitSettings>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApiPushLimitSettings" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApiPushLimitSettings Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> allowSinglePushNumber = default;
            Option<bool?> checkSinglePushNumber = default;
            Option<bool?> onlyMasterCanPushTag = default;
            Option<string?> pushCommitMustBe = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "allow_single_push_number":
                            allowSinglePushNumber = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "check_single_push_number":
                            checkSinglePushNumber = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "only_master_can_push_tag":
                            onlyMasterCanPushTag = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "push_commit_must_be":
                            pushCommitMustBe = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (allowSinglePushNumber.IsSet && allowSinglePushNumber.Value == null)
                throw new ArgumentNullException(nameof(allowSinglePushNumber), "Property is not nullable for class ApiPushLimitSettings.");

            if (checkSinglePushNumber.IsSet && checkSinglePushNumber.Value == null)
                throw new ArgumentNullException(nameof(checkSinglePushNumber), "Property is not nullable for class ApiPushLimitSettings.");

            if (onlyMasterCanPushTag.IsSet && onlyMasterCanPushTag.Value == null)
                throw new ArgumentNullException(nameof(onlyMasterCanPushTag), "Property is not nullable for class ApiPushLimitSettings.");

            if (pushCommitMustBe.IsSet && pushCommitMustBe.Value == null)
                throw new ArgumentNullException(nameof(pushCommitMustBe), "Property is not nullable for class ApiPushLimitSettings.");

            return new ApiPushLimitSettings(allowSinglePushNumber, checkSinglePushNumber, onlyMasterCanPushTag, pushCommitMustBe);
        }

        /// <summary>
        /// Serializes a <see cref="ApiPushLimitSettings" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiPushLimitSettings"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApiPushLimitSettings apiPushLimitSettings, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, apiPushLimitSettings, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApiPushLimitSettings" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiPushLimitSettings"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApiPushLimitSettings apiPushLimitSettings, JsonSerializerOptions jsonSerializerOptions)
        {
            if (apiPushLimitSettings.PushCommitMustBeOption.IsSet && apiPushLimitSettings.PushCommitMustBe == null)
                throw new ArgumentNullException(nameof(apiPushLimitSettings.PushCommitMustBe), "Property is required for class ApiPushLimitSettings.");

            if (apiPushLimitSettings.AllowSinglePushNumberOption.IsSet)
                writer.WriteNumber("allow_single_push_number", apiPushLimitSettings.AllowSinglePushNumberOption.Value!.Value);

            if (apiPushLimitSettings.CheckSinglePushNumberOption.IsSet)
                writer.WriteBoolean("check_single_push_number", apiPushLimitSettings.CheckSinglePushNumberOption.Value!.Value);

            if (apiPushLimitSettings.OnlyMasterCanPushTagOption.IsSet)
                writer.WriteBoolean("only_master_can_push_tag", apiPushLimitSettings.OnlyMasterCanPushTagOption.Value!.Value);

            if (apiPushLimitSettings.PushCommitMustBeOption.IsSet)
                writer.WriteString("push_commit_must_be", apiPushLimitSettings.PushCommitMustBe);
        }
    }
}
