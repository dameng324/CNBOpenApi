// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// Defines constant.AccessRole
    /// </summary>
    public enum ConstantAccessRole
    {
        /// <summary>
        /// Enum Anonymous for value: 0
        /// </summary>
        Anonymous = 0,

        /// <summary>
        /// Enum Guest for value: 10
        /// </summary>
        Guest = 10,

        /// <summary>
        /// Enum REPORTER for value: 20
        /// </summary>
        REPORTER = 20,

        /// <summary>
        /// Enum DEVELOPER for value: 30
        /// </summary>
        DEVELOPER = 30,

        /// <summary>
        /// Enum MASTER for value: 40
        /// </summary>
        MASTER = 40,

        /// <summary>
        /// Enum OWNER for value: 50
        /// </summary>
        OWNER = 50
    }

    /// <summary>
    /// Converts <see cref="ConstantAccessRole"/> to and from the JSON value
    /// </summary>
    public static class ConstantAccessRoleValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ConstantAccessRole"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConstantAccessRole FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return ConstantAccessRole.Anonymous;

            if (value.Equals((10).ToString()))
                return ConstantAccessRole.Guest;

            if (value.Equals((20).ToString()))
                return ConstantAccessRole.REPORTER;

            if (value.Equals((30).ToString()))
                return ConstantAccessRole.DEVELOPER;

            if (value.Equals((40).ToString()))
                return ConstantAccessRole.MASTER;

            if (value.Equals((50).ToString()))
                return ConstantAccessRole.OWNER;

            throw new NotImplementedException($"Could not convert value to type ConstantAccessRole: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ConstantAccessRole"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConstantAccessRole? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return ConstantAccessRole.Anonymous;

            if (value.Equals((10).ToString()))
                return ConstantAccessRole.Guest;

            if (value.Equals((20).ToString()))
                return ConstantAccessRole.REPORTER;

            if (value.Equals((30).ToString()))
                return ConstantAccessRole.DEVELOPER;

            if (value.Equals((40).ToString()))
                return ConstantAccessRole.MASTER;

            if (value.Equals((50).ToString()))
                return ConstantAccessRole.OWNER;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ConstantAccessRole"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(ConstantAccessRole value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConstantAccessRole"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ConstantAccessRoleJsonConverter : JsonConverter<ConstantAccessRole>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ConstantAccessRole Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ConstantAccessRole? result = rawValue == null
                ? null
                : ConstantAccessRoleValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ConstantAccessRole to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="constantAccessRole"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ConstantAccessRole constantAccessRole, JsonSerializerOptions options)
        {
            writer.WriteStringValue(constantAccessRole.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConstantAccessRole"/>
    /// </summary>
    public class ConstantAccessRoleNullableJsonConverter : JsonConverter<ConstantAccessRole?>
    {
        /// <summary>
        /// Returns a ConstantAccessRole from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ConstantAccessRole? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ConstantAccessRole? result = rawValue == null
                ? null
                : ConstantAccessRoleValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="constantAccessRole"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ConstantAccessRole? constantAccessRole, JsonSerializerOptions options)
        {
            writer.WriteStringValue(constantAccessRole?.ToString() ?? "null");
        }
    }
}
