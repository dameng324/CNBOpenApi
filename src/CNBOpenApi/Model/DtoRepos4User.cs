// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoRepos4User
    /// </summary>
    public partial class DtoRepos4User : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoRepos4User" /> class.
        /// </summary>
        /// <param name="access">access</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="description">description</param>
        /// <param name="displayModule">displayModule</param>
        /// <param name="forkCount">forkCount</param>
        /// <param name="forkedFromRepo">预留</param>
        /// <param name="freeze">freeze</param>
        /// <param name="id">id</param>
        /// <param name="language">仓库程序语言，预留</param>
        /// <param name="languages">仓库语言</param>
        /// <param name="lastUpdateNickname">最新代码更新人姓名</param>
        /// <param name="lastUpdateUsername">最新代码更新人账户名</param>
        /// <param name="lastUpdatedAt">最新代码更新时间</param>
        /// <param name="license">license</param>
        /// <param name="markCount">markCount</param>
        /// <param name="name">name</param>
        /// <param name="openIssueCount">开启的issue数</param>
        /// <param name="openPullRequestCount">开启的pull request数</param>
        /// <param name="path">完整仓库路径</param>
        /// <param name="site">site</param>
        /// <param name="starCount">starCount</param>
        /// <param name="starTime">starTime</param>
        /// <param name="stared">stared</param>
        /// <param name="status">status</param>
        /// <param name="tags">tags</param>
        /// <param name="topics">topics</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="visibilityLevel">visibilityLevel</param>
        /// <param name="webUrl">webUrl</param>
        [JsonConstructor]
        public DtoRepos4User(Option<ConstantAccessRole?> access = default, Option<string?> createdAt = default, Option<string?> description = default, Option<ConstantRepoDisplayModule?> displayModule = default, Option<int?> forkCount = default, Option<DtoSlugs?> forkedFromRepo = default, Option<bool?> freeze = default, Option<int?> id = default, Option<string?> language = default, Option<List<DtoRepoLanguage>?> languages = default, Option<string?> lastUpdateNickname = default, Option<string?> lastUpdateUsername = default, Option<ConvertNullTime?> lastUpdatedAt = default, Option<string?> license = default, Option<int?> markCount = default, Option<string?> name = default, Option<int?> openIssueCount = default, Option<int?> openPullRequestCount = default, Option<string?> path = default, Option<string?> site = default, Option<int?> starCount = default, Option<string?> starTime = default, Option<bool?> stared = default, Option<ConstantRepoStatus?> status = default, Option<List<DtoRankDetailTagsInner>?> tags = default, Option<string?> topics = default, Option<string?> updatedAt = default, Option<ConstantVisibility?> visibilityLevel = default, Option<string?> webUrl = default)
        {
            AccessOption = access;
            CreatedAtOption = createdAt;
            DescriptionOption = description;
            DisplayModuleOption = displayModule;
            ForkCountOption = forkCount;
            ForkedFromRepoOption = forkedFromRepo;
            FreezeOption = freeze;
            IdOption = id;
            LanguageOption = language;
            LanguagesOption = languages;
            LastUpdateNicknameOption = lastUpdateNickname;
            LastUpdateUsernameOption = lastUpdateUsername;
            LastUpdatedAtOption = lastUpdatedAt;
            LicenseOption = license;
            MarkCountOption = markCount;
            NameOption = name;
            OpenIssueCountOption = openIssueCount;
            OpenPullRequestCountOption = openPullRequestCount;
            PathOption = path;
            SiteOption = site;
            StarCountOption = starCount;
            StarTimeOption = starTime;
            StaredOption = stared;
            StatusOption = status;
            TagsOption = tags;
            TopicsOption = topics;
            UpdatedAtOption = updatedAt;
            VisibilityLevelOption = visibilityLevel;
            WebUrlOption = webUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Access
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantAccessRole?> AccessOption { get; private set; }

        /// <summary>
        /// Gets or Sets Access
        /// </summary>
        [JsonPropertyName("access")]
        public ConstantAccessRole? Access { get { return this.AccessOption; } set { this.AccessOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisplayModule
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantRepoDisplayModule?> DisplayModuleOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayModule
        /// </summary>
        [JsonPropertyName("display_module")]
        public ConstantRepoDisplayModule? DisplayModule { get { return this.DisplayModuleOption; } set { this.DisplayModuleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantRepoStatus?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public ConstantRepoStatus? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of VisibilityLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantVisibility?> VisibilityLevelOption { get; private set; }

        /// <summary>
        /// Gets or Sets VisibilityLevel
        /// </summary>
        [JsonPropertyName("visibility_level")]
        public ConstantVisibility? VisibilityLevel { get { return this.VisibilityLevelOption; } set { this.VisibilityLevelOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForkCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ForkCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets ForkCount
        /// </summary>
        [JsonPropertyName("fork_count")]
        public int? ForkCount { get { return this.ForkCountOption; } set { this.ForkCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForkedFromRepo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoSlugs?> ForkedFromRepoOption { get; private set; }

        /// <summary>
        /// 预留
        /// </summary>
        /// <value>预留</value>
        [JsonPropertyName("forked_from_repo")]
        public DtoSlugs? ForkedFromRepo { get { return this.ForkedFromRepoOption; } set { this.ForkedFromRepoOption = new(value); } }

        /// <summary>
        /// Used to track the state of Freeze
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FreezeOption { get; }

        /// <summary>
        /// Gets or Sets Freeze
        /// </summary>
        [JsonPropertyName("freeze")]
        public bool? Freeze { get { return this.FreezeOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Language
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LanguageOption { get; private set; }

        /// <summary>
        /// 仓库程序语言，预留
        /// </summary>
        /// <value>仓库程序语言，预留</value>
        [JsonPropertyName("language")]
        public string? Language { get { return this.LanguageOption; } set { this.LanguageOption = new(value); } }

        /// <summary>
        /// Used to track the state of Languages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoRepoLanguage>?> LanguagesOption { get; private set; }

        /// <summary>
        /// 仓库语言
        /// </summary>
        /// <value>仓库语言</value>
        [JsonPropertyName("languages")]
        public List<DtoRepoLanguage>? Languages { get { return this.LanguagesOption; } set { this.LanguagesOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastUpdateNickname
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastUpdateNicknameOption { get; private set; }

        /// <summary>
        /// 最新代码更新人姓名
        /// </summary>
        /// <value>最新代码更新人姓名</value>
        [JsonPropertyName("last_update_nickname")]
        public string? LastUpdateNickname { get { return this.LastUpdateNicknameOption; } set { this.LastUpdateNicknameOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastUpdateUsername
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastUpdateUsernameOption { get; private set; }

        /// <summary>
        /// 最新代码更新人账户名
        /// </summary>
        /// <value>最新代码更新人账户名</value>
        [JsonPropertyName("last_update_username")]
        public string? LastUpdateUsername { get { return this.LastUpdateUsernameOption; } set { this.LastUpdateUsernameOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastUpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConvertNullTime?> LastUpdatedAtOption { get; private set; }

        /// <summary>
        /// 最新代码更新时间
        /// </summary>
        /// <value>最新代码更新时间</value>
        [JsonPropertyName("last_updated_at")]
        public ConvertNullTime? LastUpdatedAt { get { return this.LastUpdatedAtOption; } set { this.LastUpdatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of License
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LicenseOption { get; private set; }

        /// <summary>
        /// Gets or Sets License
        /// </summary>
        [JsonPropertyName("license")]
        public string? License { get { return this.LicenseOption; } set { this.LicenseOption = new(value); } }

        /// <summary>
        /// Used to track the state of MarkCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MarkCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets MarkCount
        /// </summary>
        [JsonPropertyName("mark_count")]
        public int? MarkCount { get { return this.MarkCountOption; } set { this.MarkCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of OpenIssueCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OpenIssueCountOption { get; private set; }

        /// <summary>
        /// 开启的issue数
        /// </summary>
        /// <value>开启的issue数</value>
        [JsonPropertyName("open_issue_count")]
        public int? OpenIssueCount { get { return this.OpenIssueCountOption; } set { this.OpenIssueCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of OpenPullRequestCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OpenPullRequestCountOption { get; private set; }

        /// <summary>
        /// 开启的pull request数
        /// </summary>
        /// <value>开启的pull request数</value>
        [JsonPropertyName("open_pull_request_count")]
        public int? OpenPullRequestCount { get { return this.OpenPullRequestCountOption; } set { this.OpenPullRequestCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// 完整仓库路径
        /// </summary>
        /// <value>完整仓库路径</value>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of Site
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SiteOption { get; private set; }

        /// <summary>
        /// Gets or Sets Site
        /// </summary>
        [JsonPropertyName("site")]
        public string? Site { get { return this.SiteOption; } set { this.SiteOption = new(value); } }

        /// <summary>
        /// Used to track the state of StarCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StarCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets StarCount
        /// </summary>
        [JsonPropertyName("star_count")]
        public int? StarCount { get { return this.StarCountOption; } set { this.StarCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of StarTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StarTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets StarTime
        /// </summary>
        [JsonPropertyName("star_time")]
        public string? StarTime { get { return this.StarTimeOption; } set { this.StarTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Stared
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> StaredOption { get; private set; }

        /// <summary>
        /// Gets or Sets Stared
        /// </summary>
        [JsonPropertyName("stared")]
        public bool? Stared { get { return this.StaredOption; } set { this.StaredOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoRankDetailTagsInner>?> TagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [JsonPropertyName("tags")]
        public List<DtoRankDetailTagsInner>? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Topics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TopicsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Topics
        /// </summary>
        [JsonPropertyName("topics")]
        public string? Topics { get { return this.TopicsOption; } set { this.TopicsOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of WebUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WebUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets WebUrl
        /// </summary>
        [JsonPropertyName("web_url")]
        public string? WebUrl { get { return this.WebUrlOption; } set { this.WebUrlOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoRepos4User {\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayModule: ").Append(DisplayModule).Append("\n");
            sb.Append("  ForkCount: ").Append(ForkCount).Append("\n");
            sb.Append("  ForkedFromRepo: ").Append(ForkedFromRepo).Append("\n");
            sb.Append("  Freeze: ").Append(Freeze).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  LastUpdateNickname: ").Append(LastUpdateNickname).Append("\n");
            sb.Append("  LastUpdateUsername: ").Append(LastUpdateUsername).Append("\n");
            sb.Append("  LastUpdatedAt: ").Append(LastUpdatedAt).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  MarkCount: ").Append(MarkCount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OpenIssueCount: ").Append(OpenIssueCount).Append("\n");
            sb.Append("  OpenPullRequestCount: ").Append(OpenPullRequestCount).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  StarCount: ").Append(StarCount).Append("\n");
            sb.Append("  StarTime: ").Append(StarTime).Append("\n");
            sb.Append("  Stared: ").Append(Stared).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Topics: ").Append(Topics).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  VisibilityLevel: ").Append(VisibilityLevel).Append("\n");
            sb.Append("  WebUrl: ").Append(WebUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoRepos4User" />
    /// </summary>
    public class DtoRepos4UserJsonConverter : JsonConverter<DtoRepos4User>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoRepos4User" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoRepos4User Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ConstantAccessRole?> access = default;
            Option<string?> createdAt = default;
            Option<string?> description = default;
            Option<ConstantRepoDisplayModule?> displayModule = default;
            Option<int?> forkCount = default;
            Option<DtoSlugs?> forkedFromRepo = default;
            Option<bool?> freeze = default;
            Option<int?> id = default;
            Option<string?> language = default;
            Option<List<DtoRepoLanguage>?> languages = default;
            Option<string?> lastUpdateNickname = default;
            Option<string?> lastUpdateUsername = default;
            Option<ConvertNullTime?> lastUpdatedAt = default;
            Option<string?> license = default;
            Option<int?> markCount = default;
            Option<string?> name = default;
            Option<int?> openIssueCount = default;
            Option<int?> openPullRequestCount = default;
            Option<string?> path = default;
            Option<string?> site = default;
            Option<int?> starCount = default;
            Option<string?> starTime = default;
            Option<bool?> stared = default;
            Option<ConstantRepoStatus?> status = default;
            Option<List<DtoRankDetailTagsInner>?> tags = default;
            Option<string?> topics = default;
            Option<string?> updatedAt = default;
            Option<ConstantVisibility?> visibilityLevel = default;
            Option<string?> webUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "access":
                            string? accessRawValue = utf8JsonReader.GetString();
                            if (accessRawValue != null)
                                access = new Option<ConstantAccessRole?>(ConstantAccessRoleValueConverter.FromStringOrDefault(accessRawValue));
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "display_module":
                            string? displayModuleRawValue = utf8JsonReader.GetString();
                            if (displayModuleRawValue != null)
                                displayModule = new Option<ConstantRepoDisplayModule?>(ConstantRepoDisplayModuleValueConverter.FromStringOrDefault(displayModuleRawValue));
                            break;
                        case "fork_count":
                            forkCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "forked_from_repo":
                            forkedFromRepo = new Option<DtoSlugs?>(JsonSerializer.Deserialize<DtoSlugs>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "freeze":
                            freeze = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "language":
                            language = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "languages":
                            languages = new Option<List<DtoRepoLanguage>?>(JsonSerializer.Deserialize<List<DtoRepoLanguage>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "last_update_nickname":
                            lastUpdateNickname = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_update_username":
                            lastUpdateUsername = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_updated_at":
                            lastUpdatedAt = new Option<ConvertNullTime?>(JsonSerializer.Deserialize<ConvertNullTime>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "license":
                            license = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mark_count":
                            markCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "open_issue_count":
                            openIssueCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "open_pull_request_count":
                            openPullRequestCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "site":
                            site = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "star_count":
                            starCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "star_time":
                            starTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "stared":
                            stared = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<ConstantRepoStatus?>(ConstantRepoStatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "tags":
                            tags = new Option<List<DtoRankDetailTagsInner>?>(JsonSerializer.Deserialize<List<DtoRankDetailTagsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "topics":
                            topics = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "visibility_level":
                            string? visibilityLevelRawValue = utf8JsonReader.GetString();
                            if (visibilityLevelRawValue != null)
                                visibilityLevel = new Option<ConstantVisibility?>(ConstantVisibilityValueConverter.FromStringOrDefault(visibilityLevelRawValue));
                            break;
                        case "web_url":
                            webUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (access.IsSet && access.Value == null)
                throw new ArgumentNullException(nameof(access), "Property is not nullable for class DtoRepos4User.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class DtoRepos4User.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class DtoRepos4User.");

            if (displayModule.IsSet && displayModule.Value == null)
                throw new ArgumentNullException(nameof(displayModule), "Property is not nullable for class DtoRepos4User.");

            if (forkCount.IsSet && forkCount.Value == null)
                throw new ArgumentNullException(nameof(forkCount), "Property is not nullable for class DtoRepos4User.");

            if (forkedFromRepo.IsSet && forkedFromRepo.Value == null)
                throw new ArgumentNullException(nameof(forkedFromRepo), "Property is not nullable for class DtoRepos4User.");

            if (freeze.IsSet && freeze.Value == null)
                throw new ArgumentNullException(nameof(freeze), "Property is not nullable for class DtoRepos4User.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DtoRepos4User.");

            if (language.IsSet && language.Value == null)
                throw new ArgumentNullException(nameof(language), "Property is not nullable for class DtoRepos4User.");

            if (languages.IsSet && languages.Value == null)
                throw new ArgumentNullException(nameof(languages), "Property is not nullable for class DtoRepos4User.");

            if (lastUpdateNickname.IsSet && lastUpdateNickname.Value == null)
                throw new ArgumentNullException(nameof(lastUpdateNickname), "Property is not nullable for class DtoRepos4User.");

            if (lastUpdateUsername.IsSet && lastUpdateUsername.Value == null)
                throw new ArgumentNullException(nameof(lastUpdateUsername), "Property is not nullable for class DtoRepos4User.");

            if (lastUpdatedAt.IsSet && lastUpdatedAt.Value == null)
                throw new ArgumentNullException(nameof(lastUpdatedAt), "Property is not nullable for class DtoRepos4User.");

            if (license.IsSet && license.Value == null)
                throw new ArgumentNullException(nameof(license), "Property is not nullable for class DtoRepos4User.");

            if (markCount.IsSet && markCount.Value == null)
                throw new ArgumentNullException(nameof(markCount), "Property is not nullable for class DtoRepos4User.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class DtoRepos4User.");

            if (openIssueCount.IsSet && openIssueCount.Value == null)
                throw new ArgumentNullException(nameof(openIssueCount), "Property is not nullable for class DtoRepos4User.");

            if (openPullRequestCount.IsSet && openPullRequestCount.Value == null)
                throw new ArgumentNullException(nameof(openPullRequestCount), "Property is not nullable for class DtoRepos4User.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class DtoRepos4User.");

            if (site.IsSet && site.Value == null)
                throw new ArgumentNullException(nameof(site), "Property is not nullable for class DtoRepos4User.");

            if (starCount.IsSet && starCount.Value == null)
                throw new ArgumentNullException(nameof(starCount), "Property is not nullable for class DtoRepos4User.");

            if (starTime.IsSet && starTime.Value == null)
                throw new ArgumentNullException(nameof(starTime), "Property is not nullable for class DtoRepos4User.");

            if (stared.IsSet && stared.Value == null)
                throw new ArgumentNullException(nameof(stared), "Property is not nullable for class DtoRepos4User.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class DtoRepos4User.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class DtoRepos4User.");

            if (topics.IsSet && topics.Value == null)
                throw new ArgumentNullException(nameof(topics), "Property is not nullable for class DtoRepos4User.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class DtoRepos4User.");

            if (visibilityLevel.IsSet && visibilityLevel.Value == null)
                throw new ArgumentNullException(nameof(visibilityLevel), "Property is not nullable for class DtoRepos4User.");

            if (webUrl.IsSet && webUrl.Value == null)
                throw new ArgumentNullException(nameof(webUrl), "Property is not nullable for class DtoRepos4User.");

            return new DtoRepos4User(access, createdAt, description, displayModule, forkCount, forkedFromRepo, freeze, id, language, languages, lastUpdateNickname, lastUpdateUsername, lastUpdatedAt, license, markCount, name, openIssueCount, openPullRequestCount, path, site, starCount, starTime, stared, status, tags, topics, updatedAt, visibilityLevel, webUrl);
        }

        /// <summary>
        /// Serializes a <see cref="DtoRepos4User" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoRepos4User"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoRepos4User dtoRepos4User, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoRepos4User, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoRepos4User" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoRepos4User"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoRepos4User dtoRepos4User, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoRepos4User.CreatedAtOption.IsSet && dtoRepos4User.CreatedAt == null)
                throw new ArgumentNullException(nameof(dtoRepos4User.CreatedAt), "Property is required for class DtoRepos4User.");

            if (dtoRepos4User.DescriptionOption.IsSet && dtoRepos4User.Description == null)
                throw new ArgumentNullException(nameof(dtoRepos4User.Description), "Property is required for class DtoRepos4User.");

            if (dtoRepos4User.ForkedFromRepoOption.IsSet && dtoRepos4User.ForkedFromRepo == null)
                throw new ArgumentNullException(nameof(dtoRepos4User.ForkedFromRepo), "Property is required for class DtoRepos4User.");

            if (dtoRepos4User.LanguageOption.IsSet && dtoRepos4User.Language == null)
                throw new ArgumentNullException(nameof(dtoRepos4User.Language), "Property is required for class DtoRepos4User.");

            if (dtoRepos4User.LanguagesOption.IsSet && dtoRepos4User.Languages == null)
                throw new ArgumentNullException(nameof(dtoRepos4User.Languages), "Property is required for class DtoRepos4User.");

            if (dtoRepos4User.LastUpdateNicknameOption.IsSet && dtoRepos4User.LastUpdateNickname == null)
                throw new ArgumentNullException(nameof(dtoRepos4User.LastUpdateNickname), "Property is required for class DtoRepos4User.");

            if (dtoRepos4User.LastUpdateUsernameOption.IsSet && dtoRepos4User.LastUpdateUsername == null)
                throw new ArgumentNullException(nameof(dtoRepos4User.LastUpdateUsername), "Property is required for class DtoRepos4User.");

            if (dtoRepos4User.LastUpdatedAtOption.IsSet && dtoRepos4User.LastUpdatedAt == null)
                throw new ArgumentNullException(nameof(dtoRepos4User.LastUpdatedAt), "Property is required for class DtoRepos4User.");

            if (dtoRepos4User.LicenseOption.IsSet && dtoRepos4User.License == null)
                throw new ArgumentNullException(nameof(dtoRepos4User.License), "Property is required for class DtoRepos4User.");

            if (dtoRepos4User.NameOption.IsSet && dtoRepos4User.Name == null)
                throw new ArgumentNullException(nameof(dtoRepos4User.Name), "Property is required for class DtoRepos4User.");

            if (dtoRepos4User.PathOption.IsSet && dtoRepos4User.Path == null)
                throw new ArgumentNullException(nameof(dtoRepos4User.Path), "Property is required for class DtoRepos4User.");

            if (dtoRepos4User.SiteOption.IsSet && dtoRepos4User.Site == null)
                throw new ArgumentNullException(nameof(dtoRepos4User.Site), "Property is required for class DtoRepos4User.");

            if (dtoRepos4User.StarTimeOption.IsSet && dtoRepos4User.StarTime == null)
                throw new ArgumentNullException(nameof(dtoRepos4User.StarTime), "Property is required for class DtoRepos4User.");

            if (dtoRepos4User.TagsOption.IsSet && dtoRepos4User.Tags == null)
                throw new ArgumentNullException(nameof(dtoRepos4User.Tags), "Property is required for class DtoRepos4User.");

            if (dtoRepos4User.TopicsOption.IsSet && dtoRepos4User.Topics == null)
                throw new ArgumentNullException(nameof(dtoRepos4User.Topics), "Property is required for class DtoRepos4User.");

            if (dtoRepos4User.UpdatedAtOption.IsSet && dtoRepos4User.UpdatedAt == null)
                throw new ArgumentNullException(nameof(dtoRepos4User.UpdatedAt), "Property is required for class DtoRepos4User.");

            if (dtoRepos4User.WebUrlOption.IsSet && dtoRepos4User.WebUrl == null)
                throw new ArgumentNullException(nameof(dtoRepos4User.WebUrl), "Property is required for class DtoRepos4User.");

            if (dtoRepos4User.AccessOption.IsSet)
            {
                var accessRawValue = ConstantAccessRoleValueConverter.ToJsonValue(dtoRepos4User.Access!.Value);
                writer.WriteNumber("access", accessRawValue);
            }
            if (dtoRepos4User.CreatedAtOption.IsSet)
                writer.WriteString("created_at", dtoRepos4User.CreatedAt);

            if (dtoRepos4User.DescriptionOption.IsSet)
                writer.WriteString("description", dtoRepos4User.Description);

            if (dtoRepos4User.DisplayModuleOption.IsSet)
            {
                var displayModuleRawValue = ConstantRepoDisplayModuleValueConverter.ToJsonValue(dtoRepos4User.DisplayModule!.Value);
                writer.WriteNumber("display_module", displayModuleRawValue);
            }
            if (dtoRepos4User.ForkCountOption.IsSet)
                writer.WriteNumber("fork_count", dtoRepos4User.ForkCountOption.Value!.Value);

            if (dtoRepos4User.ForkedFromRepoOption.IsSet)
            {
                writer.WritePropertyName("forked_from_repo");
                JsonSerializer.Serialize(writer, dtoRepos4User.ForkedFromRepo, jsonSerializerOptions);
            }
            if (dtoRepos4User.FreezeOption.IsSet)
                writer.WriteBoolean("freeze", dtoRepos4User.FreezeOption.Value!.Value);

            if (dtoRepos4User.IdOption.IsSet)
                writer.WriteNumber("id", dtoRepos4User.IdOption.Value!.Value);

            if (dtoRepos4User.LanguageOption.IsSet)
                writer.WriteString("language", dtoRepos4User.Language);

            if (dtoRepos4User.LanguagesOption.IsSet)
            {
                writer.WritePropertyName("languages");
                JsonSerializer.Serialize(writer, dtoRepos4User.Languages, jsonSerializerOptions);
            }
            if (dtoRepos4User.LastUpdateNicknameOption.IsSet)
                writer.WriteString("last_update_nickname", dtoRepos4User.LastUpdateNickname);

            if (dtoRepos4User.LastUpdateUsernameOption.IsSet)
                writer.WriteString("last_update_username", dtoRepos4User.LastUpdateUsername);

            if (dtoRepos4User.LastUpdatedAtOption.IsSet)
            {
                writer.WritePropertyName("last_updated_at");
                JsonSerializer.Serialize(writer, dtoRepos4User.LastUpdatedAt, jsonSerializerOptions);
            }
            if (dtoRepos4User.LicenseOption.IsSet)
                writer.WriteString("license", dtoRepos4User.License);

            if (dtoRepos4User.MarkCountOption.IsSet)
                writer.WriteNumber("mark_count", dtoRepos4User.MarkCountOption.Value!.Value);

            if (dtoRepos4User.NameOption.IsSet)
                writer.WriteString("name", dtoRepos4User.Name);

            if (dtoRepos4User.OpenIssueCountOption.IsSet)
                writer.WriteNumber("open_issue_count", dtoRepos4User.OpenIssueCountOption.Value!.Value);

            if (dtoRepos4User.OpenPullRequestCountOption.IsSet)
                writer.WriteNumber("open_pull_request_count", dtoRepos4User.OpenPullRequestCountOption.Value!.Value);

            if (dtoRepos4User.PathOption.IsSet)
                writer.WriteString("path", dtoRepos4User.Path);

            if (dtoRepos4User.SiteOption.IsSet)
                writer.WriteString("site", dtoRepos4User.Site);

            if (dtoRepos4User.StarCountOption.IsSet)
                writer.WriteNumber("star_count", dtoRepos4User.StarCountOption.Value!.Value);

            if (dtoRepos4User.StarTimeOption.IsSet)
                writer.WriteString("star_time", dtoRepos4User.StarTime);

            if (dtoRepos4User.StaredOption.IsSet)
                writer.WriteBoolean("stared", dtoRepos4User.StaredOption.Value!.Value);

            if (dtoRepos4User.StatusOption.IsSet)
            {
                var statusRawValue = ConstantRepoStatusValueConverter.ToJsonValue(dtoRepos4User.Status!.Value);
                writer.WriteNumber("status", statusRawValue);
            }
            if (dtoRepos4User.TagsOption.IsSet)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, dtoRepos4User.Tags, jsonSerializerOptions);
            }
            if (dtoRepos4User.TopicsOption.IsSet)
                writer.WriteString("topics", dtoRepos4User.Topics);

            if (dtoRepos4User.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", dtoRepos4User.UpdatedAt);

            if (dtoRepos4User.VisibilityLevelOption.IsSet)
            {
                var visibilityLevelRawValue = ConstantVisibilityValueConverter.ToJsonValue(dtoRepos4User.VisibilityLevel!.Value);
                writer.WriteNumber("visibility_level", visibilityLevelRawValue);
            }
            if (dtoRepos4User.WebUrlOption.IsSet)
                writer.WriteString("web_url", dtoRepos4User.WebUrl);
        }
    }
}
