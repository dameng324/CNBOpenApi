// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// ApiCommitDiffFilePatch
    /// </summary>
    public partial class ApiCommitDiffFilePatch : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiCommitDiffFilePatch" /> class.
        /// </summary>
        /// <param name="additions">additions</param>
        /// <param name="deletions">deletions</param>
        /// <param name="name">name</param>
        /// <param name="patch">patch</param>
        /// <param name="path">path</param>
        /// <param name="status">status</param>
        [JsonConstructor]
        public ApiCommitDiffFilePatch(Option<int?> additions = default, Option<int?> deletions = default, Option<string?> name = default, Option<string?> patch = default, Option<string?> path = default, Option<string?> status = default)
        {
            AdditionsOption = additions;
            DeletionsOption = deletions;
            NameOption = name;
            PatchOption = patch;
            PathOption = path;
            StatusOption = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Additions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AdditionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Additions
        /// </summary>
        [JsonPropertyName("additions")]
        public int? Additions { get { return this.AdditionsOption; } set { this.AdditionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Deletions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DeletionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Deletions
        /// </summary>
        [JsonPropertyName("deletions")]
        public int? Deletions { get { return this.DeletionsOption; } set { this.DeletionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Patch
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PatchOption { get; private set; }

        /// <summary>
        /// Gets or Sets Patch
        /// </summary>
        [JsonPropertyName("patch")]
        public string? Patch { get { return this.PatchOption; } set { this.PatchOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public string? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiCommitDiffFilePatch {\n");
            sb.Append("  Additions: ").Append(Additions).Append("\n");
            sb.Append("  Deletions: ").Append(Deletions).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Patch: ").Append(Patch).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApiCommitDiffFilePatch" />
    /// </summary>
    public class ApiCommitDiffFilePatchJsonConverter : JsonConverter<ApiCommitDiffFilePatch>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApiCommitDiffFilePatch" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApiCommitDiffFilePatch Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> additions = default;
            Option<int?> deletions = default;
            Option<string?> name = default;
            Option<string?> patch = default;
            Option<string?> path = default;
            Option<string?> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "additions":
                            additions = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "deletions":
                            deletions = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "patch":
                            patch = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (additions.IsSet && additions.Value == null)
                throw new ArgumentNullException(nameof(additions), "Property is not nullable for class ApiCommitDiffFilePatch.");

            if (deletions.IsSet && deletions.Value == null)
                throw new ArgumentNullException(nameof(deletions), "Property is not nullable for class ApiCommitDiffFilePatch.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ApiCommitDiffFilePatch.");

            if (patch.IsSet && patch.Value == null)
                throw new ArgumentNullException(nameof(patch), "Property is not nullable for class ApiCommitDiffFilePatch.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class ApiCommitDiffFilePatch.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ApiCommitDiffFilePatch.");

            return new ApiCommitDiffFilePatch(additions, deletions, name, patch, path, status);
        }

        /// <summary>
        /// Serializes a <see cref="ApiCommitDiffFilePatch" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiCommitDiffFilePatch"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApiCommitDiffFilePatch apiCommitDiffFilePatch, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, apiCommitDiffFilePatch, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApiCommitDiffFilePatch" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiCommitDiffFilePatch"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApiCommitDiffFilePatch apiCommitDiffFilePatch, JsonSerializerOptions jsonSerializerOptions)
        {
            if (apiCommitDiffFilePatch.NameOption.IsSet && apiCommitDiffFilePatch.Name == null)
                throw new ArgumentNullException(nameof(apiCommitDiffFilePatch.Name), "Property is required for class ApiCommitDiffFilePatch.");

            if (apiCommitDiffFilePatch.PatchOption.IsSet && apiCommitDiffFilePatch.Patch == null)
                throw new ArgumentNullException(nameof(apiCommitDiffFilePatch.Patch), "Property is required for class ApiCommitDiffFilePatch.");

            if (apiCommitDiffFilePatch.PathOption.IsSet && apiCommitDiffFilePatch.Path == null)
                throw new ArgumentNullException(nameof(apiCommitDiffFilePatch.Path), "Property is required for class ApiCommitDiffFilePatch.");

            if (apiCommitDiffFilePatch.StatusOption.IsSet && apiCommitDiffFilePatch.Status == null)
                throw new ArgumentNullException(nameof(apiCommitDiffFilePatch.Status), "Property is required for class ApiCommitDiffFilePatch.");

            if (apiCommitDiffFilePatch.AdditionsOption.IsSet)
                writer.WriteNumber("additions", apiCommitDiffFilePatch.AdditionsOption.Value!.Value);

            if (apiCommitDiffFilePatch.DeletionsOption.IsSet)
                writer.WriteNumber("deletions", apiCommitDiffFilePatch.DeletionsOption.Value!.Value);

            if (apiCommitDiffFilePatch.NameOption.IsSet)
                writer.WriteString("name", apiCommitDiffFilePatch.Name);

            if (apiCommitDiffFilePatch.PatchOption.IsSet)
                writer.WriteString("patch", apiCommitDiffFilePatch.Patch);

            if (apiCommitDiffFilePatch.PathOption.IsSet)
                writer.WriteString("path", apiCommitDiffFilePatch.Path);

            if (apiCommitDiffFilePatch.StatusOption.IsSet)
                writer.WriteString("status", apiCommitDiffFilePatch.Status);
        }
    }
}
