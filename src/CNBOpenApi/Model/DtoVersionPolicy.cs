// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// Defines dto.VersionPolicy
    /// </summary>
    public enum DtoVersionPolicy
    {
        /// <summary>
        /// Enum VersionPolicyAll for value: all
        /// </summary>
        VersionPolicyAll = 1,

        /// <summary>
        /// Enum VersionPolicySnapshot for value: snapshot
        /// </summary>
        VersionPolicySnapshot = 2,

        /// <summary>
        /// Enum VersionPolicyRelease for value: release
        /// </summary>
        VersionPolicyRelease = 3
    }

    /// <summary>
    /// Converts <see cref="DtoVersionPolicy"/> to and from the JSON value
    /// </summary>
    public static class DtoVersionPolicyValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="DtoVersionPolicy"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DtoVersionPolicy FromString(string value)
        {
            if (value.Equals("all"))
                return DtoVersionPolicy.VersionPolicyAll;

            if (value.Equals("snapshot"))
                return DtoVersionPolicy.VersionPolicySnapshot;

            if (value.Equals("release"))
                return DtoVersionPolicy.VersionPolicyRelease;

            throw new NotImplementedException($"Could not convert value to type DtoVersionPolicy: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="DtoVersionPolicy"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DtoVersionPolicy? FromStringOrDefault(string value)
        {
            if (value.Equals("all"))
                return DtoVersionPolicy.VersionPolicyAll;

            if (value.Equals("snapshot"))
                return DtoVersionPolicy.VersionPolicySnapshot;

            if (value.Equals("release"))
                return DtoVersionPolicy.VersionPolicyRelease;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DtoVersionPolicy"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(DtoVersionPolicy value)
        {
            if (value == DtoVersionPolicy.VersionPolicyAll)
                return "all";

            if (value == DtoVersionPolicy.VersionPolicySnapshot)
                return "snapshot";

            if (value == DtoVersionPolicy.VersionPolicyRelease)
                return "release";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoVersionPolicy"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class DtoVersionPolicyJsonConverter : JsonConverter<DtoVersionPolicy>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DtoVersionPolicy Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DtoVersionPolicy? result = rawValue == null
                ? null
                : DtoVersionPolicyValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DtoVersionPolicy to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoVersionPolicy"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DtoVersionPolicy dtoVersionPolicy, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dtoVersionPolicy.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoVersionPolicy"/>
    /// </summary>
    public class DtoVersionPolicyNullableJsonConverter : JsonConverter<DtoVersionPolicy?>
    {
        /// <summary>
        /// Returns a DtoVersionPolicy from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DtoVersionPolicy? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DtoVersionPolicy? result = rawValue == null
                ? null
                : DtoVersionPolicyValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoVersionPolicy"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DtoVersionPolicy? dtoVersionPolicy, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dtoVersionPolicy?.ToString() ?? "null");
        }
    }
}
