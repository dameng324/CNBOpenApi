// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebPullRequestReviewComment
    /// </summary>
    public partial class WebPullRequestReviewComment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebPullRequestReviewComment" /> class.
        /// </summary>
        /// <param name="author">author</param>
        /// <param name="authorMeta">authorMeta</param>
        /// <param name="body">body</param>
        /// <param name="commentId">commentId</param>
        /// <param name="commitHash">commitHash</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="diffHunk">diffHunk</param>
        /// <param name="endLine">endLine</param>
        /// <param name="endSide">endSide</param>
        /// <param name="path">path</param>
        /// <param name="replies">replies</param>
        /// <param name="replyToCommentId">replyToCommentId</param>
        /// <param name="reviewId">reviewId</param>
        /// <param name="startLine">startLine</param>
        /// <param name="startSide">startSide</param>
        /// <param name="subjectType">subjectType</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public WebPullRequestReviewComment(Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?> author = default, Option<List<int>?> authorMeta = default, Option<string?> body = default, Option<string?> commentId = default, Option<string?> commitHash = default, Option<string?> createdAt = default, Option<List<WebDiffLine>?> diffHunk = default, Option<int?> endLine = default, Option<string?> endSide = default, Option<string?> path = default, Option<List<WebPullRequestReviewCommentReply>?> replies = default, Option<string?> replyToCommentId = default, Option<string?> reviewId = default, Option<int?> startLine = default, Option<string?> startSide = default, Option<string?> subjectType = default, Option<string?> updatedAt = default)
        {
            AuthorOption = author;
            AuthorMetaOption = authorMeta;
            BodyOption = body;
            CommentIdOption = commentId;
            CommitHashOption = commitHash;
            CreatedAtOption = createdAt;
            DiffHunkOption = diffHunk;
            EndLineOption = endLine;
            EndSideOption = endSide;
            PathOption = path;
            RepliesOption = replies;
            ReplyToCommentIdOption = replyToCommentId;
            ReviewIdOption = reviewId;
            StartLineOption = startLine;
            StartSideOption = startSide;
            SubjectTypeOption = subjectType;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Author
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?> AuthorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [JsonPropertyName("author")]
        public GitWoaComCnbMonorepoGitInternalDtoWebUserInfo? Author { get { return this.AuthorOption; } set { this.AuthorOption = new(value); } }

        /// <summary>
        /// Used to track the state of AuthorMeta
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> AuthorMetaOption { get; private set; }

        /// <summary>
        /// Gets or Sets AuthorMeta
        /// </summary>
        [JsonPropertyName("author_meta")]
        public List<int>? AuthorMeta { get { return this.AuthorMetaOption; } set { this.AuthorMetaOption = new(value); } }

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BodyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public string? Body { get { return this.BodyOption; } set { this.BodyOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommentId
        /// </summary>
        [JsonPropertyName("comment_id")]
        public string? CommentId { get { return this.CommentIdOption; } set { this.CommentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommitHash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommitHashOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommitHash
        /// </summary>
        [JsonPropertyName("commit_hash")]
        public string? CommitHash { get { return this.CommitHashOption; } set { this.CommitHashOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of DiffHunk
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebDiffLine>?> DiffHunkOption { get; private set; }

        /// <summary>
        /// Gets or Sets DiffHunk
        /// </summary>
        [JsonPropertyName("diff_hunk")]
        public List<WebDiffLine>? DiffHunk { get { return this.DiffHunkOption; } set { this.DiffHunkOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndLine
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> EndLineOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndLine
        /// </summary>
        [JsonPropertyName("end_line")]
        public int? EndLine { get { return this.EndLineOption; } set { this.EndLineOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndSide
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EndSideOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndSide
        /// </summary>
        [JsonPropertyName("end_side")]
        public string? EndSide { get { return this.EndSideOption; } set { this.EndSideOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of Replies
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebPullRequestReviewCommentReply>?> RepliesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Replies
        /// </summary>
        [JsonPropertyName("replies")]
        public List<WebPullRequestReviewCommentReply>? Replies { get { return this.RepliesOption; } set { this.RepliesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReplyToCommentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReplyToCommentIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReplyToCommentId
        /// </summary>
        [JsonPropertyName("reply_to_comment_id")]
        public string? ReplyToCommentId { get { return this.ReplyToCommentIdOption; } set { this.ReplyToCommentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReviewId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReviewIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReviewId
        /// </summary>
        [JsonPropertyName("review_id")]
        public string? ReviewId { get { return this.ReviewIdOption; } set { this.ReviewIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of StartLine
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StartLineOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartLine
        /// </summary>
        [JsonPropertyName("start_line")]
        public int? StartLine { get { return this.StartLineOption; } set { this.StartLineOption = new(value); } }

        /// <summary>
        /// Used to track the state of StartSide
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StartSideOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartSide
        /// </summary>
        [JsonPropertyName("start_side")]
        public string? StartSide { get { return this.StartSideOption; } set { this.StartSideOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubjectType
        /// </summary>
        [JsonPropertyName("subject_type")]
        public string? SubjectType { get { return this.SubjectTypeOption; } set { this.SubjectTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebPullRequestReviewComment {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  AuthorMeta: ").Append(AuthorMeta).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  CommentId: ").Append(CommentId).Append("\n");
            sb.Append("  CommitHash: ").Append(CommitHash).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DiffHunk: ").Append(DiffHunk).Append("\n");
            sb.Append("  EndLine: ").Append(EndLine).Append("\n");
            sb.Append("  EndSide: ").Append(EndSide).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Replies: ").Append(Replies).Append("\n");
            sb.Append("  ReplyToCommentId: ").Append(ReplyToCommentId).Append("\n");
            sb.Append("  ReviewId: ").Append(ReviewId).Append("\n");
            sb.Append("  StartLine: ").Append(StartLine).Append("\n");
            sb.Append("  StartSide: ").Append(StartSide).Append("\n");
            sb.Append("  SubjectType: ").Append(SubjectType).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebPullRequestReviewComment" />
    /// </summary>
    public class WebPullRequestReviewCommentJsonConverter : JsonConverter<WebPullRequestReviewComment>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebPullRequestReviewComment" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebPullRequestReviewComment Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?> author = default;
            Option<List<int>?> authorMeta = default;
            Option<string?> body = default;
            Option<string?> commentId = default;
            Option<string?> commitHash = default;
            Option<string?> createdAt = default;
            Option<List<WebDiffLine>?> diffHunk = default;
            Option<int?> endLine = default;
            Option<string?> endSide = default;
            Option<string?> path = default;
            Option<List<WebPullRequestReviewCommentReply>?> replies = default;
            Option<string?> replyToCommentId = default;
            Option<string?> reviewId = default;
            Option<int?> startLine = default;
            Option<string?> startSide = default;
            Option<string?> subjectType = default;
            Option<string?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "author":
                            author = new Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?>(JsonSerializer.Deserialize<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "author_meta":
                            authorMeta = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "body":
                            body = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "comment_id":
                            commentId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "commit_hash":
                            commitHash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "diff_hunk":
                            diffHunk = new Option<List<WebDiffLine>?>(JsonSerializer.Deserialize<List<WebDiffLine>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "end_line":
                            endLine = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "end_side":
                            endSide = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "replies":
                            replies = new Option<List<WebPullRequestReviewCommentReply>?>(JsonSerializer.Deserialize<List<WebPullRequestReviewCommentReply>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "reply_to_comment_id":
                            replyToCommentId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "review_id":
                            reviewId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "start_line":
                            startLine = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "start_side":
                            startSide = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subject_type":
                            subjectType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (author.IsSet && author.Value == null)
                throw new ArgumentNullException(nameof(author), "Property is not nullable for class WebPullRequestReviewComment.");

            if (authorMeta.IsSet && authorMeta.Value == null)
                throw new ArgumentNullException(nameof(authorMeta), "Property is not nullable for class WebPullRequestReviewComment.");

            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body), "Property is not nullable for class WebPullRequestReviewComment.");

            if (commentId.IsSet && commentId.Value == null)
                throw new ArgumentNullException(nameof(commentId), "Property is not nullable for class WebPullRequestReviewComment.");

            if (commitHash.IsSet && commitHash.Value == null)
                throw new ArgumentNullException(nameof(commitHash), "Property is not nullable for class WebPullRequestReviewComment.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class WebPullRequestReviewComment.");

            if (diffHunk.IsSet && diffHunk.Value == null)
                throw new ArgumentNullException(nameof(diffHunk), "Property is not nullable for class WebPullRequestReviewComment.");

            if (endLine.IsSet && endLine.Value == null)
                throw new ArgumentNullException(nameof(endLine), "Property is not nullable for class WebPullRequestReviewComment.");

            if (endSide.IsSet && endSide.Value == null)
                throw new ArgumentNullException(nameof(endSide), "Property is not nullable for class WebPullRequestReviewComment.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class WebPullRequestReviewComment.");

            if (replies.IsSet && replies.Value == null)
                throw new ArgumentNullException(nameof(replies), "Property is not nullable for class WebPullRequestReviewComment.");

            if (replyToCommentId.IsSet && replyToCommentId.Value == null)
                throw new ArgumentNullException(nameof(replyToCommentId), "Property is not nullable for class WebPullRequestReviewComment.");

            if (reviewId.IsSet && reviewId.Value == null)
                throw new ArgumentNullException(nameof(reviewId), "Property is not nullable for class WebPullRequestReviewComment.");

            if (startLine.IsSet && startLine.Value == null)
                throw new ArgumentNullException(nameof(startLine), "Property is not nullable for class WebPullRequestReviewComment.");

            if (startSide.IsSet && startSide.Value == null)
                throw new ArgumentNullException(nameof(startSide), "Property is not nullable for class WebPullRequestReviewComment.");

            if (subjectType.IsSet && subjectType.Value == null)
                throw new ArgumentNullException(nameof(subjectType), "Property is not nullable for class WebPullRequestReviewComment.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class WebPullRequestReviewComment.");

            return new WebPullRequestReviewComment(author, authorMeta, body, commentId, commitHash, createdAt, diffHunk, endLine, endSide, path, replies, replyToCommentId, reviewId, startLine, startSide, subjectType, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="WebPullRequestReviewComment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webPullRequestReviewComment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebPullRequestReviewComment webPullRequestReviewComment, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webPullRequestReviewComment, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebPullRequestReviewComment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webPullRequestReviewComment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebPullRequestReviewComment webPullRequestReviewComment, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webPullRequestReviewComment.AuthorOption.IsSet && webPullRequestReviewComment.Author == null)
                throw new ArgumentNullException(nameof(webPullRequestReviewComment.Author), "Property is required for class WebPullRequestReviewComment.");

            if (webPullRequestReviewComment.AuthorMetaOption.IsSet && webPullRequestReviewComment.AuthorMeta == null)
                throw new ArgumentNullException(nameof(webPullRequestReviewComment.AuthorMeta), "Property is required for class WebPullRequestReviewComment.");

            if (webPullRequestReviewComment.BodyOption.IsSet && webPullRequestReviewComment.Body == null)
                throw new ArgumentNullException(nameof(webPullRequestReviewComment.Body), "Property is required for class WebPullRequestReviewComment.");

            if (webPullRequestReviewComment.CommentIdOption.IsSet && webPullRequestReviewComment.CommentId == null)
                throw new ArgumentNullException(nameof(webPullRequestReviewComment.CommentId), "Property is required for class WebPullRequestReviewComment.");

            if (webPullRequestReviewComment.CommitHashOption.IsSet && webPullRequestReviewComment.CommitHash == null)
                throw new ArgumentNullException(nameof(webPullRequestReviewComment.CommitHash), "Property is required for class WebPullRequestReviewComment.");

            if (webPullRequestReviewComment.CreatedAtOption.IsSet && webPullRequestReviewComment.CreatedAt == null)
                throw new ArgumentNullException(nameof(webPullRequestReviewComment.CreatedAt), "Property is required for class WebPullRequestReviewComment.");

            if (webPullRequestReviewComment.DiffHunkOption.IsSet && webPullRequestReviewComment.DiffHunk == null)
                throw new ArgumentNullException(nameof(webPullRequestReviewComment.DiffHunk), "Property is required for class WebPullRequestReviewComment.");

            if (webPullRequestReviewComment.EndSideOption.IsSet && webPullRequestReviewComment.EndSide == null)
                throw new ArgumentNullException(nameof(webPullRequestReviewComment.EndSide), "Property is required for class WebPullRequestReviewComment.");

            if (webPullRequestReviewComment.PathOption.IsSet && webPullRequestReviewComment.Path == null)
                throw new ArgumentNullException(nameof(webPullRequestReviewComment.Path), "Property is required for class WebPullRequestReviewComment.");

            if (webPullRequestReviewComment.RepliesOption.IsSet && webPullRequestReviewComment.Replies == null)
                throw new ArgumentNullException(nameof(webPullRequestReviewComment.Replies), "Property is required for class WebPullRequestReviewComment.");

            if (webPullRequestReviewComment.ReplyToCommentIdOption.IsSet && webPullRequestReviewComment.ReplyToCommentId == null)
                throw new ArgumentNullException(nameof(webPullRequestReviewComment.ReplyToCommentId), "Property is required for class WebPullRequestReviewComment.");

            if (webPullRequestReviewComment.ReviewIdOption.IsSet && webPullRequestReviewComment.ReviewId == null)
                throw new ArgumentNullException(nameof(webPullRequestReviewComment.ReviewId), "Property is required for class WebPullRequestReviewComment.");

            if (webPullRequestReviewComment.StartSideOption.IsSet && webPullRequestReviewComment.StartSide == null)
                throw new ArgumentNullException(nameof(webPullRequestReviewComment.StartSide), "Property is required for class WebPullRequestReviewComment.");

            if (webPullRequestReviewComment.SubjectTypeOption.IsSet && webPullRequestReviewComment.SubjectType == null)
                throw new ArgumentNullException(nameof(webPullRequestReviewComment.SubjectType), "Property is required for class WebPullRequestReviewComment.");

            if (webPullRequestReviewComment.UpdatedAtOption.IsSet && webPullRequestReviewComment.UpdatedAt == null)
                throw new ArgumentNullException(nameof(webPullRequestReviewComment.UpdatedAt), "Property is required for class WebPullRequestReviewComment.");

            if (webPullRequestReviewComment.AuthorOption.IsSet)
            {
                writer.WritePropertyName("author");
                JsonSerializer.Serialize(writer, webPullRequestReviewComment.Author, jsonSerializerOptions);
            }
            if (webPullRequestReviewComment.AuthorMetaOption.IsSet)
            {
                writer.WritePropertyName("author_meta");
                JsonSerializer.Serialize(writer, webPullRequestReviewComment.AuthorMeta, jsonSerializerOptions);
            }
            if (webPullRequestReviewComment.BodyOption.IsSet)
                writer.WriteString("body", webPullRequestReviewComment.Body);

            if (webPullRequestReviewComment.CommentIdOption.IsSet)
                writer.WriteString("comment_id", webPullRequestReviewComment.CommentId);

            if (webPullRequestReviewComment.CommitHashOption.IsSet)
                writer.WriteString("commit_hash", webPullRequestReviewComment.CommitHash);

            if (webPullRequestReviewComment.CreatedAtOption.IsSet)
                writer.WriteString("created_at", webPullRequestReviewComment.CreatedAt);

            if (webPullRequestReviewComment.DiffHunkOption.IsSet)
            {
                writer.WritePropertyName("diff_hunk");
                JsonSerializer.Serialize(writer, webPullRequestReviewComment.DiffHunk, jsonSerializerOptions);
            }
            if (webPullRequestReviewComment.EndLineOption.IsSet)
                writer.WriteNumber("end_line", webPullRequestReviewComment.EndLineOption.Value!.Value);

            if (webPullRequestReviewComment.EndSideOption.IsSet)
                writer.WriteString("end_side", webPullRequestReviewComment.EndSide);

            if (webPullRequestReviewComment.PathOption.IsSet)
                writer.WriteString("path", webPullRequestReviewComment.Path);

            if (webPullRequestReviewComment.RepliesOption.IsSet)
            {
                writer.WritePropertyName("replies");
                JsonSerializer.Serialize(writer, webPullRequestReviewComment.Replies, jsonSerializerOptions);
            }
            if (webPullRequestReviewComment.ReplyToCommentIdOption.IsSet)
                writer.WriteString("reply_to_comment_id", webPullRequestReviewComment.ReplyToCommentId);

            if (webPullRequestReviewComment.ReviewIdOption.IsSet)
                writer.WriteString("review_id", webPullRequestReviewComment.ReviewId);

            if (webPullRequestReviewComment.StartLineOption.IsSet)
                writer.WriteNumber("start_line", webPullRequestReviewComment.StartLineOption.Value!.Value);

            if (webPullRequestReviewComment.StartSideOption.IsSet)
                writer.WriteString("start_side", webPullRequestReviewComment.StartSide);

            if (webPullRequestReviewComment.SubjectTypeOption.IsSet)
                writer.WriteString("subject_type", webPullRequestReviewComment.SubjectType);

            if (webPullRequestReviewComment.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", webPullRequestReviewComment.UpdatedAt);
        }
    }
}
