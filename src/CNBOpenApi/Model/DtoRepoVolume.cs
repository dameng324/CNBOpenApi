// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoRepoVolume
    /// </summary>
    public partial class DtoRepoVolume : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoRepoVolume" /> class.
        /// </summary>
        /// <param name="isDeleted">isDeleted</param>
        /// <param name="resourceId">resourceId</param>
        /// <param name="resourceType">resourceType</param>
        /// <param name="slug">slug</param>
        /// <param name="volume">volume</param>
        [JsonConstructor]
        public DtoRepoVolume(Option<bool?> isDeleted = default, Option<string?> resourceId = default, Option<ConstantSlugType?> resourceType = default, Option<string?> slug = default, Option<string?> volume = default)
        {
            IsDeletedOption = isDeleted;
            ResourceIdOption = resourceId;
            ResourceTypeOption = resourceType;
            SlugOption = slug;
            VolumeOption = volume;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ResourceType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantSlugType?> ResourceTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>
        [JsonPropertyName("resource_type")]
        public ConstantSlugType? ResourceType { get { return this.ResourceTypeOption; } set { this.ResourceTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsDeleted
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDeletedOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [JsonPropertyName("is_deleted")]
        public bool? IsDeleted { get { return this.IsDeletedOption; } set { this.IsDeletedOption = new(value); } }

        /// <summary>
        /// Used to track the state of ResourceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ResourceIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResourceId
        /// </summary>
        [JsonPropertyName("resource_id")]
        public string? ResourceId { get { return this.ResourceIdOption; } set { this.ResourceIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Slug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SlugOption { get; private set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [JsonPropertyName("slug")]
        public string? Slug { get { return this.SlugOption; } set { this.SlugOption = new(value); } }

        /// <summary>
        /// Used to track the state of Volume
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VolumeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>
        [JsonPropertyName("volume")]
        public string? Volume { get { return this.VolumeOption; } set { this.VolumeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoRepoVolume {\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoRepoVolume" />
    /// </summary>
    public class DtoRepoVolumeJsonConverter : JsonConverter<DtoRepoVolume>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoRepoVolume" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoRepoVolume Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> isDeleted = default;
            Option<string?> resourceId = default;
            Option<ConstantSlugType?> resourceType = default;
            Option<string?> slug = default;
            Option<string?> volume = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "is_deleted":
                            isDeleted = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "resource_id":
                            resourceId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "resource_type":
                            string? resourceTypeRawValue = utf8JsonReader.GetString();
                            if (resourceTypeRawValue != null)
                                resourceType = new Option<ConstantSlugType?>(ConstantSlugTypeValueConverter.FromStringOrDefault(resourceTypeRawValue));
                            break;
                        case "slug":
                            slug = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "volume":
                            volume = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (isDeleted.IsSet && isDeleted.Value == null)
                throw new ArgumentNullException(nameof(isDeleted), "Property is not nullable for class DtoRepoVolume.");

            if (resourceId.IsSet && resourceId.Value == null)
                throw new ArgumentNullException(nameof(resourceId), "Property is not nullable for class DtoRepoVolume.");

            if (resourceType.IsSet && resourceType.Value == null)
                throw new ArgumentNullException(nameof(resourceType), "Property is not nullable for class DtoRepoVolume.");

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug), "Property is not nullable for class DtoRepoVolume.");

            if (volume.IsSet && volume.Value == null)
                throw new ArgumentNullException(nameof(volume), "Property is not nullable for class DtoRepoVolume.");

            return new DtoRepoVolume(isDeleted, resourceId, resourceType, slug, volume);
        }

        /// <summary>
        /// Serializes a <see cref="DtoRepoVolume" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoRepoVolume"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoRepoVolume dtoRepoVolume, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoRepoVolume, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoRepoVolume" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoRepoVolume"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoRepoVolume dtoRepoVolume, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoRepoVolume.ResourceIdOption.IsSet && dtoRepoVolume.ResourceId == null)
                throw new ArgumentNullException(nameof(dtoRepoVolume.ResourceId), "Property is required for class DtoRepoVolume.");

            if (dtoRepoVolume.SlugOption.IsSet && dtoRepoVolume.Slug == null)
                throw new ArgumentNullException(nameof(dtoRepoVolume.Slug), "Property is required for class DtoRepoVolume.");

            if (dtoRepoVolume.VolumeOption.IsSet && dtoRepoVolume.Volume == null)
                throw new ArgumentNullException(nameof(dtoRepoVolume.Volume), "Property is required for class DtoRepoVolume.");

            if (dtoRepoVolume.IsDeletedOption.IsSet)
                writer.WriteBoolean("is_deleted", dtoRepoVolume.IsDeletedOption.Value!.Value);

            if (dtoRepoVolume.ResourceIdOption.IsSet)
                writer.WriteString("resource_id", dtoRepoVolume.ResourceId);

            if (dtoRepoVolume.ResourceTypeOption.IsSet)
            {
                var resourceTypeRawValue = ConstantSlugTypeValueConverter.ToJsonValue(dtoRepoVolume.ResourceType!.Value);
                writer.WriteNumber("resource_type", resourceTypeRawValue);
            }
            if (dtoRepoVolume.SlugOption.IsSet)
                writer.WriteString("slug", dtoRepoVolume.Slug);

            if (dtoRepoVolume.VolumeOption.IsSet)
                writer.WriteString("volume", dtoRepoVolume.Volume);
        }
    }
}
