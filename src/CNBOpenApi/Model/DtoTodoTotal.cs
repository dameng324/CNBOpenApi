// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoTodoTotal
    /// </summary>
    public partial class DtoTodoTotal : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoTodoTotal" /> class.
        /// </summary>
        /// <param name="issueCompleteCount">issueCompleteCount</param>
        /// <param name="issuePendingCount">issuePendingCount</param>
        /// <param name="pullRequestCompleteCount">pullRequestCompleteCount</param>
        /// <param name="pullRequestPendingCount">pullRequestPendingCount</param>
        /// <param name="total">total</param>
        [JsonConstructor]
        public DtoTodoTotal(Option<int?> issueCompleteCount = default, Option<int?> issuePendingCount = default, Option<int?> pullRequestCompleteCount = default, Option<int?> pullRequestPendingCount = default, Option<int?> total = default)
        {
            IssueCompleteCountOption = issueCompleteCount;
            IssuePendingCountOption = issuePendingCount;
            PullRequestCompleteCountOption = pullRequestCompleteCount;
            PullRequestPendingCountOption = pullRequestPendingCount;
            TotalOption = total;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of IssueCompleteCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IssueCompleteCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets IssueCompleteCount
        /// </summary>
        [JsonPropertyName("issue_complete_count")]
        public int? IssueCompleteCount { get { return this.IssueCompleteCountOption; } set { this.IssueCompleteCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of IssuePendingCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IssuePendingCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets IssuePendingCount
        /// </summary>
        [JsonPropertyName("issue_pending_count")]
        public int? IssuePendingCount { get { return this.IssuePendingCountOption; } set { this.IssuePendingCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of PullRequestCompleteCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PullRequestCompleteCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets PullRequestCompleteCount
        /// </summary>
        [JsonPropertyName("pull_request_complete_count")]
        public int? PullRequestCompleteCount { get { return this.PullRequestCompleteCountOption; } set { this.PullRequestCompleteCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of PullRequestPendingCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PullRequestPendingCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets PullRequestPendingCount
        /// </summary>
        [JsonPropertyName("pull_request_pending_count")]
        public int? PullRequestPendingCount { get { return this.PullRequestPendingCountOption; } set { this.PullRequestPendingCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Total
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalOption { get; private set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [JsonPropertyName("total")]
        public int? Total { get { return this.TotalOption; } set { this.TotalOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoTodoTotal {\n");
            sb.Append("  IssueCompleteCount: ").Append(IssueCompleteCount).Append("\n");
            sb.Append("  IssuePendingCount: ").Append(IssuePendingCount).Append("\n");
            sb.Append("  PullRequestCompleteCount: ").Append(PullRequestCompleteCount).Append("\n");
            sb.Append("  PullRequestPendingCount: ").Append(PullRequestPendingCount).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoTodoTotal" />
    /// </summary>
    public class DtoTodoTotalJsonConverter : JsonConverter<DtoTodoTotal>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoTodoTotal" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoTodoTotal Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> issueCompleteCount = default;
            Option<int?> issuePendingCount = default;
            Option<int?> pullRequestCompleteCount = default;
            Option<int?> pullRequestPendingCount = default;
            Option<int?> total = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "issue_complete_count":
                            issueCompleteCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "issue_pending_count":
                            issuePendingCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pull_request_complete_count":
                            pullRequestCompleteCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pull_request_pending_count":
                            pullRequestPendingCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "total":
                            total = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (issueCompleteCount.IsSet && issueCompleteCount.Value == null)
                throw new ArgumentNullException(nameof(issueCompleteCount), "Property is not nullable for class DtoTodoTotal.");

            if (issuePendingCount.IsSet && issuePendingCount.Value == null)
                throw new ArgumentNullException(nameof(issuePendingCount), "Property is not nullable for class DtoTodoTotal.");

            if (pullRequestCompleteCount.IsSet && pullRequestCompleteCount.Value == null)
                throw new ArgumentNullException(nameof(pullRequestCompleteCount), "Property is not nullable for class DtoTodoTotal.");

            if (pullRequestPendingCount.IsSet && pullRequestPendingCount.Value == null)
                throw new ArgumentNullException(nameof(pullRequestPendingCount), "Property is not nullable for class DtoTodoTotal.");

            if (total.IsSet && total.Value == null)
                throw new ArgumentNullException(nameof(total), "Property is not nullable for class DtoTodoTotal.");

            return new DtoTodoTotal(issueCompleteCount, issuePendingCount, pullRequestCompleteCount, pullRequestPendingCount, total);
        }

        /// <summary>
        /// Serializes a <see cref="DtoTodoTotal" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoTodoTotal"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoTodoTotal dtoTodoTotal, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoTodoTotal, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoTodoTotal" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoTodoTotal"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoTodoTotal dtoTodoTotal, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoTodoTotal.IssueCompleteCountOption.IsSet)
                writer.WriteNumber("issue_complete_count", dtoTodoTotal.IssueCompleteCountOption.Value!.Value);

            if (dtoTodoTotal.IssuePendingCountOption.IsSet)
                writer.WriteNumber("issue_pending_count", dtoTodoTotal.IssuePendingCountOption.Value!.Value);

            if (dtoTodoTotal.PullRequestCompleteCountOption.IsSet)
                writer.WriteNumber("pull_request_complete_count", dtoTodoTotal.PullRequestCompleteCountOption.Value!.Value);

            if (dtoTodoTotal.PullRequestPendingCountOption.IsSet)
                writer.WriteNumber("pull_request_pending_count", dtoTodoTotal.PullRequestPendingCountOption.Value!.Value);

            if (dtoTodoTotal.TotalOption.IsSet)
                writer.WriteNumber("total", dtoTodoTotal.TotalOption.Value!.Value);
        }
    }
}
