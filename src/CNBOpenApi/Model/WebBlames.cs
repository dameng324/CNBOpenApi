// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebBlames
    /// </summary>
    public partial class WebBlames : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebBlames" /> class.
        /// </summary>
        /// <param name="fileSize">fileSize</param>
        /// <param name="fileSizeExceeded">fileSizeExceeded</param>
        /// <param name="fileSizeLimit">fileSizeLimit</param>
        /// <param name="ranges">ranges</param>
        [JsonConstructor]
        public WebBlames(Option<int?> fileSize = default, Option<bool?> fileSizeExceeded = default, Option<int?> fileSizeLimit = default, Option<List<WebBlameRange>?> ranges = default)
        {
            FileSizeOption = fileSize;
            FileSizeExceededOption = fileSizeExceeded;
            FileSizeLimitOption = fileSizeLimit;
            RangesOption = ranges;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of FileSize
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FileSizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileSize
        /// </summary>
        [JsonPropertyName("file_size")]
        public int? FileSize { get { return this.FileSizeOption; } set { this.FileSizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileSizeExceeded
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FileSizeExceededOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileSizeExceeded
        /// </summary>
        [JsonPropertyName("file_size_exceeded")]
        public bool? FileSizeExceeded { get { return this.FileSizeExceededOption; } set { this.FileSizeExceededOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileSizeLimit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FileSizeLimitOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileSizeLimit
        /// </summary>
        [JsonPropertyName("file_size_limit")]
        public int? FileSizeLimit { get { return this.FileSizeLimitOption; } set { this.FileSizeLimitOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ranges
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebBlameRange>?> RangesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ranges
        /// </summary>
        [JsonPropertyName("ranges")]
        public List<WebBlameRange>? Ranges { get { return this.RangesOption; } set { this.RangesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebBlames {\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  FileSizeExceeded: ").Append(FileSizeExceeded).Append("\n");
            sb.Append("  FileSizeLimit: ").Append(FileSizeLimit).Append("\n");
            sb.Append("  Ranges: ").Append(Ranges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebBlames" />
    /// </summary>
    public class WebBlamesJsonConverter : JsonConverter<WebBlames>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebBlames" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebBlames Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> fileSize = default;
            Option<bool?> fileSizeExceeded = default;
            Option<int?> fileSizeLimit = default;
            Option<List<WebBlameRange>?> ranges = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "file_size":
                            fileSize = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "file_size_exceeded":
                            fileSizeExceeded = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "file_size_limit":
                            fileSizeLimit = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "ranges":
                            ranges = new Option<List<WebBlameRange>?>(JsonSerializer.Deserialize<List<WebBlameRange>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (fileSize.IsSet && fileSize.Value == null)
                throw new ArgumentNullException(nameof(fileSize), "Property is not nullable for class WebBlames.");

            if (fileSizeExceeded.IsSet && fileSizeExceeded.Value == null)
                throw new ArgumentNullException(nameof(fileSizeExceeded), "Property is not nullable for class WebBlames.");

            if (fileSizeLimit.IsSet && fileSizeLimit.Value == null)
                throw new ArgumentNullException(nameof(fileSizeLimit), "Property is not nullable for class WebBlames.");

            if (ranges.IsSet && ranges.Value == null)
                throw new ArgumentNullException(nameof(ranges), "Property is not nullable for class WebBlames.");

            return new WebBlames(fileSize, fileSizeExceeded, fileSizeLimit, ranges);
        }

        /// <summary>
        /// Serializes a <see cref="WebBlames" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webBlames"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebBlames webBlames, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webBlames, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebBlames" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webBlames"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebBlames webBlames, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webBlames.RangesOption.IsSet && webBlames.Ranges == null)
                throw new ArgumentNullException(nameof(webBlames.Ranges), "Property is required for class WebBlames.");

            if (webBlames.FileSizeOption.IsSet)
                writer.WriteNumber("file_size", webBlames.FileSizeOption.Value!.Value);

            if (webBlames.FileSizeExceededOption.IsSet)
                writer.WriteBoolean("file_size_exceeded", webBlames.FileSizeExceededOption.Value!.Value);

            if (webBlames.FileSizeLimitOption.IsSet)
                writer.WriteNumber("file_size_limit", webBlames.FileSizeLimitOption.Value!.Value);

            if (webBlames.RangesOption.IsSet)
            {
                writer.WritePropertyName("ranges");
                JsonSerializer.Serialize(writer, webBlames.Ranges, jsonSerializerOptions);
            }
        }
    }
}
