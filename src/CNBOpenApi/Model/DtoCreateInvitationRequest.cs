// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoCreateInvitationRequest
    /// </summary>
    public partial class DtoCreateInvitationRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoCreateInvitationRequest" /> class.
        /// </summary>
        /// <param name="isOutsideCollaborator">isOutsideCollaborator</param>
        /// <param name="memberNumber">memberNumber</param>
        /// <param name="memberRole">memberRole</param>
        /// <param name="validityHour">validityHour</param>
        [JsonConstructor]
        public DtoCreateInvitationRequest(Option<bool?> isOutsideCollaborator = default, Option<int?> memberNumber = default, Option<ConstantAccessRole?> memberRole = default, Option<int?> validityHour = default)
        {
            IsOutsideCollaboratorOption = isOutsideCollaborator;
            MemberNumberOption = memberNumber;
            MemberRoleOption = memberRole;
            ValidityHourOption = validityHour;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of MemberRole
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantAccessRole?> MemberRoleOption { get; private set; }

        /// <summary>
        /// Gets or Sets MemberRole
        /// </summary>
        [JsonPropertyName("member_role")]
        public ConstantAccessRole? MemberRole { get { return this.MemberRoleOption; } set { this.MemberRoleOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsOutsideCollaborator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsOutsideCollaboratorOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsOutsideCollaborator
        /// </summary>
        [JsonPropertyName("is_outside_collaborator")]
        public bool? IsOutsideCollaborator { get { return this.IsOutsideCollaboratorOption; } set { this.IsOutsideCollaboratorOption = new(value); } }

        /// <summary>
        /// Used to track the state of MemberNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MemberNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets MemberNumber
        /// </summary>
        [JsonPropertyName("member_number")]
        public int? MemberNumber { get { return this.MemberNumberOption; } set { this.MemberNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of ValidityHour
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ValidityHourOption { get; private set; }

        /// <summary>
        /// Gets or Sets ValidityHour
        /// </summary>
        [JsonPropertyName("validity_hour")]
        public int? ValidityHour { get { return this.ValidityHourOption; } set { this.ValidityHourOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoCreateInvitationRequest {\n");
            sb.Append("  IsOutsideCollaborator: ").Append(IsOutsideCollaborator).Append("\n");
            sb.Append("  MemberNumber: ").Append(MemberNumber).Append("\n");
            sb.Append("  MemberRole: ").Append(MemberRole).Append("\n");
            sb.Append("  ValidityHour: ").Append(ValidityHour).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoCreateInvitationRequest" />
    /// </summary>
    public class DtoCreateInvitationRequestJsonConverter : JsonConverter<DtoCreateInvitationRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoCreateInvitationRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoCreateInvitationRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> isOutsideCollaborator = default;
            Option<int?> memberNumber = default;
            Option<ConstantAccessRole?> memberRole = default;
            Option<int?> validityHour = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "is_outside_collaborator":
                            isOutsideCollaborator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "member_number":
                            memberNumber = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "member_role":
                            string? memberRoleRawValue = utf8JsonReader.GetString();
                            if (memberRoleRawValue != null)
                                memberRole = new Option<ConstantAccessRole?>(ConstantAccessRoleValueConverter.FromStringOrDefault(memberRoleRawValue));
                            break;
                        case "validity_hour":
                            validityHour = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (isOutsideCollaborator.IsSet && isOutsideCollaborator.Value == null)
                throw new ArgumentNullException(nameof(isOutsideCollaborator), "Property is not nullable for class DtoCreateInvitationRequest.");

            if (memberNumber.IsSet && memberNumber.Value == null)
                throw new ArgumentNullException(nameof(memberNumber), "Property is not nullable for class DtoCreateInvitationRequest.");

            if (memberRole.IsSet && memberRole.Value == null)
                throw new ArgumentNullException(nameof(memberRole), "Property is not nullable for class DtoCreateInvitationRequest.");

            if (validityHour.IsSet && validityHour.Value == null)
                throw new ArgumentNullException(nameof(validityHour), "Property is not nullable for class DtoCreateInvitationRequest.");

            return new DtoCreateInvitationRequest(isOutsideCollaborator, memberNumber, memberRole, validityHour);
        }

        /// <summary>
        /// Serializes a <see cref="DtoCreateInvitationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoCreateInvitationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoCreateInvitationRequest dtoCreateInvitationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoCreateInvitationRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoCreateInvitationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoCreateInvitationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoCreateInvitationRequest dtoCreateInvitationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoCreateInvitationRequest.IsOutsideCollaboratorOption.IsSet)
                writer.WriteBoolean("is_outside_collaborator", dtoCreateInvitationRequest.IsOutsideCollaboratorOption.Value!.Value);

            if (dtoCreateInvitationRequest.MemberNumberOption.IsSet)
                writer.WriteNumber("member_number", dtoCreateInvitationRequest.MemberNumberOption.Value!.Value);

            if (dtoCreateInvitationRequest.MemberRoleOption.IsSet)
            {
                var memberRoleRawValue = ConstantAccessRoleValueConverter.ToJsonValue(dtoCreateInvitationRequest.MemberRole!.Value);
                writer.WriteNumber("member_role", memberRoleRawValue);
            }
            if (dtoCreateInvitationRequest.ValidityHourOption.IsSet)
                writer.WriteNumber("validity_hour", dtoCreateInvitationRequest.ValidityHourOption.Value!.Value);
        }
    }
}
