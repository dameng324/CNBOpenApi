// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoWorkspaceDetailResult
    /// </summary>
    public partial class DtoWorkspaceDetailResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoWorkspaceDetailResult" /> class.
        /// </summary>
        /// <param name="cursor">Cursor 客户端 remote-ssh 访问 schema 地址</param>
        /// <param name="vscode">VSCode 客户端 remote-ssh 访问 schema 地址</param>
        /// <param name="webide">WebIDE 访问 url</param>
        [JsonConstructor]
        public DtoWorkspaceDetailResult(Option<string?> cursor = default, Option<string?> vscode = default, Option<string?> webide = default)
        {
            CursorOption = cursor;
            VscodeOption = vscode;
            WebideOption = webide;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Cursor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CursorOption { get; private set; }

        /// <summary>
        /// Cursor 客户端 remote-ssh 访问 schema 地址
        /// </summary>
        /// <value>Cursor 客户端 remote-ssh 访问 schema 地址</value>
        [JsonPropertyName("cursor")]
        public string? Cursor { get { return this.CursorOption; } set { this.CursorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Vscode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VscodeOption { get; private set; }

        /// <summary>
        /// VSCode 客户端 remote-ssh 访问 schema 地址
        /// </summary>
        /// <value>VSCode 客户端 remote-ssh 访问 schema 地址</value>
        [JsonPropertyName("vscode")]
        public string? Vscode { get { return this.VscodeOption; } set { this.VscodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Webide
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WebideOption { get; private set; }

        /// <summary>
        /// WebIDE 访问 url
        /// </summary>
        /// <value>WebIDE 访问 url</value>
        [JsonPropertyName("webide")]
        public string? Webide { get { return this.WebideOption; } set { this.WebideOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoWorkspaceDetailResult {\n");
            sb.Append("  Cursor: ").Append(Cursor).Append("\n");
            sb.Append("  Vscode: ").Append(Vscode).Append("\n");
            sb.Append("  Webide: ").Append(Webide).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoWorkspaceDetailResult" />
    /// </summary>
    public class DtoWorkspaceDetailResultJsonConverter : JsonConverter<DtoWorkspaceDetailResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoWorkspaceDetailResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoWorkspaceDetailResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> cursor = default;
            Option<string?> vscode = default;
            Option<string?> webide = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "cursor":
                            cursor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "vscode":
                            vscode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "webide":
                            webide = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (cursor.IsSet && cursor.Value == null)
                throw new ArgumentNullException(nameof(cursor), "Property is not nullable for class DtoWorkspaceDetailResult.");

            if (vscode.IsSet && vscode.Value == null)
                throw new ArgumentNullException(nameof(vscode), "Property is not nullable for class DtoWorkspaceDetailResult.");

            if (webide.IsSet && webide.Value == null)
                throw new ArgumentNullException(nameof(webide), "Property is not nullable for class DtoWorkspaceDetailResult.");

            return new DtoWorkspaceDetailResult(cursor, vscode, webide);
        }

        /// <summary>
        /// Serializes a <see cref="DtoWorkspaceDetailResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoWorkspaceDetailResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoWorkspaceDetailResult dtoWorkspaceDetailResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoWorkspaceDetailResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoWorkspaceDetailResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoWorkspaceDetailResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoWorkspaceDetailResult dtoWorkspaceDetailResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoWorkspaceDetailResult.CursorOption.IsSet && dtoWorkspaceDetailResult.Cursor == null)
                throw new ArgumentNullException(nameof(dtoWorkspaceDetailResult.Cursor), "Property is required for class DtoWorkspaceDetailResult.");

            if (dtoWorkspaceDetailResult.VscodeOption.IsSet && dtoWorkspaceDetailResult.Vscode == null)
                throw new ArgumentNullException(nameof(dtoWorkspaceDetailResult.Vscode), "Property is required for class DtoWorkspaceDetailResult.");

            if (dtoWorkspaceDetailResult.WebideOption.IsSet && dtoWorkspaceDetailResult.Webide == null)
                throw new ArgumentNullException(nameof(dtoWorkspaceDetailResult.Webide), "Property is required for class DtoWorkspaceDetailResult.");

            if (dtoWorkspaceDetailResult.CursorOption.IsSet)
                writer.WriteString("cursor", dtoWorkspaceDetailResult.Cursor);

            if (dtoWorkspaceDetailResult.VscodeOption.IsSet)
                writer.WriteString("vscode", dtoWorkspaceDetailResult.Vscode);

            if (dtoWorkspaceDetailResult.WebideOption.IsSet)
                writer.WriteString("webide", dtoWorkspaceDetailResult.Webide);
        }
    }
}
