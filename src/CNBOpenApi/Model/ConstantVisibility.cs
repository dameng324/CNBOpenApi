// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// Defines constant.Visibility
    /// </summary>
    public enum ConstantVisibility
    {
        /// <summary>
        /// Enum VisibilityPrivate for value: 0
        /// </summary>
        VisibilityPrivate = 0,

        /// <summary>
        /// Enum VisibilityPublic for value: 10
        /// </summary>
        VisibilityPublic = 10,

        /// <summary>
        /// Enum VisibilitySecret for value: 20
        /// </summary>
        VisibilitySecret = 20
    }

    /// <summary>
    /// Converts <see cref="ConstantVisibility"/> to and from the JSON value
    /// </summary>
    public static class ConstantVisibilityValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ConstantVisibility"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConstantVisibility FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return ConstantVisibility.VisibilityPrivate;

            if (value.Equals((10).ToString()))
                return ConstantVisibility.VisibilityPublic;

            if (value.Equals((20).ToString()))
                return ConstantVisibility.VisibilitySecret;

            throw new NotImplementedException($"Could not convert value to type ConstantVisibility: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ConstantVisibility"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConstantVisibility? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return ConstantVisibility.VisibilityPrivate;

            if (value.Equals((10).ToString()))
                return ConstantVisibility.VisibilityPublic;

            if (value.Equals((20).ToString()))
                return ConstantVisibility.VisibilitySecret;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ConstantVisibility"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(ConstantVisibility value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConstantVisibility"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ConstantVisibilityJsonConverter : JsonConverter<ConstantVisibility>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ConstantVisibility Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ConstantVisibility? result = rawValue == null
                ? null
                : ConstantVisibilityValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ConstantVisibility to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="constantVisibility"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ConstantVisibility constantVisibility, JsonSerializerOptions options)
        {
            writer.WriteStringValue(constantVisibility.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConstantVisibility"/>
    /// </summary>
    public class ConstantVisibilityNullableJsonConverter : JsonConverter<ConstantVisibility?>
    {
        /// <summary>
        /// Returns a ConstantVisibility from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ConstantVisibility? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ConstantVisibility? result = rawValue == null
                ? null
                : ConstantVisibilityValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="constantVisibility"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ConstantVisibility? constantVisibility, JsonSerializerOptions options)
        {
            writer.WriteStringValue(constantVisibility?.ToString() ?? "null");
        }
    }
}
