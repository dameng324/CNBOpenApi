// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// V1Platform
    /// </summary>
    public partial class V1Platform : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1Platform" /> class.
        /// </summary>
        /// <param name="architecture">Architecture field specifies the CPU architecture, for example &#x60;amd64&#x60; or &#x60;ppc64le&#x60;.</param>
        /// <param name="os">OS specifies the operating system, for example &#x60;linux&#x60; or &#x60;windows&#x60;.</param>
        /// <param name="osFeatures">OSFeatures is an optional field specifying an array of strings, each listing a required OS feature (for example on Windows &#x60;win32k&#x60;).</param>
        /// <param name="osVersion">OSVersion is an optional field specifying the operating system version, for example on Windows &#x60;10.0.14393.1066&#x60;.</param>
        /// <param name="variant">Variant is an optional field specifying a variant of the CPU, for example &#x60;v7&#x60; to specify ARMv7 when architecture is &#x60;arm&#x60;.</param>
        [JsonConstructor]
        public V1Platform(Option<string?> architecture = default, Option<string?> os = default, Option<List<string>?> osFeatures = default, Option<string?> osVersion = default, Option<string?> variant = default)
        {
            ArchitectureOption = architecture;
            OsOption = os;
            OsFeaturesOption = osFeatures;
            OsVersionOption = osVersion;
            VariantOption = variant;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Architecture
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ArchitectureOption { get; private set; }

        /// <summary>
        /// Architecture field specifies the CPU architecture, for example &#x60;amd64&#x60; or &#x60;ppc64le&#x60;.
        /// </summary>
        /// <value>Architecture field specifies the CPU architecture, for example &#x60;amd64&#x60; or &#x60;ppc64le&#x60;.</value>
        [JsonPropertyName("architecture")]
        public string? Architecture { get { return this.ArchitectureOption; } set { this.ArchitectureOption = new(value); } }

        /// <summary>
        /// Used to track the state of Os
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OsOption { get; private set; }

        /// <summary>
        /// OS specifies the operating system, for example &#x60;linux&#x60; or &#x60;windows&#x60;.
        /// </summary>
        /// <value>OS specifies the operating system, for example &#x60;linux&#x60; or &#x60;windows&#x60;.</value>
        [JsonPropertyName("os")]
        public string? Os { get { return this.OsOption; } set { this.OsOption = new(value); } }

        /// <summary>
        /// Used to track the state of OsFeatures
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> OsFeaturesOption { get; private set; }

        /// <summary>
        /// OSFeatures is an optional field specifying an array of strings, each listing a required OS feature (for example on Windows &#x60;win32k&#x60;).
        /// </summary>
        /// <value>OSFeatures is an optional field specifying an array of strings, each listing a required OS feature (for example on Windows &#x60;win32k&#x60;).</value>
        [JsonPropertyName("os.features")]
        public List<string>? OsFeatures { get { return this.OsFeaturesOption; } set { this.OsFeaturesOption = new(value); } }

        /// <summary>
        /// Used to track the state of OsVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OsVersionOption { get; private set; }

        /// <summary>
        /// OSVersion is an optional field specifying the operating system version, for example on Windows &#x60;10.0.14393.1066&#x60;.
        /// </summary>
        /// <value>OSVersion is an optional field specifying the operating system version, for example on Windows &#x60;10.0.14393.1066&#x60;.</value>
        [JsonPropertyName("os.version")]
        public string? OsVersion { get { return this.OsVersionOption; } set { this.OsVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Variant
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VariantOption { get; private set; }

        /// <summary>
        /// Variant is an optional field specifying a variant of the CPU, for example &#x60;v7&#x60; to specify ARMv7 when architecture is &#x60;arm&#x60;.
        /// </summary>
        /// <value>Variant is an optional field specifying a variant of the CPU, for example &#x60;v7&#x60; to specify ARMv7 when architecture is &#x60;arm&#x60;.</value>
        [JsonPropertyName("variant")]
        public string? Variant { get { return this.VariantOption; } set { this.VariantOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V1Platform {\n");
            sb.Append("  Architecture: ").Append(Architecture).Append("\n");
            sb.Append("  Os: ").Append(Os).Append("\n");
            sb.Append("  OsFeatures: ").Append(OsFeatures).Append("\n");
            sb.Append("  OsVersion: ").Append(OsVersion).Append("\n");
            sb.Append("  Variant: ").Append(Variant).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="V1Platform" />
    /// </summary>
    public class V1PlatformJsonConverter : JsonConverter<V1Platform>
    {
        /// <summary>
        /// Deserializes json to <see cref="V1Platform" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override V1Platform Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> architecture = default;
            Option<string?> os = default;
            Option<List<string>?> osFeatures = default;
            Option<string?> osVersion = default;
            Option<string?> variant = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "architecture":
                            architecture = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "os":
                            os = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "os.features":
                            osFeatures = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "os.version":
                            osVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "variant":
                            variant = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (architecture.IsSet && architecture.Value == null)
                throw new ArgumentNullException(nameof(architecture), "Property is not nullable for class V1Platform.");

            if (os.IsSet && os.Value == null)
                throw new ArgumentNullException(nameof(os), "Property is not nullable for class V1Platform.");

            if (osFeatures.IsSet && osFeatures.Value == null)
                throw new ArgumentNullException(nameof(osFeatures), "Property is not nullable for class V1Platform.");

            if (osVersion.IsSet && osVersion.Value == null)
                throw new ArgumentNullException(nameof(osVersion), "Property is not nullable for class V1Platform.");

            if (variant.IsSet && variant.Value == null)
                throw new ArgumentNullException(nameof(variant), "Property is not nullable for class V1Platform.");

            return new V1Platform(architecture, os, osFeatures, osVersion, variant);
        }

        /// <summary>
        /// Serializes a <see cref="V1Platform" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="v1Platform"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, V1Platform v1Platform, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, v1Platform, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="V1Platform" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="v1Platform"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, V1Platform v1Platform, JsonSerializerOptions jsonSerializerOptions)
        {
            if (v1Platform.ArchitectureOption.IsSet && v1Platform.Architecture == null)
                throw new ArgumentNullException(nameof(v1Platform.Architecture), "Property is required for class V1Platform.");

            if (v1Platform.OsOption.IsSet && v1Platform.Os == null)
                throw new ArgumentNullException(nameof(v1Platform.Os), "Property is required for class V1Platform.");

            if (v1Platform.OsFeaturesOption.IsSet && v1Platform.OsFeatures == null)
                throw new ArgumentNullException(nameof(v1Platform.OsFeatures), "Property is required for class V1Platform.");

            if (v1Platform.OsVersionOption.IsSet && v1Platform.OsVersion == null)
                throw new ArgumentNullException(nameof(v1Platform.OsVersion), "Property is required for class V1Platform.");

            if (v1Platform.VariantOption.IsSet && v1Platform.Variant == null)
                throw new ArgumentNullException(nameof(v1Platform.Variant), "Property is required for class V1Platform.");

            if (v1Platform.ArchitectureOption.IsSet)
                writer.WriteString("architecture", v1Platform.Architecture);

            if (v1Platform.OsOption.IsSet)
                writer.WriteString("os", v1Platform.Os);

            if (v1Platform.OsFeaturesOption.IsSet)
            {
                writer.WritePropertyName("os.features");
                JsonSerializer.Serialize(writer, v1Platform.OsFeatures, jsonSerializerOptions);
            }
            if (v1Platform.OsVersionOption.IsSet)
                writer.WriteString("os.version", v1Platform.OsVersion);

            if (v1Platform.VariantOption.IsSet)
                writer.WriteString("variant", v1Platform.Variant);
        }
    }
}
