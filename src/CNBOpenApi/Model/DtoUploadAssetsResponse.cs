// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoUploadAssetsResponse
    /// </summary>
    public partial class DtoUploadAssetsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoUploadAssetsResponse" /> class.
        /// </summary>
        /// <param name="assets">assets</param>
        /// <param name="form">form</param>
        /// <param name="token">后续调用 confirm 接口用的</param>
        /// <param name="uploadUrl">uploadUrl</param>
        [JsonConstructor]
        public DtoUploadAssetsResponse(Option<DtoAssets?> assets = default, Option<Dictionary<string, string>?> form = default, Option<string?> token = default, Option<string?> uploadUrl = default)
        {
            AssetsOption = assets;
            FormOption = form;
            TokenOption = token;
            UploadUrlOption = uploadUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Assets
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoAssets?> AssetsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [JsonPropertyName("assets")]
        public DtoAssets? Assets { get { return this.AssetsOption; } set { this.AssetsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Form
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> FormOption { get; private set; }

        /// <summary>
        /// Gets or Sets Form
        /// </summary>
        [JsonPropertyName("form")]
        public Dictionary<string, string>? Form { get { return this.FormOption; } set { this.FormOption = new(value); } }

        /// <summary>
        /// Used to track the state of Token
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TokenOption { get; private set; }

        /// <summary>
        /// 后续调用 confirm 接口用的
        /// </summary>
        /// <value>后续调用 confirm 接口用的</value>
        [JsonPropertyName("token")]
        public string? Token { get { return this.TokenOption; } set { this.TokenOption = new(value); } }

        /// <summary>
        /// Used to track the state of UploadUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UploadUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets UploadUrl
        /// </summary>
        [JsonPropertyName("upload_url")]
        public string? UploadUrl { get { return this.UploadUrlOption; } set { this.UploadUrlOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoUploadAssetsResponse {\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  Form: ").Append(Form).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UploadUrl: ").Append(UploadUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoUploadAssetsResponse" />
    /// </summary>
    public class DtoUploadAssetsResponseJsonConverter : JsonConverter<DtoUploadAssetsResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoUploadAssetsResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoUploadAssetsResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DtoAssets?> assets = default;
            Option<Dictionary<string, string>?> form = default;
            Option<string?> token = default;
            Option<string?> uploadUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assets":
                            assets = new Option<DtoAssets?>(JsonSerializer.Deserialize<DtoAssets>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "form":
                            form = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "token":
                            token = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "upload_url":
                            uploadUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (assets.IsSet && assets.Value == null)
                throw new ArgumentNullException(nameof(assets), "Property is not nullable for class DtoUploadAssetsResponse.");

            if (form.IsSet && form.Value == null)
                throw new ArgumentNullException(nameof(form), "Property is not nullable for class DtoUploadAssetsResponse.");

            if (token.IsSet && token.Value == null)
                throw new ArgumentNullException(nameof(token), "Property is not nullable for class DtoUploadAssetsResponse.");

            if (uploadUrl.IsSet && uploadUrl.Value == null)
                throw new ArgumentNullException(nameof(uploadUrl), "Property is not nullable for class DtoUploadAssetsResponse.");

            return new DtoUploadAssetsResponse(assets, form, token, uploadUrl);
        }

        /// <summary>
        /// Serializes a <see cref="DtoUploadAssetsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoUploadAssetsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoUploadAssetsResponse dtoUploadAssetsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoUploadAssetsResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoUploadAssetsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoUploadAssetsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoUploadAssetsResponse dtoUploadAssetsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoUploadAssetsResponse.AssetsOption.IsSet && dtoUploadAssetsResponse.Assets == null)
                throw new ArgumentNullException(nameof(dtoUploadAssetsResponse.Assets), "Property is required for class DtoUploadAssetsResponse.");

            if (dtoUploadAssetsResponse.FormOption.IsSet && dtoUploadAssetsResponse.Form == null)
                throw new ArgumentNullException(nameof(dtoUploadAssetsResponse.Form), "Property is required for class DtoUploadAssetsResponse.");

            if (dtoUploadAssetsResponse.TokenOption.IsSet && dtoUploadAssetsResponse.Token == null)
                throw new ArgumentNullException(nameof(dtoUploadAssetsResponse.Token), "Property is required for class DtoUploadAssetsResponse.");

            if (dtoUploadAssetsResponse.UploadUrlOption.IsSet && dtoUploadAssetsResponse.UploadUrl == null)
                throw new ArgumentNullException(nameof(dtoUploadAssetsResponse.UploadUrl), "Property is required for class DtoUploadAssetsResponse.");

            if (dtoUploadAssetsResponse.AssetsOption.IsSet)
            {
                writer.WritePropertyName("assets");
                JsonSerializer.Serialize(writer, dtoUploadAssetsResponse.Assets, jsonSerializerOptions);
            }
            if (dtoUploadAssetsResponse.FormOption.IsSet)
            {
                writer.WritePropertyName("form");
                JsonSerializer.Serialize(writer, dtoUploadAssetsResponse.Form, jsonSerializerOptions);
            }
            if (dtoUploadAssetsResponse.TokenOption.IsSet)
                writer.WriteString("token", dtoUploadAssetsResponse.Token);

            if (dtoUploadAssetsResponse.UploadUrlOption.IsSet)
                writer.WriteString("upload_url", dtoUploadAssetsResponse.UploadUrl);
        }
    }
}
