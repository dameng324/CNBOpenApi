// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// ApiPullCreationForm
    /// </summary>
    public partial class ApiPullCreationForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiPullCreationForm" /> class.
        /// </summary>
        /// <param name="base">base</param>
        /// <param name="body">body</param>
        /// <param name="head">head</param>
        /// <param name="headRepo">headRepo</param>
        /// <param name="title">title</param>
        [JsonConstructor]
        public ApiPullCreationForm(Option<string?> @base = default, Option<string?> body = default, Option<string?> head = default, Option<string?> headRepo = default, Option<string?> title = default)
        {
            BaseOption = @base;
            BodyOption = body;
            HeadOption = head;
            HeadRepoOption = headRepo;
            TitleOption = title;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Base
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BaseOption { get; private set; }

        /// <summary>
        /// Gets or Sets Base
        /// </summary>
        [JsonPropertyName("base")]
        public string? Base { get { return this.BaseOption; } set { this.BaseOption = new(value); } }

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BodyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public string? Body { get { return this.BodyOption; } set { this.BodyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Head
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HeadOption { get; private set; }

        /// <summary>
        /// Gets or Sets Head
        /// </summary>
        [JsonPropertyName("head")]
        public string? Head { get { return this.HeadOption; } set { this.HeadOption = new(value); } }

        /// <summary>
        /// Used to track the state of HeadRepo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HeadRepoOption { get; private set; }

        /// <summary>
        /// Gets or Sets HeadRepo
        /// </summary>
        [JsonPropertyName("head_repo")]
        public string? HeadRepo { get { return this.HeadRepoOption; } set { this.HeadRepoOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiPullCreationForm {\n");
            sb.Append("  Base: ").Append(Base).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Head: ").Append(Head).Append("\n");
            sb.Append("  HeadRepo: ").Append(HeadRepo).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApiPullCreationForm" />
    /// </summary>
    public class ApiPullCreationFormJsonConverter : JsonConverter<ApiPullCreationForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApiPullCreationForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApiPullCreationForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varBase = default;
            Option<string?> body = default;
            Option<string?> head = default;
            Option<string?> headRepo = default;
            Option<string?> title = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "base":
                            varBase = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "body":
                            body = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "head":
                            head = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "head_repo":
                            headRepo = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varBase.IsSet && varBase.Value == null)
                throw new ArgumentNullException(nameof(varBase), "Property is not nullable for class ApiPullCreationForm.");

            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body), "Property is not nullable for class ApiPullCreationForm.");

            if (head.IsSet && head.Value == null)
                throw new ArgumentNullException(nameof(head), "Property is not nullable for class ApiPullCreationForm.");

            if (headRepo.IsSet && headRepo.Value == null)
                throw new ArgumentNullException(nameof(headRepo), "Property is not nullable for class ApiPullCreationForm.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class ApiPullCreationForm.");

            return new ApiPullCreationForm(varBase, body, head, headRepo, title);
        }

        /// <summary>
        /// Serializes a <see cref="ApiPullCreationForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiPullCreationForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApiPullCreationForm apiPullCreationForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, apiPullCreationForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApiPullCreationForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiPullCreationForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApiPullCreationForm apiPullCreationForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (apiPullCreationForm.BaseOption.IsSet && apiPullCreationForm.Base == null)
                throw new ArgumentNullException(nameof(apiPullCreationForm.Base), "Property is required for class ApiPullCreationForm.");

            if (apiPullCreationForm.BodyOption.IsSet && apiPullCreationForm.Body == null)
                throw new ArgumentNullException(nameof(apiPullCreationForm.Body), "Property is required for class ApiPullCreationForm.");

            if (apiPullCreationForm.HeadOption.IsSet && apiPullCreationForm.Head == null)
                throw new ArgumentNullException(nameof(apiPullCreationForm.Head), "Property is required for class ApiPullCreationForm.");

            if (apiPullCreationForm.HeadRepoOption.IsSet && apiPullCreationForm.HeadRepo == null)
                throw new ArgumentNullException(nameof(apiPullCreationForm.HeadRepo), "Property is required for class ApiPullCreationForm.");

            if (apiPullCreationForm.TitleOption.IsSet && apiPullCreationForm.Title == null)
                throw new ArgumentNullException(nameof(apiPullCreationForm.Title), "Property is required for class ApiPullCreationForm.");

            if (apiPullCreationForm.BaseOption.IsSet)
                writer.WriteString("base", apiPullCreationForm.Base);

            if (apiPullCreationForm.BodyOption.IsSet)
                writer.WriteString("body", apiPullCreationForm.Body);

            if (apiPullCreationForm.HeadOption.IsSet)
                writer.WriteString("head", apiPullCreationForm.Head);

            if (apiPullCreationForm.HeadRepoOption.IsSet)
                writer.WriteString("head_repo", apiPullCreationForm.HeadRepo);

            if (apiPullCreationForm.TitleOption.IsSet)
                writer.WriteString("title", apiPullCreationForm.Title);
        }
    }
}
