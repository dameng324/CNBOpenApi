// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoStartBuildReq
    /// </summary>
    public partial class DtoStartBuildReq : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoStartBuildReq" /> class.
        /// </summary>
        /// <param name="branch">触发分支，默认为主分支</param>
        /// <param name="config">指定配置文件内容，yaml 格式</param>
        /// <param name="env">环境变量，对象格式</param>
        /// <param name="event">事件名，必须是 api_trigger 或以 api_trigger_ 开头，默认为 &#x60;api_trigger&#x60;</param>
        /// <param name="sha">commit id ，优先级比 tag 高，默认为分支最新提交记录</param>
        /// <param name="sync">是否等待构建正式触发，为false时会立刻返回 sn 和 buildLogUrl</param>
        /// <param name="tag">触发 tag，优先级比 branch 高</param>
        [JsonConstructor]
        public DtoStartBuildReq(Option<string?> branch = default, Option<string?> config = default, Option<Dictionary<string, string>?> env = default, Option<string?> @event = default, Option<string?> sha = default, Option<string?> sync = default, Option<string?> tag = default)
        {
            BranchOption = branch;
            ConfigOption = config;
            EnvOption = env;
            EventOption = @event;
            ShaOption = sha;
            SyncOption = sync;
            TagOption = tag;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Branch
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BranchOption { get; private set; }

        /// <summary>
        /// 触发分支，默认为主分支
        /// </summary>
        /// <value>触发分支，默认为主分支</value>
        [JsonPropertyName("branch")]
        public string? Branch { get { return this.BranchOption; } set { this.BranchOption = new(value); } }

        /// <summary>
        /// Used to track the state of Config
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ConfigOption { get; private set; }

        /// <summary>
        /// 指定配置文件内容，yaml 格式
        /// </summary>
        /// <value>指定配置文件内容，yaml 格式</value>
        [JsonPropertyName("config")]
        public string? Config { get { return this.ConfigOption; } set { this.ConfigOption = new(value); } }

        /// <summary>
        /// Used to track the state of Env
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> EnvOption { get; private set; }

        /// <summary>
        /// 环境变量，对象格式
        /// </summary>
        /// <value>环境变量，对象格式</value>
        [JsonPropertyName("env")]
        public Dictionary<string, string>? Env { get { return this.EnvOption; } set { this.EnvOption = new(value); } }

        /// <summary>
        /// Used to track the state of Event
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EventOption { get; private set; }

        /// <summary>
        /// 事件名，必须是 api_trigger 或以 api_trigger_ 开头，默认为 &#x60;api_trigger&#x60;
        /// </summary>
        /// <value>事件名，必须是 api_trigger 或以 api_trigger_ 开头，默认为 &#x60;api_trigger&#x60;</value>
        [JsonPropertyName("event")]
        public string? Event { get { return this.EventOption; } set { this.EventOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sha
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ShaOption { get; private set; }

        /// <summary>
        /// commit id ，优先级比 tag 高，默认为分支最新提交记录
        /// </summary>
        /// <value>commit id ，优先级比 tag 高，默认为分支最新提交记录</value>
        [JsonPropertyName("sha")]
        public string? Sha { get { return this.ShaOption; } set { this.ShaOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sync
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SyncOption { get; private set; }

        /// <summary>
        /// 是否等待构建正式触发，为false时会立刻返回 sn 和 buildLogUrl
        /// </summary>
        /// <value>是否等待构建正式触发，为false时会立刻返回 sn 和 buildLogUrl</value>
        [JsonPropertyName("sync")]
        public string? Sync { get { return this.SyncOption; } set { this.SyncOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TagOption { get; private set; }

        /// <summary>
        /// 触发 tag，优先级比 branch 高
        /// </summary>
        /// <value>触发 tag，优先级比 branch 高</value>
        [JsonPropertyName("tag")]
        public string? Tag { get { return this.TagOption; } set { this.TagOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoStartBuildReq {\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  Env: ").Append(Env).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  Sha: ").Append(Sha).Append("\n");
            sb.Append("  Sync: ").Append(Sync).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoStartBuildReq" />
    /// </summary>
    public class DtoStartBuildReqJsonConverter : JsonConverter<DtoStartBuildReq>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoStartBuildReq" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoStartBuildReq Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> branch = default;
            Option<string?> config = default;
            Option<Dictionary<string, string>?> env = default;
            Option<string?> varEvent = default;
            Option<string?> sha = default;
            Option<string?> sync = default;
            Option<string?> tag = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "branch":
                            branch = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "config":
                            config = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "env":
                            env = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "event":
                            varEvent = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sha":
                            sha = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sync":
                            sync = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tag":
                            tag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (branch.IsSet && branch.Value == null)
                throw new ArgumentNullException(nameof(branch), "Property is not nullable for class DtoStartBuildReq.");

            if (config.IsSet && config.Value == null)
                throw new ArgumentNullException(nameof(config), "Property is not nullable for class DtoStartBuildReq.");

            if (env.IsSet && env.Value == null)
                throw new ArgumentNullException(nameof(env), "Property is not nullable for class DtoStartBuildReq.");

            if (varEvent.IsSet && varEvent.Value == null)
                throw new ArgumentNullException(nameof(varEvent), "Property is not nullable for class DtoStartBuildReq.");

            if (sha.IsSet && sha.Value == null)
                throw new ArgumentNullException(nameof(sha), "Property is not nullable for class DtoStartBuildReq.");

            if (sync.IsSet && sync.Value == null)
                throw new ArgumentNullException(nameof(sync), "Property is not nullable for class DtoStartBuildReq.");

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag), "Property is not nullable for class DtoStartBuildReq.");

            return new DtoStartBuildReq(branch, config, env, varEvent, sha, sync, tag);
        }

        /// <summary>
        /// Serializes a <see cref="DtoStartBuildReq" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoStartBuildReq"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoStartBuildReq dtoStartBuildReq, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoStartBuildReq, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoStartBuildReq" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoStartBuildReq"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoStartBuildReq dtoStartBuildReq, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoStartBuildReq.BranchOption.IsSet && dtoStartBuildReq.Branch == null)
                throw new ArgumentNullException(nameof(dtoStartBuildReq.Branch), "Property is required for class DtoStartBuildReq.");

            if (dtoStartBuildReq.ConfigOption.IsSet && dtoStartBuildReq.Config == null)
                throw new ArgumentNullException(nameof(dtoStartBuildReq.Config), "Property is required for class DtoStartBuildReq.");

            if (dtoStartBuildReq.EnvOption.IsSet && dtoStartBuildReq.Env == null)
                throw new ArgumentNullException(nameof(dtoStartBuildReq.Env), "Property is required for class DtoStartBuildReq.");

            if (dtoStartBuildReq.EventOption.IsSet && dtoStartBuildReq.Event == null)
                throw new ArgumentNullException(nameof(dtoStartBuildReq.Event), "Property is required for class DtoStartBuildReq.");

            if (dtoStartBuildReq.ShaOption.IsSet && dtoStartBuildReq.Sha == null)
                throw new ArgumentNullException(nameof(dtoStartBuildReq.Sha), "Property is required for class DtoStartBuildReq.");

            if (dtoStartBuildReq.SyncOption.IsSet && dtoStartBuildReq.Sync == null)
                throw new ArgumentNullException(nameof(dtoStartBuildReq.Sync), "Property is required for class DtoStartBuildReq.");

            if (dtoStartBuildReq.TagOption.IsSet && dtoStartBuildReq.Tag == null)
                throw new ArgumentNullException(nameof(dtoStartBuildReq.Tag), "Property is required for class DtoStartBuildReq.");

            if (dtoStartBuildReq.BranchOption.IsSet)
                writer.WriteString("branch", dtoStartBuildReq.Branch);

            if (dtoStartBuildReq.ConfigOption.IsSet)
                writer.WriteString("config", dtoStartBuildReq.Config);

            if (dtoStartBuildReq.EnvOption.IsSet)
            {
                writer.WritePropertyName("env");
                JsonSerializer.Serialize(writer, dtoStartBuildReq.Env, jsonSerializerOptions);
            }
            if (dtoStartBuildReq.EventOption.IsSet)
                writer.WriteString("event", dtoStartBuildReq.Event);

            if (dtoStartBuildReq.ShaOption.IsSet)
                writer.WriteString("sha", dtoStartBuildReq.Sha);

            if (dtoStartBuildReq.SyncOption.IsSet)
                writer.WriteString("sync", dtoStartBuildReq.Sync);

            if (dtoStartBuildReq.TagOption.IsSet)
                writer.WriteString("tag", dtoStartBuildReq.Tag);
        }
    }
}
