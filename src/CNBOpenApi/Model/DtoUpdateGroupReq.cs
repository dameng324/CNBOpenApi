// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoUpdateGroupReq
    /// </summary>
    public partial class DtoUpdateGroupReq : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoUpdateGroupReq" /> class.
        /// </summary>
        /// <param name="description">description</param>
        /// <param name="domain">domain</param>
        /// <param name="email">email</param>
        /// <param name="remark">remark</param>
        /// <param name="site">site</param>
        /// <param name="wechatMp">wechatMp</param>
        [JsonConstructor]
        public DtoUpdateGroupReq(Option<string?> description = default, Option<string?> domain = default, Option<string?> email = default, Option<string?> remark = default, Option<string?> site = default, Option<string?> wechatMp = default)
        {
            DescriptionOption = description;
            DomainOption = domain;
            EmailOption = email;
            RemarkOption = remark;
            SiteOption = site;
            WechatMpOption = wechatMp;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Domain
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DomainOption { get; private set; }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [JsonPropertyName("domain")]
        public string? Domain { get { return this.DomainOption; } set { this.DomainOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of Remark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RemarkOption { get; private set; }

        /// <summary>
        /// Gets or Sets Remark
        /// </summary>
        [JsonPropertyName("remark")]
        public string? Remark { get { return this.RemarkOption; } set { this.RemarkOption = new(value); } }

        /// <summary>
        /// Used to track the state of Site
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SiteOption { get; private set; }

        /// <summary>
        /// Gets or Sets Site
        /// </summary>
        [JsonPropertyName("site")]
        public string? Site { get { return this.SiteOption; } set { this.SiteOption = new(value); } }

        /// <summary>
        /// Used to track the state of WechatMp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WechatMpOption { get; private set; }

        /// <summary>
        /// Gets or Sets WechatMp
        /// </summary>
        [JsonPropertyName("wechat_mp")]
        public string? WechatMp { get { return this.WechatMpOption; } set { this.WechatMpOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoUpdateGroupReq {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  WechatMp: ").Append(WechatMp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoUpdateGroupReq" />
    /// </summary>
    public class DtoUpdateGroupReqJsonConverter : JsonConverter<DtoUpdateGroupReq>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoUpdateGroupReq" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoUpdateGroupReq Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> description = default;
            Option<string?> domain = default;
            Option<string?> email = default;
            Option<string?> remark = default;
            Option<string?> site = default;
            Option<string?> wechatMp = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "domain":
                            domain = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "remark":
                            remark = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "site":
                            site = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "wechat_mp":
                            wechatMp = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class DtoUpdateGroupReq.");

            if (domain.IsSet && domain.Value == null)
                throw new ArgumentNullException(nameof(domain), "Property is not nullable for class DtoUpdateGroupReq.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class DtoUpdateGroupReq.");

            if (remark.IsSet && remark.Value == null)
                throw new ArgumentNullException(nameof(remark), "Property is not nullable for class DtoUpdateGroupReq.");

            if (site.IsSet && site.Value == null)
                throw new ArgumentNullException(nameof(site), "Property is not nullable for class DtoUpdateGroupReq.");

            if (wechatMp.IsSet && wechatMp.Value == null)
                throw new ArgumentNullException(nameof(wechatMp), "Property is not nullable for class DtoUpdateGroupReq.");

            return new DtoUpdateGroupReq(description, domain, email, remark, site, wechatMp);
        }

        /// <summary>
        /// Serializes a <see cref="DtoUpdateGroupReq" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoUpdateGroupReq"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoUpdateGroupReq dtoUpdateGroupReq, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoUpdateGroupReq, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoUpdateGroupReq" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoUpdateGroupReq"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoUpdateGroupReq dtoUpdateGroupReq, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoUpdateGroupReq.DescriptionOption.IsSet && dtoUpdateGroupReq.Description == null)
                throw new ArgumentNullException(nameof(dtoUpdateGroupReq.Description), "Property is required for class DtoUpdateGroupReq.");

            if (dtoUpdateGroupReq.DomainOption.IsSet && dtoUpdateGroupReq.Domain == null)
                throw new ArgumentNullException(nameof(dtoUpdateGroupReq.Domain), "Property is required for class DtoUpdateGroupReq.");

            if (dtoUpdateGroupReq.EmailOption.IsSet && dtoUpdateGroupReq.Email == null)
                throw new ArgumentNullException(nameof(dtoUpdateGroupReq.Email), "Property is required for class DtoUpdateGroupReq.");

            if (dtoUpdateGroupReq.RemarkOption.IsSet && dtoUpdateGroupReq.Remark == null)
                throw new ArgumentNullException(nameof(dtoUpdateGroupReq.Remark), "Property is required for class DtoUpdateGroupReq.");

            if (dtoUpdateGroupReq.SiteOption.IsSet && dtoUpdateGroupReq.Site == null)
                throw new ArgumentNullException(nameof(dtoUpdateGroupReq.Site), "Property is required for class DtoUpdateGroupReq.");

            if (dtoUpdateGroupReq.WechatMpOption.IsSet && dtoUpdateGroupReq.WechatMp == null)
                throw new ArgumentNullException(nameof(dtoUpdateGroupReq.WechatMp), "Property is required for class DtoUpdateGroupReq.");

            if (dtoUpdateGroupReq.DescriptionOption.IsSet)
                writer.WriteString("description", dtoUpdateGroupReq.Description);

            if (dtoUpdateGroupReq.DomainOption.IsSet)
                writer.WriteString("domain", dtoUpdateGroupReq.Domain);

            if (dtoUpdateGroupReq.EmailOption.IsSet)
                writer.WriteString("email", dtoUpdateGroupReq.Email);

            if (dtoUpdateGroupReq.RemarkOption.IsSet)
                writer.WriteString("remark", dtoUpdateGroupReq.Remark);

            if (dtoUpdateGroupReq.SiteOption.IsSet)
                writer.WriteString("site", dtoUpdateGroupReq.Site);

            if (dtoUpdateGroupReq.WechatMpOption.IsSet)
                writer.WriteString("wechat_mp", dtoUpdateGroupReq.WechatMp);
        }
    }
}
