// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// ApiCommitStatus
    /// </summary>
    public partial class ApiCommitStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiCommitStatus" /> class.
        /// </summary>
        /// <param name="context">context</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="description">description</param>
        /// <param name="state">state</param>
        /// <param name="targetUrl">targetUrl</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public ApiCommitStatus(Option<string?> context = default, Option<string?> createdAt = default, Option<string?> description = default, Option<string?> state = default, Option<string?> targetUrl = default, Option<string?> updatedAt = default)
        {
            ContextOption = context;
            CreatedAtOption = createdAt;
            DescriptionOption = description;
            StateOption = state;
            TargetUrlOption = targetUrl;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Context
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContextOption { get; private set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [JsonPropertyName("context")]
        public string? Context { get { return this.ContextOption; } set { this.ContextOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public string? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Used to track the state of TargetUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TargetUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets TargetUrl
        /// </summary>
        [JsonPropertyName("target_url")]
        public string? TargetUrl { get { return this.TargetUrlOption; } set { this.TargetUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiCommitStatus {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TargetUrl: ").Append(TargetUrl).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApiCommitStatus" />
    /// </summary>
    public class ApiCommitStatusJsonConverter : JsonConverter<ApiCommitStatus>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApiCommitStatus" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApiCommitStatus Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> context = default;
            Option<string?> createdAt = default;
            Option<string?> description = default;
            Option<string?> state = default;
            Option<string?> targetUrl = default;
            Option<string?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "context":
                            context = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "target_url":
                            targetUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (context.IsSet && context.Value == null)
                throw new ArgumentNullException(nameof(context), "Property is not nullable for class ApiCommitStatus.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class ApiCommitStatus.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class ApiCommitStatus.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class ApiCommitStatus.");

            if (targetUrl.IsSet && targetUrl.Value == null)
                throw new ArgumentNullException(nameof(targetUrl), "Property is not nullable for class ApiCommitStatus.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class ApiCommitStatus.");

            return new ApiCommitStatus(context, createdAt, description, state, targetUrl, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="ApiCommitStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiCommitStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApiCommitStatus apiCommitStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, apiCommitStatus, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApiCommitStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiCommitStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApiCommitStatus apiCommitStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            if (apiCommitStatus.ContextOption.IsSet && apiCommitStatus.Context == null)
                throw new ArgumentNullException(nameof(apiCommitStatus.Context), "Property is required for class ApiCommitStatus.");

            if (apiCommitStatus.CreatedAtOption.IsSet && apiCommitStatus.CreatedAt == null)
                throw new ArgumentNullException(nameof(apiCommitStatus.CreatedAt), "Property is required for class ApiCommitStatus.");

            if (apiCommitStatus.DescriptionOption.IsSet && apiCommitStatus.Description == null)
                throw new ArgumentNullException(nameof(apiCommitStatus.Description), "Property is required for class ApiCommitStatus.");

            if (apiCommitStatus.StateOption.IsSet && apiCommitStatus.State == null)
                throw new ArgumentNullException(nameof(apiCommitStatus.State), "Property is required for class ApiCommitStatus.");

            if (apiCommitStatus.TargetUrlOption.IsSet && apiCommitStatus.TargetUrl == null)
                throw new ArgumentNullException(nameof(apiCommitStatus.TargetUrl), "Property is required for class ApiCommitStatus.");

            if (apiCommitStatus.UpdatedAtOption.IsSet && apiCommitStatus.UpdatedAt == null)
                throw new ArgumentNullException(nameof(apiCommitStatus.UpdatedAt), "Property is required for class ApiCommitStatus.");

            if (apiCommitStatus.ContextOption.IsSet)
                writer.WriteString("context", apiCommitStatus.Context);

            if (apiCommitStatus.CreatedAtOption.IsSet)
                writer.WriteString("created_at", apiCommitStatus.CreatedAt);

            if (apiCommitStatus.DescriptionOption.IsSet)
                writer.WriteString("description", apiCommitStatus.Description);

            if (apiCommitStatus.StateOption.IsSet)
                writer.WriteString("state", apiCommitStatus.State);

            if (apiCommitStatus.TargetUrlOption.IsSet)
                writer.WriteString("target_url", apiCommitStatus.TargetUrl);

            if (apiCommitStatus.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", apiCommitStatus.UpdatedAt);
        }
    }
}
