// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebReferTapd
    /// </summary>
    public partial class WebReferTapd : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebReferTapd" /> class.
        /// </summary>
        /// <param name="created">created</param>
        /// <param name="due">due</param>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="owner">owner</param>
        /// <param name="priority">priority</param>
        /// <param name="status">status</param>
        /// <param name="type">type</param>
        /// <param name="viewLink">viewLink</param>
        /// <param name="workspaceId">workspaceId</param>
        [JsonConstructor]
        public WebReferTapd(Option<string?> created = default, Option<string?> due = default, Option<string?> id = default, Option<string?> name = default, Option<string?> owner = default, Option<string?> priority = default, Option<string?> status = default, Option<string?> type = default, Option<string?> viewLink = default, Option<string?> workspaceId = default)
        {
            CreatedOption = created;
            DueOption = due;
            IdOption = id;
            NameOption = name;
            OwnerOption = owner;
            PriorityOption = priority;
            StatusOption = status;
            TypeOption = type;
            ViewLinkOption = viewLink;
            WorkspaceIdOption = workspaceId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Created
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [JsonPropertyName("created")]
        public string? Created { get { return this.CreatedOption; } set { this.CreatedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Due
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DueOption { get; private set; }

        /// <summary>
        /// Gets or Sets Due
        /// </summary>
        [JsonPropertyName("due")]
        public string? Due { get { return this.DueOption; } set { this.DueOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Owner
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OwnerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [JsonPropertyName("owner")]
        public string? Owner { get { return this.OwnerOption; } set { this.OwnerOption = new(value); } }

        /// <summary>
        /// Used to track the state of Priority
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PriorityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [JsonPropertyName("priority")]
        public string? Priority { get { return this.PriorityOption; } set { this.PriorityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public string? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ViewLink
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ViewLinkOption { get; private set; }

        /// <summary>
        /// Gets or Sets ViewLink
        /// </summary>
        [JsonPropertyName("view_link")]
        public string? ViewLink { get { return this.ViewLinkOption; } set { this.ViewLinkOption = new(value); } }

        /// <summary>
        /// Used to track the state of WorkspaceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WorkspaceIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets WorkspaceId
        /// </summary>
        [JsonPropertyName("workspace_id")]
        public string? WorkspaceId { get { return this.WorkspaceIdOption; } set { this.WorkspaceIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebReferTapd {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Due: ").Append(Due).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ViewLink: ").Append(ViewLink).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebReferTapd" />
    /// </summary>
    public class WebReferTapdJsonConverter : JsonConverter<WebReferTapd>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebReferTapd" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebReferTapd Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> created = default;
            Option<string?> due = default;
            Option<string?> id = default;
            Option<string?> name = default;
            Option<string?> owner = default;
            Option<string?> priority = default;
            Option<string?> status = default;
            Option<string?> type = default;
            Option<string?> viewLink = default;
            Option<string?> workspaceId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created":
                            created = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "due":
                            due = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "owner":
                            owner = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "priority":
                            priority = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "view_link":
                            viewLink = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "workspace_id":
                            workspaceId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (created.IsSet && created.Value == null)
                throw new ArgumentNullException(nameof(created), "Property is not nullable for class WebReferTapd.");

            if (due.IsSet && due.Value == null)
                throw new ArgumentNullException(nameof(due), "Property is not nullable for class WebReferTapd.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class WebReferTapd.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class WebReferTapd.");

            if (owner.IsSet && owner.Value == null)
                throw new ArgumentNullException(nameof(owner), "Property is not nullable for class WebReferTapd.");

            if (priority.IsSet && priority.Value == null)
                throw new ArgumentNullException(nameof(priority), "Property is not nullable for class WebReferTapd.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class WebReferTapd.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class WebReferTapd.");

            if (viewLink.IsSet && viewLink.Value == null)
                throw new ArgumentNullException(nameof(viewLink), "Property is not nullable for class WebReferTapd.");

            if (workspaceId.IsSet && workspaceId.Value == null)
                throw new ArgumentNullException(nameof(workspaceId), "Property is not nullable for class WebReferTapd.");

            return new WebReferTapd(created, due, id, name, owner, priority, status, type, viewLink, workspaceId);
        }

        /// <summary>
        /// Serializes a <see cref="WebReferTapd" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webReferTapd"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebReferTapd webReferTapd, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webReferTapd, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebReferTapd" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webReferTapd"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebReferTapd webReferTapd, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webReferTapd.CreatedOption.IsSet && webReferTapd.Created == null)
                throw new ArgumentNullException(nameof(webReferTapd.Created), "Property is required for class WebReferTapd.");

            if (webReferTapd.DueOption.IsSet && webReferTapd.Due == null)
                throw new ArgumentNullException(nameof(webReferTapd.Due), "Property is required for class WebReferTapd.");

            if (webReferTapd.IdOption.IsSet && webReferTapd.Id == null)
                throw new ArgumentNullException(nameof(webReferTapd.Id), "Property is required for class WebReferTapd.");

            if (webReferTapd.NameOption.IsSet && webReferTapd.Name == null)
                throw new ArgumentNullException(nameof(webReferTapd.Name), "Property is required for class WebReferTapd.");

            if (webReferTapd.OwnerOption.IsSet && webReferTapd.Owner == null)
                throw new ArgumentNullException(nameof(webReferTapd.Owner), "Property is required for class WebReferTapd.");

            if (webReferTapd.PriorityOption.IsSet && webReferTapd.Priority == null)
                throw new ArgumentNullException(nameof(webReferTapd.Priority), "Property is required for class WebReferTapd.");

            if (webReferTapd.StatusOption.IsSet && webReferTapd.Status == null)
                throw new ArgumentNullException(nameof(webReferTapd.Status), "Property is required for class WebReferTapd.");

            if (webReferTapd.TypeOption.IsSet && webReferTapd.Type == null)
                throw new ArgumentNullException(nameof(webReferTapd.Type), "Property is required for class WebReferTapd.");

            if (webReferTapd.ViewLinkOption.IsSet && webReferTapd.ViewLink == null)
                throw new ArgumentNullException(nameof(webReferTapd.ViewLink), "Property is required for class WebReferTapd.");

            if (webReferTapd.WorkspaceIdOption.IsSet && webReferTapd.WorkspaceId == null)
                throw new ArgumentNullException(nameof(webReferTapd.WorkspaceId), "Property is required for class WebReferTapd.");

            if (webReferTapd.CreatedOption.IsSet)
                writer.WriteString("created", webReferTapd.Created);

            if (webReferTapd.DueOption.IsSet)
                writer.WriteString("due", webReferTapd.Due);

            if (webReferTapd.IdOption.IsSet)
                writer.WriteString("id", webReferTapd.Id);

            if (webReferTapd.NameOption.IsSet)
                writer.WriteString("name", webReferTapd.Name);

            if (webReferTapd.OwnerOption.IsSet)
                writer.WriteString("owner", webReferTapd.Owner);

            if (webReferTapd.PriorityOption.IsSet)
                writer.WriteString("priority", webReferTapd.Priority);

            if (webReferTapd.StatusOption.IsSet)
                writer.WriteString("status", webReferTapd.Status);

            if (webReferTapd.TypeOption.IsSet)
                writer.WriteString("type", webReferTapd.Type);

            if (webReferTapd.ViewLinkOption.IsSet)
                writer.WriteString("view_link", webReferTapd.ViewLink);

            if (webReferTapd.WorkspaceIdOption.IsSet)
                writer.WriteString("workspace_id", webReferTapd.WorkspaceId);
        }
    }
}
