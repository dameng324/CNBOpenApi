// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebFieldInfos
    /// </summary>
    public partial class WebFieldInfos : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebFieldInfos" /> class.
        /// </summary>
        /// <param name="bug">bug</param>
        /// <param name="stories">stories</param>
        /// <param name="task">task</param>
        [JsonConstructor]
        public WebFieldInfos(Option<WebFieldInfo?> bug = default, Option<WebFieldInfo?> stories = default, Option<WebFieldInfo?> task = default)
        {
            BugOption = bug;
            StoriesOption = stories;
            TaskOption = task;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Bug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebFieldInfo?> BugOption { get; private set; }

        /// <summary>
        /// Gets or Sets Bug
        /// </summary>
        [JsonPropertyName("bug")]
        public WebFieldInfo? Bug { get { return this.BugOption; } set { this.BugOption = new(value); } }

        /// <summary>
        /// Used to track the state of Stories
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebFieldInfo?> StoriesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Stories
        /// </summary>
        [JsonPropertyName("stories")]
        public WebFieldInfo? Stories { get { return this.StoriesOption; } set { this.StoriesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Task
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebFieldInfo?> TaskOption { get; private set; }

        /// <summary>
        /// Gets or Sets Task
        /// </summary>
        [JsonPropertyName("task")]
        public WebFieldInfo? Task { get { return this.TaskOption; } set { this.TaskOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebFieldInfos {\n");
            sb.Append("  Bug: ").Append(Bug).Append("\n");
            sb.Append("  Stories: ").Append(Stories).Append("\n");
            sb.Append("  Task: ").Append(Task).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebFieldInfos" />
    /// </summary>
    public class WebFieldInfosJsonConverter : JsonConverter<WebFieldInfos>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebFieldInfos" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebFieldInfos Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<WebFieldInfo?> bug = default;
            Option<WebFieldInfo?> stories = default;
            Option<WebFieldInfo?> task = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "bug":
                            bug = new Option<WebFieldInfo?>(JsonSerializer.Deserialize<WebFieldInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "stories":
                            stories = new Option<WebFieldInfo?>(JsonSerializer.Deserialize<WebFieldInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "task":
                            task = new Option<WebFieldInfo?>(JsonSerializer.Deserialize<WebFieldInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (bug.IsSet && bug.Value == null)
                throw new ArgumentNullException(nameof(bug), "Property is not nullable for class WebFieldInfos.");

            if (stories.IsSet && stories.Value == null)
                throw new ArgumentNullException(nameof(stories), "Property is not nullable for class WebFieldInfos.");

            if (task.IsSet && task.Value == null)
                throw new ArgumentNullException(nameof(task), "Property is not nullable for class WebFieldInfos.");

            return new WebFieldInfos(bug, stories, task);
        }

        /// <summary>
        /// Serializes a <see cref="WebFieldInfos" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webFieldInfos"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebFieldInfos webFieldInfos, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webFieldInfos, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebFieldInfos" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webFieldInfos"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebFieldInfos webFieldInfos, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webFieldInfos.BugOption.IsSet && webFieldInfos.Bug == null)
                throw new ArgumentNullException(nameof(webFieldInfos.Bug), "Property is required for class WebFieldInfos.");

            if (webFieldInfos.StoriesOption.IsSet && webFieldInfos.Stories == null)
                throw new ArgumentNullException(nameof(webFieldInfos.Stories), "Property is required for class WebFieldInfos.");

            if (webFieldInfos.TaskOption.IsSet && webFieldInfos.Task == null)
                throw new ArgumentNullException(nameof(webFieldInfos.Task), "Property is required for class WebFieldInfos.");

            if (webFieldInfos.BugOption.IsSet)
            {
                writer.WritePropertyName("bug");
                JsonSerializer.Serialize(writer, webFieldInfos.Bug, jsonSerializerOptions);
            }
            if (webFieldInfos.StoriesOption.IsSet)
            {
                writer.WritePropertyName("stories");
                JsonSerializer.Serialize(writer, webFieldInfos.Stories, jsonSerializerOptions);
            }
            if (webFieldInfos.TaskOption.IsSet)
            {
                writer.WritePropertyName("task");
                JsonSerializer.Serialize(writer, webFieldInfos.Task, jsonSerializerOptions);
            }
        }
    }
}
