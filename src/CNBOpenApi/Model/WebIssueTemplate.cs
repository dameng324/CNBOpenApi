// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebIssueTemplate
    /// </summary>
    public partial class WebIssueTemplate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebIssueTemplate" /> class.
        /// </summary>
        /// <param name="content">content</param>
        /// <param name="encoding">encoding</param>
        /// <param name="name">name</param>
        /// <param name="path">path</param>
        [JsonConstructor]
        public WebIssueTemplate(Option<string?> content = default, Option<string?> encoding = default, Option<string?> name = default, Option<string?> path = default)
        {
            ContentOption = content;
            EncodingOption = encoding;
            NameOption = name;
            PathOption = path;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Content
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [JsonPropertyName("content")]
        public string? Content { get { return this.ContentOption; } set { this.ContentOption = new(value); } }

        /// <summary>
        /// Used to track the state of Encoding
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EncodingOption { get; private set; }

        /// <summary>
        /// Gets or Sets Encoding
        /// </summary>
        [JsonPropertyName("encoding")]
        public string? Encoding { get { return this.EncodingOption; } set { this.EncodingOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebIssueTemplate {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebIssueTemplate" />
    /// </summary>
    public class WebIssueTemplateJsonConverter : JsonConverter<WebIssueTemplate>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebIssueTemplate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebIssueTemplate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> content = default;
            Option<string?> encoding = default;
            Option<string?> name = default;
            Option<string?> path = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "encoding":
                            encoding = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class WebIssueTemplate.");

            if (encoding.IsSet && encoding.Value == null)
                throw new ArgumentNullException(nameof(encoding), "Property is not nullable for class WebIssueTemplate.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class WebIssueTemplate.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class WebIssueTemplate.");

            return new WebIssueTemplate(content, encoding, name, path);
        }

        /// <summary>
        /// Serializes a <see cref="WebIssueTemplate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webIssueTemplate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebIssueTemplate webIssueTemplate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webIssueTemplate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebIssueTemplate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webIssueTemplate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebIssueTemplate webIssueTemplate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webIssueTemplate.ContentOption.IsSet && webIssueTemplate.Content == null)
                throw new ArgumentNullException(nameof(webIssueTemplate.Content), "Property is required for class WebIssueTemplate.");

            if (webIssueTemplate.EncodingOption.IsSet && webIssueTemplate.Encoding == null)
                throw new ArgumentNullException(nameof(webIssueTemplate.Encoding), "Property is required for class WebIssueTemplate.");

            if (webIssueTemplate.NameOption.IsSet && webIssueTemplate.Name == null)
                throw new ArgumentNullException(nameof(webIssueTemplate.Name), "Property is required for class WebIssueTemplate.");

            if (webIssueTemplate.PathOption.IsSet && webIssueTemplate.Path == null)
                throw new ArgumentNullException(nameof(webIssueTemplate.Path), "Property is required for class WebIssueTemplate.");

            if (webIssueTemplate.ContentOption.IsSet)
                writer.WriteString("content", webIssueTemplate.Content);

            if (webIssueTemplate.EncodingOption.IsSet)
                writer.WriteString("encoding", webIssueTemplate.Encoding);

            if (webIssueTemplate.NameOption.IsSet)
                writer.WriteString("name", webIssueTemplate.Name);

            if (webIssueTemplate.PathOption.IsSet)
                writer.WriteString("path", webIssueTemplate.Path);
        }
    }
}
