// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// Defines constant.ChargeResType
    /// </summary>
    public enum ConstantChargeResType
    {
        /// <summary>
        /// Enum ChargeTypeGit for value: charge_type_git
        /// </summary>
        ChargeTypeGit = 1,

        /// <summary>
        /// Enum ChargeTypeObject for value: charge_type_object
        /// </summary>
        ChargeTypeObject = 2,

        /// <summary>
        /// Enum ChargeTypeCi for value: charge_type_ci
        /// </summary>
        ChargeTypeCi = 3,

        /// <summary>
        /// Enum ChargeTypeDev for value: charge_type_dev
        /// </summary>
        ChargeTypeDev = 4
    }

    /// <summary>
    /// Converts <see cref="ConstantChargeResType"/> to and from the JSON value
    /// </summary>
    public static class ConstantChargeResTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ConstantChargeResType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConstantChargeResType FromString(string value)
        {
            if (value.Equals("charge_type_git"))
                return ConstantChargeResType.ChargeTypeGit;

            if (value.Equals("charge_type_object"))
                return ConstantChargeResType.ChargeTypeObject;

            if (value.Equals("charge_type_ci"))
                return ConstantChargeResType.ChargeTypeCi;

            if (value.Equals("charge_type_dev"))
                return ConstantChargeResType.ChargeTypeDev;

            throw new NotImplementedException($"Could not convert value to type ConstantChargeResType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ConstantChargeResType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConstantChargeResType? FromStringOrDefault(string value)
        {
            if (value.Equals("charge_type_git"))
                return ConstantChargeResType.ChargeTypeGit;

            if (value.Equals("charge_type_object"))
                return ConstantChargeResType.ChargeTypeObject;

            if (value.Equals("charge_type_ci"))
                return ConstantChargeResType.ChargeTypeCi;

            if (value.Equals("charge_type_dev"))
                return ConstantChargeResType.ChargeTypeDev;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ConstantChargeResType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ConstantChargeResType value)
        {
            if (value == ConstantChargeResType.ChargeTypeGit)
                return "charge_type_git";

            if (value == ConstantChargeResType.ChargeTypeObject)
                return "charge_type_object";

            if (value == ConstantChargeResType.ChargeTypeCi)
                return "charge_type_ci";

            if (value == ConstantChargeResType.ChargeTypeDev)
                return "charge_type_dev";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConstantChargeResType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ConstantChargeResTypeJsonConverter : JsonConverter<ConstantChargeResType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ConstantChargeResType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ConstantChargeResType? result = rawValue == null
                ? null
                : ConstantChargeResTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ConstantChargeResType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="constantChargeResType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ConstantChargeResType constantChargeResType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(constantChargeResType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConstantChargeResType"/>
    /// </summary>
    public class ConstantChargeResTypeNullableJsonConverter : JsonConverter<ConstantChargeResType?>
    {
        /// <summary>
        /// Returns a ConstantChargeResType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ConstantChargeResType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ConstantChargeResType? result = rawValue == null
                ? null
                : ConstantChargeResTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="constantChargeResType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ConstantChargeResType? constantChargeResType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(constantChargeResType?.ToString() ?? "null");
        }
    }
}
