// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoCreateGroupReq
    /// </summary>
    public partial class DtoCreateGroupReq : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoCreateGroupReq" /> class.
        /// </summary>
        /// <param name="bindDomain">BindDomain 根组织绑定的域名</param>
        /// <param name="description">description</param>
        /// <param name="path">path</param>
        /// <param name="remark">remark</param>
        [JsonConstructor]
        public DtoCreateGroupReq(Option<string?> bindDomain = default, Option<string?> description = default, Option<string?> path = default, Option<string?> remark = default)
        {
            BindDomainOption = bindDomain;
            DescriptionOption = description;
            PathOption = path;
            RemarkOption = remark;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BindDomain
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BindDomainOption { get; private set; }

        /// <summary>
        /// BindDomain 根组织绑定的域名
        /// </summary>
        /// <value>BindDomain 根组织绑定的域名</value>
        [JsonPropertyName("bind_domain")]
        public string? BindDomain { get { return this.BindDomainOption; } set { this.BindDomainOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of Remark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RemarkOption { get; private set; }

        /// <summary>
        /// Gets or Sets Remark
        /// </summary>
        [JsonPropertyName("remark")]
        public string? Remark { get { return this.RemarkOption; } set { this.RemarkOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoCreateGroupReq {\n");
            sb.Append("  BindDomain: ").Append(BindDomain).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoCreateGroupReq" />
    /// </summary>
    public class DtoCreateGroupReqJsonConverter : JsonConverter<DtoCreateGroupReq>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoCreateGroupReq" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoCreateGroupReq Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> bindDomain = default;
            Option<string?> description = default;
            Option<string?> path = default;
            Option<string?> remark = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "bind_domain":
                            bindDomain = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "remark":
                            remark = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (bindDomain.IsSet && bindDomain.Value == null)
                throw new ArgumentNullException(nameof(bindDomain), "Property is not nullable for class DtoCreateGroupReq.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class DtoCreateGroupReq.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class DtoCreateGroupReq.");

            if (remark.IsSet && remark.Value == null)
                throw new ArgumentNullException(nameof(remark), "Property is not nullable for class DtoCreateGroupReq.");

            return new DtoCreateGroupReq(bindDomain, description, path, remark);
        }

        /// <summary>
        /// Serializes a <see cref="DtoCreateGroupReq" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoCreateGroupReq"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoCreateGroupReq dtoCreateGroupReq, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoCreateGroupReq, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoCreateGroupReq" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoCreateGroupReq"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoCreateGroupReq dtoCreateGroupReq, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoCreateGroupReq.BindDomainOption.IsSet && dtoCreateGroupReq.BindDomain == null)
                throw new ArgumentNullException(nameof(dtoCreateGroupReq.BindDomain), "Property is required for class DtoCreateGroupReq.");

            if (dtoCreateGroupReq.DescriptionOption.IsSet && dtoCreateGroupReq.Description == null)
                throw new ArgumentNullException(nameof(dtoCreateGroupReq.Description), "Property is required for class DtoCreateGroupReq.");

            if (dtoCreateGroupReq.PathOption.IsSet && dtoCreateGroupReq.Path == null)
                throw new ArgumentNullException(nameof(dtoCreateGroupReq.Path), "Property is required for class DtoCreateGroupReq.");

            if (dtoCreateGroupReq.RemarkOption.IsSet && dtoCreateGroupReq.Remark == null)
                throw new ArgumentNullException(nameof(dtoCreateGroupReq.Remark), "Property is required for class DtoCreateGroupReq.");

            if (dtoCreateGroupReq.BindDomainOption.IsSet)
                writer.WriteString("bind_domain", dtoCreateGroupReq.BindDomain);

            if (dtoCreateGroupReq.DescriptionOption.IsSet)
                writer.WriteString("description", dtoCreateGroupReq.Description);

            if (dtoCreateGroupReq.PathOption.IsSet)
                writer.WriteString("path", dtoCreateGroupReq.Path);

            if (dtoCreateGroupReq.RemarkOption.IsSet)
                writer.WriteString("remark", dtoCreateGroupReq.Remark);
        }
    }
}
