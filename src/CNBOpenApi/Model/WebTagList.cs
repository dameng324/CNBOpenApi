// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebTagList
    /// </summary>
    public partial class WebTagList : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebTagList" /> class.
        /// </summary>
        /// <param name="releaseCount">releaseCount</param>
        /// <param name="tagCount">tagCount</param>
        /// <param name="tags">tags</param>
        [JsonConstructor]
        public WebTagList(Option<int?> releaseCount = default, Option<int?> tagCount = default, Option<List<WebTag>?> tags = default)
        {
            ReleaseCountOption = releaseCount;
            TagCountOption = tagCount;
            TagsOption = tags;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ReleaseCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ReleaseCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReleaseCount
        /// </summary>
        [JsonPropertyName("release_count")]
        public int? ReleaseCount { get { return this.ReleaseCountOption; } set { this.ReleaseCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of TagCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TagCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets TagCount
        /// </summary>
        [JsonPropertyName("tag_count")]
        public int? TagCount { get { return this.TagCountOption; } set { this.TagCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebTag>?> TagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [JsonPropertyName("tags")]
        public List<WebTag>? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebTagList {\n");
            sb.Append("  ReleaseCount: ").Append(ReleaseCount).Append("\n");
            sb.Append("  TagCount: ").Append(TagCount).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebTagList" />
    /// </summary>
    public class WebTagListJsonConverter : JsonConverter<WebTagList>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebTagList" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebTagList Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> releaseCount = default;
            Option<int?> tagCount = default;
            Option<List<WebTag>?> tags = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "release_count":
                            releaseCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "tag_count":
                            tagCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "tags":
                            tags = new Option<List<WebTag>?>(JsonSerializer.Deserialize<List<WebTag>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (releaseCount.IsSet && releaseCount.Value == null)
                throw new ArgumentNullException(nameof(releaseCount), "Property is not nullable for class WebTagList.");

            if (tagCount.IsSet && tagCount.Value == null)
                throw new ArgumentNullException(nameof(tagCount), "Property is not nullable for class WebTagList.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class WebTagList.");

            return new WebTagList(releaseCount, tagCount, tags);
        }

        /// <summary>
        /// Serializes a <see cref="WebTagList" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webTagList"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebTagList webTagList, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webTagList, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebTagList" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webTagList"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebTagList webTagList, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webTagList.TagsOption.IsSet && webTagList.Tags == null)
                throw new ArgumentNullException(nameof(webTagList.Tags), "Property is required for class WebTagList.");

            if (webTagList.ReleaseCountOption.IsSet)
                writer.WriteNumber("release_count", webTagList.ReleaseCountOption.Value!.Value);

            if (webTagList.TagCountOption.IsSet)
                writer.WriteNumber("tag_count", webTagList.TagCountOption.Value!.Value);

            if (webTagList.TagsOption.IsSet)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, webTagList.Tags, jsonSerializerOptions);
            }
        }
    }
}
