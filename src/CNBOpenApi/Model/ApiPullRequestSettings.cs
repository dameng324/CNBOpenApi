// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// ApiPullRequestSettings
    /// </summary>
    public partial class ApiPullRequestSettings : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiPullRequestSettings" /> class.
        /// </summary>
        /// <param name="allowMergeCommitMerge">allowMergeCommitMerge</param>
        /// <param name="allowRebaseMerge">allowRebaseMerge</param>
        /// <param name="allowSquashMerge">allowSquashMerge</param>
        /// <param name="masterAutoAsReviewer">masterAutoAsReviewer</param>
        /// <param name="mergeCommitMessageStyle">mergeCommitMessageStyle</param>
        /// <param name="squashCommitMessageStyle">squashCommitMessageStyle</param>
        [JsonConstructor]
        public ApiPullRequestSettings(Option<bool?> allowMergeCommitMerge = default, Option<bool?> allowRebaseMerge = default, Option<bool?> allowSquashMerge = default, Option<bool?> masterAutoAsReviewer = default, Option<string?> mergeCommitMessageStyle = default, Option<string?> squashCommitMessageStyle = default)
        {
            AllowMergeCommitMergeOption = allowMergeCommitMerge;
            AllowRebaseMergeOption = allowRebaseMerge;
            AllowSquashMergeOption = allowSquashMerge;
            MasterAutoAsReviewerOption = masterAutoAsReviewer;
            MergeCommitMessageStyleOption = mergeCommitMessageStyle;
            SquashCommitMessageStyleOption = squashCommitMessageStyle;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AllowMergeCommitMerge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowMergeCommitMergeOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowMergeCommitMerge
        /// </summary>
        [JsonPropertyName("allow_merge_commit_merge")]
        public bool? AllowMergeCommitMerge { get { return this.AllowMergeCommitMergeOption; } set { this.AllowMergeCommitMergeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowRebaseMerge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowRebaseMergeOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowRebaseMerge
        /// </summary>
        [JsonPropertyName("allow_rebase_merge")]
        public bool? AllowRebaseMerge { get { return this.AllowRebaseMergeOption; } set { this.AllowRebaseMergeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowSquashMerge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowSquashMergeOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowSquashMerge
        /// </summary>
        [JsonPropertyName("allow_squash_merge")]
        public bool? AllowSquashMerge { get { return this.AllowSquashMergeOption; } set { this.AllowSquashMergeOption = new(value); } }

        /// <summary>
        /// Used to track the state of MasterAutoAsReviewer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MasterAutoAsReviewerOption { get; private set; }

        /// <summary>
        /// Gets or Sets MasterAutoAsReviewer
        /// </summary>
        [JsonPropertyName("master_auto_as_reviewer")]
        public bool? MasterAutoAsReviewer { get { return this.MasterAutoAsReviewerOption; } set { this.MasterAutoAsReviewerOption = new(value); } }

        /// <summary>
        /// Used to track the state of MergeCommitMessageStyle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MergeCommitMessageStyleOption { get; private set; }

        /// <summary>
        /// Gets or Sets MergeCommitMessageStyle
        /// </summary>
        [JsonPropertyName("merge_commit_message_style")]
        public string? MergeCommitMessageStyle { get { return this.MergeCommitMessageStyleOption; } set { this.MergeCommitMessageStyleOption = new(value); } }

        /// <summary>
        /// Used to track the state of SquashCommitMessageStyle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SquashCommitMessageStyleOption { get; private set; }

        /// <summary>
        /// Gets or Sets SquashCommitMessageStyle
        /// </summary>
        [JsonPropertyName("squash_commit_message_style")]
        public string? SquashCommitMessageStyle { get { return this.SquashCommitMessageStyleOption; } set { this.SquashCommitMessageStyleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiPullRequestSettings {\n");
            sb.Append("  AllowMergeCommitMerge: ").Append(AllowMergeCommitMerge).Append("\n");
            sb.Append("  AllowRebaseMerge: ").Append(AllowRebaseMerge).Append("\n");
            sb.Append("  AllowSquashMerge: ").Append(AllowSquashMerge).Append("\n");
            sb.Append("  MasterAutoAsReviewer: ").Append(MasterAutoAsReviewer).Append("\n");
            sb.Append("  MergeCommitMessageStyle: ").Append(MergeCommitMessageStyle).Append("\n");
            sb.Append("  SquashCommitMessageStyle: ").Append(SquashCommitMessageStyle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApiPullRequestSettings" />
    /// </summary>
    public class ApiPullRequestSettingsJsonConverter : JsonConverter<ApiPullRequestSettings>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApiPullRequestSettings" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApiPullRequestSettings Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> allowMergeCommitMerge = default;
            Option<bool?> allowRebaseMerge = default;
            Option<bool?> allowSquashMerge = default;
            Option<bool?> masterAutoAsReviewer = default;
            Option<string?> mergeCommitMessageStyle = default;
            Option<string?> squashCommitMessageStyle = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "allow_merge_commit_merge":
                            allowMergeCommitMerge = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allow_rebase_merge":
                            allowRebaseMerge = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allow_squash_merge":
                            allowSquashMerge = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "master_auto_as_reviewer":
                            masterAutoAsReviewer = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "merge_commit_message_style":
                            mergeCommitMessageStyle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "squash_commit_message_style":
                            squashCommitMessageStyle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (allowMergeCommitMerge.IsSet && allowMergeCommitMerge.Value == null)
                throw new ArgumentNullException(nameof(allowMergeCommitMerge), "Property is not nullable for class ApiPullRequestSettings.");

            if (allowRebaseMerge.IsSet && allowRebaseMerge.Value == null)
                throw new ArgumentNullException(nameof(allowRebaseMerge), "Property is not nullable for class ApiPullRequestSettings.");

            if (allowSquashMerge.IsSet && allowSquashMerge.Value == null)
                throw new ArgumentNullException(nameof(allowSquashMerge), "Property is not nullable for class ApiPullRequestSettings.");

            if (masterAutoAsReviewer.IsSet && masterAutoAsReviewer.Value == null)
                throw new ArgumentNullException(nameof(masterAutoAsReviewer), "Property is not nullable for class ApiPullRequestSettings.");

            if (mergeCommitMessageStyle.IsSet && mergeCommitMessageStyle.Value == null)
                throw new ArgumentNullException(nameof(mergeCommitMessageStyle), "Property is not nullable for class ApiPullRequestSettings.");

            if (squashCommitMessageStyle.IsSet && squashCommitMessageStyle.Value == null)
                throw new ArgumentNullException(nameof(squashCommitMessageStyle), "Property is not nullable for class ApiPullRequestSettings.");

            return new ApiPullRequestSettings(allowMergeCommitMerge, allowRebaseMerge, allowSquashMerge, masterAutoAsReviewer, mergeCommitMessageStyle, squashCommitMessageStyle);
        }

        /// <summary>
        /// Serializes a <see cref="ApiPullRequestSettings" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiPullRequestSettings"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApiPullRequestSettings apiPullRequestSettings, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, apiPullRequestSettings, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApiPullRequestSettings" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiPullRequestSettings"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApiPullRequestSettings apiPullRequestSettings, JsonSerializerOptions jsonSerializerOptions)
        {
            if (apiPullRequestSettings.MergeCommitMessageStyleOption.IsSet && apiPullRequestSettings.MergeCommitMessageStyle == null)
                throw new ArgumentNullException(nameof(apiPullRequestSettings.MergeCommitMessageStyle), "Property is required for class ApiPullRequestSettings.");

            if (apiPullRequestSettings.SquashCommitMessageStyleOption.IsSet && apiPullRequestSettings.SquashCommitMessageStyle == null)
                throw new ArgumentNullException(nameof(apiPullRequestSettings.SquashCommitMessageStyle), "Property is required for class ApiPullRequestSettings.");

            if (apiPullRequestSettings.AllowMergeCommitMergeOption.IsSet)
                writer.WriteBoolean("allow_merge_commit_merge", apiPullRequestSettings.AllowMergeCommitMergeOption.Value!.Value);

            if (apiPullRequestSettings.AllowRebaseMergeOption.IsSet)
                writer.WriteBoolean("allow_rebase_merge", apiPullRequestSettings.AllowRebaseMergeOption.Value!.Value);

            if (apiPullRequestSettings.AllowSquashMergeOption.IsSet)
                writer.WriteBoolean("allow_squash_merge", apiPullRequestSettings.AllowSquashMergeOption.Value!.Value);

            if (apiPullRequestSettings.MasterAutoAsReviewerOption.IsSet)
                writer.WriteBoolean("master_auto_as_reviewer", apiPullRequestSettings.MasterAutoAsReviewerOption.Value!.Value);

            if (apiPullRequestSettings.MergeCommitMessageStyleOption.IsSet)
                writer.WriteString("merge_commit_message_style", apiPullRequestSettings.MergeCommitMessageStyle);

            if (apiPullRequestSettings.SquashCommitMessageStyleOption.IsSet)
                writer.WriteString("squash_commit_message_style", apiPullRequestSettings.SquashCommitMessageStyle);
        }
    }
}
