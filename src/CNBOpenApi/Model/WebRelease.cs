// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebRelease
    /// </summary>
    public partial class WebRelease : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebRelease" /> class.
        /// </summary>
        /// <param name="assets">assets</param>
        /// <param name="author">author</param>
        /// <param name="body">body</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="id">id</param>
        /// <param name="isDraft">isDraft</param>
        /// <param name="isLatest">isLatest</param>
        /// <param name="isPrerelease">isPrerelease</param>
        /// <param name="lastUpdatedBy">lastUpdatedBy</param>
        /// <param name="publishedAt">publishedAt</param>
        /// <param name="tagRef">tagRef</param>
        /// <param name="targetCommitHash">targetCommitHash</param>
        /// <param name="title">title</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public WebRelease(Option<List<WebReleaseAsset>?> assets = default, Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?> author = default, Option<string?> body = default, Option<string?> createdAt = default, Option<string?> id = default, Option<bool?> isDraft = default, Option<bool?> isLatest = default, Option<bool?> isPrerelease = default, Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?> lastUpdatedBy = default, Option<string?> publishedAt = default, Option<string?> tagRef = default, Option<string?> targetCommitHash = default, Option<string?> title = default, Option<string?> updatedAt = default)
        {
            AssetsOption = assets;
            AuthorOption = author;
            BodyOption = body;
            CreatedAtOption = createdAt;
            IdOption = id;
            IsDraftOption = isDraft;
            IsLatestOption = isLatest;
            IsPrereleaseOption = isPrerelease;
            LastUpdatedByOption = lastUpdatedBy;
            PublishedAtOption = publishedAt;
            TagRefOption = tagRef;
            TargetCommitHashOption = targetCommitHash;
            TitleOption = title;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Assets
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebReleaseAsset>?> AssetsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [JsonPropertyName("assets")]
        public List<WebReleaseAsset>? Assets { get { return this.AssetsOption; } set { this.AssetsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Author
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?> AuthorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [JsonPropertyName("author")]
        public GitWoaComCnbMonorepoGitInternalDtoWebUserInfo? Author { get { return this.AuthorOption; } set { this.AuthorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BodyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public string? Body { get { return this.BodyOption; } set { this.BodyOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsDraft
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDraftOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsDraft
        /// </summary>
        [JsonPropertyName("is_draft")]
        public bool? IsDraft { get { return this.IsDraftOption; } set { this.IsDraftOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsLatest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsLatestOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsLatest
        /// </summary>
        [JsonPropertyName("is_latest")]
        public bool? IsLatest { get { return this.IsLatestOption; } set { this.IsLatestOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsPrerelease
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsPrereleaseOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsPrerelease
        /// </summary>
        [JsonPropertyName("is_prerelease")]
        public bool? IsPrerelease { get { return this.IsPrereleaseOption; } set { this.IsPrereleaseOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastUpdatedBy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?> LastUpdatedByOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastUpdatedBy
        /// </summary>
        [JsonPropertyName("last_updated_by")]
        public GitWoaComCnbMonorepoGitInternalDtoWebUserInfo? LastUpdatedBy { get { return this.LastUpdatedByOption; } set { this.LastUpdatedByOption = new(value); } }

        /// <summary>
        /// Used to track the state of PublishedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PublishedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets PublishedAt
        /// </summary>
        [JsonPropertyName("published_at")]
        public string? PublishedAt { get { return this.PublishedAtOption; } set { this.PublishedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of TagRef
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TagRefOption { get; private set; }

        /// <summary>
        /// Gets or Sets TagRef
        /// </summary>
        [JsonPropertyName("tag_ref")]
        public string? TagRef { get { return this.TagRefOption; } set { this.TagRefOption = new(value); } }

        /// <summary>
        /// Used to track the state of TargetCommitHash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TargetCommitHashOption { get; private set; }

        /// <summary>
        /// Gets or Sets TargetCommitHash
        /// </summary>
        [JsonPropertyName("target_commit_hash")]
        public string? TargetCommitHash { get { return this.TargetCommitHashOption; } set { this.TargetCommitHashOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebRelease {\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDraft: ").Append(IsDraft).Append("\n");
            sb.Append("  IsLatest: ").Append(IsLatest).Append("\n");
            sb.Append("  IsPrerelease: ").Append(IsPrerelease).Append("\n");
            sb.Append("  LastUpdatedBy: ").Append(LastUpdatedBy).Append("\n");
            sb.Append("  PublishedAt: ").Append(PublishedAt).Append("\n");
            sb.Append("  TagRef: ").Append(TagRef).Append("\n");
            sb.Append("  TargetCommitHash: ").Append(TargetCommitHash).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebRelease" />
    /// </summary>
    public class WebReleaseJsonConverter : JsonConverter<WebRelease>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebRelease" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebRelease Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<WebReleaseAsset>?> assets = default;
            Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?> author = default;
            Option<string?> body = default;
            Option<string?> createdAt = default;
            Option<string?> id = default;
            Option<bool?> isDraft = default;
            Option<bool?> isLatest = default;
            Option<bool?> isPrerelease = default;
            Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?> lastUpdatedBy = default;
            Option<string?> publishedAt = default;
            Option<string?> tagRef = default;
            Option<string?> targetCommitHash = default;
            Option<string?> title = default;
            Option<string?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assets":
                            assets = new Option<List<WebReleaseAsset>?>(JsonSerializer.Deserialize<List<WebReleaseAsset>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "author":
                            author = new Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?>(JsonSerializer.Deserialize<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "body":
                            body = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_draft":
                            isDraft = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_latest":
                            isLatest = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_prerelease":
                            isPrerelease = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "last_updated_by":
                            lastUpdatedBy = new Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?>(JsonSerializer.Deserialize<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "published_at":
                            publishedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tag_ref":
                            tagRef = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "target_commit_hash":
                            targetCommitHash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (assets.IsSet && assets.Value == null)
                throw new ArgumentNullException(nameof(assets), "Property is not nullable for class WebRelease.");

            if (author.IsSet && author.Value == null)
                throw new ArgumentNullException(nameof(author), "Property is not nullable for class WebRelease.");

            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body), "Property is not nullable for class WebRelease.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class WebRelease.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class WebRelease.");

            if (isDraft.IsSet && isDraft.Value == null)
                throw new ArgumentNullException(nameof(isDraft), "Property is not nullable for class WebRelease.");

            if (isLatest.IsSet && isLatest.Value == null)
                throw new ArgumentNullException(nameof(isLatest), "Property is not nullable for class WebRelease.");

            if (isPrerelease.IsSet && isPrerelease.Value == null)
                throw new ArgumentNullException(nameof(isPrerelease), "Property is not nullable for class WebRelease.");

            if (lastUpdatedBy.IsSet && lastUpdatedBy.Value == null)
                throw new ArgumentNullException(nameof(lastUpdatedBy), "Property is not nullable for class WebRelease.");

            if (publishedAt.IsSet && publishedAt.Value == null)
                throw new ArgumentNullException(nameof(publishedAt), "Property is not nullable for class WebRelease.");

            if (tagRef.IsSet && tagRef.Value == null)
                throw new ArgumentNullException(nameof(tagRef), "Property is not nullable for class WebRelease.");

            if (targetCommitHash.IsSet && targetCommitHash.Value == null)
                throw new ArgumentNullException(nameof(targetCommitHash), "Property is not nullable for class WebRelease.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class WebRelease.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class WebRelease.");

            return new WebRelease(assets, author, body, createdAt, id, isDraft, isLatest, isPrerelease, lastUpdatedBy, publishedAt, tagRef, targetCommitHash, title, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="WebRelease" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webRelease"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebRelease webRelease, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webRelease, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebRelease" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webRelease"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebRelease webRelease, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webRelease.AssetsOption.IsSet && webRelease.Assets == null)
                throw new ArgumentNullException(nameof(webRelease.Assets), "Property is required for class WebRelease.");

            if (webRelease.AuthorOption.IsSet && webRelease.Author == null)
                throw new ArgumentNullException(nameof(webRelease.Author), "Property is required for class WebRelease.");

            if (webRelease.BodyOption.IsSet && webRelease.Body == null)
                throw new ArgumentNullException(nameof(webRelease.Body), "Property is required for class WebRelease.");

            if (webRelease.CreatedAtOption.IsSet && webRelease.CreatedAt == null)
                throw new ArgumentNullException(nameof(webRelease.CreatedAt), "Property is required for class WebRelease.");

            if (webRelease.IdOption.IsSet && webRelease.Id == null)
                throw new ArgumentNullException(nameof(webRelease.Id), "Property is required for class WebRelease.");

            if (webRelease.LastUpdatedByOption.IsSet && webRelease.LastUpdatedBy == null)
                throw new ArgumentNullException(nameof(webRelease.LastUpdatedBy), "Property is required for class WebRelease.");

            if (webRelease.PublishedAtOption.IsSet && webRelease.PublishedAt == null)
                throw new ArgumentNullException(nameof(webRelease.PublishedAt), "Property is required for class WebRelease.");

            if (webRelease.TagRefOption.IsSet && webRelease.TagRef == null)
                throw new ArgumentNullException(nameof(webRelease.TagRef), "Property is required for class WebRelease.");

            if (webRelease.TargetCommitHashOption.IsSet && webRelease.TargetCommitHash == null)
                throw new ArgumentNullException(nameof(webRelease.TargetCommitHash), "Property is required for class WebRelease.");

            if (webRelease.TitleOption.IsSet && webRelease.Title == null)
                throw new ArgumentNullException(nameof(webRelease.Title), "Property is required for class WebRelease.");

            if (webRelease.UpdatedAtOption.IsSet && webRelease.UpdatedAt == null)
                throw new ArgumentNullException(nameof(webRelease.UpdatedAt), "Property is required for class WebRelease.");

            if (webRelease.AssetsOption.IsSet)
            {
                writer.WritePropertyName("assets");
                JsonSerializer.Serialize(writer, webRelease.Assets, jsonSerializerOptions);
            }
            if (webRelease.AuthorOption.IsSet)
            {
                writer.WritePropertyName("author");
                JsonSerializer.Serialize(writer, webRelease.Author, jsonSerializerOptions);
            }
            if (webRelease.BodyOption.IsSet)
                writer.WriteString("body", webRelease.Body);

            if (webRelease.CreatedAtOption.IsSet)
                writer.WriteString("created_at", webRelease.CreatedAt);

            if (webRelease.IdOption.IsSet)
                writer.WriteString("id", webRelease.Id);

            if (webRelease.IsDraftOption.IsSet)
                writer.WriteBoolean("is_draft", webRelease.IsDraftOption.Value!.Value);

            if (webRelease.IsLatestOption.IsSet)
                writer.WriteBoolean("is_latest", webRelease.IsLatestOption.Value!.Value);

            if (webRelease.IsPrereleaseOption.IsSet)
                writer.WriteBoolean("is_prerelease", webRelease.IsPrereleaseOption.Value!.Value);

            if (webRelease.LastUpdatedByOption.IsSet)
            {
                writer.WritePropertyName("last_updated_by");
                JsonSerializer.Serialize(writer, webRelease.LastUpdatedBy, jsonSerializerOptions);
            }
            if (webRelease.PublishedAtOption.IsSet)
                writer.WriteString("published_at", webRelease.PublishedAt);

            if (webRelease.TagRefOption.IsSet)
                writer.WriteString("tag_ref", webRelease.TagRef);

            if (webRelease.TargetCommitHashOption.IsSet)
                writer.WriteString("target_commit_hash", webRelease.TargetCommitHash);

            if (webRelease.TitleOption.IsSet)
                writer.WriteString("title", webRelease.Title);

            if (webRelease.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", webRelease.UpdatedAt);
        }
    }
}
