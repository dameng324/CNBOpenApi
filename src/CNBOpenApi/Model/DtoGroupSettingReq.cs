// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoGroupSettingReq
    /// </summary>
    public partial class DtoGroupSettingReq : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoGroupSettingReq" /> class.
        /// </summary>
        /// <param name="emailVerification">组织限制指定邮箱认证才能加入</param>
        /// <param name="groupProtection">组织保护开关，0 - 关闭，1 - 打开</param>
        /// <param name="hideMembers">是否对外隐藏组织成员，0 - 否, 1 - 是</param>
        /// <param name="hideSubGroups">是否对外隐藏子组织，0 - 否, 1 - 是</param>
        /// <param name="showPrivateRepoWatermark">是否对外显示私有仓库水印，0 - 否, 1 - 是</param>
        /// <param name="values">SettingValue 组织设置值，多个选项，用逗号拼接。可选值来自 SettingNamesArray 的值，e.g. disable_organization_readme,cloud_native_dev_only</param>
        [JsonConstructor]
        public DtoGroupSettingReq(Option<string?> emailVerification = default, Option<int?> groupProtection = default, Option<int?> hideMembers = default, Option<int?> hideSubGroups = default, Option<int?> showPrivateRepoWatermark = default, Option<string?> values = default)
        {
            EmailVerificationOption = emailVerification;
            GroupProtectionOption = groupProtection;
            HideMembersOption = hideMembers;
            HideSubGroupsOption = hideSubGroups;
            ShowPrivateRepoWatermarkOption = showPrivateRepoWatermark;
            ValuesOption = values;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of EmailVerification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailVerificationOption { get; private set; }

        /// <summary>
        /// 组织限制指定邮箱认证才能加入
        /// </summary>
        /// <value>组织限制指定邮箱认证才能加入</value>
        [JsonPropertyName("email_verification")]
        public string? EmailVerification { get { return this.EmailVerificationOption; } set { this.EmailVerificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of GroupProtection
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> GroupProtectionOption { get; private set; }

        /// <summary>
        /// 组织保护开关，0 - 关闭，1 - 打开
        /// </summary>
        /// <value>组织保护开关，0 - 关闭，1 - 打开</value>
        [JsonPropertyName("group_protection")]
        public int? GroupProtection { get { return this.GroupProtectionOption; } set { this.GroupProtectionOption = new(value); } }

        /// <summary>
        /// Used to track the state of HideMembers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> HideMembersOption { get; private set; }

        /// <summary>
        /// 是否对外隐藏组织成员，0 - 否, 1 - 是
        /// </summary>
        /// <value>是否对外隐藏组织成员，0 - 否, 1 - 是</value>
        [JsonPropertyName("hide_members")]
        public int? HideMembers { get { return this.HideMembersOption; } set { this.HideMembersOption = new(value); } }

        /// <summary>
        /// Used to track the state of HideSubGroups
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> HideSubGroupsOption { get; private set; }

        /// <summary>
        /// 是否对外隐藏子组织，0 - 否, 1 - 是
        /// </summary>
        /// <value>是否对外隐藏子组织，0 - 否, 1 - 是</value>
        [JsonPropertyName("hide_sub_groups")]
        public int? HideSubGroups { get { return this.HideSubGroupsOption; } set { this.HideSubGroupsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShowPrivateRepoWatermark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ShowPrivateRepoWatermarkOption { get; private set; }

        /// <summary>
        /// 是否对外显示私有仓库水印，0 - 否, 1 - 是
        /// </summary>
        /// <value>是否对外显示私有仓库水印，0 - 否, 1 - 是</value>
        [JsonPropertyName("show_private_repo_watermark")]
        public int? ShowPrivateRepoWatermark { get { return this.ShowPrivateRepoWatermarkOption; } set { this.ShowPrivateRepoWatermarkOption = new(value); } }

        /// <summary>
        /// Used to track the state of Values
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ValuesOption { get; private set; }

        /// <summary>
        /// SettingValue 组织设置值，多个选项，用逗号拼接。可选值来自 SettingNamesArray 的值，e.g. disable_organization_readme,cloud_native_dev_only
        /// </summary>
        /// <value>SettingValue 组织设置值，多个选项，用逗号拼接。可选值来自 SettingNamesArray 的值，e.g. disable_organization_readme,cloud_native_dev_only</value>
        [JsonPropertyName("values")]
        public string? Values { get { return this.ValuesOption; } set { this.ValuesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoGroupSettingReq {\n");
            sb.Append("  EmailVerification: ").Append(EmailVerification).Append("\n");
            sb.Append("  GroupProtection: ").Append(GroupProtection).Append("\n");
            sb.Append("  HideMembers: ").Append(HideMembers).Append("\n");
            sb.Append("  HideSubGroups: ").Append(HideSubGroups).Append("\n");
            sb.Append("  ShowPrivateRepoWatermark: ").Append(ShowPrivateRepoWatermark).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoGroupSettingReq" />
    /// </summary>
    public class DtoGroupSettingReqJsonConverter : JsonConverter<DtoGroupSettingReq>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoGroupSettingReq" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoGroupSettingReq Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> emailVerification = default;
            Option<int?> groupProtection = default;
            Option<int?> hideMembers = default;
            Option<int?> hideSubGroups = default;
            Option<int?> showPrivateRepoWatermark = default;
            Option<string?> values = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "email_verification":
                            emailVerification = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "group_protection":
                            groupProtection = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "hide_members":
                            hideMembers = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "hide_sub_groups":
                            hideSubGroups = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "show_private_repo_watermark":
                            showPrivateRepoWatermark = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "values":
                            values = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (emailVerification.IsSet && emailVerification.Value == null)
                throw new ArgumentNullException(nameof(emailVerification), "Property is not nullable for class DtoGroupSettingReq.");

            if (groupProtection.IsSet && groupProtection.Value == null)
                throw new ArgumentNullException(nameof(groupProtection), "Property is not nullable for class DtoGroupSettingReq.");

            if (hideMembers.IsSet && hideMembers.Value == null)
                throw new ArgumentNullException(nameof(hideMembers), "Property is not nullable for class DtoGroupSettingReq.");

            if (hideSubGroups.IsSet && hideSubGroups.Value == null)
                throw new ArgumentNullException(nameof(hideSubGroups), "Property is not nullable for class DtoGroupSettingReq.");

            if (showPrivateRepoWatermark.IsSet && showPrivateRepoWatermark.Value == null)
                throw new ArgumentNullException(nameof(showPrivateRepoWatermark), "Property is not nullable for class DtoGroupSettingReq.");

            if (values.IsSet && values.Value == null)
                throw new ArgumentNullException(nameof(values), "Property is not nullable for class DtoGroupSettingReq.");

            return new DtoGroupSettingReq(emailVerification, groupProtection, hideMembers, hideSubGroups, showPrivateRepoWatermark, values);
        }

        /// <summary>
        /// Serializes a <see cref="DtoGroupSettingReq" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoGroupSettingReq"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoGroupSettingReq dtoGroupSettingReq, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoGroupSettingReq, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoGroupSettingReq" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoGroupSettingReq"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoGroupSettingReq dtoGroupSettingReq, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoGroupSettingReq.EmailVerificationOption.IsSet && dtoGroupSettingReq.EmailVerification == null)
                throw new ArgumentNullException(nameof(dtoGroupSettingReq.EmailVerification), "Property is required for class DtoGroupSettingReq.");

            if (dtoGroupSettingReq.ValuesOption.IsSet && dtoGroupSettingReq.Values == null)
                throw new ArgumentNullException(nameof(dtoGroupSettingReq.Values), "Property is required for class DtoGroupSettingReq.");

            if (dtoGroupSettingReq.EmailVerificationOption.IsSet)
                writer.WriteString("email_verification", dtoGroupSettingReq.EmailVerification);

            if (dtoGroupSettingReq.GroupProtectionOption.IsSet)
                writer.WriteNumber("group_protection", dtoGroupSettingReq.GroupProtectionOption.Value!.Value);

            if (dtoGroupSettingReq.HideMembersOption.IsSet)
                writer.WriteNumber("hide_members", dtoGroupSettingReq.HideMembersOption.Value!.Value);

            if (dtoGroupSettingReq.HideSubGroupsOption.IsSet)
                writer.WriteNumber("hide_sub_groups", dtoGroupSettingReq.HideSubGroupsOption.Value!.Value);

            if (dtoGroupSettingReq.ShowPrivateRepoWatermarkOption.IsSet)
                writer.WriteNumber("show_private_repo_watermark", dtoGroupSettingReq.ShowPrivateRepoWatermarkOption.Value!.Value);

            if (dtoGroupSettingReq.ValuesOption.IsSet)
                writer.WriteString("values", dtoGroupSettingReq.Values);
        }
    }
}
