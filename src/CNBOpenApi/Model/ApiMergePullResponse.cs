// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// ApiMergePullResponse
    /// </summary>
    public partial class ApiMergePullResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiMergePullResponse" /> class.
        /// </summary>
        /// <param name="merged">merged</param>
        /// <param name="message">message</param>
        /// <param name="sha">sha</param>
        [JsonConstructor]
        public ApiMergePullResponse(Option<bool?> merged = default, Option<string?> message = default, Option<string?> sha = default)
        {
            MergedOption = merged;
            MessageOption = message;
            ShaOption = sha;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Merged
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MergedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Merged
        /// </summary>
        [JsonPropertyName("merged")]
        public bool? Merged { get { return this.MergedOption; } set { this.MergedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [JsonPropertyName("message")]
        public string? Message { get { return this.MessageOption; } set { this.MessageOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sha
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ShaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sha
        /// </summary>
        [JsonPropertyName("sha")]
        public string? Sha { get { return this.ShaOption; } set { this.ShaOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiMergePullResponse {\n");
            sb.Append("  Merged: ").Append(Merged).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Sha: ").Append(Sha).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApiMergePullResponse" />
    /// </summary>
    public class ApiMergePullResponseJsonConverter : JsonConverter<ApiMergePullResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApiMergePullResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApiMergePullResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> merged = default;
            Option<string?> message = default;
            Option<string?> sha = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "merged":
                            merged = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sha":
                            sha = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (merged.IsSet && merged.Value == null)
                throw new ArgumentNullException(nameof(merged), "Property is not nullable for class ApiMergePullResponse.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class ApiMergePullResponse.");

            if (sha.IsSet && sha.Value == null)
                throw new ArgumentNullException(nameof(sha), "Property is not nullable for class ApiMergePullResponse.");

            return new ApiMergePullResponse(merged, message, sha);
        }

        /// <summary>
        /// Serializes a <see cref="ApiMergePullResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiMergePullResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApiMergePullResponse apiMergePullResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, apiMergePullResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApiMergePullResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiMergePullResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApiMergePullResponse apiMergePullResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (apiMergePullResponse.MessageOption.IsSet && apiMergePullResponse.Message == null)
                throw new ArgumentNullException(nameof(apiMergePullResponse.Message), "Property is required for class ApiMergePullResponse.");

            if (apiMergePullResponse.ShaOption.IsSet && apiMergePullResponse.Sha == null)
                throw new ArgumentNullException(nameof(apiMergePullResponse.Sha), "Property is required for class ApiMergePullResponse.");

            if (apiMergePullResponse.MergedOption.IsSet)
                writer.WriteBoolean("merged", apiMergePullResponse.MergedOption.Value!.Value);

            if (apiMergePullResponse.MessageOption.IsSet)
                writer.WriteString("message", apiMergePullResponse.Message);

            if (apiMergePullResponse.ShaOption.IsSet)
                writer.WriteString("sha", apiMergePullResponse.Sha);
        }
    }
}
