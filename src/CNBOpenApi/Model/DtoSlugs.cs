// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoSlugs
    /// </summary>
    public partial class DtoSlugs : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoSlugs" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="freeze">freeze</param>
        /// <param name="path">path</param>
        /// <param name="resourceId">resourceId</param>
        /// <param name="resourceType">resourceType</param>
        /// <param name="rootFreeze">rootFreeze</param>
        /// <param name="rootId">rootId</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public DtoSlugs(Option<string?> createdAt = default, Option<bool?> freeze = default, Option<string?> path = default, Option<int?> resourceId = default, Option<ConstantSlugType?> resourceType = default, Option<bool?> rootFreeze = default, Option<int?> rootId = default, Option<string?> updatedAt = default)
        {
            CreatedAtOption = createdAt;
            FreezeOption = freeze;
            PathOption = path;
            ResourceIdOption = resourceId;
            ResourceTypeOption = resourceType;
            RootFreezeOption = rootFreeze;
            RootIdOption = rootId;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ResourceType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantSlugType?> ResourceTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>
        [JsonPropertyName("resource_type")]
        public ConstantSlugType? ResourceType { get { return this.ResourceTypeOption; } set { this.ResourceTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Freeze
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FreezeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Freeze
        /// </summary>
        [JsonPropertyName("freeze")]
        public bool? Freeze { get { return this.FreezeOption; } set { this.FreezeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of ResourceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ResourceIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResourceId
        /// </summary>
        [JsonPropertyName("resource_id")]
        public int? ResourceId { get { return this.ResourceIdOption; } set { this.ResourceIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of RootFreeze
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RootFreezeOption { get; private set; }

        /// <summary>
        /// Gets or Sets RootFreeze
        /// </summary>
        [JsonPropertyName("root_freeze")]
        public bool? RootFreeze { get { return this.RootFreezeOption; } set { this.RootFreezeOption = new(value); } }

        /// <summary>
        /// Used to track the state of RootId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RootIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets RootId
        /// </summary>
        [JsonPropertyName("root_id")]
        public int? RootId { get { return this.RootIdOption; } set { this.RootIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoSlugs {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Freeze: ").Append(Freeze).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  RootFreeze: ").Append(RootFreeze).Append("\n");
            sb.Append("  RootId: ").Append(RootId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoSlugs" />
    /// </summary>
    public class DtoSlugsJsonConverter : JsonConverter<DtoSlugs>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoSlugs" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoSlugs Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> createdAt = default;
            Option<bool?> freeze = default;
            Option<string?> path = default;
            Option<int?> resourceId = default;
            Option<ConstantSlugType?> resourceType = default;
            Option<bool?> rootFreeze = default;
            Option<int?> rootId = default;
            Option<string?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "freeze":
                            freeze = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "resource_id":
                            resourceId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "resource_type":
                            string? resourceTypeRawValue = utf8JsonReader.GetString();
                            if (resourceTypeRawValue != null)
                                resourceType = new Option<ConstantSlugType?>(ConstantSlugTypeValueConverter.FromStringOrDefault(resourceTypeRawValue));
                            break;
                        case "root_freeze":
                            rootFreeze = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "root_id":
                            rootId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class DtoSlugs.");

            if (freeze.IsSet && freeze.Value == null)
                throw new ArgumentNullException(nameof(freeze), "Property is not nullable for class DtoSlugs.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class DtoSlugs.");

            if (resourceId.IsSet && resourceId.Value == null)
                throw new ArgumentNullException(nameof(resourceId), "Property is not nullable for class DtoSlugs.");

            if (resourceType.IsSet && resourceType.Value == null)
                throw new ArgumentNullException(nameof(resourceType), "Property is not nullable for class DtoSlugs.");

            if (rootFreeze.IsSet && rootFreeze.Value == null)
                throw new ArgumentNullException(nameof(rootFreeze), "Property is not nullable for class DtoSlugs.");

            if (rootId.IsSet && rootId.Value == null)
                throw new ArgumentNullException(nameof(rootId), "Property is not nullable for class DtoSlugs.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class DtoSlugs.");

            return new DtoSlugs(createdAt, freeze, path, resourceId, resourceType, rootFreeze, rootId, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="DtoSlugs" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoSlugs"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoSlugs dtoSlugs, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoSlugs, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoSlugs" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoSlugs"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoSlugs dtoSlugs, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoSlugs.CreatedAtOption.IsSet && dtoSlugs.CreatedAt == null)
                throw new ArgumentNullException(nameof(dtoSlugs.CreatedAt), "Property is required for class DtoSlugs.");

            if (dtoSlugs.PathOption.IsSet && dtoSlugs.Path == null)
                throw new ArgumentNullException(nameof(dtoSlugs.Path), "Property is required for class DtoSlugs.");

            if (dtoSlugs.UpdatedAtOption.IsSet && dtoSlugs.UpdatedAt == null)
                throw new ArgumentNullException(nameof(dtoSlugs.UpdatedAt), "Property is required for class DtoSlugs.");

            if (dtoSlugs.CreatedAtOption.IsSet)
                writer.WriteString("created_at", dtoSlugs.CreatedAt);

            if (dtoSlugs.FreezeOption.IsSet)
                writer.WriteBoolean("freeze", dtoSlugs.FreezeOption.Value!.Value);

            if (dtoSlugs.PathOption.IsSet)
                writer.WriteString("path", dtoSlugs.Path);

            if (dtoSlugs.ResourceIdOption.IsSet)
                writer.WriteNumber("resource_id", dtoSlugs.ResourceIdOption.Value!.Value);

            if (dtoSlugs.ResourceTypeOption.IsSet)
            {
                var resourceTypeRawValue = ConstantSlugTypeValueConverter.ToJsonValue(dtoSlugs.ResourceType!.Value);
                writer.WriteNumber("resource_type", resourceTypeRawValue);
            }
            if (dtoSlugs.RootFreezeOption.IsSet)
                writer.WriteBoolean("root_freeze", dtoSlugs.RootFreezeOption.Value!.Value);

            if (dtoSlugs.RootIdOption.IsSet)
                writer.WriteNumber("root_id", dtoSlugs.RootIdOption.Value!.Value);

            if (dtoSlugs.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", dtoSlugs.UpdatedAt);
        }
    }
}
