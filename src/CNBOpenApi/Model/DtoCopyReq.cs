// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoCopyReq
    /// </summary>
    public partial class DtoCopyReq : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoCopyReq" /> class.
        /// </summary>
        /// <param name="description">description</param>
        /// <param name="group">group</param>
        /// <param name="name">name</param>
        /// <param name="visibility">visibility (default to VisibilityEnum.Public)</param>
        [JsonConstructor]
        public DtoCopyReq(Option<string?> description = default, Option<string?> group = default, Option<string?> name = default, Option<VisibilityEnum?> visibility = default)
        {
            DescriptionOption = description;
            GroupOption = group;
            NameOption = name;
            VisibilityOption = visibility;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Visibility
        /// </summary>
        public enum VisibilityEnum
        {
            /// <summary>
            /// Enum Public for value: public
            /// </summary>
            Public = 1,

            /// <summary>
            /// Enum Private for value: private
            /// </summary>
            Private = 2
        }

        /// <summary>
        /// Returns a <see cref="VisibilityEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static VisibilityEnum VisibilityEnumFromString(string value)
        {
            if (value.Equals("public"))
                return VisibilityEnum.Public;

            if (value.Equals("private"))
                return VisibilityEnum.Private;

            throw new NotImplementedException($"Could not convert value to type VisibilityEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="VisibilityEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VisibilityEnum? VisibilityEnumFromStringOrDefault(string value)
        {
            if (value.Equals("public"))
                return VisibilityEnum.Public;

            if (value.Equals("private"))
                return VisibilityEnum.Private;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VisibilityEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string VisibilityEnumToJsonValue(VisibilityEnum? value)
        {
            if (value == VisibilityEnum.Public)
                return "public";

            if (value == VisibilityEnum.Private)
                return "private";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Visibility
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VisibilityEnum?> VisibilityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [JsonPropertyName("visibility")]
        public VisibilityEnum? Visibility { get { return this.VisibilityOption; } set { this.VisibilityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Group
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GroupOption { get; private set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [JsonPropertyName("group")]
        public string? Group { get { return this.GroupOption; } set { this.GroupOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoCopyReq {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoCopyReq" />
    /// </summary>
    public class DtoCopyReqJsonConverter : JsonConverter<DtoCopyReq>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoCopyReq" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoCopyReq Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> description = default;
            Option<string?> group = default;
            Option<string?> name = default;
            Option<DtoCopyReq.VisibilityEnum?> visibility = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "group":
                            group = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "visibility":
                            string? visibilityRawValue = utf8JsonReader.GetString();
                            if (visibilityRawValue != null)
                                visibility = new Option<DtoCopyReq.VisibilityEnum?>(DtoCopyReq.VisibilityEnumFromStringOrDefault(visibilityRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class DtoCopyReq.");

            if (group.IsSet && group.Value == null)
                throw new ArgumentNullException(nameof(group), "Property is not nullable for class DtoCopyReq.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class DtoCopyReq.");

            if (visibility.IsSet && visibility.Value == null)
                throw new ArgumentNullException(nameof(visibility), "Property is not nullable for class DtoCopyReq.");

            return new DtoCopyReq(description, group, name, visibility);
        }

        /// <summary>
        /// Serializes a <see cref="DtoCopyReq" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoCopyReq"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoCopyReq dtoCopyReq, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoCopyReq, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoCopyReq" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoCopyReq"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoCopyReq dtoCopyReq, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoCopyReq.DescriptionOption.IsSet && dtoCopyReq.Description == null)
                throw new ArgumentNullException(nameof(dtoCopyReq.Description), "Property is required for class DtoCopyReq.");

            if (dtoCopyReq.GroupOption.IsSet && dtoCopyReq.Group == null)
                throw new ArgumentNullException(nameof(dtoCopyReq.Group), "Property is required for class DtoCopyReq.");

            if (dtoCopyReq.NameOption.IsSet && dtoCopyReq.Name == null)
                throw new ArgumentNullException(nameof(dtoCopyReq.Name), "Property is required for class DtoCopyReq.");

            if (dtoCopyReq.DescriptionOption.IsSet)
                writer.WriteString("description", dtoCopyReq.Description);

            if (dtoCopyReq.GroupOption.IsSet)
                writer.WriteString("group", dtoCopyReq.Group);

            if (dtoCopyReq.NameOption.IsSet)
                writer.WriteString("name", dtoCopyReq.Name);

            var visibilityRawValue = DtoCopyReq.VisibilityEnumToJsonValue(dtoCopyReq.VisibilityOption.Value!.Value);
            writer.WriteString("visibility", visibilityRawValue);
        }
    }
}
