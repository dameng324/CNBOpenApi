// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// V1Descriptor
    /// </summary>
    public partial class V1Descriptor : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1Descriptor" /> class.
        /// </summary>
        /// <param name="annotations">Annotations contains arbitrary metadata relating to the targeted content.</param>
        /// <param name="artifactType">ArtifactType is the IANA media type of this artifact.</param>
        /// <param name="data">Data is an embedding of the targeted content. This is encoded as a base64 string when marshalled to JSON (automatically, by encoding/json). If present, Data can be used directly to avoid fetching the targeted content.</param>
        /// <param name="digest">Digest is the digest of the targeted content.</param>
        /// <param name="mediaType">MediaType is the media type of the object this schema refers to.</param>
        /// <param name="platform">Platform describes the platform which the image in the manifest runs on.  This should only be used when referring to a manifest.</param>
        /// <param name="size">Size specifies the size in bytes of the blob.</param>
        /// <param name="urls">URLs specifies a list of URLs from which this object MAY be downloaded</param>
        [JsonConstructor]
        public V1Descriptor(Option<Dictionary<string, string>?> annotations = default, Option<string?> artifactType = default, Option<List<int>?> data = default, Option<string?> digest = default, Option<string?> mediaType = default, Option<V1Platform?> platform = default, Option<int?> size = default, Option<List<string>?> urls = default)
        {
            AnnotationsOption = annotations;
            ArtifactTypeOption = artifactType;
            DataOption = data;
            DigestOption = digest;
            MediaTypeOption = mediaType;
            PlatformOption = platform;
            SizeOption = size;
            UrlsOption = urls;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Annotations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> AnnotationsOption { get; private set; }

        /// <summary>
        /// Annotations contains arbitrary metadata relating to the targeted content.
        /// </summary>
        /// <value>Annotations contains arbitrary metadata relating to the targeted content.</value>
        [JsonPropertyName("annotations")]
        public Dictionary<string, string>? Annotations { get { return this.AnnotationsOption; } set { this.AnnotationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ArtifactType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ArtifactTypeOption { get; private set; }

        /// <summary>
        /// ArtifactType is the IANA media type of this artifact.
        /// </summary>
        /// <value>ArtifactType is the IANA media type of this artifact.</value>
        [JsonPropertyName("artifactType")]
        public string? ArtifactType { get { return this.ArtifactTypeOption; } set { this.ArtifactTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> DataOption { get; private set; }

        /// <summary>
        /// Data is an embedding of the targeted content. This is encoded as a base64 string when marshalled to JSON (automatically, by encoding/json). If present, Data can be used directly to avoid fetching the targeted content.
        /// </summary>
        /// <value>Data is an embedding of the targeted content. This is encoded as a base64 string when marshalled to JSON (automatically, by encoding/json). If present, Data can be used directly to avoid fetching the targeted content.</value>
        [JsonPropertyName("data")]
        public List<int>? Data { get { return this.DataOption; } set { this.DataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Digest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DigestOption { get; private set; }

        /// <summary>
        /// Digest is the digest of the targeted content.
        /// </summary>
        /// <value>Digest is the digest of the targeted content.</value>
        [JsonPropertyName("digest")]
        public string? Digest { get { return this.DigestOption; } set { this.DigestOption = new(value); } }

        /// <summary>
        /// Used to track the state of MediaType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MediaTypeOption { get; private set; }

        /// <summary>
        /// MediaType is the media type of the object this schema refers to.
        /// </summary>
        /// <value>MediaType is the media type of the object this schema refers to.</value>
        [JsonPropertyName("mediaType")]
        public string? MediaType { get { return this.MediaTypeOption; } set { this.MediaTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Platform
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<V1Platform?> PlatformOption { get; private set; }

        /// <summary>
        /// Platform describes the platform which the image in the manifest runs on.  This should only be used when referring to a manifest.
        /// </summary>
        /// <value>Platform describes the platform which the image in the manifest runs on.  This should only be used when referring to a manifest.</value>
        [JsonPropertyName("platform")]
        public V1Platform? Platform { get { return this.PlatformOption; } set { this.PlatformOption = new(value); } }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SizeOption { get; private set; }

        /// <summary>
        /// Size specifies the size in bytes of the blob.
        /// </summary>
        /// <value>Size specifies the size in bytes of the blob.</value>
        [JsonPropertyName("size")]
        public int? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Urls
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> UrlsOption { get; private set; }

        /// <summary>
        /// URLs specifies a list of URLs from which this object MAY be downloaded
        /// </summary>
        /// <value>URLs specifies a list of URLs from which this object MAY be downloaded</value>
        [JsonPropertyName("urls")]
        public List<string>? Urls { get { return this.UrlsOption; } set { this.UrlsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V1Descriptor {\n");
            sb.Append("  Annotations: ").Append(Annotations).Append("\n");
            sb.Append("  ArtifactType: ").Append(ArtifactType).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Digest: ").Append(Digest).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="V1Descriptor" />
    /// </summary>
    public class V1DescriptorJsonConverter : JsonConverter<V1Descriptor>
    {
        /// <summary>
        /// Deserializes json to <see cref="V1Descriptor" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override V1Descriptor Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Dictionary<string, string>?> annotations = default;
            Option<string?> artifactType = default;
            Option<List<int>?> data = default;
            Option<string?> digest = default;
            Option<string?> mediaType = default;
            Option<V1Platform?> platform = default;
            Option<int?> size = default;
            Option<List<string>?> urls = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "annotations":
                            annotations = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "artifactType":
                            artifactType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "data":
                            data = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "digest":
                            digest = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mediaType":
                            mediaType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "platform":
                            platform = new Option<V1Platform?>(JsonSerializer.Deserialize<V1Platform>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "urls":
                            urls = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (annotations.IsSet && annotations.Value == null)
                throw new ArgumentNullException(nameof(annotations), "Property is not nullable for class V1Descriptor.");

            if (artifactType.IsSet && artifactType.Value == null)
                throw new ArgumentNullException(nameof(artifactType), "Property is not nullable for class V1Descriptor.");

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class V1Descriptor.");

            if (digest.IsSet && digest.Value == null)
                throw new ArgumentNullException(nameof(digest), "Property is not nullable for class V1Descriptor.");

            if (mediaType.IsSet && mediaType.Value == null)
                throw new ArgumentNullException(nameof(mediaType), "Property is not nullable for class V1Descriptor.");

            if (platform.IsSet && platform.Value == null)
                throw new ArgumentNullException(nameof(platform), "Property is not nullable for class V1Descriptor.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class V1Descriptor.");

            if (urls.IsSet && urls.Value == null)
                throw new ArgumentNullException(nameof(urls), "Property is not nullable for class V1Descriptor.");

            return new V1Descriptor(annotations, artifactType, data, digest, mediaType, platform, size, urls);
        }

        /// <summary>
        /// Serializes a <see cref="V1Descriptor" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="v1Descriptor"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, V1Descriptor v1Descriptor, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, v1Descriptor, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="V1Descriptor" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="v1Descriptor"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, V1Descriptor v1Descriptor, JsonSerializerOptions jsonSerializerOptions)
        {
            if (v1Descriptor.AnnotationsOption.IsSet && v1Descriptor.Annotations == null)
                throw new ArgumentNullException(nameof(v1Descriptor.Annotations), "Property is required for class V1Descriptor.");

            if (v1Descriptor.ArtifactTypeOption.IsSet && v1Descriptor.ArtifactType == null)
                throw new ArgumentNullException(nameof(v1Descriptor.ArtifactType), "Property is required for class V1Descriptor.");

            if (v1Descriptor.DataOption.IsSet && v1Descriptor.Data == null)
                throw new ArgumentNullException(nameof(v1Descriptor.Data), "Property is required for class V1Descriptor.");

            if (v1Descriptor.DigestOption.IsSet && v1Descriptor.Digest == null)
                throw new ArgumentNullException(nameof(v1Descriptor.Digest), "Property is required for class V1Descriptor.");

            if (v1Descriptor.MediaTypeOption.IsSet && v1Descriptor.MediaType == null)
                throw new ArgumentNullException(nameof(v1Descriptor.MediaType), "Property is required for class V1Descriptor.");

            if (v1Descriptor.PlatformOption.IsSet && v1Descriptor.Platform == null)
                throw new ArgumentNullException(nameof(v1Descriptor.Platform), "Property is required for class V1Descriptor.");

            if (v1Descriptor.UrlsOption.IsSet && v1Descriptor.Urls == null)
                throw new ArgumentNullException(nameof(v1Descriptor.Urls), "Property is required for class V1Descriptor.");

            if (v1Descriptor.AnnotationsOption.IsSet)
            {
                writer.WritePropertyName("annotations");
                JsonSerializer.Serialize(writer, v1Descriptor.Annotations, jsonSerializerOptions);
            }
            if (v1Descriptor.ArtifactTypeOption.IsSet)
                writer.WriteString("artifactType", v1Descriptor.ArtifactType);

            if (v1Descriptor.DataOption.IsSet)
            {
                writer.WritePropertyName("data");
                JsonSerializer.Serialize(writer, v1Descriptor.Data, jsonSerializerOptions);
            }
            if (v1Descriptor.DigestOption.IsSet)
                writer.WriteString("digest", v1Descriptor.Digest);

            if (v1Descriptor.MediaTypeOption.IsSet)
                writer.WriteString("mediaType", v1Descriptor.MediaType);

            if (v1Descriptor.PlatformOption.IsSet)
            {
                writer.WritePropertyName("platform");
                JsonSerializer.Serialize(writer, v1Descriptor.Platform, jsonSerializerOptions);
            }
            if (v1Descriptor.SizeOption.IsSet)
                writer.WriteNumber("size", v1Descriptor.SizeOption.Value!.Value);

            if (v1Descriptor.UrlsOption.IsSet)
            {
                writer.WritePropertyName("urls");
                JsonSerializer.Serialize(writer, v1Descriptor.Urls, jsonSerializerOptions);
            }
        }
    }
}
