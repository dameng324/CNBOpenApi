// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WechatAuthorizedUser
    /// </summary>
    public partial class WechatAuthorizedUser : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WechatAuthorizedUser" /> class.
        /// </summary>
        /// <param name="defaultMaxDay">默认的过期天数</param>
        /// <param name="freeze">freeze</param>
        /// <param name="headImgUrl">headImgUrl</param>
        /// <param name="maxDaysOptions">用户登陆过期天数可选项</param>
        /// <param name="nickName">nickName</param>
        [JsonConstructor]
        public WechatAuthorizedUser(Option<int?> defaultMaxDay = default, Option<bool?> freeze = default, Option<string?> headImgUrl = default, Option<List<int>?> maxDaysOptions = default, Option<string?> nickName = default)
        {
            DefaultMaxDayOption = defaultMaxDay;
            FreezeOption = freeze;
            HeadImgUrlOption = headImgUrl;
            MaxDaysOptionsOption = maxDaysOptions;
            NickNameOption = nickName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DefaultMaxDay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DefaultMaxDayOption { get; private set; }

        /// <summary>
        /// 默认的过期天数
        /// </summary>
        /// <value>默认的过期天数</value>
        [JsonPropertyName("defaultMaxDay")]
        public int? DefaultMaxDay { get { return this.DefaultMaxDayOption; } set { this.DefaultMaxDayOption = new(value); } }

        /// <summary>
        /// Used to track the state of Freeze
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FreezeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Freeze
        /// </summary>
        [JsonPropertyName("freeze")]
        public bool? Freeze { get { return this.FreezeOption; } set { this.FreezeOption = new(value); } }

        /// <summary>
        /// Used to track the state of HeadImgUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HeadImgUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets HeadImgUrl
        /// </summary>
        [JsonPropertyName("headImgUrl")]
        public string? HeadImgUrl { get { return this.HeadImgUrlOption; } set { this.HeadImgUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxDaysOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> MaxDaysOptionsOption { get; private set; }

        /// <summary>
        /// 用户登陆过期天数可选项
        /// </summary>
        /// <value>用户登陆过期天数可选项</value>
        [JsonPropertyName("maxDaysOptions")]
        public List<int>? MaxDaysOptions { get { return this.MaxDaysOptionsOption; } set { this.MaxDaysOptionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of NickName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NickNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets NickName
        /// </summary>
        [JsonPropertyName("nickName")]
        public string? NickName { get { return this.NickNameOption; } set { this.NickNameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WechatAuthorizedUser {\n");
            sb.Append("  DefaultMaxDay: ").Append(DefaultMaxDay).Append("\n");
            sb.Append("  Freeze: ").Append(Freeze).Append("\n");
            sb.Append("  HeadImgUrl: ").Append(HeadImgUrl).Append("\n");
            sb.Append("  MaxDaysOptions: ").Append(MaxDaysOptions).Append("\n");
            sb.Append("  NickName: ").Append(NickName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WechatAuthorizedUser" />
    /// </summary>
    public class WechatAuthorizedUserJsonConverter : JsonConverter<WechatAuthorizedUser>
    {
        /// <summary>
        /// Deserializes json to <see cref="WechatAuthorizedUser" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WechatAuthorizedUser Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> defaultMaxDay = default;
            Option<bool?> freeze = default;
            Option<string?> headImgUrl = default;
            Option<List<int>?> maxDaysOptions = default;
            Option<string?> nickName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "defaultMaxDay":
                            defaultMaxDay = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "freeze":
                            freeze = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "headImgUrl":
                            headImgUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "maxDaysOptions":
                            maxDaysOptions = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "nickName":
                            nickName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (defaultMaxDay.IsSet && defaultMaxDay.Value == null)
                throw new ArgumentNullException(nameof(defaultMaxDay), "Property is not nullable for class WechatAuthorizedUser.");

            if (freeze.IsSet && freeze.Value == null)
                throw new ArgumentNullException(nameof(freeze), "Property is not nullable for class WechatAuthorizedUser.");

            if (headImgUrl.IsSet && headImgUrl.Value == null)
                throw new ArgumentNullException(nameof(headImgUrl), "Property is not nullable for class WechatAuthorizedUser.");

            if (maxDaysOptions.IsSet && maxDaysOptions.Value == null)
                throw new ArgumentNullException(nameof(maxDaysOptions), "Property is not nullable for class WechatAuthorizedUser.");

            if (nickName.IsSet && nickName.Value == null)
                throw new ArgumentNullException(nameof(nickName), "Property is not nullable for class WechatAuthorizedUser.");

            return new WechatAuthorizedUser(defaultMaxDay, freeze, headImgUrl, maxDaysOptions, nickName);
        }

        /// <summary>
        /// Serializes a <see cref="WechatAuthorizedUser" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="wechatAuthorizedUser"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WechatAuthorizedUser wechatAuthorizedUser, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, wechatAuthorizedUser, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WechatAuthorizedUser" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="wechatAuthorizedUser"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WechatAuthorizedUser wechatAuthorizedUser, JsonSerializerOptions jsonSerializerOptions)
        {
            if (wechatAuthorizedUser.HeadImgUrlOption.IsSet && wechatAuthorizedUser.HeadImgUrl == null)
                throw new ArgumentNullException(nameof(wechatAuthorizedUser.HeadImgUrl), "Property is required for class WechatAuthorizedUser.");

            if (wechatAuthorizedUser.MaxDaysOptionsOption.IsSet && wechatAuthorizedUser.MaxDaysOptions == null)
                throw new ArgumentNullException(nameof(wechatAuthorizedUser.MaxDaysOptions), "Property is required for class WechatAuthorizedUser.");

            if (wechatAuthorizedUser.NickNameOption.IsSet && wechatAuthorizedUser.NickName == null)
                throw new ArgumentNullException(nameof(wechatAuthorizedUser.NickName), "Property is required for class WechatAuthorizedUser.");

            if (wechatAuthorizedUser.DefaultMaxDayOption.IsSet)
                writer.WriteNumber("defaultMaxDay", wechatAuthorizedUser.DefaultMaxDayOption.Value!.Value);

            if (wechatAuthorizedUser.FreezeOption.IsSet)
                writer.WriteBoolean("freeze", wechatAuthorizedUser.FreezeOption.Value!.Value);

            if (wechatAuthorizedUser.HeadImgUrlOption.IsSet)
                writer.WriteString("headImgUrl", wechatAuthorizedUser.HeadImgUrl);

            if (wechatAuthorizedUser.MaxDaysOptionsOption.IsSet)
            {
                writer.WritePropertyName("maxDaysOptions");
                JsonSerializer.Serialize(writer, wechatAuthorizedUser.MaxDaysOptions, jsonSerializerOptions);
            }
            if (wechatAuthorizedUser.NickNameOption.IsSet)
                writer.WriteString("nickName", wechatAuthorizedUser.NickName);
        }
    }
}
