// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// OpenapiPatchReleaseForm
    /// </summary>
    public partial class OpenapiPatchReleaseForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenapiPatchReleaseForm" /> class.
        /// </summary>
        /// <param name="body">body</param>
        /// <param name="draft">draft</param>
        /// <param name="makeLatest">makeLatest</param>
        /// <param name="name">name</param>
        /// <param name="prerelease">prerelease</param>
        [JsonConstructor]
        public OpenapiPatchReleaseForm(Option<string?> body = default, Option<bool?> draft = default, Option<string?> makeLatest = default, Option<string?> name = default, Option<bool?> prerelease = default)
        {
            BodyOption = body;
            DraftOption = draft;
            MakeLatestOption = makeLatest;
            NameOption = name;
            PrereleaseOption = prerelease;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BodyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public string? Body { get { return this.BodyOption; } set { this.BodyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Draft
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DraftOption { get; private set; }

        /// <summary>
        /// Gets or Sets Draft
        /// </summary>
        [JsonPropertyName("draft")]
        public bool? Draft { get { return this.DraftOption; } set { this.DraftOption = new(value); } }

        /// <summary>
        /// Used to track the state of MakeLatest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MakeLatestOption { get; private set; }

        /// <summary>
        /// Gets or Sets MakeLatest
        /// </summary>
        [JsonPropertyName("make_latest")]
        public string? MakeLatest { get { return this.MakeLatestOption; } set { this.MakeLatestOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Prerelease
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PrereleaseOption { get; private set; }

        /// <summary>
        /// Gets or Sets Prerelease
        /// </summary>
        [JsonPropertyName("prerelease")]
        public bool? Prerelease { get { return this.PrereleaseOption; } set { this.PrereleaseOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OpenapiPatchReleaseForm {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Draft: ").Append(Draft).Append("\n");
            sb.Append("  MakeLatest: ").Append(MakeLatest).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Prerelease: ").Append(Prerelease).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OpenapiPatchReleaseForm" />
    /// </summary>
    public class OpenapiPatchReleaseFormJsonConverter : JsonConverter<OpenapiPatchReleaseForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="OpenapiPatchReleaseForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OpenapiPatchReleaseForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> body = default;
            Option<bool?> draft = default;
            Option<string?> makeLatest = default;
            Option<string?> name = default;
            Option<bool?> prerelease = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "body":
                            body = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "draft":
                            draft = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "make_latest":
                            makeLatest = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "prerelease":
                            prerelease = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body), "Property is not nullable for class OpenapiPatchReleaseForm.");

            if (draft.IsSet && draft.Value == null)
                throw new ArgumentNullException(nameof(draft), "Property is not nullable for class OpenapiPatchReleaseForm.");

            if (makeLatest.IsSet && makeLatest.Value == null)
                throw new ArgumentNullException(nameof(makeLatest), "Property is not nullable for class OpenapiPatchReleaseForm.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class OpenapiPatchReleaseForm.");

            if (prerelease.IsSet && prerelease.Value == null)
                throw new ArgumentNullException(nameof(prerelease), "Property is not nullable for class OpenapiPatchReleaseForm.");

            return new OpenapiPatchReleaseForm(body, draft, makeLatest, name, prerelease);
        }

        /// <summary>
        /// Serializes a <see cref="OpenapiPatchReleaseForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="openapiPatchReleaseForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OpenapiPatchReleaseForm openapiPatchReleaseForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, openapiPatchReleaseForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OpenapiPatchReleaseForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="openapiPatchReleaseForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OpenapiPatchReleaseForm openapiPatchReleaseForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (openapiPatchReleaseForm.BodyOption.IsSet && openapiPatchReleaseForm.Body == null)
                throw new ArgumentNullException(nameof(openapiPatchReleaseForm.Body), "Property is required for class OpenapiPatchReleaseForm.");

            if (openapiPatchReleaseForm.MakeLatestOption.IsSet && openapiPatchReleaseForm.MakeLatest == null)
                throw new ArgumentNullException(nameof(openapiPatchReleaseForm.MakeLatest), "Property is required for class OpenapiPatchReleaseForm.");

            if (openapiPatchReleaseForm.NameOption.IsSet && openapiPatchReleaseForm.Name == null)
                throw new ArgumentNullException(nameof(openapiPatchReleaseForm.Name), "Property is required for class OpenapiPatchReleaseForm.");

            if (openapiPatchReleaseForm.BodyOption.IsSet)
                writer.WriteString("body", openapiPatchReleaseForm.Body);

            if (openapiPatchReleaseForm.DraftOption.IsSet)
                writer.WriteBoolean("draft", openapiPatchReleaseForm.DraftOption.Value!.Value);

            if (openapiPatchReleaseForm.MakeLatestOption.IsSet)
                writer.WriteString("make_latest", openapiPatchReleaseForm.MakeLatest);

            if (openapiPatchReleaseForm.NameOption.IsSet)
                writer.WriteString("name", openapiPatchReleaseForm.Name);

            if (openapiPatchReleaseForm.PrereleaseOption.IsSet)
                writer.WriteBoolean("prerelease", openapiPatchReleaseForm.PrereleaseOption.Value!.Value);
        }
    }
}
