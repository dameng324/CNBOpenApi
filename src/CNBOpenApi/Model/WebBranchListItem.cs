// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebBranchListItem
    /// </summary>
    public partial class WebBranchListItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebBranchListItem" /> class.
        /// </summary>
        /// <param name="ahead">ahead</param>
        /// <param name="associatedPullRequest">associatedPullRequest</param>
        /// <param name="behind">behind</param>
        /// <param name="commit">commit</param>
        /// <param name="devMeta">devMeta</param>
        /// <param name="isHead">isHead</param>
        /// <param name="isProtected">isProtected</param>
        /// <param name="name">name</param>
        [JsonConstructor]
        public WebBranchListItem(Option<int?> ahead = default, Option<WebBranchPullRequest?> associatedPullRequest = default, Option<int?> behind = default, Option<WebCommit?> commit = default, Option<List<int>?> devMeta = default, Option<bool?> isHead = default, Option<bool?> isProtected = default, Option<string?> name = default)
        {
            AheadOption = ahead;
            AssociatedPullRequestOption = associatedPullRequest;
            BehindOption = behind;
            CommitOption = commit;
            DevMetaOption = devMeta;
            IsHeadOption = isHead;
            IsProtectedOption = isProtected;
            NameOption = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Ahead
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AheadOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ahead
        /// </summary>
        [JsonPropertyName("ahead")]
        public int? Ahead { get { return this.AheadOption; } set { this.AheadOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssociatedPullRequest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebBranchPullRequest?> AssociatedPullRequestOption { get; private set; }

        /// <summary>
        /// Gets or Sets AssociatedPullRequest
        /// </summary>
        [JsonPropertyName("associated_pull_request")]
        public WebBranchPullRequest? AssociatedPullRequest { get { return this.AssociatedPullRequestOption; } set { this.AssociatedPullRequestOption = new(value); } }

        /// <summary>
        /// Used to track the state of Behind
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BehindOption { get; private set; }

        /// <summary>
        /// Gets or Sets Behind
        /// </summary>
        [JsonPropertyName("behind")]
        public int? Behind { get { return this.BehindOption; } set { this.BehindOption = new(value); } }

        /// <summary>
        /// Used to track the state of Commit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebCommit?> CommitOption { get; private set; }

        /// <summary>
        /// Gets or Sets Commit
        /// </summary>
        [JsonPropertyName("commit")]
        public WebCommit? Commit { get { return this.CommitOption; } set { this.CommitOption = new(value); } }

        /// <summary>
        /// Used to track the state of DevMeta
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> DevMetaOption { get; private set; }

        /// <summary>
        /// Gets or Sets DevMeta
        /// </summary>
        [JsonPropertyName("dev_meta")]
        public List<int>? DevMeta { get { return this.DevMetaOption; } set { this.DevMetaOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsHead
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsHeadOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsHead
        /// </summary>
        [JsonPropertyName("is_head")]
        public bool? IsHead { get { return this.IsHeadOption; } set { this.IsHeadOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsProtected
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsProtectedOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsProtected
        /// </summary>
        [JsonPropertyName("is_protected")]
        public bool? IsProtected { get { return this.IsProtectedOption; } set { this.IsProtectedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebBranchListItem {\n");
            sb.Append("  Ahead: ").Append(Ahead).Append("\n");
            sb.Append("  AssociatedPullRequest: ").Append(AssociatedPullRequest).Append("\n");
            sb.Append("  Behind: ").Append(Behind).Append("\n");
            sb.Append("  Commit: ").Append(Commit).Append("\n");
            sb.Append("  DevMeta: ").Append(DevMeta).Append("\n");
            sb.Append("  IsHead: ").Append(IsHead).Append("\n");
            sb.Append("  IsProtected: ").Append(IsProtected).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebBranchListItem" />
    /// </summary>
    public class WebBranchListItemJsonConverter : JsonConverter<WebBranchListItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebBranchListItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebBranchListItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> ahead = default;
            Option<WebBranchPullRequest?> associatedPullRequest = default;
            Option<int?> behind = default;
            Option<WebCommit?> commit = default;
            Option<List<int>?> devMeta = default;
            Option<bool?> isHead = default;
            Option<bool?> isProtected = default;
            Option<string?> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ahead":
                            ahead = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "associated_pull_request":
                            associatedPullRequest = new Option<WebBranchPullRequest?>(JsonSerializer.Deserialize<WebBranchPullRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "behind":
                            behind = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "commit":
                            commit = new Option<WebCommit?>(JsonSerializer.Deserialize<WebCommit>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "dev_meta":
                            devMeta = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "is_head":
                            isHead = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_protected":
                            isProtected = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (ahead.IsSet && ahead.Value == null)
                throw new ArgumentNullException(nameof(ahead), "Property is not nullable for class WebBranchListItem.");

            if (associatedPullRequest.IsSet && associatedPullRequest.Value == null)
                throw new ArgumentNullException(nameof(associatedPullRequest), "Property is not nullable for class WebBranchListItem.");

            if (behind.IsSet && behind.Value == null)
                throw new ArgumentNullException(nameof(behind), "Property is not nullable for class WebBranchListItem.");

            if (commit.IsSet && commit.Value == null)
                throw new ArgumentNullException(nameof(commit), "Property is not nullable for class WebBranchListItem.");

            if (devMeta.IsSet && devMeta.Value == null)
                throw new ArgumentNullException(nameof(devMeta), "Property is not nullable for class WebBranchListItem.");

            if (isHead.IsSet && isHead.Value == null)
                throw new ArgumentNullException(nameof(isHead), "Property is not nullable for class WebBranchListItem.");

            if (isProtected.IsSet && isProtected.Value == null)
                throw new ArgumentNullException(nameof(isProtected), "Property is not nullable for class WebBranchListItem.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class WebBranchListItem.");

            return new WebBranchListItem(ahead, associatedPullRequest, behind, commit, devMeta, isHead, isProtected, name);
        }

        /// <summary>
        /// Serializes a <see cref="WebBranchListItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webBranchListItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebBranchListItem webBranchListItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webBranchListItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebBranchListItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webBranchListItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebBranchListItem webBranchListItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webBranchListItem.AssociatedPullRequestOption.IsSet && webBranchListItem.AssociatedPullRequest == null)
                throw new ArgumentNullException(nameof(webBranchListItem.AssociatedPullRequest), "Property is required for class WebBranchListItem.");

            if (webBranchListItem.CommitOption.IsSet && webBranchListItem.Commit == null)
                throw new ArgumentNullException(nameof(webBranchListItem.Commit), "Property is required for class WebBranchListItem.");

            if (webBranchListItem.DevMetaOption.IsSet && webBranchListItem.DevMeta == null)
                throw new ArgumentNullException(nameof(webBranchListItem.DevMeta), "Property is required for class WebBranchListItem.");

            if (webBranchListItem.NameOption.IsSet && webBranchListItem.Name == null)
                throw new ArgumentNullException(nameof(webBranchListItem.Name), "Property is required for class WebBranchListItem.");

            if (webBranchListItem.AheadOption.IsSet)
                writer.WriteNumber("ahead", webBranchListItem.AheadOption.Value!.Value);

            if (webBranchListItem.AssociatedPullRequestOption.IsSet)
            {
                writer.WritePropertyName("associated_pull_request");
                JsonSerializer.Serialize(writer, webBranchListItem.AssociatedPullRequest, jsonSerializerOptions);
            }
            if (webBranchListItem.BehindOption.IsSet)
                writer.WriteNumber("behind", webBranchListItem.BehindOption.Value!.Value);

            if (webBranchListItem.CommitOption.IsSet)
            {
                writer.WritePropertyName("commit");
                JsonSerializer.Serialize(writer, webBranchListItem.Commit, jsonSerializerOptions);
            }
            if (webBranchListItem.DevMetaOption.IsSet)
            {
                writer.WritePropertyName("dev_meta");
                JsonSerializer.Serialize(writer, webBranchListItem.DevMeta, jsonSerializerOptions);
            }
            if (webBranchListItem.IsHeadOption.IsSet)
                writer.WriteBoolean("is_head", webBranchListItem.IsHeadOption.Value!.Value);

            if (webBranchListItem.IsProtectedOption.IsSet)
                writer.WriteBoolean("is_protected", webBranchListItem.IsProtectedOption.Value!.Value);

            if (webBranchListItem.NameOption.IsSet)
                writer.WriteString("name", webBranchListItem.Name);
        }
    }
}
