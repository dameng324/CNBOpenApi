// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoBudgetPrice
    /// </summary>
    public partial class DtoBudgetPrice : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoBudgetPrice" /> class.
        /// </summary>
        /// <param name="chargeTypeCiPrice">ci价格，单位：分</param>
        /// <param name="chargeTypeDevPrice">开发价格，单位：分</param>
        /// <param name="chargeTypeGitPrice">git存储价格，单位：分</param>
        /// <param name="chargeTypeObjectPrice">对象存储价格，单位：分</param>
        [JsonConstructor]
        public DtoBudgetPrice(Option<decimal?> chargeTypeCiPrice = default, Option<decimal?> chargeTypeDevPrice = default, Option<decimal?> chargeTypeGitPrice = default, Option<decimal?> chargeTypeObjectPrice = default)
        {
            ChargeTypeCiPriceOption = chargeTypeCiPrice;
            ChargeTypeDevPriceOption = chargeTypeDevPrice;
            ChargeTypeGitPriceOption = chargeTypeGitPrice;
            ChargeTypeObjectPriceOption = chargeTypeObjectPrice;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ChargeTypeCiPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ChargeTypeCiPriceOption { get; private set; }

        /// <summary>
        /// ci价格，单位：分
        /// </summary>
        /// <value>ci价格，单位：分</value>
        [JsonPropertyName("charge_type_ci_price")]
        public decimal? ChargeTypeCiPrice { get { return this.ChargeTypeCiPriceOption; } set { this.ChargeTypeCiPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChargeTypeDevPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ChargeTypeDevPriceOption { get; private set; }

        /// <summary>
        /// 开发价格，单位：分
        /// </summary>
        /// <value>开发价格，单位：分</value>
        [JsonPropertyName("charge_type_dev_price")]
        public decimal? ChargeTypeDevPrice { get { return this.ChargeTypeDevPriceOption; } set { this.ChargeTypeDevPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChargeTypeGitPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ChargeTypeGitPriceOption { get; private set; }

        /// <summary>
        /// git存储价格，单位：分
        /// </summary>
        /// <value>git存储价格，单位：分</value>
        [JsonPropertyName("charge_type_git_price")]
        public decimal? ChargeTypeGitPrice { get { return this.ChargeTypeGitPriceOption; } set { this.ChargeTypeGitPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChargeTypeObjectPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ChargeTypeObjectPriceOption { get; private set; }

        /// <summary>
        /// 对象存储价格，单位：分
        /// </summary>
        /// <value>对象存储价格，单位：分</value>
        [JsonPropertyName("charge_type_object_price")]
        public decimal? ChargeTypeObjectPrice { get { return this.ChargeTypeObjectPriceOption; } set { this.ChargeTypeObjectPriceOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoBudgetPrice {\n");
            sb.Append("  ChargeTypeCiPrice: ").Append(ChargeTypeCiPrice).Append("\n");
            sb.Append("  ChargeTypeDevPrice: ").Append(ChargeTypeDevPrice).Append("\n");
            sb.Append("  ChargeTypeGitPrice: ").Append(ChargeTypeGitPrice).Append("\n");
            sb.Append("  ChargeTypeObjectPrice: ").Append(ChargeTypeObjectPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoBudgetPrice" />
    /// </summary>
    public class DtoBudgetPriceJsonConverter : JsonConverter<DtoBudgetPrice>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoBudgetPrice" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoBudgetPrice Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> chargeTypeCiPrice = default;
            Option<decimal?> chargeTypeDevPrice = default;
            Option<decimal?> chargeTypeGitPrice = default;
            Option<decimal?> chargeTypeObjectPrice = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "charge_type_ci_price":
                            chargeTypeCiPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "charge_type_dev_price":
                            chargeTypeDevPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "charge_type_git_price":
                            chargeTypeGitPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "charge_type_object_price":
                            chargeTypeObjectPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (chargeTypeCiPrice.IsSet && chargeTypeCiPrice.Value == null)
                throw new ArgumentNullException(nameof(chargeTypeCiPrice), "Property is not nullable for class DtoBudgetPrice.");

            if (chargeTypeDevPrice.IsSet && chargeTypeDevPrice.Value == null)
                throw new ArgumentNullException(nameof(chargeTypeDevPrice), "Property is not nullable for class DtoBudgetPrice.");

            if (chargeTypeGitPrice.IsSet && chargeTypeGitPrice.Value == null)
                throw new ArgumentNullException(nameof(chargeTypeGitPrice), "Property is not nullable for class DtoBudgetPrice.");

            if (chargeTypeObjectPrice.IsSet && chargeTypeObjectPrice.Value == null)
                throw new ArgumentNullException(nameof(chargeTypeObjectPrice), "Property is not nullable for class DtoBudgetPrice.");

            return new DtoBudgetPrice(chargeTypeCiPrice, chargeTypeDevPrice, chargeTypeGitPrice, chargeTypeObjectPrice);
        }

        /// <summary>
        /// Serializes a <see cref="DtoBudgetPrice" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoBudgetPrice"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoBudgetPrice dtoBudgetPrice, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoBudgetPrice, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoBudgetPrice" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoBudgetPrice"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoBudgetPrice dtoBudgetPrice, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoBudgetPrice.ChargeTypeCiPriceOption.IsSet)
                writer.WriteNumber("charge_type_ci_price", dtoBudgetPrice.ChargeTypeCiPriceOption.Value!.Value);

            if (dtoBudgetPrice.ChargeTypeDevPriceOption.IsSet)
                writer.WriteNumber("charge_type_dev_price", dtoBudgetPrice.ChargeTypeDevPriceOption.Value!.Value);

            if (dtoBudgetPrice.ChargeTypeGitPriceOption.IsSet)
                writer.WriteNumber("charge_type_git_price", dtoBudgetPrice.ChargeTypeGitPriceOption.Value!.Value);

            if (dtoBudgetPrice.ChargeTypeObjectPriceOption.IsSet)
                writer.WriteNumber("charge_type_object_price", dtoBudgetPrice.ChargeTypeObjectPriceOption.Value!.Value);
        }
    }
}
