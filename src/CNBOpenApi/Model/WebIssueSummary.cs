// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebIssueSummary
    /// </summary>
    public partial class WebIssueSummary : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebIssueSummary" /> class.
        /// </summary>
        /// <param name="closedIssueNumber">closedIssueNumber</param>
        /// <param name="closedPullRequestNumber">closedPullRequestNumber</param>
        /// <param name="openIssueNumber">openIssueNumber</param>
        /// <param name="openPullRequestNumber">openPullRequestNumber</param>
        [JsonConstructor]
        public WebIssueSummary(Option<int?> closedIssueNumber = default, Option<int?> closedPullRequestNumber = default, Option<int?> openIssueNumber = default, Option<int?> openPullRequestNumber = default)
        {
            ClosedIssueNumberOption = closedIssueNumber;
            ClosedPullRequestNumberOption = closedPullRequestNumber;
            OpenIssueNumberOption = openIssueNumber;
            OpenPullRequestNumberOption = openPullRequestNumber;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ClosedIssueNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ClosedIssueNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets ClosedIssueNumber
        /// </summary>
        [JsonPropertyName("closed_issue_number")]
        public int? ClosedIssueNumber { get { return this.ClosedIssueNumberOption; } set { this.ClosedIssueNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of ClosedPullRequestNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ClosedPullRequestNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets ClosedPullRequestNumber
        /// </summary>
        [JsonPropertyName("closed_pull_request_number")]
        public int? ClosedPullRequestNumber { get { return this.ClosedPullRequestNumberOption; } set { this.ClosedPullRequestNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of OpenIssueNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OpenIssueNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets OpenIssueNumber
        /// </summary>
        [JsonPropertyName("open_issue_number")]
        public int? OpenIssueNumber { get { return this.OpenIssueNumberOption; } set { this.OpenIssueNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of OpenPullRequestNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OpenPullRequestNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets OpenPullRequestNumber
        /// </summary>
        [JsonPropertyName("open_pull_request_number")]
        public int? OpenPullRequestNumber { get { return this.OpenPullRequestNumberOption; } set { this.OpenPullRequestNumberOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebIssueSummary {\n");
            sb.Append("  ClosedIssueNumber: ").Append(ClosedIssueNumber).Append("\n");
            sb.Append("  ClosedPullRequestNumber: ").Append(ClosedPullRequestNumber).Append("\n");
            sb.Append("  OpenIssueNumber: ").Append(OpenIssueNumber).Append("\n");
            sb.Append("  OpenPullRequestNumber: ").Append(OpenPullRequestNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebIssueSummary" />
    /// </summary>
    public class WebIssueSummaryJsonConverter : JsonConverter<WebIssueSummary>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebIssueSummary" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebIssueSummary Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> closedIssueNumber = default;
            Option<int?> closedPullRequestNumber = default;
            Option<int?> openIssueNumber = default;
            Option<int?> openPullRequestNumber = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "closed_issue_number":
                            closedIssueNumber = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "closed_pull_request_number":
                            closedPullRequestNumber = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "open_issue_number":
                            openIssueNumber = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "open_pull_request_number":
                            openPullRequestNumber = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (closedIssueNumber.IsSet && closedIssueNumber.Value == null)
                throw new ArgumentNullException(nameof(closedIssueNumber), "Property is not nullable for class WebIssueSummary.");

            if (closedPullRequestNumber.IsSet && closedPullRequestNumber.Value == null)
                throw new ArgumentNullException(nameof(closedPullRequestNumber), "Property is not nullable for class WebIssueSummary.");

            if (openIssueNumber.IsSet && openIssueNumber.Value == null)
                throw new ArgumentNullException(nameof(openIssueNumber), "Property is not nullable for class WebIssueSummary.");

            if (openPullRequestNumber.IsSet && openPullRequestNumber.Value == null)
                throw new ArgumentNullException(nameof(openPullRequestNumber), "Property is not nullable for class WebIssueSummary.");

            return new WebIssueSummary(closedIssueNumber, closedPullRequestNumber, openIssueNumber, openPullRequestNumber);
        }

        /// <summary>
        /// Serializes a <see cref="WebIssueSummary" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webIssueSummary"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebIssueSummary webIssueSummary, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webIssueSummary, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebIssueSummary" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webIssueSummary"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebIssueSummary webIssueSummary, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webIssueSummary.ClosedIssueNumberOption.IsSet)
                writer.WriteNumber("closed_issue_number", webIssueSummary.ClosedIssueNumberOption.Value!.Value);

            if (webIssueSummary.ClosedPullRequestNumberOption.IsSet)
                writer.WriteNumber("closed_pull_request_number", webIssueSummary.ClosedPullRequestNumberOption.Value!.Value);

            if (webIssueSummary.OpenIssueNumberOption.IsSet)
                writer.WriteNumber("open_issue_number", webIssueSummary.OpenIssueNumberOption.Value!.Value);

            if (webIssueSummary.OpenPullRequestNumberOption.IsSet)
                writer.WriteNumber("open_pull_request_number", webIssueSummary.OpenPullRequestNumberOption.Value!.Value);
        }
    }
}
