// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// Defines dto.UserEmailType
    /// </summary>
    public enum DtoUserEmailType
    {
        /// <summary>
        /// Enum UserEmailForGit for value: git
        /// </summary>
        UserEmailForGit = 1,

        /// <summary>
        /// Enum UserEmailForContact for value: contact
        /// </summary>
        UserEmailForContact = 2
    }

    /// <summary>
    /// Converts <see cref="DtoUserEmailType"/> to and from the JSON value
    /// </summary>
    public static class DtoUserEmailTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="DtoUserEmailType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DtoUserEmailType FromString(string value)
        {
            if (value.Equals("git"))
                return DtoUserEmailType.UserEmailForGit;

            if (value.Equals("contact"))
                return DtoUserEmailType.UserEmailForContact;

            throw new NotImplementedException($"Could not convert value to type DtoUserEmailType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="DtoUserEmailType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DtoUserEmailType? FromStringOrDefault(string value)
        {
            if (value.Equals("git"))
                return DtoUserEmailType.UserEmailForGit;

            if (value.Equals("contact"))
                return DtoUserEmailType.UserEmailForContact;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DtoUserEmailType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(DtoUserEmailType value)
        {
            if (value == DtoUserEmailType.UserEmailForGit)
                return "git";

            if (value == DtoUserEmailType.UserEmailForContact)
                return "contact";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoUserEmailType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class DtoUserEmailTypeJsonConverter : JsonConverter<DtoUserEmailType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DtoUserEmailType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DtoUserEmailType? result = rawValue == null
                ? null
                : DtoUserEmailTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DtoUserEmailType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoUserEmailType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DtoUserEmailType dtoUserEmailType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dtoUserEmailType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoUserEmailType"/>
    /// </summary>
    public class DtoUserEmailTypeNullableJsonConverter : JsonConverter<DtoUserEmailType?>
    {
        /// <summary>
        /// Returns a DtoUserEmailType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DtoUserEmailType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DtoUserEmailType? result = rawValue == null
                ? null
                : DtoUserEmailTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoUserEmailType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DtoUserEmailType? dtoUserEmailType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dtoUserEmailType?.ToString() ?? "null");
        }
    }
}
