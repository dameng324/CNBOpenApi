// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebTag
    /// </summary>
    public partial class WebTag : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebTag" /> class.
        /// </summary>
        /// <param name="commit">commit</param>
        /// <param name="hasRelease">hasRelease</param>
        /// <param name="message">message</param>
        /// <param name="tag">tag</param>
        /// <param name="tagObject">tagObject</param>
        /// <param name="tagger">tagger</param>
        [JsonConstructor]
        public WebTag(Option<WebCommit?> commit = default, Option<bool?> hasRelease = default, Option<string?> message = default, Option<string?> tag = default, Option<WebTagObject?> tagObject = default, Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffWebUserInfo?> tagger = default)
        {
            CommitOption = commit;
            HasReleaseOption = hasRelease;
            MessageOption = message;
            TagOption = tag;
            TagObjectOption = tagObject;
            TaggerOption = tagger;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Commit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebCommit?> CommitOption { get; private set; }

        /// <summary>
        /// Gets or Sets Commit
        /// </summary>
        [JsonPropertyName("commit")]
        public WebCommit? Commit { get { return this.CommitOption; } set { this.CommitOption = new(value); } }

        /// <summary>
        /// Used to track the state of HasRelease
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasReleaseOption { get; private set; }

        /// <summary>
        /// Gets or Sets HasRelease
        /// </summary>
        [JsonPropertyName("has_release")]
        public bool? HasRelease { get { return this.HasReleaseOption; } set { this.HasReleaseOption = new(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [JsonPropertyName("message")]
        public string? Message { get { return this.MessageOption; } set { this.MessageOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TagOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [JsonPropertyName("tag")]
        public string? Tag { get { return this.TagOption; } set { this.TagOption = new(value); } }

        /// <summary>
        /// Used to track the state of TagObject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebTagObject?> TagObjectOption { get; private set; }

        /// <summary>
        /// Gets or Sets TagObject
        /// </summary>
        [JsonPropertyName("tag_object")]
        public WebTagObject? TagObject { get { return this.TagObjectOption; } set { this.TagObjectOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tagger
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffWebUserInfo?> TaggerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tagger
        /// </summary>
        [JsonPropertyName("tagger")]
        public GitWoaComCnbMonorepoGitInternalAppGitServiceBffWebUserInfo? Tagger { get { return this.TaggerOption; } set { this.TaggerOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebTag {\n");
            sb.Append("  Commit: ").Append(Commit).Append("\n");
            sb.Append("  HasRelease: ").Append(HasRelease).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  TagObject: ").Append(TagObject).Append("\n");
            sb.Append("  Tagger: ").Append(Tagger).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebTag" />
    /// </summary>
    public class WebTagJsonConverter : JsonConverter<WebTag>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebTag" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebTag Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<WebCommit?> commit = default;
            Option<bool?> hasRelease = default;
            Option<string?> message = default;
            Option<string?> tag = default;
            Option<WebTagObject?> tagObject = default;
            Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffWebUserInfo?> tagger = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "commit":
                            commit = new Option<WebCommit?>(JsonSerializer.Deserialize<WebCommit>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "has_release":
                            hasRelease = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tag":
                            tag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tag_object":
                            tagObject = new Option<WebTagObject?>(JsonSerializer.Deserialize<WebTagObject>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tagger":
                            tagger = new Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffWebUserInfo?>(JsonSerializer.Deserialize<GitWoaComCnbMonorepoGitInternalAppGitServiceBffWebUserInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (commit.IsSet && commit.Value == null)
                throw new ArgumentNullException(nameof(commit), "Property is not nullable for class WebTag.");

            if (hasRelease.IsSet && hasRelease.Value == null)
                throw new ArgumentNullException(nameof(hasRelease), "Property is not nullable for class WebTag.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class WebTag.");

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag), "Property is not nullable for class WebTag.");

            if (tagObject.IsSet && tagObject.Value == null)
                throw new ArgumentNullException(nameof(tagObject), "Property is not nullable for class WebTag.");

            if (tagger.IsSet && tagger.Value == null)
                throw new ArgumentNullException(nameof(tagger), "Property is not nullable for class WebTag.");

            return new WebTag(commit, hasRelease, message, tag, tagObject, tagger);
        }

        /// <summary>
        /// Serializes a <see cref="WebTag" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webTag"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebTag webTag, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webTag, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebTag" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webTag"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebTag webTag, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webTag.CommitOption.IsSet && webTag.Commit == null)
                throw new ArgumentNullException(nameof(webTag.Commit), "Property is required for class WebTag.");

            if (webTag.MessageOption.IsSet && webTag.Message == null)
                throw new ArgumentNullException(nameof(webTag.Message), "Property is required for class WebTag.");

            if (webTag.TagOption.IsSet && webTag.Tag == null)
                throw new ArgumentNullException(nameof(webTag.Tag), "Property is required for class WebTag.");

            if (webTag.TagObjectOption.IsSet && webTag.TagObject == null)
                throw new ArgumentNullException(nameof(webTag.TagObject), "Property is required for class WebTag.");

            if (webTag.TaggerOption.IsSet && webTag.Tagger == null)
                throw new ArgumentNullException(nameof(webTag.Tagger), "Property is required for class WebTag.");

            if (webTag.CommitOption.IsSet)
            {
                writer.WritePropertyName("commit");
                JsonSerializer.Serialize(writer, webTag.Commit, jsonSerializerOptions);
            }
            if (webTag.HasReleaseOption.IsSet)
                writer.WriteBoolean("has_release", webTag.HasReleaseOption.Value!.Value);

            if (webTag.MessageOption.IsSet)
                writer.WriteString("message", webTag.Message);

            if (webTag.TagOption.IsSet)
                writer.WriteString("tag", webTag.Tag);

            if (webTag.TagObjectOption.IsSet)
            {
                writer.WritePropertyName("tag_object");
                JsonSerializer.Serialize(writer, webTag.TagObject, jsonSerializerOptions);
            }
            if (webTag.TaggerOption.IsSet)
            {
                writer.WritePropertyName("tagger");
                JsonSerializer.Serialize(writer, webTag.Tagger, jsonSerializerOptions);
            }
        }
    }
}
