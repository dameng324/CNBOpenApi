// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// Defines dto.InteractionType
    /// </summary>
    public enum DtoInteractionType
    {
        /// <summary>
        /// Enum InteractionTypeRadio for value: radio
        /// </summary>
        InteractionTypeRadio = 1,

        /// <summary>
        /// Enum InteractionTypeCheckbox for value: checkbox
        /// </summary>
        InteractionTypeCheckbox = 2,

        /// <summary>
        /// Enum InteractionTypeTimeSelector for value: time_selector
        /// </summary>
        InteractionTypeTimeSelector = 3
    }

    /// <summary>
    /// Converts <see cref="DtoInteractionType"/> to and from the JSON value
    /// </summary>
    public static class DtoInteractionTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="DtoInteractionType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DtoInteractionType FromString(string value)
        {
            if (value.Equals("radio"))
                return DtoInteractionType.InteractionTypeRadio;

            if (value.Equals("checkbox"))
                return DtoInteractionType.InteractionTypeCheckbox;

            if (value.Equals("time_selector"))
                return DtoInteractionType.InteractionTypeTimeSelector;

            throw new NotImplementedException($"Could not convert value to type DtoInteractionType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="DtoInteractionType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DtoInteractionType? FromStringOrDefault(string value)
        {
            if (value.Equals("radio"))
                return DtoInteractionType.InteractionTypeRadio;

            if (value.Equals("checkbox"))
                return DtoInteractionType.InteractionTypeCheckbox;

            if (value.Equals("time_selector"))
                return DtoInteractionType.InteractionTypeTimeSelector;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DtoInteractionType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(DtoInteractionType value)
        {
            if (value == DtoInteractionType.InteractionTypeRadio)
                return "radio";

            if (value == DtoInteractionType.InteractionTypeCheckbox)
                return "checkbox";

            if (value == DtoInteractionType.InteractionTypeTimeSelector)
                return "time_selector";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoInteractionType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class DtoInteractionTypeJsonConverter : JsonConverter<DtoInteractionType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DtoInteractionType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DtoInteractionType? result = rawValue == null
                ? null
                : DtoInteractionTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DtoInteractionType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoInteractionType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DtoInteractionType dtoInteractionType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dtoInteractionType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoInteractionType"/>
    /// </summary>
    public class DtoInteractionTypeNullableJsonConverter : JsonConverter<DtoInteractionType?>
    {
        /// <summary>
        /// Returns a DtoInteractionType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DtoInteractionType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DtoInteractionType? result = rawValue == null
                ? null
                : DtoInteractionTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoInteractionType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DtoInteractionType? dtoInteractionType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dtoInteractionType?.ToString() ?? "null");
        }
    }
}
