// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoRepoStarUsers
    /// </summary>
    public partial class DtoRepoStarUsers : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoRepoStarUsers" /> class.
        /// </summary>
        /// <param name="myFollowCount">myFollowCount</param>
        /// <param name="total">total</param>
        /// <param name="users">users</param>
        [JsonConstructor]
        public DtoRepoStarUsers(Option<int?> myFollowCount = default, Option<int?> total = default, Option<List<DtoStarUser>?> users = default)
        {
            MyFollowCountOption = myFollowCount;
            TotalOption = total;
            UsersOption = users;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of MyFollowCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MyFollowCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets MyFollowCount
        /// </summary>
        [JsonPropertyName("my_follow_count")]
        public int? MyFollowCount { get { return this.MyFollowCountOption; } set { this.MyFollowCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Total
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalOption { get; private set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [JsonPropertyName("total")]
        public int? Total { get { return this.TotalOption; } set { this.TotalOption = new(value); } }

        /// <summary>
        /// Used to track the state of Users
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoStarUser>?> UsersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [JsonPropertyName("users")]
        public List<DtoStarUser>? Users { get { return this.UsersOption; } set { this.UsersOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoRepoStarUsers {\n");
            sb.Append("  MyFollowCount: ").Append(MyFollowCount).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoRepoStarUsers" />
    /// </summary>
    public class DtoRepoStarUsersJsonConverter : JsonConverter<DtoRepoStarUsers>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoRepoStarUsers" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoRepoStarUsers Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> myFollowCount = default;
            Option<int?> total = default;
            Option<List<DtoStarUser>?> users = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "my_follow_count":
                            myFollowCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "total":
                            total = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "users":
                            users = new Option<List<DtoStarUser>?>(JsonSerializer.Deserialize<List<DtoStarUser>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (myFollowCount.IsSet && myFollowCount.Value == null)
                throw new ArgumentNullException(nameof(myFollowCount), "Property is not nullable for class DtoRepoStarUsers.");

            if (total.IsSet && total.Value == null)
                throw new ArgumentNullException(nameof(total), "Property is not nullable for class DtoRepoStarUsers.");

            if (users.IsSet && users.Value == null)
                throw new ArgumentNullException(nameof(users), "Property is not nullable for class DtoRepoStarUsers.");

            return new DtoRepoStarUsers(myFollowCount, total, users);
        }

        /// <summary>
        /// Serializes a <see cref="DtoRepoStarUsers" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoRepoStarUsers"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoRepoStarUsers dtoRepoStarUsers, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoRepoStarUsers, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoRepoStarUsers" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoRepoStarUsers"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoRepoStarUsers dtoRepoStarUsers, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoRepoStarUsers.UsersOption.IsSet && dtoRepoStarUsers.Users == null)
                throw new ArgumentNullException(nameof(dtoRepoStarUsers.Users), "Property is required for class DtoRepoStarUsers.");

            if (dtoRepoStarUsers.MyFollowCountOption.IsSet)
                writer.WriteNumber("my_follow_count", dtoRepoStarUsers.MyFollowCountOption.Value!.Value);

            if (dtoRepoStarUsers.TotalOption.IsSet)
                writer.WriteNumber("total", dtoRepoStarUsers.TotalOption.Value!.Value);

            if (dtoRepoStarUsers.UsersOption.IsSet)
            {
                writer.WritePropertyName("users");
                JsonSerializer.Serialize(writer, dtoRepoStarUsers.Users, jsonSerializerOptions);
            }
        }
    }
}
