// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoInvitationWithEmail
    /// </summary>
    public partial class DtoInvitationWithEmail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoInvitationWithEmail" /> class.
        /// </summary>
        /// <param name="count">count</param>
        /// <param name="creator">creator</param>
        /// <param name="email">email</param>
        /// <param name="emailMatch">emailMatch</param>
        /// <param name="expire">expire</param>
        /// <param name="isOutsideCollaborator">isOutsideCollaborator</param>
        /// <param name="resource">resource</param>
        /// <param name="role">role</param>
        /// <param name="status">status</param>
        [JsonConstructor]
        public DtoInvitationWithEmail(Option<int?> count = default, Option<string?> creator = default, Option<string?> email = default, Option<bool?> emailMatch = default, Option<int?> expire = default, Option<bool?> isOutsideCollaborator = default, Option<DtoResources?> resource = default, Option<ConstantAccessRole?> role = default, Option<string?> status = default)
        {
            CountOption = count;
            CreatorOption = creator;
            EmailOption = email;
            EmailMatchOption = emailMatch;
            ExpireOption = expire;
            IsOutsideCollaboratorOption = isOutsideCollaborator;
            ResourceOption = resource;
            RoleOption = role;
            StatusOption = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Role
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantAccessRole?> RoleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [JsonPropertyName("role")]
        public ConstantAccessRole? Role { get { return this.RoleOption; } set { this.RoleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Count
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CountOption { get; private set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [JsonPropertyName("count")]
        public int? Count { get { return this.CountOption; } set { this.CountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Creator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [JsonPropertyName("creator")]
        public string? Creator { get { return this.CreatorOption; } set { this.CreatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmailMatch
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EmailMatchOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmailMatch
        /// </summary>
        [JsonPropertyName("email_match")]
        public bool? EmailMatch { get { return this.EmailMatchOption; } set { this.EmailMatchOption = new(value); } }

        /// <summary>
        /// Used to track the state of Expire
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ExpireOption { get; private set; }

        /// <summary>
        /// Gets or Sets Expire
        /// </summary>
        [JsonPropertyName("expire")]
        public int? Expire { get { return this.ExpireOption; } set { this.ExpireOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsOutsideCollaborator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsOutsideCollaboratorOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsOutsideCollaborator
        /// </summary>
        [JsonPropertyName("is_outside_collaborator")]
        public bool? IsOutsideCollaborator { get { return this.IsOutsideCollaboratorOption; } set { this.IsOutsideCollaboratorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Resource
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoResources?> ResourceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Resource
        /// </summary>
        [JsonPropertyName("resource")]
        public DtoResources? Resource { get { return this.ResourceOption; } set { this.ResourceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public string? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoInvitationWithEmail {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailMatch: ").Append(EmailMatch).Append("\n");
            sb.Append("  Expire: ").Append(Expire).Append("\n");
            sb.Append("  IsOutsideCollaborator: ").Append(IsOutsideCollaborator).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoInvitationWithEmail" />
    /// </summary>
    public class DtoInvitationWithEmailJsonConverter : JsonConverter<DtoInvitationWithEmail>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoInvitationWithEmail" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoInvitationWithEmail Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> count = default;
            Option<string?> creator = default;
            Option<string?> email = default;
            Option<bool?> emailMatch = default;
            Option<int?> expire = default;
            Option<bool?> isOutsideCollaborator = default;
            Option<DtoResources?> resource = default;
            Option<ConstantAccessRole?> role = default;
            Option<string?> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "count":
                            count = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "creator":
                            creator = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email_match":
                            emailMatch = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "expire":
                            expire = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "is_outside_collaborator":
                            isOutsideCollaborator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "resource":
                            resource = new Option<DtoResources?>(JsonSerializer.Deserialize<DtoResources>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "role":
                            string? roleRawValue = utf8JsonReader.GetString();
                            if (roleRawValue != null)
                                role = new Option<ConstantAccessRole?>(ConstantAccessRoleValueConverter.FromStringOrDefault(roleRawValue));
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (count.IsSet && count.Value == null)
                throw new ArgumentNullException(nameof(count), "Property is not nullable for class DtoInvitationWithEmail.");

            if (creator.IsSet && creator.Value == null)
                throw new ArgumentNullException(nameof(creator), "Property is not nullable for class DtoInvitationWithEmail.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class DtoInvitationWithEmail.");

            if (emailMatch.IsSet && emailMatch.Value == null)
                throw new ArgumentNullException(nameof(emailMatch), "Property is not nullable for class DtoInvitationWithEmail.");

            if (expire.IsSet && expire.Value == null)
                throw new ArgumentNullException(nameof(expire), "Property is not nullable for class DtoInvitationWithEmail.");

            if (isOutsideCollaborator.IsSet && isOutsideCollaborator.Value == null)
                throw new ArgumentNullException(nameof(isOutsideCollaborator), "Property is not nullable for class DtoInvitationWithEmail.");

            if (resource.IsSet && resource.Value == null)
                throw new ArgumentNullException(nameof(resource), "Property is not nullable for class DtoInvitationWithEmail.");

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role), "Property is not nullable for class DtoInvitationWithEmail.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class DtoInvitationWithEmail.");

            return new DtoInvitationWithEmail(count, creator, email, emailMatch, expire, isOutsideCollaborator, resource, role, status);
        }

        /// <summary>
        /// Serializes a <see cref="DtoInvitationWithEmail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoInvitationWithEmail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoInvitationWithEmail dtoInvitationWithEmail, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoInvitationWithEmail, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoInvitationWithEmail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoInvitationWithEmail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoInvitationWithEmail dtoInvitationWithEmail, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoInvitationWithEmail.CreatorOption.IsSet && dtoInvitationWithEmail.Creator == null)
                throw new ArgumentNullException(nameof(dtoInvitationWithEmail.Creator), "Property is required for class DtoInvitationWithEmail.");

            if (dtoInvitationWithEmail.EmailOption.IsSet && dtoInvitationWithEmail.Email == null)
                throw new ArgumentNullException(nameof(dtoInvitationWithEmail.Email), "Property is required for class DtoInvitationWithEmail.");

            if (dtoInvitationWithEmail.ResourceOption.IsSet && dtoInvitationWithEmail.Resource == null)
                throw new ArgumentNullException(nameof(dtoInvitationWithEmail.Resource), "Property is required for class DtoInvitationWithEmail.");

            if (dtoInvitationWithEmail.StatusOption.IsSet && dtoInvitationWithEmail.Status == null)
                throw new ArgumentNullException(nameof(dtoInvitationWithEmail.Status), "Property is required for class DtoInvitationWithEmail.");

            if (dtoInvitationWithEmail.CountOption.IsSet)
                writer.WriteNumber("count", dtoInvitationWithEmail.CountOption.Value!.Value);

            if (dtoInvitationWithEmail.CreatorOption.IsSet)
                writer.WriteString("creator", dtoInvitationWithEmail.Creator);

            if (dtoInvitationWithEmail.EmailOption.IsSet)
                writer.WriteString("email", dtoInvitationWithEmail.Email);

            if (dtoInvitationWithEmail.EmailMatchOption.IsSet)
                writer.WriteBoolean("email_match", dtoInvitationWithEmail.EmailMatchOption.Value!.Value);

            if (dtoInvitationWithEmail.ExpireOption.IsSet)
                writer.WriteNumber("expire", dtoInvitationWithEmail.ExpireOption.Value!.Value);

            if (dtoInvitationWithEmail.IsOutsideCollaboratorOption.IsSet)
                writer.WriteBoolean("is_outside_collaborator", dtoInvitationWithEmail.IsOutsideCollaboratorOption.Value!.Value);

            if (dtoInvitationWithEmail.ResourceOption.IsSet)
            {
                writer.WritePropertyName("resource");
                JsonSerializer.Serialize(writer, dtoInvitationWithEmail.Resource, jsonSerializerOptions);
            }
            if (dtoInvitationWithEmail.RoleOption.IsSet)
            {
                var roleRawValue = ConstantAccessRoleValueConverter.ToJsonValue(dtoInvitationWithEmail.Role!.Value);
                writer.WriteNumber("role", roleRawValue);
            }
            if (dtoInvitationWithEmail.StatusOption.IsSet)
                writer.WriteString("status", dtoInvitationWithEmail.Status);
        }
    }
}
