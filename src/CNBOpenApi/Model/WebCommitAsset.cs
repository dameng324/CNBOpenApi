// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebCommitAsset
    /// </summary>
    public partial class WebCommitAsset : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebCommitAsset" /> class.
        /// </summary>
        /// <param name="author">author</param>
        /// <param name="contentType">contentType</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="path">path</param>
        /// <param name="sizeInByte">sizeInByte</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public WebCommitAsset(Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?> author = default, Option<string?> contentType = default, Option<string?> createdAt = default, Option<string?> id = default, Option<string?> name = default, Option<string?> path = default, Option<int?> sizeInByte = default, Option<string?> updatedAt = default)
        {
            AuthorOption = author;
            ContentTypeOption = contentType;
            CreatedAtOption = createdAt;
            IdOption = id;
            NameOption = name;
            PathOption = path;
            SizeInByteOption = sizeInByte;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Author
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?> AuthorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [JsonPropertyName("author")]
        public GitWoaComCnbMonorepoGitInternalDtoWebUserInfo? Author { get { return this.AuthorOption; } set { this.AuthorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContentType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContentTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [JsonPropertyName("content_type")]
        public string? ContentType { get { return this.ContentTypeOption; } set { this.ContentTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of SizeInByte
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SizeInByteOption { get; private set; }

        /// <summary>
        /// Gets or Sets SizeInByte
        /// </summary>
        [JsonPropertyName("size_in_byte")]
        public int? SizeInByte { get { return this.SizeInByteOption; } set { this.SizeInByteOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebCommitAsset {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  SizeInByte: ").Append(SizeInByte).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebCommitAsset" />
    /// </summary>
    public class WebCommitAssetJsonConverter : JsonConverter<WebCommitAsset>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebCommitAsset" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebCommitAsset Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?> author = default;
            Option<string?> contentType = default;
            Option<string?> createdAt = default;
            Option<string?> id = default;
            Option<string?> name = default;
            Option<string?> path = default;
            Option<int?> sizeInByte = default;
            Option<string?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "author":
                            author = new Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?>(JsonSerializer.Deserialize<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "content_type":
                            contentType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "size_in_byte":
                            sizeInByte = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (author.IsSet && author.Value == null)
                throw new ArgumentNullException(nameof(author), "Property is not nullable for class WebCommitAsset.");

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType), "Property is not nullable for class WebCommitAsset.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class WebCommitAsset.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class WebCommitAsset.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class WebCommitAsset.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class WebCommitAsset.");

            if (sizeInByte.IsSet && sizeInByte.Value == null)
                throw new ArgumentNullException(nameof(sizeInByte), "Property is not nullable for class WebCommitAsset.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class WebCommitAsset.");

            return new WebCommitAsset(author, contentType, createdAt, id, name, path, sizeInByte, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="WebCommitAsset" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webCommitAsset"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebCommitAsset webCommitAsset, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webCommitAsset, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebCommitAsset" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webCommitAsset"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebCommitAsset webCommitAsset, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webCommitAsset.AuthorOption.IsSet && webCommitAsset.Author == null)
                throw new ArgumentNullException(nameof(webCommitAsset.Author), "Property is required for class WebCommitAsset.");

            if (webCommitAsset.ContentTypeOption.IsSet && webCommitAsset.ContentType == null)
                throw new ArgumentNullException(nameof(webCommitAsset.ContentType), "Property is required for class WebCommitAsset.");

            if (webCommitAsset.CreatedAtOption.IsSet && webCommitAsset.CreatedAt == null)
                throw new ArgumentNullException(nameof(webCommitAsset.CreatedAt), "Property is required for class WebCommitAsset.");

            if (webCommitAsset.IdOption.IsSet && webCommitAsset.Id == null)
                throw new ArgumentNullException(nameof(webCommitAsset.Id), "Property is required for class WebCommitAsset.");

            if (webCommitAsset.NameOption.IsSet && webCommitAsset.Name == null)
                throw new ArgumentNullException(nameof(webCommitAsset.Name), "Property is required for class WebCommitAsset.");

            if (webCommitAsset.PathOption.IsSet && webCommitAsset.Path == null)
                throw new ArgumentNullException(nameof(webCommitAsset.Path), "Property is required for class WebCommitAsset.");

            if (webCommitAsset.UpdatedAtOption.IsSet && webCommitAsset.UpdatedAt == null)
                throw new ArgumentNullException(nameof(webCommitAsset.UpdatedAt), "Property is required for class WebCommitAsset.");

            if (webCommitAsset.AuthorOption.IsSet)
            {
                writer.WritePropertyName("author");
                JsonSerializer.Serialize(writer, webCommitAsset.Author, jsonSerializerOptions);
            }
            if (webCommitAsset.ContentTypeOption.IsSet)
                writer.WriteString("content_type", webCommitAsset.ContentType);

            if (webCommitAsset.CreatedAtOption.IsSet)
                writer.WriteString("created_at", webCommitAsset.CreatedAt);

            if (webCommitAsset.IdOption.IsSet)
                writer.WriteString("id", webCommitAsset.Id);

            if (webCommitAsset.NameOption.IsSet)
                writer.WriteString("name", webCommitAsset.Name);

            if (webCommitAsset.PathOption.IsSet)
                writer.WriteString("path", webCommitAsset.Path);

            if (webCommitAsset.SizeInByteOption.IsSet)
                writer.WriteNumber("size_in_byte", webCommitAsset.SizeInByteOption.Value!.Value);

            if (webCommitAsset.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", webCommitAsset.UpdatedAt);
        }
    }
}
