// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WechatLoginState
    /// </summary>
    public partial class WechatLoginState : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WechatLoginState" /> class.
        /// </summary>
        /// <param name="avatar">avatar</param>
        /// <param name="confirmed">confirmed</param>
        /// <param name="isExpired">isExpired</param>
        /// <param name="nickName">nickName</param>
        [JsonConstructor]
        public WechatLoginState(Option<string?> avatar = default, Option<bool?> confirmed = default, Option<bool?> isExpired = default, Option<string?> nickName = default)
        {
            AvatarOption = avatar;
            ConfirmedOption = confirmed;
            IsExpiredOption = isExpired;
            NickNameOption = nickName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Avatar
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AvatarOption { get; private set; }

        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        [JsonPropertyName("avatar")]
        public string? Avatar { get { return this.AvatarOption; } set { this.AvatarOption = new(value); } }

        /// <summary>
        /// Used to track the state of Confirmed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ConfirmedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Confirmed
        /// </summary>
        [JsonPropertyName("confirmed")]
        public bool? Confirmed { get { return this.ConfirmedOption; } set { this.ConfirmedOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsExpired
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsExpiredOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsExpired
        /// </summary>
        [JsonPropertyName("isExpired")]
        public bool? IsExpired { get { return this.IsExpiredOption; } set { this.IsExpiredOption = new(value); } }

        /// <summary>
        /// Used to track the state of NickName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NickNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets NickName
        /// </summary>
        [JsonPropertyName("nickName")]
        public string? NickName { get { return this.NickNameOption; } set { this.NickNameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WechatLoginState {\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  Confirmed: ").Append(Confirmed).Append("\n");
            sb.Append("  IsExpired: ").Append(IsExpired).Append("\n");
            sb.Append("  NickName: ").Append(NickName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WechatLoginState" />
    /// </summary>
    public class WechatLoginStateJsonConverter : JsonConverter<WechatLoginState>
    {
        /// <summary>
        /// Deserializes json to <see cref="WechatLoginState" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WechatLoginState Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> avatar = default;
            Option<bool?> confirmed = default;
            Option<bool?> isExpired = default;
            Option<string?> nickName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "avatar":
                            avatar = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "confirmed":
                            confirmed = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "isExpired":
                            isExpired = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "nickName":
                            nickName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (avatar.IsSet && avatar.Value == null)
                throw new ArgumentNullException(nameof(avatar), "Property is not nullable for class WechatLoginState.");

            if (confirmed.IsSet && confirmed.Value == null)
                throw new ArgumentNullException(nameof(confirmed), "Property is not nullable for class WechatLoginState.");

            if (isExpired.IsSet && isExpired.Value == null)
                throw new ArgumentNullException(nameof(isExpired), "Property is not nullable for class WechatLoginState.");

            if (nickName.IsSet && nickName.Value == null)
                throw new ArgumentNullException(nameof(nickName), "Property is not nullable for class WechatLoginState.");

            return new WechatLoginState(avatar, confirmed, isExpired, nickName);
        }

        /// <summary>
        /// Serializes a <see cref="WechatLoginState" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="wechatLoginState"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WechatLoginState wechatLoginState, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, wechatLoginState, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WechatLoginState" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="wechatLoginState"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WechatLoginState wechatLoginState, JsonSerializerOptions jsonSerializerOptions)
        {
            if (wechatLoginState.AvatarOption.IsSet && wechatLoginState.Avatar == null)
                throw new ArgumentNullException(nameof(wechatLoginState.Avatar), "Property is required for class WechatLoginState.");

            if (wechatLoginState.NickNameOption.IsSet && wechatLoginState.NickName == null)
                throw new ArgumentNullException(nameof(wechatLoginState.NickName), "Property is required for class WechatLoginState.");

            if (wechatLoginState.AvatarOption.IsSet)
                writer.WriteString("avatar", wechatLoginState.Avatar);

            if (wechatLoginState.ConfirmedOption.IsSet)
                writer.WriteBoolean("confirmed", wechatLoginState.ConfirmedOption.Value!.Value);

            if (wechatLoginState.IsExpiredOption.IsSet)
                writer.WriteBoolean("isExpired", wechatLoginState.IsExpiredOption.Value!.Value);

            if (wechatLoginState.NickNameOption.IsSet)
                writer.WriteString("nickName", wechatLoginState.NickName);
        }
    }
}
