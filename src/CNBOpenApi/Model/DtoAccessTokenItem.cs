// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoAccessTokenItem
    /// </summary>
    public partial class DtoAccessTokenItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoAccessTokenItem" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="description">description</param>
        /// <param name="expiredAt">expiredAt</param>
        /// <param name="lastActivityAt">lastActivityAt</param>
        /// <param name="resourceType">resourceType</param>
        /// <param name="scope">scope</param>
        /// <param name="slug">slug</param>
        /// <param name="title">title</param>
        /// <param name="tokenFragment">tokenFragment</param>
        /// <param name="tokenId">id 的 string 格式，用于兼容前端 int64 支持</param>
        [JsonConstructor]
        public DtoAccessTokenItem(Option<string?> createdAt = default, Option<string?> description = default, Option<string?> expiredAt = default, Option<string?> lastActivityAt = default, Option<ConstantSlugType?> resourceType = default, Option<string?> scope = default, Option<string?> slug = default, Option<string?> title = default, Option<string?> tokenFragment = default, Option<string?> tokenId = default)
        {
            CreatedAtOption = createdAt;
            DescriptionOption = description;
            ExpiredAtOption = expiredAt;
            LastActivityAtOption = lastActivityAt;
            ResourceTypeOption = resourceType;
            ScopeOption = scope;
            SlugOption = slug;
            TitleOption = title;
            TokenFragmentOption = tokenFragment;
            TokenIdOption = tokenId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ResourceType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantSlugType?> ResourceTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>
        [JsonPropertyName("resource_type")]
        public ConstantSlugType? ResourceType { get { return this.ResourceTypeOption; } set { this.ResourceTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpiredAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExpiredAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExpiredAt
        /// </summary>
        [JsonPropertyName("expired_at")]
        public string? ExpiredAt { get { return this.ExpiredAtOption; } set { this.ExpiredAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastActivityAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastActivityAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastActivityAt
        /// </summary>
        [JsonPropertyName("last_activity_at")]
        public string? LastActivityAt { get { return this.LastActivityAtOption; } set { this.LastActivityAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Scope
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ScopeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [JsonPropertyName("scope")]
        public string? Scope { get { return this.ScopeOption; } set { this.ScopeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Slug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SlugOption { get; private set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [JsonPropertyName("slug")]
        public string? Slug { get { return this.SlugOption; } set { this.SlugOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of TokenFragment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TokenFragmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets TokenFragment
        /// </summary>
        [JsonPropertyName("token_fragment")]
        public string? TokenFragment { get { return this.TokenFragmentOption; } set { this.TokenFragmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of TokenId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TokenIdOption { get; private set; }

        /// <summary>
        /// id 的 string 格式，用于兼容前端 int64 支持
        /// </summary>
        /// <value>id 的 string 格式，用于兼容前端 int64 支持</value>
        [JsonPropertyName("token_id")]
        public string? TokenId { get { return this.TokenIdOption; } set { this.TokenIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoAccessTokenItem {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpiredAt: ").Append(ExpiredAt).Append("\n");
            sb.Append("  LastActivityAt: ").Append(LastActivityAt).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TokenFragment: ").Append(TokenFragment).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoAccessTokenItem" />
    /// </summary>
    public class DtoAccessTokenItemJsonConverter : JsonConverter<DtoAccessTokenItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoAccessTokenItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoAccessTokenItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> createdAt = default;
            Option<string?> description = default;
            Option<string?> expiredAt = default;
            Option<string?> lastActivityAt = default;
            Option<ConstantSlugType?> resourceType = default;
            Option<string?> scope = default;
            Option<string?> slug = default;
            Option<string?> title = default;
            Option<string?> tokenFragment = default;
            Option<string?> tokenId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expired_at":
                            expiredAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_activity_at":
                            lastActivityAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "resource_type":
                            string? resourceTypeRawValue = utf8JsonReader.GetString();
                            if (resourceTypeRawValue != null)
                                resourceType = new Option<ConstantSlugType?>(ConstantSlugTypeValueConverter.FromStringOrDefault(resourceTypeRawValue));
                            break;
                        case "scope":
                            scope = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "slug":
                            slug = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "token_fragment":
                            tokenFragment = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "token_id":
                            tokenId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class DtoAccessTokenItem.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class DtoAccessTokenItem.");

            if (expiredAt.IsSet && expiredAt.Value == null)
                throw new ArgumentNullException(nameof(expiredAt), "Property is not nullable for class DtoAccessTokenItem.");

            if (lastActivityAt.IsSet && lastActivityAt.Value == null)
                throw new ArgumentNullException(nameof(lastActivityAt), "Property is not nullable for class DtoAccessTokenItem.");

            if (resourceType.IsSet && resourceType.Value == null)
                throw new ArgumentNullException(nameof(resourceType), "Property is not nullable for class DtoAccessTokenItem.");

            if (scope.IsSet && scope.Value == null)
                throw new ArgumentNullException(nameof(scope), "Property is not nullable for class DtoAccessTokenItem.");

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug), "Property is not nullable for class DtoAccessTokenItem.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class DtoAccessTokenItem.");

            if (tokenFragment.IsSet && tokenFragment.Value == null)
                throw new ArgumentNullException(nameof(tokenFragment), "Property is not nullable for class DtoAccessTokenItem.");

            if (tokenId.IsSet && tokenId.Value == null)
                throw new ArgumentNullException(nameof(tokenId), "Property is not nullable for class DtoAccessTokenItem.");

            return new DtoAccessTokenItem(createdAt, description, expiredAt, lastActivityAt, resourceType, scope, slug, title, tokenFragment, tokenId);
        }

        /// <summary>
        /// Serializes a <see cref="DtoAccessTokenItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoAccessTokenItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoAccessTokenItem dtoAccessTokenItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoAccessTokenItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoAccessTokenItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoAccessTokenItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoAccessTokenItem dtoAccessTokenItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoAccessTokenItem.CreatedAtOption.IsSet && dtoAccessTokenItem.CreatedAt == null)
                throw new ArgumentNullException(nameof(dtoAccessTokenItem.CreatedAt), "Property is required for class DtoAccessTokenItem.");

            if (dtoAccessTokenItem.DescriptionOption.IsSet && dtoAccessTokenItem.Description == null)
                throw new ArgumentNullException(nameof(dtoAccessTokenItem.Description), "Property is required for class DtoAccessTokenItem.");

            if (dtoAccessTokenItem.ExpiredAtOption.IsSet && dtoAccessTokenItem.ExpiredAt == null)
                throw new ArgumentNullException(nameof(dtoAccessTokenItem.ExpiredAt), "Property is required for class DtoAccessTokenItem.");

            if (dtoAccessTokenItem.LastActivityAtOption.IsSet && dtoAccessTokenItem.LastActivityAt == null)
                throw new ArgumentNullException(nameof(dtoAccessTokenItem.LastActivityAt), "Property is required for class DtoAccessTokenItem.");

            if (dtoAccessTokenItem.ScopeOption.IsSet && dtoAccessTokenItem.Scope == null)
                throw new ArgumentNullException(nameof(dtoAccessTokenItem.Scope), "Property is required for class DtoAccessTokenItem.");

            if (dtoAccessTokenItem.SlugOption.IsSet && dtoAccessTokenItem.Slug == null)
                throw new ArgumentNullException(nameof(dtoAccessTokenItem.Slug), "Property is required for class DtoAccessTokenItem.");

            if (dtoAccessTokenItem.TitleOption.IsSet && dtoAccessTokenItem.Title == null)
                throw new ArgumentNullException(nameof(dtoAccessTokenItem.Title), "Property is required for class DtoAccessTokenItem.");

            if (dtoAccessTokenItem.TokenFragmentOption.IsSet && dtoAccessTokenItem.TokenFragment == null)
                throw new ArgumentNullException(nameof(dtoAccessTokenItem.TokenFragment), "Property is required for class DtoAccessTokenItem.");

            if (dtoAccessTokenItem.TokenIdOption.IsSet && dtoAccessTokenItem.TokenId == null)
                throw new ArgumentNullException(nameof(dtoAccessTokenItem.TokenId), "Property is required for class DtoAccessTokenItem.");

            if (dtoAccessTokenItem.CreatedAtOption.IsSet)
                writer.WriteString("created_at", dtoAccessTokenItem.CreatedAt);

            if (dtoAccessTokenItem.DescriptionOption.IsSet)
                writer.WriteString("description", dtoAccessTokenItem.Description);

            if (dtoAccessTokenItem.ExpiredAtOption.IsSet)
                writer.WriteString("expired_at", dtoAccessTokenItem.ExpiredAt);

            if (dtoAccessTokenItem.LastActivityAtOption.IsSet)
                writer.WriteString("last_activity_at", dtoAccessTokenItem.LastActivityAt);

            if (dtoAccessTokenItem.ResourceTypeOption.IsSet)
            {
                var resourceTypeRawValue = ConstantSlugTypeValueConverter.ToJsonValue(dtoAccessTokenItem.ResourceType!.Value);
                writer.WriteNumber("resource_type", resourceTypeRawValue);
            }
            if (dtoAccessTokenItem.ScopeOption.IsSet)
                writer.WriteString("scope", dtoAccessTokenItem.Scope);

            if (dtoAccessTokenItem.SlugOption.IsSet)
                writer.WriteString("slug", dtoAccessTokenItem.Slug);

            if (dtoAccessTokenItem.TitleOption.IsSet)
                writer.WriteString("title", dtoAccessTokenItem.Title);

            if (dtoAccessTokenItem.TokenFragmentOption.IsSet)
                writer.WriteString("token_fragment", dtoAccessTokenItem.TokenFragment);

            if (dtoAccessTokenItem.TokenIdOption.IsSet)
                writer.WriteString("token_id", dtoAccessTokenItem.TokenId);
        }
    }
}
