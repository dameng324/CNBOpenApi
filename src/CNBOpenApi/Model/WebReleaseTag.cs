// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebReleaseTag
    /// </summary>
    public partial class WebReleaseTag : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebReleaseTag" /> class.
        /// </summary>
        /// <param name="release">release</param>
        /// <param name="tag">tag</param>
        [JsonConstructor]
        public WebReleaseTag(Option<WebRelease?> release = default, Option<WebTag?> tag = default)
        {
            ReleaseOption = release;
            TagOption = tag;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Release
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebRelease?> ReleaseOption { get; private set; }

        /// <summary>
        /// Gets or Sets Release
        /// </summary>
        [JsonPropertyName("release")]
        public WebRelease? Release { get { return this.ReleaseOption; } set { this.ReleaseOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebTag?> TagOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [JsonPropertyName("tag")]
        public WebTag? Tag { get { return this.TagOption; } set { this.TagOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebReleaseTag {\n");
            sb.Append("  Release: ").Append(Release).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebReleaseTag" />
    /// </summary>
    public class WebReleaseTagJsonConverter : JsonConverter<WebReleaseTag>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebReleaseTag" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebReleaseTag Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<WebRelease?> release = default;
            Option<WebTag?> tag = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "release":
                            release = new Option<WebRelease?>(JsonSerializer.Deserialize<WebRelease>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tag":
                            tag = new Option<WebTag?>(JsonSerializer.Deserialize<WebTag>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (release.IsSet && release.Value == null)
                throw new ArgumentNullException(nameof(release), "Property is not nullable for class WebReleaseTag.");

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag), "Property is not nullable for class WebReleaseTag.");

            return new WebReleaseTag(release, tag);
        }

        /// <summary>
        /// Serializes a <see cref="WebReleaseTag" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webReleaseTag"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebReleaseTag webReleaseTag, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webReleaseTag, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebReleaseTag" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webReleaseTag"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebReleaseTag webReleaseTag, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webReleaseTag.ReleaseOption.IsSet && webReleaseTag.Release == null)
                throw new ArgumentNullException(nameof(webReleaseTag.Release), "Property is required for class WebReleaseTag.");

            if (webReleaseTag.TagOption.IsSet && webReleaseTag.Tag == null)
                throw new ArgumentNullException(nameof(webReleaseTag.Tag), "Property is required for class WebReleaseTag.");

            if (webReleaseTag.ReleaseOption.IsSet)
            {
                writer.WritePropertyName("release");
                JsonSerializer.Serialize(writer, webReleaseTag.Release, jsonSerializerOptions);
            }
            if (webReleaseTag.TagOption.IsSet)
            {
                writer.WritePropertyName("tag");
                JsonSerializer.Serialize(writer, webReleaseTag.Tag, jsonSerializerOptions);
            }
        }
    }
}
