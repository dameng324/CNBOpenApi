// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebWeek
    /// </summary>
    public partial class WebWeek : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebWeek" /> class.
        /// </summary>
        /// <param name="a">每周增加的行数</param>
        /// <param name="c">每周的提交数量</param>
        /// <param name="d">每周删除的行数</param>
        /// <param name="w">周的时间戳</param>
        [JsonConstructor]
        public WebWeek(Option<int?> a = default, Option<int?> c = default, Option<int?> d = default, Option<int?> w = default)
        {
            AOption = a;
            COption = c;
            DOption = d;
            WOption = w;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of A
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AOption { get; private set; }

        /// <summary>
        /// 每周增加的行数
        /// </summary>
        /// <value>每周增加的行数</value>
        [JsonPropertyName("a")]
        public int? A { get { return this.AOption; } set { this.AOption = new(value); } }

        /// <summary>
        /// Used to track the state of C
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> COption { get; private set; }

        /// <summary>
        /// 每周的提交数量
        /// </summary>
        /// <value>每周的提交数量</value>
        [JsonPropertyName("c")]
        public int? C { get { return this.COption; } set { this.COption = new(value); } }

        /// <summary>
        /// Used to track the state of D
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DOption { get; private set; }

        /// <summary>
        /// 每周删除的行数
        /// </summary>
        /// <value>每周删除的行数</value>
        [JsonPropertyName("d")]
        public int? D { get { return this.DOption; } set { this.DOption = new(value); } }

        /// <summary>
        /// Used to track the state of W
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> WOption { get; private set; }

        /// <summary>
        /// 周的时间戳
        /// </summary>
        /// <value>周的时间戳</value>
        [JsonPropertyName("w")]
        public int? W { get { return this.WOption; } set { this.WOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebWeek {\n");
            sb.Append("  A: ").Append(A).Append("\n");
            sb.Append("  C: ").Append(C).Append("\n");
            sb.Append("  D: ").Append(D).Append("\n");
            sb.Append("  W: ").Append(W).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebWeek" />
    /// </summary>
    public class WebWeekJsonConverter : JsonConverter<WebWeek>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebWeek" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebWeek Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> a = default;
            Option<int?> c = default;
            Option<int?> d = default;
            Option<int?> w = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "a":
                            a = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "c":
                            c = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "d":
                            d = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "w":
                            w = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (a.IsSet && a.Value == null)
                throw new ArgumentNullException(nameof(a), "Property is not nullable for class WebWeek.");

            if (c.IsSet && c.Value == null)
                throw new ArgumentNullException(nameof(c), "Property is not nullable for class WebWeek.");

            if (d.IsSet && d.Value == null)
                throw new ArgumentNullException(nameof(d), "Property is not nullable for class WebWeek.");

            if (w.IsSet && w.Value == null)
                throw new ArgumentNullException(nameof(w), "Property is not nullable for class WebWeek.");

            return new WebWeek(a, c, d, w);
        }

        /// <summary>
        /// Serializes a <see cref="WebWeek" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webWeek"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebWeek webWeek, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webWeek, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebWeek" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webWeek"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebWeek webWeek, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webWeek.AOption.IsSet)
                writer.WriteNumber("a", webWeek.AOption.Value!.Value);

            if (webWeek.COption.IsSet)
                writer.WriteNumber("c", webWeek.COption.Value!.Value);

            if (webWeek.DOption.IsSet)
                writer.WriteNumber("d", webWeek.DOption.Value!.Value);

            if (webWeek.WOption.IsSet)
                writer.WriteNumber("w", webWeek.WOption.Value!.Value);
        }
    }
}
