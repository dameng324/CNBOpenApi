// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoRepoRank
    /// </summary>
    public partial class DtoRepoRank : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoRepoRank" /> class.
        /// </summary>
        /// <param name="rankType">rankType</param>
        /// <param name="repoDetail">repoDetail</param>
        /// <param name="topN">topN</param>
        [JsonConstructor]
        public DtoRepoRank(Option<string?> rankType = default, Option<List<DtoRankDetail>?> repoDetail = default, Option<int?> topN = default)
        {
            RankTypeOption = rankType;
            RepoDetailOption = repoDetail;
            TopNOption = topN;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of RankType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RankTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets RankType
        /// </summary>
        [JsonPropertyName("rank_type")]
        public string? RankType { get { return this.RankTypeOption; } set { this.RankTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of RepoDetail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoRankDetail>?> RepoDetailOption { get; private set; }

        /// <summary>
        /// Gets or Sets RepoDetail
        /// </summary>
        [JsonPropertyName("repo_detail")]
        public List<DtoRankDetail>? RepoDetail { get { return this.RepoDetailOption; } set { this.RepoDetailOption = new(value); } }

        /// <summary>
        /// Used to track the state of TopN
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TopNOption { get; private set; }

        /// <summary>
        /// Gets or Sets TopN
        /// </summary>
        [JsonPropertyName("top_n")]
        public int? TopN { get { return this.TopNOption; } set { this.TopNOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoRepoRank {\n");
            sb.Append("  RankType: ").Append(RankType).Append("\n");
            sb.Append("  RepoDetail: ").Append(RepoDetail).Append("\n");
            sb.Append("  TopN: ").Append(TopN).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoRepoRank" />
    /// </summary>
    public class DtoRepoRankJsonConverter : JsonConverter<DtoRepoRank>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoRepoRank" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoRepoRank Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> rankType = default;
            Option<List<DtoRankDetail>?> repoDetail = default;
            Option<int?> topN = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "rank_type":
                            rankType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "repo_detail":
                            repoDetail = new Option<List<DtoRankDetail>?>(JsonSerializer.Deserialize<List<DtoRankDetail>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "top_n":
                            topN = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (rankType.IsSet && rankType.Value == null)
                throw new ArgumentNullException(nameof(rankType), "Property is not nullable for class DtoRepoRank.");

            if (repoDetail.IsSet && repoDetail.Value == null)
                throw new ArgumentNullException(nameof(repoDetail), "Property is not nullable for class DtoRepoRank.");

            if (topN.IsSet && topN.Value == null)
                throw new ArgumentNullException(nameof(topN), "Property is not nullable for class DtoRepoRank.");

            return new DtoRepoRank(rankType, repoDetail, topN);
        }

        /// <summary>
        /// Serializes a <see cref="DtoRepoRank" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoRepoRank"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoRepoRank dtoRepoRank, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoRepoRank, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoRepoRank" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoRepoRank"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoRepoRank dtoRepoRank, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoRepoRank.RankTypeOption.IsSet && dtoRepoRank.RankType == null)
                throw new ArgumentNullException(nameof(dtoRepoRank.RankType), "Property is required for class DtoRepoRank.");

            if (dtoRepoRank.RepoDetailOption.IsSet && dtoRepoRank.RepoDetail == null)
                throw new ArgumentNullException(nameof(dtoRepoRank.RepoDetail), "Property is required for class DtoRepoRank.");

            if (dtoRepoRank.RankTypeOption.IsSet)
                writer.WriteString("rank_type", dtoRepoRank.RankType);

            if (dtoRepoRank.RepoDetailOption.IsSet)
            {
                writer.WritePropertyName("repo_detail");
                JsonSerializer.Serialize(writer, dtoRepoRank.RepoDetail, jsonSerializerOptions);
            }
            if (dtoRepoRank.TopNOption.IsSet)
                writer.WriteNumber("top_n", dtoRepoRank.TopNOption.Value!.Value);
        }
    }
}
