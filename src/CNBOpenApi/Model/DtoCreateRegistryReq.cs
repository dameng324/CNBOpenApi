// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoCreateRegistryReq
    /// </summary>
    public partial class DtoCreateRegistryReq : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoCreateRegistryReq" /> class.
        /// </summary>
        /// <param name="artifactPolicy">artifactPolicy (default to ArtifactPolicyEnum.All)</param>
        /// <param name="description">description</param>
        /// <param name="kind">kind</param>
        /// <param name="name">name</param>
        /// <param name="overwritePolicy">overwritePolicy (default to OverwritePolicyEnum.Forbid)</param>
        /// <param name="visibility">visibility (default to VisibilityEnum.Public)</param>
        [JsonConstructor]
        public DtoCreateRegistryReq(Option<ArtifactPolicyEnum?> artifactPolicy = default, Option<string?> description = default, Option<string?> kind = default, Option<string?> name = default, Option<OverwritePolicyEnum?> overwritePolicy = default, Option<VisibilityEnum?> visibility = default)
        {
            ArtifactPolicyOption = artifactPolicy;
            DescriptionOption = description;
            KindOption = kind;
            NameOption = name;
            OverwritePolicyOption = overwritePolicy;
            VisibilityOption = visibility;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines ArtifactPolicy
        /// </summary>
        public enum ArtifactPolicyEnum
        {
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            All = 1,

            /// <summary>
            /// Enum Snapshot for value: snapshot
            /// </summary>
            Snapshot = 2,

            /// <summary>
            /// Enum Release for value: release
            /// </summary>
            Release = 3
        }

        /// <summary>
        /// Returns a <see cref="ArtifactPolicyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ArtifactPolicyEnum ArtifactPolicyEnumFromString(string value)
        {
            if (value.Equals("all"))
                return ArtifactPolicyEnum.All;

            if (value.Equals("snapshot"))
                return ArtifactPolicyEnum.Snapshot;

            if (value.Equals("release"))
                return ArtifactPolicyEnum.Release;

            throw new NotImplementedException($"Could not convert value to type ArtifactPolicyEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ArtifactPolicyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ArtifactPolicyEnum? ArtifactPolicyEnumFromStringOrDefault(string value)
        {
            if (value.Equals("all"))
                return ArtifactPolicyEnum.All;

            if (value.Equals("snapshot"))
                return ArtifactPolicyEnum.Snapshot;

            if (value.Equals("release"))
                return ArtifactPolicyEnum.Release;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ArtifactPolicyEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ArtifactPolicyEnumToJsonValue(ArtifactPolicyEnum? value)
        {
            if (value == ArtifactPolicyEnum.All)
                return "all";

            if (value == ArtifactPolicyEnum.Snapshot)
                return "snapshot";

            if (value == ArtifactPolicyEnum.Release)
                return "release";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ArtifactPolicy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ArtifactPolicyEnum?> ArtifactPolicyOption { get; private set; }

        /// <summary>
        /// Gets or Sets ArtifactPolicy
        /// </summary>
        [JsonPropertyName("artifact_policy")]
        public ArtifactPolicyEnum? ArtifactPolicy { get { return this.ArtifactPolicyOption; } set { this.ArtifactPolicyOption = new(value); } }

        /// <summary>
        /// Defines OverwritePolicy
        /// </summary>
        public enum OverwritePolicyEnum
        {
            /// <summary>
            /// Enum Forbid for value: forbid
            /// </summary>
            Forbid = 1,

            /// <summary>
            /// Enum Allow for value: allow
            /// </summary>
            Allow = 2
        }

        /// <summary>
        /// Returns a <see cref="OverwritePolicyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static OverwritePolicyEnum OverwritePolicyEnumFromString(string value)
        {
            if (value.Equals("forbid"))
                return OverwritePolicyEnum.Forbid;

            if (value.Equals("allow"))
                return OverwritePolicyEnum.Allow;

            throw new NotImplementedException($"Could not convert value to type OverwritePolicyEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="OverwritePolicyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OverwritePolicyEnum? OverwritePolicyEnumFromStringOrDefault(string value)
        {
            if (value.Equals("forbid"))
                return OverwritePolicyEnum.Forbid;

            if (value.Equals("allow"))
                return OverwritePolicyEnum.Allow;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="OverwritePolicyEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string OverwritePolicyEnumToJsonValue(OverwritePolicyEnum? value)
        {
            if (value == OverwritePolicyEnum.Forbid)
                return "forbid";

            if (value == OverwritePolicyEnum.Allow)
                return "allow";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of OverwritePolicy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<OverwritePolicyEnum?> OverwritePolicyOption { get; private set; }

        /// <summary>
        /// Gets or Sets OverwritePolicy
        /// </summary>
        [JsonPropertyName("overwrite_policy")]
        public OverwritePolicyEnum? OverwritePolicy { get { return this.OverwritePolicyOption; } set { this.OverwritePolicyOption = new(value); } }

        /// <summary>
        /// Defines Visibility
        /// </summary>
        public enum VisibilityEnum
        {
            /// <summary>
            /// Enum Public for value: public
            /// </summary>
            Public = 1,

            /// <summary>
            /// Enum Private for value: private
            /// </summary>
            Private = 2
        }

        /// <summary>
        /// Returns a <see cref="VisibilityEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static VisibilityEnum VisibilityEnumFromString(string value)
        {
            if (value.Equals("public"))
                return VisibilityEnum.Public;

            if (value.Equals("private"))
                return VisibilityEnum.Private;

            throw new NotImplementedException($"Could not convert value to type VisibilityEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="VisibilityEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VisibilityEnum? VisibilityEnumFromStringOrDefault(string value)
        {
            if (value.Equals("public"))
                return VisibilityEnum.Public;

            if (value.Equals("private"))
                return VisibilityEnum.Private;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VisibilityEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string VisibilityEnumToJsonValue(VisibilityEnum? value)
        {
            if (value == VisibilityEnum.Public)
                return "public";

            if (value == VisibilityEnum.Private)
                return "private";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Visibility
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VisibilityEnum?> VisibilityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [JsonPropertyName("visibility")]
        public VisibilityEnum? Visibility { get { return this.VisibilityOption; } set { this.VisibilityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Kind
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KindOption { get; private set; }

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [JsonPropertyName("kind")]
        public string? Kind { get { return this.KindOption; } set { this.KindOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoCreateRegistryReq {\n");
            sb.Append("  ArtifactPolicy: ").Append(ArtifactPolicy).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OverwritePolicy: ").Append(OverwritePolicy).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoCreateRegistryReq" />
    /// </summary>
    public class DtoCreateRegistryReqJsonConverter : JsonConverter<DtoCreateRegistryReq>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoCreateRegistryReq" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoCreateRegistryReq Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DtoCreateRegistryReq.ArtifactPolicyEnum?> artifactPolicy = default;
            Option<string?> description = default;
            Option<string?> kind = default;
            Option<string?> name = default;
            Option<DtoCreateRegistryReq.OverwritePolicyEnum?> overwritePolicy = default;
            Option<DtoCreateRegistryReq.VisibilityEnum?> visibility = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "artifact_policy":
                            string? artifactPolicyRawValue = utf8JsonReader.GetString();
                            if (artifactPolicyRawValue != null)
                                artifactPolicy = new Option<DtoCreateRegistryReq.ArtifactPolicyEnum?>(DtoCreateRegistryReq.ArtifactPolicyEnumFromStringOrDefault(artifactPolicyRawValue));
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "kind":
                            kind = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "overwrite_policy":
                            string? overwritePolicyRawValue = utf8JsonReader.GetString();
                            if (overwritePolicyRawValue != null)
                                overwritePolicy = new Option<DtoCreateRegistryReq.OverwritePolicyEnum?>(DtoCreateRegistryReq.OverwritePolicyEnumFromStringOrDefault(overwritePolicyRawValue));
                            break;
                        case "visibility":
                            string? visibilityRawValue = utf8JsonReader.GetString();
                            if (visibilityRawValue != null)
                                visibility = new Option<DtoCreateRegistryReq.VisibilityEnum?>(DtoCreateRegistryReq.VisibilityEnumFromStringOrDefault(visibilityRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (artifactPolicy.IsSet && artifactPolicy.Value == null)
                throw new ArgumentNullException(nameof(artifactPolicy), "Property is not nullable for class DtoCreateRegistryReq.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class DtoCreateRegistryReq.");

            if (kind.IsSet && kind.Value == null)
                throw new ArgumentNullException(nameof(kind), "Property is not nullable for class DtoCreateRegistryReq.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class DtoCreateRegistryReq.");

            if (overwritePolicy.IsSet && overwritePolicy.Value == null)
                throw new ArgumentNullException(nameof(overwritePolicy), "Property is not nullable for class DtoCreateRegistryReq.");

            if (visibility.IsSet && visibility.Value == null)
                throw new ArgumentNullException(nameof(visibility), "Property is not nullable for class DtoCreateRegistryReq.");

            return new DtoCreateRegistryReq(artifactPolicy, description, kind, name, overwritePolicy, visibility);
        }

        /// <summary>
        /// Serializes a <see cref="DtoCreateRegistryReq" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoCreateRegistryReq"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoCreateRegistryReq dtoCreateRegistryReq, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoCreateRegistryReq, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoCreateRegistryReq" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoCreateRegistryReq"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoCreateRegistryReq dtoCreateRegistryReq, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoCreateRegistryReq.DescriptionOption.IsSet && dtoCreateRegistryReq.Description == null)
                throw new ArgumentNullException(nameof(dtoCreateRegistryReq.Description), "Property is required for class DtoCreateRegistryReq.");

            if (dtoCreateRegistryReq.KindOption.IsSet && dtoCreateRegistryReq.Kind == null)
                throw new ArgumentNullException(nameof(dtoCreateRegistryReq.Kind), "Property is required for class DtoCreateRegistryReq.");

            if (dtoCreateRegistryReq.NameOption.IsSet && dtoCreateRegistryReq.Name == null)
                throw new ArgumentNullException(nameof(dtoCreateRegistryReq.Name), "Property is required for class DtoCreateRegistryReq.");

            var artifactPolicyRawValue = DtoCreateRegistryReq.ArtifactPolicyEnumToJsonValue(dtoCreateRegistryReq.ArtifactPolicyOption.Value!.Value);
            writer.WriteString("artifact_policy", artifactPolicyRawValue);
            if (dtoCreateRegistryReq.DescriptionOption.IsSet)
                writer.WriteString("description", dtoCreateRegistryReq.Description);

            if (dtoCreateRegistryReq.KindOption.IsSet)
                writer.WriteString("kind", dtoCreateRegistryReq.Kind);

            if (dtoCreateRegistryReq.NameOption.IsSet)
                writer.WriteString("name", dtoCreateRegistryReq.Name);

            var overwritePolicyRawValue = DtoCreateRegistryReq.OverwritePolicyEnumToJsonValue(dtoCreateRegistryReq.OverwritePolicyOption.Value!.Value);
            writer.WriteString("overwrite_policy", overwritePolicyRawValue);
            var visibilityRawValue = DtoCreateRegistryReq.VisibilityEnumToJsonValue(dtoCreateRegistryReq.VisibilityOption.Value!.Value);
            writer.WriteString("visibility", visibilityRawValue);
        }
    }
}
