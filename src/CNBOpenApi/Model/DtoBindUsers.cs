// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoBindUsers
    /// </summary>
    public partial class DtoBindUsers : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoBindUsers" /> class.
        /// </summary>
        /// <param name="appId">appId</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="metadata">metadata</param>
        /// <param name="openid">openid</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public DtoBindUsers(Option<string?> appId = default, Option<string?> createdAt = default, Option<string?> metadata = default, Option<string?> openid = default, Option<string?> updatedAt = default)
        {
            AppIdOption = appId;
            CreatedAtOption = createdAt;
            MetadataOption = metadata;
            OpenidOption = openid;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AppId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AppIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets AppId
        /// </summary>
        [JsonPropertyName("app_id")]
        public string? AppId { get { return this.AppIdOption; } set { this.AppIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Metadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MetadataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [JsonPropertyName("metadata")]
        public string? Metadata { get { return this.MetadataOption; } set { this.MetadataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Openid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OpenidOption { get; private set; }

        /// <summary>
        /// Gets or Sets Openid
        /// </summary>
        [JsonPropertyName("openid")]
        public string? Openid { get { return this.OpenidOption; } set { this.OpenidOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoBindUsers {\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Openid: ").Append(Openid).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoBindUsers" />
    /// </summary>
    public class DtoBindUsersJsonConverter : JsonConverter<DtoBindUsers>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoBindUsers" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoBindUsers Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> appId = default;
            Option<string?> createdAt = default;
            Option<string?> metadata = default;
            Option<string?> openid = default;
            Option<string?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "app_id":
                            appId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "metadata":
                            metadata = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "openid":
                            openid = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (appId.IsSet && appId.Value == null)
                throw new ArgumentNullException(nameof(appId), "Property is not nullable for class DtoBindUsers.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class DtoBindUsers.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class DtoBindUsers.");

            if (openid.IsSet && openid.Value == null)
                throw new ArgumentNullException(nameof(openid), "Property is not nullable for class DtoBindUsers.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class DtoBindUsers.");

            return new DtoBindUsers(appId, createdAt, metadata, openid, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="DtoBindUsers" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoBindUsers"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoBindUsers dtoBindUsers, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoBindUsers, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoBindUsers" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoBindUsers"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoBindUsers dtoBindUsers, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoBindUsers.AppIdOption.IsSet && dtoBindUsers.AppId == null)
                throw new ArgumentNullException(nameof(dtoBindUsers.AppId), "Property is required for class DtoBindUsers.");

            if (dtoBindUsers.CreatedAtOption.IsSet && dtoBindUsers.CreatedAt == null)
                throw new ArgumentNullException(nameof(dtoBindUsers.CreatedAt), "Property is required for class DtoBindUsers.");

            if (dtoBindUsers.MetadataOption.IsSet && dtoBindUsers.Metadata == null)
                throw new ArgumentNullException(nameof(dtoBindUsers.Metadata), "Property is required for class DtoBindUsers.");

            if (dtoBindUsers.OpenidOption.IsSet && dtoBindUsers.Openid == null)
                throw new ArgumentNullException(nameof(dtoBindUsers.Openid), "Property is required for class DtoBindUsers.");

            if (dtoBindUsers.UpdatedAtOption.IsSet && dtoBindUsers.UpdatedAt == null)
                throw new ArgumentNullException(nameof(dtoBindUsers.UpdatedAt), "Property is required for class DtoBindUsers.");

            if (dtoBindUsers.AppIdOption.IsSet)
                writer.WriteString("app_id", dtoBindUsers.AppId);

            if (dtoBindUsers.CreatedAtOption.IsSet)
                writer.WriteString("created_at", dtoBindUsers.CreatedAt);

            if (dtoBindUsers.MetadataOption.IsSet)
                writer.WriteString("metadata", dtoBindUsers.Metadata);

            if (dtoBindUsers.OpenidOption.IsSet)
                writer.WriteString("openid", dtoBindUsers.Openid);

            if (dtoBindUsers.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", dtoBindUsers.UpdatedAt);
        }
    }
}
