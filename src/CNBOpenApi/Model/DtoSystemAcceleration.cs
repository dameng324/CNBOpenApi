// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoSystemAcceleration
    /// </summary>
    public partial class DtoSystemAcceleration : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoSystemAcceleration" /> class.
        /// </summary>
        /// <param name="priority">priority</param>
        /// <param name="url">url</param>
        /// <param name="userName">userName</param>
        [JsonConstructor]
        public DtoSystemAcceleration(Option<int?> priority = default, Option<string?> url = default, Option<string?> userName = default)
        {
            PriorityOption = priority;
            UrlOption = url;
            UserNameOption = userName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Priority
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PriorityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [JsonPropertyName("priority")]
        public int? Priority { get { return this.PriorityOption; } set { this.PriorityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [JsonPropertyName("user_name")]
        public string? UserName { get { return this.UserNameOption; } set { this.UserNameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoSystemAcceleration {\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoSystemAcceleration" />
    /// </summary>
    public class DtoSystemAccelerationJsonConverter : JsonConverter<DtoSystemAcceleration>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoSystemAcceleration" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoSystemAcceleration Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> priority = default;
            Option<string?> url = default;
            Option<string?> userName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "priority":
                            priority = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_name":
                            userName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (priority.IsSet && priority.Value == null)
                throw new ArgumentNullException(nameof(priority), "Property is not nullable for class DtoSystemAcceleration.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class DtoSystemAcceleration.");

            if (userName.IsSet && userName.Value == null)
                throw new ArgumentNullException(nameof(userName), "Property is not nullable for class DtoSystemAcceleration.");

            return new DtoSystemAcceleration(priority, url, userName);
        }

        /// <summary>
        /// Serializes a <see cref="DtoSystemAcceleration" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoSystemAcceleration"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoSystemAcceleration dtoSystemAcceleration, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoSystemAcceleration, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoSystemAcceleration" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoSystemAcceleration"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoSystemAcceleration dtoSystemAcceleration, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoSystemAcceleration.UrlOption.IsSet && dtoSystemAcceleration.Url == null)
                throw new ArgumentNullException(nameof(dtoSystemAcceleration.Url), "Property is required for class DtoSystemAcceleration.");

            if (dtoSystemAcceleration.UserNameOption.IsSet && dtoSystemAcceleration.UserName == null)
                throw new ArgumentNullException(nameof(dtoSystemAcceleration.UserName), "Property is required for class DtoSystemAcceleration.");

            if (dtoSystemAcceleration.PriorityOption.IsSet)
                writer.WriteNumber("priority", dtoSystemAcceleration.PriorityOption.Value!.Value);

            if (dtoSystemAcceleration.UrlOption.IsSet)
                writer.WriteString("url", dtoSystemAcceleration.Url);

            if (dtoSystemAcceleration.UserNameOption.IsSet)
                writer.WriteString("user_name", dtoSystemAcceleration.UserName);
        }
    }
}
