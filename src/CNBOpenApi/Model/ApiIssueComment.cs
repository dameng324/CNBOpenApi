// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// ApiIssueComment
    /// </summary>
    public partial class ApiIssueComment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiIssueComment" /> class.
        /// </summary>
        /// <param name="author">author</param>
        /// <param name="body">body</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="id">id</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public ApiIssueComment(Option<GitWoaComCnbMonorepoGitInternalAppVcsServiceBffApiUserInfo?> author = default, Option<string?> body = default, Option<string?> createdAt = default, Option<string?> id = default, Option<string?> updatedAt = default)
        {
            AuthorOption = author;
            BodyOption = body;
            CreatedAtOption = createdAt;
            IdOption = id;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Author
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GitWoaComCnbMonorepoGitInternalAppVcsServiceBffApiUserInfo?> AuthorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [JsonPropertyName("author")]
        public GitWoaComCnbMonorepoGitInternalAppVcsServiceBffApiUserInfo? Author { get { return this.AuthorOption; } set { this.AuthorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BodyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public string? Body { get { return this.BodyOption; } set { this.BodyOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiIssueComment {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApiIssueComment" />
    /// </summary>
    public class ApiIssueCommentJsonConverter : JsonConverter<ApiIssueComment>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApiIssueComment" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApiIssueComment Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<GitWoaComCnbMonorepoGitInternalAppVcsServiceBffApiUserInfo?> author = default;
            Option<string?> body = default;
            Option<string?> createdAt = default;
            Option<string?> id = default;
            Option<string?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "author":
                            author = new Option<GitWoaComCnbMonorepoGitInternalAppVcsServiceBffApiUserInfo?>(JsonSerializer.Deserialize<GitWoaComCnbMonorepoGitInternalAppVcsServiceBffApiUserInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "body":
                            body = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (author.IsSet && author.Value == null)
                throw new ArgumentNullException(nameof(author), "Property is not nullable for class ApiIssueComment.");

            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body), "Property is not nullable for class ApiIssueComment.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class ApiIssueComment.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ApiIssueComment.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class ApiIssueComment.");

            return new ApiIssueComment(author, body, createdAt, id, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="ApiIssueComment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiIssueComment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApiIssueComment apiIssueComment, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, apiIssueComment, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApiIssueComment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiIssueComment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApiIssueComment apiIssueComment, JsonSerializerOptions jsonSerializerOptions)
        {
            if (apiIssueComment.AuthorOption.IsSet && apiIssueComment.Author == null)
                throw new ArgumentNullException(nameof(apiIssueComment.Author), "Property is required for class ApiIssueComment.");

            if (apiIssueComment.BodyOption.IsSet && apiIssueComment.Body == null)
                throw new ArgumentNullException(nameof(apiIssueComment.Body), "Property is required for class ApiIssueComment.");

            if (apiIssueComment.CreatedAtOption.IsSet && apiIssueComment.CreatedAt == null)
                throw new ArgumentNullException(nameof(apiIssueComment.CreatedAt), "Property is required for class ApiIssueComment.");

            if (apiIssueComment.IdOption.IsSet && apiIssueComment.Id == null)
                throw new ArgumentNullException(nameof(apiIssueComment.Id), "Property is required for class ApiIssueComment.");

            if (apiIssueComment.UpdatedAtOption.IsSet && apiIssueComment.UpdatedAt == null)
                throw new ArgumentNullException(nameof(apiIssueComment.UpdatedAt), "Property is required for class ApiIssueComment.");

            if (apiIssueComment.AuthorOption.IsSet)
            {
                writer.WritePropertyName("author");
                JsonSerializer.Serialize(writer, apiIssueComment.Author, jsonSerializerOptions);
            }
            if (apiIssueComment.BodyOption.IsSet)
                writer.WriteString("body", apiIssueComment.Body);

            if (apiIssueComment.CreatedAtOption.IsSet)
                writer.WriteString("created_at", apiIssueComment.CreatedAt);

            if (apiIssueComment.IdOption.IsSet)
                writer.WriteString("id", apiIssueComment.Id);

            if (apiIssueComment.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", apiIssueComment.UpdatedAt);
        }
    }
}
