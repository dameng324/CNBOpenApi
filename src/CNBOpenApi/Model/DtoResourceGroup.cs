// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoResourceGroup
    /// </summary>
    public partial class DtoResourceGroup : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoResourceGroup" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="description">description</param>
        /// <param name="domain">domain</param>
        /// <param name="email">email</param>
        /// <param name="freeze">freeze</param>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="path">path</param>
        /// <param name="remark">remark</param>
        /// <param name="site">site</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="wechatMp">wechatMp</param>
        [JsonConstructor]
        public DtoResourceGroup(Option<string?> createdAt = default, Option<string?> description = default, Option<string?> domain = default, Option<string?> email = default, Option<bool?> freeze = default, Option<int?> id = default, Option<string?> name = default, Option<string?> path = default, Option<string?> remark = default, Option<string?> site = default, Option<string?> updatedAt = default, Option<string?> wechatMp = default)
        {
            CreatedAtOption = createdAt;
            DescriptionOption = description;
            DomainOption = domain;
            EmailOption = email;
            FreezeOption = freeze;
            IdOption = id;
            NameOption = name;
            PathOption = path;
            RemarkOption = remark;
            SiteOption = site;
            UpdatedAtOption = updatedAt;
            WechatMpOption = wechatMp;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Domain
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DomainOption { get; private set; }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [JsonPropertyName("domain")]
        public string? Domain { get { return this.DomainOption; } set { this.DomainOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of Freeze
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FreezeOption { get; }

        /// <summary>
        /// Gets or Sets Freeze
        /// </summary>
        [JsonPropertyName("freeze")]
        public bool? Freeze { get { return this.FreezeOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of Remark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RemarkOption { get; private set; }

        /// <summary>
        /// Gets or Sets Remark
        /// </summary>
        [JsonPropertyName("remark")]
        public string? Remark { get { return this.RemarkOption; } set { this.RemarkOption = new(value); } }

        /// <summary>
        /// Used to track the state of Site
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SiteOption { get; private set; }

        /// <summary>
        /// Gets or Sets Site
        /// </summary>
        [JsonPropertyName("site")]
        public string? Site { get { return this.SiteOption; } set { this.SiteOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of WechatMp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WechatMpOption { get; private set; }

        /// <summary>
        /// Gets or Sets WechatMp
        /// </summary>
        [JsonPropertyName("wechat_mp")]
        public string? WechatMp { get { return this.WechatMpOption; } set { this.WechatMpOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoResourceGroup {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Freeze: ").Append(Freeze).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  WechatMp: ").Append(WechatMp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoResourceGroup" />
    /// </summary>
    public class DtoResourceGroupJsonConverter : JsonConverter<DtoResourceGroup>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoResourceGroup" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoResourceGroup Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> createdAt = default;
            Option<string?> description = default;
            Option<string?> domain = default;
            Option<string?> email = default;
            Option<bool?> freeze = default;
            Option<int?> id = default;
            Option<string?> name = default;
            Option<string?> path = default;
            Option<string?> remark = default;
            Option<string?> site = default;
            Option<string?> updatedAt = default;
            Option<string?> wechatMp = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "domain":
                            domain = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "freeze":
                            freeze = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "remark":
                            remark = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "site":
                            site = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "wechat_mp":
                            wechatMp = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class DtoResourceGroup.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class DtoResourceGroup.");

            if (domain.IsSet && domain.Value == null)
                throw new ArgumentNullException(nameof(domain), "Property is not nullable for class DtoResourceGroup.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class DtoResourceGroup.");

            if (freeze.IsSet && freeze.Value == null)
                throw new ArgumentNullException(nameof(freeze), "Property is not nullable for class DtoResourceGroup.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DtoResourceGroup.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class DtoResourceGroup.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class DtoResourceGroup.");

            if (remark.IsSet && remark.Value == null)
                throw new ArgumentNullException(nameof(remark), "Property is not nullable for class DtoResourceGroup.");

            if (site.IsSet && site.Value == null)
                throw new ArgumentNullException(nameof(site), "Property is not nullable for class DtoResourceGroup.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class DtoResourceGroup.");

            if (wechatMp.IsSet && wechatMp.Value == null)
                throw new ArgumentNullException(nameof(wechatMp), "Property is not nullable for class DtoResourceGroup.");

            return new DtoResourceGroup(createdAt, description, domain, email, freeze, id, name, path, remark, site, updatedAt, wechatMp);
        }

        /// <summary>
        /// Serializes a <see cref="DtoResourceGroup" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoResourceGroup"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoResourceGroup dtoResourceGroup, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoResourceGroup, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoResourceGroup" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoResourceGroup"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoResourceGroup dtoResourceGroup, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoResourceGroup.CreatedAtOption.IsSet && dtoResourceGroup.CreatedAt == null)
                throw new ArgumentNullException(nameof(dtoResourceGroup.CreatedAt), "Property is required for class DtoResourceGroup.");

            if (dtoResourceGroup.DescriptionOption.IsSet && dtoResourceGroup.Description == null)
                throw new ArgumentNullException(nameof(dtoResourceGroup.Description), "Property is required for class DtoResourceGroup.");

            if (dtoResourceGroup.DomainOption.IsSet && dtoResourceGroup.Domain == null)
                throw new ArgumentNullException(nameof(dtoResourceGroup.Domain), "Property is required for class DtoResourceGroup.");

            if (dtoResourceGroup.EmailOption.IsSet && dtoResourceGroup.Email == null)
                throw new ArgumentNullException(nameof(dtoResourceGroup.Email), "Property is required for class DtoResourceGroup.");

            if (dtoResourceGroup.NameOption.IsSet && dtoResourceGroup.Name == null)
                throw new ArgumentNullException(nameof(dtoResourceGroup.Name), "Property is required for class DtoResourceGroup.");

            if (dtoResourceGroup.PathOption.IsSet && dtoResourceGroup.Path == null)
                throw new ArgumentNullException(nameof(dtoResourceGroup.Path), "Property is required for class DtoResourceGroup.");

            if (dtoResourceGroup.RemarkOption.IsSet && dtoResourceGroup.Remark == null)
                throw new ArgumentNullException(nameof(dtoResourceGroup.Remark), "Property is required for class DtoResourceGroup.");

            if (dtoResourceGroup.SiteOption.IsSet && dtoResourceGroup.Site == null)
                throw new ArgumentNullException(nameof(dtoResourceGroup.Site), "Property is required for class DtoResourceGroup.");

            if (dtoResourceGroup.UpdatedAtOption.IsSet && dtoResourceGroup.UpdatedAt == null)
                throw new ArgumentNullException(nameof(dtoResourceGroup.UpdatedAt), "Property is required for class DtoResourceGroup.");

            if (dtoResourceGroup.WechatMpOption.IsSet && dtoResourceGroup.WechatMp == null)
                throw new ArgumentNullException(nameof(dtoResourceGroup.WechatMp), "Property is required for class DtoResourceGroup.");

            if (dtoResourceGroup.CreatedAtOption.IsSet)
                writer.WriteString("created_at", dtoResourceGroup.CreatedAt);

            if (dtoResourceGroup.DescriptionOption.IsSet)
                writer.WriteString("description", dtoResourceGroup.Description);

            if (dtoResourceGroup.DomainOption.IsSet)
                writer.WriteString("domain", dtoResourceGroup.Domain);

            if (dtoResourceGroup.EmailOption.IsSet)
                writer.WriteString("email", dtoResourceGroup.Email);

            if (dtoResourceGroup.FreezeOption.IsSet)
                writer.WriteBoolean("freeze", dtoResourceGroup.FreezeOption.Value!.Value);

            if (dtoResourceGroup.IdOption.IsSet)
                writer.WriteNumber("id", dtoResourceGroup.IdOption.Value!.Value);

            if (dtoResourceGroup.NameOption.IsSet)
                writer.WriteString("name", dtoResourceGroup.Name);

            if (dtoResourceGroup.PathOption.IsSet)
                writer.WriteString("path", dtoResourceGroup.Path);

            if (dtoResourceGroup.RemarkOption.IsSet)
                writer.WriteString("remark", dtoResourceGroup.Remark);

            if (dtoResourceGroup.SiteOption.IsSet)
                writer.WriteString("site", dtoResourceGroup.Site);

            if (dtoResourceGroup.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", dtoResourceGroup.UpdatedAt);

            if (dtoResourceGroup.WechatMpOption.IsSet)
                writer.WriteString("wechat_mp", dtoResourceGroup.WechatMp);
        }
    }
}
