// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// Defines constant.ActivityType
    /// </summary>
    public enum ConstantActivityType
    {
        /// <summary>
        /// Enum Mine for value: mine
        /// </summary>
        Mine = 1,

        /// <summary>
        /// Enum Fork for value: fork
        /// </summary>
        Fork = 2,

        /// <summary>
        /// Enum Follow for value: follow
        /// </summary>
        Follow = 3,

        /// <summary>
        /// Enum Star for value: star
        /// </summary>
        Star = 4,

        /// <summary>
        /// Enum JoinGroup for value: join_group
        /// </summary>
        JoinGroup = 5,

        /// <summary>
        /// Enum CreateRepo for value: create_repo
        /// </summary>
        CreateRepo = 6,

        /// <summary>
        /// Enum UserCreateRelease for value: user_create_release
        /// </summary>
        UserCreateRelease = 7,

        /// <summary>
        /// Enum RepoCreateRelease for value: repo_create_release
        /// </summary>
        RepoCreateRelease = 8,

        /// <summary>
        /// Enum UserDeploySuccess for value: user_deploy_success
        /// </summary>
        UserDeploySuccess = 9,

        /// <summary>
        /// Enum RepoDeploySuccess for value: repo_deploy_success
        /// </summary>
        RepoDeploySuccess = 10
    }

    /// <summary>
    /// Converts <see cref="ConstantActivityType"/> to and from the JSON value
    /// </summary>
    public static class ConstantActivityTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ConstantActivityType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConstantActivityType FromString(string value)
        {
            if (value.Equals("mine"))
                return ConstantActivityType.Mine;

            if (value.Equals("fork"))
                return ConstantActivityType.Fork;

            if (value.Equals("follow"))
                return ConstantActivityType.Follow;

            if (value.Equals("star"))
                return ConstantActivityType.Star;

            if (value.Equals("join_group"))
                return ConstantActivityType.JoinGroup;

            if (value.Equals("create_repo"))
                return ConstantActivityType.CreateRepo;

            if (value.Equals("user_create_release"))
                return ConstantActivityType.UserCreateRelease;

            if (value.Equals("repo_create_release"))
                return ConstantActivityType.RepoCreateRelease;

            if (value.Equals("user_deploy_success"))
                return ConstantActivityType.UserDeploySuccess;

            if (value.Equals("repo_deploy_success"))
                return ConstantActivityType.RepoDeploySuccess;

            throw new NotImplementedException($"Could not convert value to type ConstantActivityType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ConstantActivityType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConstantActivityType? FromStringOrDefault(string value)
        {
            if (value.Equals("mine"))
                return ConstantActivityType.Mine;

            if (value.Equals("fork"))
                return ConstantActivityType.Fork;

            if (value.Equals("follow"))
                return ConstantActivityType.Follow;

            if (value.Equals("star"))
                return ConstantActivityType.Star;

            if (value.Equals("join_group"))
                return ConstantActivityType.JoinGroup;

            if (value.Equals("create_repo"))
                return ConstantActivityType.CreateRepo;

            if (value.Equals("user_create_release"))
                return ConstantActivityType.UserCreateRelease;

            if (value.Equals("repo_create_release"))
                return ConstantActivityType.RepoCreateRelease;

            if (value.Equals("user_deploy_success"))
                return ConstantActivityType.UserDeploySuccess;

            if (value.Equals("repo_deploy_success"))
                return ConstantActivityType.RepoDeploySuccess;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ConstantActivityType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ConstantActivityType value)
        {
            if (value == ConstantActivityType.Mine)
                return "mine";

            if (value == ConstantActivityType.Fork)
                return "fork";

            if (value == ConstantActivityType.Follow)
                return "follow";

            if (value == ConstantActivityType.Star)
                return "star";

            if (value == ConstantActivityType.JoinGroup)
                return "join_group";

            if (value == ConstantActivityType.CreateRepo)
                return "create_repo";

            if (value == ConstantActivityType.UserCreateRelease)
                return "user_create_release";

            if (value == ConstantActivityType.RepoCreateRelease)
                return "repo_create_release";

            if (value == ConstantActivityType.UserDeploySuccess)
                return "user_deploy_success";

            if (value == ConstantActivityType.RepoDeploySuccess)
                return "repo_deploy_success";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConstantActivityType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ConstantActivityTypeJsonConverter : JsonConverter<ConstantActivityType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ConstantActivityType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ConstantActivityType? result = rawValue == null
                ? null
                : ConstantActivityTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ConstantActivityType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="constantActivityType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ConstantActivityType constantActivityType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(constantActivityType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConstantActivityType"/>
    /// </summary>
    public class ConstantActivityTypeNullableJsonConverter : JsonConverter<ConstantActivityType?>
    {
        /// <summary>
        /// Returns a ConstantActivityType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ConstantActivityType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ConstantActivityType? result = rawValue == null
                ? null
                : ConstantActivityTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="constantActivityType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ConstantActivityType? constantActivityType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(constantActivityType?.ToString() ?? "null");
        }
    }
}
