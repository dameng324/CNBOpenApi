// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoRepoLanguage
    /// </summary>
    public partial class DtoRepoLanguage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoRepoLanguage" /> class.
        /// </summary>
        /// <param name="language">language</param>
        /// <param name="ratio">ratio</param>
        [JsonConstructor]
        public DtoRepoLanguage(Option<string?> language = default, Option<string?> ratio = default)
        {
            LanguageOption = language;
            RatioOption = ratio;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Language
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LanguageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [JsonPropertyName("language")]
        public string? Language { get { return this.LanguageOption; } set { this.LanguageOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ratio
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RatioOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ratio
        /// </summary>
        [JsonPropertyName("ratio")]
        public string? Ratio { get { return this.RatioOption; } set { this.RatioOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoRepoLanguage {\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Ratio: ").Append(Ratio).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoRepoLanguage" />
    /// </summary>
    public class DtoRepoLanguageJsonConverter : JsonConverter<DtoRepoLanguage>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoRepoLanguage" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoRepoLanguage Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> language = default;
            Option<string?> ratio = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "language":
                            language = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ratio":
                            ratio = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (language.IsSet && language.Value == null)
                throw new ArgumentNullException(nameof(language), "Property is not nullable for class DtoRepoLanguage.");

            if (ratio.IsSet && ratio.Value == null)
                throw new ArgumentNullException(nameof(ratio), "Property is not nullable for class DtoRepoLanguage.");

            return new DtoRepoLanguage(language, ratio);
        }

        /// <summary>
        /// Serializes a <see cref="DtoRepoLanguage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoRepoLanguage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoRepoLanguage dtoRepoLanguage, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoRepoLanguage, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoRepoLanguage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoRepoLanguage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoRepoLanguage dtoRepoLanguage, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoRepoLanguage.LanguageOption.IsSet && dtoRepoLanguage.Language == null)
                throw new ArgumentNullException(nameof(dtoRepoLanguage.Language), "Property is required for class DtoRepoLanguage.");

            if (dtoRepoLanguage.RatioOption.IsSet && dtoRepoLanguage.Ratio == null)
                throw new ArgumentNullException(nameof(dtoRepoLanguage.Ratio), "Property is required for class DtoRepoLanguage.");

            if (dtoRepoLanguage.LanguageOption.IsSet)
                writer.WriteString("language", dtoRepoLanguage.Language);

            if (dtoRepoLanguage.RatioOption.IsSet)
                writer.WriteString("ratio", dtoRepoLanguage.Ratio);
        }
    }
}
