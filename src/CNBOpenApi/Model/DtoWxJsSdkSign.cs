// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoWxJsSdkSign
    /// </summary>
    public partial class DtoWxJsSdkSign : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoWxJsSdkSign" /> class.
        /// </summary>
        /// <param name="appid">appid</param>
        /// <param name="noncestr">noncestr</param>
        /// <param name="sign">签名结果</param>
        /// <param name="timestamp">timestamp</param>
        [JsonConstructor]
        public DtoWxJsSdkSign(Option<string?> appid = default, Option<string?> noncestr = default, Option<string?> sign = default, Option<int?> timestamp = default)
        {
            AppidOption = appid;
            NoncestrOption = noncestr;
            SignOption = sign;
            TimestampOption = timestamp;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Appid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AppidOption { get; private set; }

        /// <summary>
        /// Gets or Sets Appid
        /// </summary>
        [JsonPropertyName("appid")]
        public string? Appid { get { return this.AppidOption; } set { this.AppidOption = new(value); } }

        /// <summary>
        /// Used to track the state of Noncestr
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NoncestrOption { get; private set; }

        /// <summary>
        /// Gets or Sets Noncestr
        /// </summary>
        [JsonPropertyName("noncestr")]
        public string? Noncestr { get { return this.NoncestrOption; } set { this.NoncestrOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sign
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SignOption { get; private set; }

        /// <summary>
        /// 签名结果
        /// </summary>
        /// <value>签名结果</value>
        [JsonPropertyName("sign")]
        public string? Sign { get { return this.SignOption; } set { this.SignOption = new(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TimestampOption { get; private set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [JsonPropertyName("timestamp")]
        public int? Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoWxJsSdkSign {\n");
            sb.Append("  Appid: ").Append(Appid).Append("\n");
            sb.Append("  Noncestr: ").Append(Noncestr).Append("\n");
            sb.Append("  Sign: ").Append(Sign).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoWxJsSdkSign" />
    /// </summary>
    public class DtoWxJsSdkSignJsonConverter : JsonConverter<DtoWxJsSdkSign>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoWxJsSdkSign" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoWxJsSdkSign Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> appid = default;
            Option<string?> noncestr = default;
            Option<string?> sign = default;
            Option<int?> timestamp = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "appid":
                            appid = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "noncestr":
                            noncestr = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sign":
                            sign = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "timestamp":
                            timestamp = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (appid.IsSet && appid.Value == null)
                throw new ArgumentNullException(nameof(appid), "Property is not nullable for class DtoWxJsSdkSign.");

            if (noncestr.IsSet && noncestr.Value == null)
                throw new ArgumentNullException(nameof(noncestr), "Property is not nullable for class DtoWxJsSdkSign.");

            if (sign.IsSet && sign.Value == null)
                throw new ArgumentNullException(nameof(sign), "Property is not nullable for class DtoWxJsSdkSign.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class DtoWxJsSdkSign.");

            return new DtoWxJsSdkSign(appid, noncestr, sign, timestamp);
        }

        /// <summary>
        /// Serializes a <see cref="DtoWxJsSdkSign" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoWxJsSdkSign"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoWxJsSdkSign dtoWxJsSdkSign, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoWxJsSdkSign, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoWxJsSdkSign" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoWxJsSdkSign"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoWxJsSdkSign dtoWxJsSdkSign, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoWxJsSdkSign.AppidOption.IsSet && dtoWxJsSdkSign.Appid == null)
                throw new ArgumentNullException(nameof(dtoWxJsSdkSign.Appid), "Property is required for class DtoWxJsSdkSign.");

            if (dtoWxJsSdkSign.NoncestrOption.IsSet && dtoWxJsSdkSign.Noncestr == null)
                throw new ArgumentNullException(nameof(dtoWxJsSdkSign.Noncestr), "Property is required for class DtoWxJsSdkSign.");

            if (dtoWxJsSdkSign.SignOption.IsSet && dtoWxJsSdkSign.Sign == null)
                throw new ArgumentNullException(nameof(dtoWxJsSdkSign.Sign), "Property is required for class DtoWxJsSdkSign.");

            if (dtoWxJsSdkSign.AppidOption.IsSet)
                writer.WriteString("appid", dtoWxJsSdkSign.Appid);

            if (dtoWxJsSdkSign.NoncestrOption.IsSet)
                writer.WriteString("noncestr", dtoWxJsSdkSign.Noncestr);

            if (dtoWxJsSdkSign.SignOption.IsSet)
                writer.WriteString("sign", dtoWxJsSdkSign.Sign);

            if (dtoWxJsSdkSign.TimestampOption.IsSet)
                writer.WriteNumber("timestamp", dtoWxJsSdkSign.TimestampOption.Value!.Value);
        }
    }
}
