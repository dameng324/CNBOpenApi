// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoRepoCoreHour
    /// </summary>
    public partial class DtoRepoCoreHour : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoRepoCoreHour" /> class.
        /// </summary>
        /// <param name="ciUsedCoreSec">ciUsedCoreSec</param>
        /// <param name="ciUsedCoreHour">ciUsedCoreHour</param>
        /// <param name="codeUsedCoreSec">codeUsedCoreSec</param>
        /// <param name="codeUsedCoreHour">codeUsedCoreHour</param>
        [JsonConstructor]
        public DtoRepoCoreHour(Option<string?> ciUsedCoreSec = default, Option<string?> ciUsedCoreHour = default, Option<string?> codeUsedCoreSec = default, Option<string?> codeUsedCoreHour = default)
        {
            CiUsedCoreSecOption = ciUsedCoreSec;
            CiUsedCoreHourOption = ciUsedCoreHour;
            CodeUsedCoreSecOption = codeUsedCoreSec;
            CodeUsedCoreHourOption = codeUsedCoreHour;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CiUsedCoreSec
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CiUsedCoreSecOption { get; private set; }

        /// <summary>
        /// Gets or Sets CiUsedCoreSec
        /// </summary>
        [JsonPropertyName("ci_used_core_Sec")]
        public string? CiUsedCoreSec { get { return this.CiUsedCoreSecOption; } set { this.CiUsedCoreSecOption = new(value); } }

        /// <summary>
        /// Used to track the state of CiUsedCoreHour
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CiUsedCoreHourOption { get; private set; }

        /// <summary>
        /// Gets or Sets CiUsedCoreHour
        /// </summary>
        [JsonPropertyName("ci_used_core_hour")]
        public string? CiUsedCoreHour { get { return this.CiUsedCoreHourOption; } set { this.CiUsedCoreHourOption = new(value); } }

        /// <summary>
        /// Used to track the state of CodeUsedCoreSec
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeUsedCoreSecOption { get; private set; }

        /// <summary>
        /// Gets or Sets CodeUsedCoreSec
        /// </summary>
        [JsonPropertyName("code_used_core_Sec")]
        public string? CodeUsedCoreSec { get { return this.CodeUsedCoreSecOption; } set { this.CodeUsedCoreSecOption = new(value); } }

        /// <summary>
        /// Used to track the state of CodeUsedCoreHour
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeUsedCoreHourOption { get; private set; }

        /// <summary>
        /// Gets or Sets CodeUsedCoreHour
        /// </summary>
        [JsonPropertyName("code_used_core_hour")]
        public string? CodeUsedCoreHour { get { return this.CodeUsedCoreHourOption; } set { this.CodeUsedCoreHourOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoRepoCoreHour {\n");
            sb.Append("  CiUsedCoreSec: ").Append(CiUsedCoreSec).Append("\n");
            sb.Append("  CiUsedCoreHour: ").Append(CiUsedCoreHour).Append("\n");
            sb.Append("  CodeUsedCoreSec: ").Append(CodeUsedCoreSec).Append("\n");
            sb.Append("  CodeUsedCoreHour: ").Append(CodeUsedCoreHour).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoRepoCoreHour" />
    /// </summary>
    public class DtoRepoCoreHourJsonConverter : JsonConverter<DtoRepoCoreHour>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoRepoCoreHour" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoRepoCoreHour Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> ciUsedCoreSec = default;
            Option<string?> ciUsedCoreHour = default;
            Option<string?> codeUsedCoreSec = default;
            Option<string?> codeUsedCoreHour = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ci_used_core_Sec":
                            ciUsedCoreSec = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ci_used_core_hour":
                            ciUsedCoreHour = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "code_used_core_Sec":
                            codeUsedCoreSec = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "code_used_core_hour":
                            codeUsedCoreHour = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (ciUsedCoreSec.IsSet && ciUsedCoreSec.Value == null)
                throw new ArgumentNullException(nameof(ciUsedCoreSec), "Property is not nullable for class DtoRepoCoreHour.");

            if (ciUsedCoreHour.IsSet && ciUsedCoreHour.Value == null)
                throw new ArgumentNullException(nameof(ciUsedCoreHour), "Property is not nullable for class DtoRepoCoreHour.");

            if (codeUsedCoreSec.IsSet && codeUsedCoreSec.Value == null)
                throw new ArgumentNullException(nameof(codeUsedCoreSec), "Property is not nullable for class DtoRepoCoreHour.");

            if (codeUsedCoreHour.IsSet && codeUsedCoreHour.Value == null)
                throw new ArgumentNullException(nameof(codeUsedCoreHour), "Property is not nullable for class DtoRepoCoreHour.");

            return new DtoRepoCoreHour(ciUsedCoreSec, ciUsedCoreHour, codeUsedCoreSec, codeUsedCoreHour);
        }

        /// <summary>
        /// Serializes a <see cref="DtoRepoCoreHour" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoRepoCoreHour"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoRepoCoreHour dtoRepoCoreHour, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoRepoCoreHour, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoRepoCoreHour" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoRepoCoreHour"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoRepoCoreHour dtoRepoCoreHour, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoRepoCoreHour.CiUsedCoreSecOption.IsSet && dtoRepoCoreHour.CiUsedCoreSec == null)
                throw new ArgumentNullException(nameof(dtoRepoCoreHour.CiUsedCoreSec), "Property is required for class DtoRepoCoreHour.");

            if (dtoRepoCoreHour.CiUsedCoreHourOption.IsSet && dtoRepoCoreHour.CiUsedCoreHour == null)
                throw new ArgumentNullException(nameof(dtoRepoCoreHour.CiUsedCoreHour), "Property is required for class DtoRepoCoreHour.");

            if (dtoRepoCoreHour.CodeUsedCoreSecOption.IsSet && dtoRepoCoreHour.CodeUsedCoreSec == null)
                throw new ArgumentNullException(nameof(dtoRepoCoreHour.CodeUsedCoreSec), "Property is required for class DtoRepoCoreHour.");

            if (dtoRepoCoreHour.CodeUsedCoreHourOption.IsSet && dtoRepoCoreHour.CodeUsedCoreHour == null)
                throw new ArgumentNullException(nameof(dtoRepoCoreHour.CodeUsedCoreHour), "Property is required for class DtoRepoCoreHour.");

            if (dtoRepoCoreHour.CiUsedCoreSecOption.IsSet)
                writer.WriteString("ci_used_core_Sec", dtoRepoCoreHour.CiUsedCoreSec);

            if (dtoRepoCoreHour.CiUsedCoreHourOption.IsSet)
                writer.WriteString("ci_used_core_hour", dtoRepoCoreHour.CiUsedCoreHour);

            if (dtoRepoCoreHour.CodeUsedCoreSecOption.IsSet)
                writer.WriteString("code_used_core_Sec", dtoRepoCoreHour.CodeUsedCoreSec);

            if (dtoRepoCoreHour.CodeUsedCoreHourOption.IsSet)
                writer.WriteString("code_used_core_hour", dtoRepoCoreHour.CodeUsedCoreHour);
        }
    }
}
