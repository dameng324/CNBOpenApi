// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoWorkspaceInfo
    /// </summary>
    public partial class DtoWorkspaceInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoWorkspaceInfo" /> class.
        /// </summary>
        /// <param name="branch">分支名，例如：main</param>
        /// <param name="commitCount">备份的 commit 数</param>
        /// <param name="createTime">开发环境创建时间，例如：2024-12-02T03:20:22.000Z</param>
        /// <param name="duration">开发环境持续时间，单位：ms（非实时更新）</param>
        /// <param name="fileCount">备份的文件数</param>
        /// <param name="fileList">备份的文件列表，仅前五个备份文件相对路径</param>
        /// <param name="latestSha">环境销毁时远程最新的 commit short hash</param>
        /// <param name="pipelineId">创建环境的子流水线 id</param>
        /// <param name="remoteStashCount">备份的 stash 数</param>
        /// <param name="repoUrl">仓库地址</param>
        /// <param name="restoreId">恢复备份代码的流水线 id，如果有值表示备份代码已被恢复（重建环境时会恢复备份代码）</param>
        /// <param name="slug">仓库路径，例如：groupname/reponame</param>
        /// <param name="sn">创建开发环境的流水线 sn</param>
        /// <param name="ssh">开发环境是否支持 ssh 链接</param>
        /// <param name="status">工作区状态，running: 开发环境已启动，closed：开发环境已关闭</param>
        /// <param name="workspace">开发环境默认工作区路径</param>
        [JsonConstructor]
        public DtoWorkspaceInfo(Option<string?> branch = default, Option<int?> commitCount = default, Option<string?> createTime = default, Option<int?> duration = default, Option<int?> fileCount = default, Option<string?> fileList = default, Option<string?> latestSha = default, Option<string?> pipelineId = default, Option<int?> remoteStashCount = default, Option<string?> repoUrl = default, Option<string?> restoreId = default, Option<string?> slug = default, Option<string?> sn = default, Option<bool?> ssh = default, Option<string?> status = default, Option<string?> workspace = default)
        {
            BranchOption = branch;
            CommitCountOption = commitCount;
            CreateTimeOption = createTime;
            DurationOption = duration;
            FileCountOption = fileCount;
            FileListOption = fileList;
            LatestShaOption = latestSha;
            PipelineIdOption = pipelineId;
            RemoteStashCountOption = remoteStashCount;
            RepoUrlOption = repoUrl;
            RestoreIdOption = restoreId;
            SlugOption = slug;
            SnOption = sn;
            SshOption = ssh;
            StatusOption = status;
            WorkspaceOption = workspace;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Branch
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BranchOption { get; private set; }

        /// <summary>
        /// 分支名，例如：main
        /// </summary>
        /// <value>分支名，例如：main</value>
        [JsonPropertyName("branch")]
        public string? Branch { get { return this.BranchOption; } set { this.BranchOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommitCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CommitCountOption { get; private set; }

        /// <summary>
        /// 备份的 commit 数
        /// </summary>
        /// <value>备份的 commit 数</value>
        [JsonPropertyName("commit_count")]
        public int? CommitCount { get { return this.CommitCountOption; } set { this.CommitCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreateTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreateTimeOption { get; private set; }

        /// <summary>
        /// 开发环境创建时间，例如：2024-12-02T03:20:22.000Z
        /// </summary>
        /// <value>开发环境创建时间，例如：2024-12-02T03:20:22.000Z</value>
        [JsonPropertyName("create_time")]
        public string? CreateTime { get { return this.CreateTimeOption; } set { this.CreateTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Duration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DurationOption { get; private set; }

        /// <summary>
        /// 开发环境持续时间，单位：ms（非实时更新）
        /// </summary>
        /// <value>开发环境持续时间，单位：ms（非实时更新）</value>
        [JsonPropertyName("duration")]
        public int? Duration { get { return this.DurationOption; } set { this.DurationOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FileCountOption { get; private set; }

        /// <summary>
        /// 备份的文件数
        /// </summary>
        /// <value>备份的文件数</value>
        [JsonPropertyName("file_count")]
        public int? FileCount { get { return this.FileCountOption; } set { this.FileCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FileListOption { get; private set; }

        /// <summary>
        /// 备份的文件列表，仅前五个备份文件相对路径
        /// </summary>
        /// <value>备份的文件列表，仅前五个备份文件相对路径</value>
        [JsonPropertyName("file_list")]
        public string? FileList { get { return this.FileListOption; } set { this.FileListOption = new(value); } }

        /// <summary>
        /// Used to track the state of LatestSha
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LatestShaOption { get; private set; }

        /// <summary>
        /// 环境销毁时远程最新的 commit short hash
        /// </summary>
        /// <value>环境销毁时远程最新的 commit short hash</value>
        [JsonPropertyName("latest_sha")]
        public string? LatestSha { get { return this.LatestShaOption; } set { this.LatestShaOption = new(value); } }

        /// <summary>
        /// Used to track the state of PipelineId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PipelineIdOption { get; private set; }

        /// <summary>
        /// 创建环境的子流水线 id
        /// </summary>
        /// <value>创建环境的子流水线 id</value>
        [JsonPropertyName("pipeline_id")]
        public string? PipelineId { get { return this.PipelineIdOption; } set { this.PipelineIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of RemoteStashCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RemoteStashCountOption { get; private set; }

        /// <summary>
        /// 备份的 stash 数
        /// </summary>
        /// <value>备份的 stash 数</value>
        [JsonPropertyName("remote_stash_count")]
        public int? RemoteStashCount { get { return this.RemoteStashCountOption; } set { this.RemoteStashCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of RepoUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RepoUrlOption { get; private set; }

        /// <summary>
        /// 仓库地址
        /// </summary>
        /// <value>仓库地址</value>
        [JsonPropertyName("repo_url")]
        public string? RepoUrl { get { return this.RepoUrlOption; } set { this.RepoUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of RestoreId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RestoreIdOption { get; private set; }

        /// <summary>
        /// 恢复备份代码的流水线 id，如果有值表示备份代码已被恢复（重建环境时会恢复备份代码）
        /// </summary>
        /// <value>恢复备份代码的流水线 id，如果有值表示备份代码已被恢复（重建环境时会恢复备份代码）</value>
        [JsonPropertyName("restore_id")]
        public string? RestoreId { get { return this.RestoreIdOption; } set { this.RestoreIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Slug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SlugOption { get; private set; }

        /// <summary>
        /// 仓库路径，例如：groupname/reponame
        /// </summary>
        /// <value>仓库路径，例如：groupname/reponame</value>
        [JsonPropertyName("slug")]
        public string? Slug { get { return this.SlugOption; } set { this.SlugOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SnOption { get; private set; }

        /// <summary>
        /// 创建开发环境的流水线 sn
        /// </summary>
        /// <value>创建开发环境的流水线 sn</value>
        [JsonPropertyName("sn")]
        public string? Sn { get { return this.SnOption; } set { this.SnOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ssh
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SshOption { get; private set; }

        /// <summary>
        /// 开发环境是否支持 ssh 链接
        /// </summary>
        /// <value>开发环境是否支持 ssh 链接</value>
        [JsonPropertyName("ssh")]
        public bool? Ssh { get { return this.SshOption; } set { this.SshOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusOption { get; private set; }

        /// <summary>
        /// 工作区状态，running: 开发环境已启动，closed：开发环境已关闭
        /// </summary>
        /// <value>工作区状态，running: 开发环境已启动，closed：开发环境已关闭</value>
        [JsonPropertyName("status")]
        public string? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of Workspace
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WorkspaceOption { get; private set; }

        /// <summary>
        /// 开发环境默认工作区路径
        /// </summary>
        /// <value>开发环境默认工作区路径</value>
        [JsonPropertyName("workspace")]
        public string? Workspace { get { return this.WorkspaceOption; } set { this.WorkspaceOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoWorkspaceInfo {\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  CommitCount: ").Append(CommitCount).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  FileCount: ").Append(FileCount).Append("\n");
            sb.Append("  FileList: ").Append(FileList).Append("\n");
            sb.Append("  LatestSha: ").Append(LatestSha).Append("\n");
            sb.Append("  PipelineId: ").Append(PipelineId).Append("\n");
            sb.Append("  RemoteStashCount: ").Append(RemoteStashCount).Append("\n");
            sb.Append("  RepoUrl: ").Append(RepoUrl).Append("\n");
            sb.Append("  RestoreId: ").Append(RestoreId).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Sn: ").Append(Sn).Append("\n");
            sb.Append("  Ssh: ").Append(Ssh).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Workspace: ").Append(Workspace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoWorkspaceInfo" />
    /// </summary>
    public class DtoWorkspaceInfoJsonConverter : JsonConverter<DtoWorkspaceInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoWorkspaceInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoWorkspaceInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> branch = default;
            Option<int?> commitCount = default;
            Option<string?> createTime = default;
            Option<int?> duration = default;
            Option<int?> fileCount = default;
            Option<string?> fileList = default;
            Option<string?> latestSha = default;
            Option<string?> pipelineId = default;
            Option<int?> remoteStashCount = default;
            Option<string?> repoUrl = default;
            Option<string?> restoreId = default;
            Option<string?> slug = default;
            Option<string?> sn = default;
            Option<bool?> ssh = default;
            Option<string?> status = default;
            Option<string?> workspace = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "branch":
                            branch = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "commit_count":
                            commitCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "create_time":
                            createTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "duration":
                            duration = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "file_count":
                            fileCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "file_list":
                            fileList = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "latest_sha":
                            latestSha = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pipeline_id":
                            pipelineId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "remote_stash_count":
                            remoteStashCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "repo_url":
                            repoUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "restore_id":
                            restoreId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "slug":
                            slug = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sn":
                            sn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ssh":
                            ssh = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "workspace":
                            workspace = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (branch.IsSet && branch.Value == null)
                throw new ArgumentNullException(nameof(branch), "Property is not nullable for class DtoWorkspaceInfo.");

            if (commitCount.IsSet && commitCount.Value == null)
                throw new ArgumentNullException(nameof(commitCount), "Property is not nullable for class DtoWorkspaceInfo.");

            if (createTime.IsSet && createTime.Value == null)
                throw new ArgumentNullException(nameof(createTime), "Property is not nullable for class DtoWorkspaceInfo.");

            if (duration.IsSet && duration.Value == null)
                throw new ArgumentNullException(nameof(duration), "Property is not nullable for class DtoWorkspaceInfo.");

            if (fileCount.IsSet && fileCount.Value == null)
                throw new ArgumentNullException(nameof(fileCount), "Property is not nullable for class DtoWorkspaceInfo.");

            if (fileList.IsSet && fileList.Value == null)
                throw new ArgumentNullException(nameof(fileList), "Property is not nullable for class DtoWorkspaceInfo.");

            if (latestSha.IsSet && latestSha.Value == null)
                throw new ArgumentNullException(nameof(latestSha), "Property is not nullable for class DtoWorkspaceInfo.");

            if (pipelineId.IsSet && pipelineId.Value == null)
                throw new ArgumentNullException(nameof(pipelineId), "Property is not nullable for class DtoWorkspaceInfo.");

            if (remoteStashCount.IsSet && remoteStashCount.Value == null)
                throw new ArgumentNullException(nameof(remoteStashCount), "Property is not nullable for class DtoWorkspaceInfo.");

            if (repoUrl.IsSet && repoUrl.Value == null)
                throw new ArgumentNullException(nameof(repoUrl), "Property is not nullable for class DtoWorkspaceInfo.");

            if (restoreId.IsSet && restoreId.Value == null)
                throw new ArgumentNullException(nameof(restoreId), "Property is not nullable for class DtoWorkspaceInfo.");

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug), "Property is not nullable for class DtoWorkspaceInfo.");

            if (sn.IsSet && sn.Value == null)
                throw new ArgumentNullException(nameof(sn), "Property is not nullable for class DtoWorkspaceInfo.");

            if (ssh.IsSet && ssh.Value == null)
                throw new ArgumentNullException(nameof(ssh), "Property is not nullable for class DtoWorkspaceInfo.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class DtoWorkspaceInfo.");

            if (workspace.IsSet && workspace.Value == null)
                throw new ArgumentNullException(nameof(workspace), "Property is not nullable for class DtoWorkspaceInfo.");

            return new DtoWorkspaceInfo(branch, commitCount, createTime, duration, fileCount, fileList, latestSha, pipelineId, remoteStashCount, repoUrl, restoreId, slug, sn, ssh, status, workspace);
        }

        /// <summary>
        /// Serializes a <see cref="DtoWorkspaceInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoWorkspaceInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoWorkspaceInfo dtoWorkspaceInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoWorkspaceInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoWorkspaceInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoWorkspaceInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoWorkspaceInfo dtoWorkspaceInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoWorkspaceInfo.BranchOption.IsSet && dtoWorkspaceInfo.Branch == null)
                throw new ArgumentNullException(nameof(dtoWorkspaceInfo.Branch), "Property is required for class DtoWorkspaceInfo.");

            if (dtoWorkspaceInfo.CreateTimeOption.IsSet && dtoWorkspaceInfo.CreateTime == null)
                throw new ArgumentNullException(nameof(dtoWorkspaceInfo.CreateTime), "Property is required for class DtoWorkspaceInfo.");

            if (dtoWorkspaceInfo.FileListOption.IsSet && dtoWorkspaceInfo.FileList == null)
                throw new ArgumentNullException(nameof(dtoWorkspaceInfo.FileList), "Property is required for class DtoWorkspaceInfo.");

            if (dtoWorkspaceInfo.LatestShaOption.IsSet && dtoWorkspaceInfo.LatestSha == null)
                throw new ArgumentNullException(nameof(dtoWorkspaceInfo.LatestSha), "Property is required for class DtoWorkspaceInfo.");

            if (dtoWorkspaceInfo.PipelineIdOption.IsSet && dtoWorkspaceInfo.PipelineId == null)
                throw new ArgumentNullException(nameof(dtoWorkspaceInfo.PipelineId), "Property is required for class DtoWorkspaceInfo.");

            if (dtoWorkspaceInfo.RepoUrlOption.IsSet && dtoWorkspaceInfo.RepoUrl == null)
                throw new ArgumentNullException(nameof(dtoWorkspaceInfo.RepoUrl), "Property is required for class DtoWorkspaceInfo.");

            if (dtoWorkspaceInfo.RestoreIdOption.IsSet && dtoWorkspaceInfo.RestoreId == null)
                throw new ArgumentNullException(nameof(dtoWorkspaceInfo.RestoreId), "Property is required for class DtoWorkspaceInfo.");

            if (dtoWorkspaceInfo.SlugOption.IsSet && dtoWorkspaceInfo.Slug == null)
                throw new ArgumentNullException(nameof(dtoWorkspaceInfo.Slug), "Property is required for class DtoWorkspaceInfo.");

            if (dtoWorkspaceInfo.SnOption.IsSet && dtoWorkspaceInfo.Sn == null)
                throw new ArgumentNullException(nameof(dtoWorkspaceInfo.Sn), "Property is required for class DtoWorkspaceInfo.");

            if (dtoWorkspaceInfo.StatusOption.IsSet && dtoWorkspaceInfo.Status == null)
                throw new ArgumentNullException(nameof(dtoWorkspaceInfo.Status), "Property is required for class DtoWorkspaceInfo.");

            if (dtoWorkspaceInfo.WorkspaceOption.IsSet && dtoWorkspaceInfo.Workspace == null)
                throw new ArgumentNullException(nameof(dtoWorkspaceInfo.Workspace), "Property is required for class DtoWorkspaceInfo.");

            if (dtoWorkspaceInfo.BranchOption.IsSet)
                writer.WriteString("branch", dtoWorkspaceInfo.Branch);

            if (dtoWorkspaceInfo.CommitCountOption.IsSet)
                writer.WriteNumber("commit_count", dtoWorkspaceInfo.CommitCountOption.Value!.Value);

            if (dtoWorkspaceInfo.CreateTimeOption.IsSet)
                writer.WriteString("create_time", dtoWorkspaceInfo.CreateTime);

            if (dtoWorkspaceInfo.DurationOption.IsSet)
                writer.WriteNumber("duration", dtoWorkspaceInfo.DurationOption.Value!.Value);

            if (dtoWorkspaceInfo.FileCountOption.IsSet)
                writer.WriteNumber("file_count", dtoWorkspaceInfo.FileCountOption.Value!.Value);

            if (dtoWorkspaceInfo.FileListOption.IsSet)
                writer.WriteString("file_list", dtoWorkspaceInfo.FileList);

            if (dtoWorkspaceInfo.LatestShaOption.IsSet)
                writer.WriteString("latest_sha", dtoWorkspaceInfo.LatestSha);

            if (dtoWorkspaceInfo.PipelineIdOption.IsSet)
                writer.WriteString("pipeline_id", dtoWorkspaceInfo.PipelineId);

            if (dtoWorkspaceInfo.RemoteStashCountOption.IsSet)
                writer.WriteNumber("remote_stash_count", dtoWorkspaceInfo.RemoteStashCountOption.Value!.Value);

            if (dtoWorkspaceInfo.RepoUrlOption.IsSet)
                writer.WriteString("repo_url", dtoWorkspaceInfo.RepoUrl);

            if (dtoWorkspaceInfo.RestoreIdOption.IsSet)
                writer.WriteString("restore_id", dtoWorkspaceInfo.RestoreId);

            if (dtoWorkspaceInfo.SlugOption.IsSet)
                writer.WriteString("slug", dtoWorkspaceInfo.Slug);

            if (dtoWorkspaceInfo.SnOption.IsSet)
                writer.WriteString("sn", dtoWorkspaceInfo.Sn);

            if (dtoWorkspaceInfo.SshOption.IsSet)
                writer.WriteBoolean("ssh", dtoWorkspaceInfo.SshOption.Value!.Value);

            if (dtoWorkspaceInfo.StatusOption.IsSet)
                writer.WriteString("status", dtoWorkspaceInfo.Status);

            if (dtoWorkspaceInfo.WorkspaceOption.IsSet)
                writer.WriteString("workspace", dtoWorkspaceInfo.Workspace);
        }
    }
}
