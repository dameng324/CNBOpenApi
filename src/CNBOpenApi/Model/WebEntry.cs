// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebEntry
    /// </summary>
    public partial class WebEntry : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebEntry" /> class.
        /// </summary>
        /// <param name="entries">entries</param>
        /// <param name="name">name</param>
        /// <param name="path">path</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public WebEntry(Option<List<WebSubEntry>?> entries = default, Option<string?> name = default, Option<string?> path = default, Option<string?> type = default)
        {
            EntriesOption = entries;
            NameOption = name;
            PathOption = path;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Entries
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebSubEntry>?> EntriesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Entries
        /// </summary>
        [JsonPropertyName("entries")]
        public List<WebSubEntry>? Entries { get { return this.EntriesOption; } set { this.EntriesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebEntry {\n");
            sb.Append("  Entries: ").Append(Entries).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebEntry" />
    /// </summary>
    public class WebEntryJsonConverter : JsonConverter<WebEntry>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebEntry" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebEntry Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<WebSubEntry>?> entries = default;
            Option<string?> name = default;
            Option<string?> path = default;
            Option<string?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "entries":
                            entries = new Option<List<WebSubEntry>?>(JsonSerializer.Deserialize<List<WebSubEntry>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (entries.IsSet && entries.Value == null)
                throw new ArgumentNullException(nameof(entries), "Property is not nullable for class WebEntry.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class WebEntry.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class WebEntry.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class WebEntry.");

            return new WebEntry(entries, name, path, type);
        }

        /// <summary>
        /// Serializes a <see cref="WebEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebEntry webEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webEntry, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebEntry webEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webEntry.EntriesOption.IsSet && webEntry.Entries == null)
                throw new ArgumentNullException(nameof(webEntry.Entries), "Property is required for class WebEntry.");

            if (webEntry.NameOption.IsSet && webEntry.Name == null)
                throw new ArgumentNullException(nameof(webEntry.Name), "Property is required for class WebEntry.");

            if (webEntry.PathOption.IsSet && webEntry.Path == null)
                throw new ArgumentNullException(nameof(webEntry.Path), "Property is required for class WebEntry.");

            if (webEntry.TypeOption.IsSet && webEntry.Type == null)
                throw new ArgumentNullException(nameof(webEntry.Type), "Property is required for class WebEntry.");

            if (webEntry.EntriesOption.IsSet)
            {
                writer.WritePropertyName("entries");
                JsonSerializer.Serialize(writer, webEntry.Entries, jsonSerializerOptions);
            }
            if (webEntry.NameOption.IsSet)
                writer.WriteString("name", webEntry.Name);

            if (webEntry.PathOption.IsSet)
                writer.WriteString("path", webEntry.Path);

            if (webEntry.TypeOption.IsSet)
                writer.WriteString("type", webEntry.Type);
        }
    }
}
