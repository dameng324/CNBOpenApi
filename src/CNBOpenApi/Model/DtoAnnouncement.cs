// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoAnnouncement
    /// </summary>
    public partial class DtoAnnouncement : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoAnnouncement" /> class.
        /// </summary>
        /// <param name="announcementMsg">announcementMsg</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="expiredAt">expiredAt</param>
        /// <param name="id">id</param>
        /// <param name="pinned">pinned</param>
        /// <param name="title">title</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public DtoAnnouncement(Option<string?> announcementMsg = default, Option<string?> createdAt = default, Option<string?> expiredAt = default, Option<string?> id = default, Option<int?> pinned = default, Option<string?> title = default, Option<string?> updatedAt = default)
        {
            AnnouncementMsgOption = announcementMsg;
            CreatedAtOption = createdAt;
            ExpiredAtOption = expiredAt;
            IdOption = id;
            PinnedOption = pinned;
            TitleOption = title;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AnnouncementMsg
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AnnouncementMsgOption { get; private set; }

        /// <summary>
        /// Gets or Sets AnnouncementMsg
        /// </summary>
        [JsonPropertyName("announcement_msg")]
        public string? AnnouncementMsg { get { return this.AnnouncementMsgOption; } set { this.AnnouncementMsgOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpiredAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExpiredAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExpiredAt
        /// </summary>
        [JsonPropertyName("expired_at")]
        public string? ExpiredAt { get { return this.ExpiredAtOption; } set { this.ExpiredAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Pinned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PinnedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Pinned
        /// </summary>
        [JsonPropertyName("pinned")]
        public int? Pinned { get { return this.PinnedOption; } set { this.PinnedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoAnnouncement {\n");
            sb.Append("  AnnouncementMsg: ").Append(AnnouncementMsg).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ExpiredAt: ").Append(ExpiredAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Pinned: ").Append(Pinned).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoAnnouncement" />
    /// </summary>
    public class DtoAnnouncementJsonConverter : JsonConverter<DtoAnnouncement>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoAnnouncement" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoAnnouncement Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> announcementMsg = default;
            Option<string?> createdAt = default;
            Option<string?> expiredAt = default;
            Option<string?> id = default;
            Option<int?> pinned = default;
            Option<string?> title = default;
            Option<string?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "announcement_msg":
                            announcementMsg = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expired_at":
                            expiredAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pinned":
                            pinned = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (announcementMsg.IsSet && announcementMsg.Value == null)
                throw new ArgumentNullException(nameof(announcementMsg), "Property is not nullable for class DtoAnnouncement.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class DtoAnnouncement.");

            if (expiredAt.IsSet && expiredAt.Value == null)
                throw new ArgumentNullException(nameof(expiredAt), "Property is not nullable for class DtoAnnouncement.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DtoAnnouncement.");

            if (pinned.IsSet && pinned.Value == null)
                throw new ArgumentNullException(nameof(pinned), "Property is not nullable for class DtoAnnouncement.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class DtoAnnouncement.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class DtoAnnouncement.");

            return new DtoAnnouncement(announcementMsg, createdAt, expiredAt, id, pinned, title, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="DtoAnnouncement" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoAnnouncement"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoAnnouncement dtoAnnouncement, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoAnnouncement, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoAnnouncement" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoAnnouncement"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoAnnouncement dtoAnnouncement, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoAnnouncement.AnnouncementMsgOption.IsSet && dtoAnnouncement.AnnouncementMsg == null)
                throw new ArgumentNullException(nameof(dtoAnnouncement.AnnouncementMsg), "Property is required for class DtoAnnouncement.");

            if (dtoAnnouncement.CreatedAtOption.IsSet && dtoAnnouncement.CreatedAt == null)
                throw new ArgumentNullException(nameof(dtoAnnouncement.CreatedAt), "Property is required for class DtoAnnouncement.");

            if (dtoAnnouncement.ExpiredAtOption.IsSet && dtoAnnouncement.ExpiredAt == null)
                throw new ArgumentNullException(nameof(dtoAnnouncement.ExpiredAt), "Property is required for class DtoAnnouncement.");

            if (dtoAnnouncement.IdOption.IsSet && dtoAnnouncement.Id == null)
                throw new ArgumentNullException(nameof(dtoAnnouncement.Id), "Property is required for class DtoAnnouncement.");

            if (dtoAnnouncement.TitleOption.IsSet && dtoAnnouncement.Title == null)
                throw new ArgumentNullException(nameof(dtoAnnouncement.Title), "Property is required for class DtoAnnouncement.");

            if (dtoAnnouncement.UpdatedAtOption.IsSet && dtoAnnouncement.UpdatedAt == null)
                throw new ArgumentNullException(nameof(dtoAnnouncement.UpdatedAt), "Property is required for class DtoAnnouncement.");

            if (dtoAnnouncement.AnnouncementMsgOption.IsSet)
                writer.WriteString("announcement_msg", dtoAnnouncement.AnnouncementMsg);

            if (dtoAnnouncement.CreatedAtOption.IsSet)
                writer.WriteString("created_at", dtoAnnouncement.CreatedAt);

            if (dtoAnnouncement.ExpiredAtOption.IsSet)
                writer.WriteString("expired_at", dtoAnnouncement.ExpiredAt);

            if (dtoAnnouncement.IdOption.IsSet)
                writer.WriteString("id", dtoAnnouncement.Id);

            if (dtoAnnouncement.PinnedOption.IsSet)
                writer.WriteNumber("pinned", dtoAnnouncement.PinnedOption.Value!.Value);

            if (dtoAnnouncement.TitleOption.IsSet)
                writer.WriteString("title", dtoAnnouncement.Title);

            if (dtoAnnouncement.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", dtoAnnouncement.UpdatedAt);
        }
    }
}
