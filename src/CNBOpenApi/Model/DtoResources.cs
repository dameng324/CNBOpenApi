// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoResources
    /// </summary>
    public partial class DtoResources : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoResources" /> class.
        /// </summary>
        /// <param name="group">group</param>
        /// <param name="mission">mission</param>
        /// <param name="registry">registry</param>
        /// <param name="repo">repo</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public DtoResources(Option<DtoResourceGroup?> group = default, Option<DtoResourceMission?> mission = default, Option<DtoResourceRegistry?> registry = default, Option<DtoResourceRepo?> repo = default, Option<ConstantSlugType?> type = default)
        {
            GroupOption = group;
            MissionOption = mission;
            RegistryOption = registry;
            RepoOption = repo;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantSlugType?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public ConstantSlugType? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Group
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoResourceGroup?> GroupOption { get; private set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [JsonPropertyName("group")]
        public DtoResourceGroup? Group { get { return this.GroupOption; } set { this.GroupOption = new(value); } }

        /// <summary>
        /// Used to track the state of Mission
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoResourceMission?> MissionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Mission
        /// </summary>
        [JsonPropertyName("mission")]
        public DtoResourceMission? Mission { get { return this.MissionOption; } set { this.MissionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Registry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoResourceRegistry?> RegistryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Registry
        /// </summary>
        [JsonPropertyName("registry")]
        public DtoResourceRegistry? Registry { get { return this.RegistryOption; } set { this.RegistryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Repo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoResourceRepo?> RepoOption { get; private set; }

        /// <summary>
        /// Gets or Sets Repo
        /// </summary>
        [JsonPropertyName("repo")]
        public DtoResourceRepo? Repo { get { return this.RepoOption; } set { this.RepoOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoResources {\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Mission: ").Append(Mission).Append("\n");
            sb.Append("  Registry: ").Append(Registry).Append("\n");
            sb.Append("  Repo: ").Append(Repo).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoResources" />
    /// </summary>
    public class DtoResourcesJsonConverter : JsonConverter<DtoResources>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoResources" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoResources Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DtoResourceGroup?> group = default;
            Option<DtoResourceMission?> mission = default;
            Option<DtoResourceRegistry?> registry = default;
            Option<DtoResourceRepo?> repo = default;
            Option<ConstantSlugType?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "group":
                            group = new Option<DtoResourceGroup?>(JsonSerializer.Deserialize<DtoResourceGroup>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "mission":
                            mission = new Option<DtoResourceMission?>(JsonSerializer.Deserialize<DtoResourceMission>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "registry":
                            registry = new Option<DtoResourceRegistry?>(JsonSerializer.Deserialize<DtoResourceRegistry>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "repo":
                            repo = new Option<DtoResourceRepo?>(JsonSerializer.Deserialize<DtoResourceRepo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ConstantSlugType?>(ConstantSlugTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (group.IsSet && group.Value == null)
                throw new ArgumentNullException(nameof(group), "Property is not nullable for class DtoResources.");

            if (mission.IsSet && mission.Value == null)
                throw new ArgumentNullException(nameof(mission), "Property is not nullable for class DtoResources.");

            if (registry.IsSet && registry.Value == null)
                throw new ArgumentNullException(nameof(registry), "Property is not nullable for class DtoResources.");

            if (repo.IsSet && repo.Value == null)
                throw new ArgumentNullException(nameof(repo), "Property is not nullable for class DtoResources.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class DtoResources.");

            return new DtoResources(group, mission, registry, repo, type);
        }

        /// <summary>
        /// Serializes a <see cref="DtoResources" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoResources"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoResources dtoResources, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoResources, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoResources" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoResources"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoResources dtoResources, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoResources.GroupOption.IsSet && dtoResources.Group == null)
                throw new ArgumentNullException(nameof(dtoResources.Group), "Property is required for class DtoResources.");

            if (dtoResources.MissionOption.IsSet && dtoResources.Mission == null)
                throw new ArgumentNullException(nameof(dtoResources.Mission), "Property is required for class DtoResources.");

            if (dtoResources.RegistryOption.IsSet && dtoResources.Registry == null)
                throw new ArgumentNullException(nameof(dtoResources.Registry), "Property is required for class DtoResources.");

            if (dtoResources.RepoOption.IsSet && dtoResources.Repo == null)
                throw new ArgumentNullException(nameof(dtoResources.Repo), "Property is required for class DtoResources.");

            if (dtoResources.GroupOption.IsSet)
            {
                writer.WritePropertyName("group");
                JsonSerializer.Serialize(writer, dtoResources.Group, jsonSerializerOptions);
            }
            if (dtoResources.MissionOption.IsSet)
            {
                writer.WritePropertyName("mission");
                JsonSerializer.Serialize(writer, dtoResources.Mission, jsonSerializerOptions);
            }
            if (dtoResources.RegistryOption.IsSet)
            {
                writer.WritePropertyName("registry");
                JsonSerializer.Serialize(writer, dtoResources.Registry, jsonSerializerOptions);
            }
            if (dtoResources.RepoOption.IsSet)
            {
                writer.WritePropertyName("repo");
                JsonSerializer.Serialize(writer, dtoResources.Repo, jsonSerializerOptions);
            }
            if (dtoResources.TypeOption.IsSet)
            {
                var typeRawValue = ConstantSlugTypeValueConverter.ToJsonValue(dtoResources.Type!.Value);
                writer.WriteNumber("type", typeRawValue);
            }
        }
    }
}
