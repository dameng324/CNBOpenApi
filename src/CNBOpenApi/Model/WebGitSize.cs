// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebGitSize
    /// </summary>
    public partial class WebGitSize : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebGitSize" /> class.
        /// </summary>
        /// <param name="lfsLimitInKib">lfsLimitInKib</param>
        /// <param name="lfsUsedInKib">lfsUsedInKib</param>
        /// <param name="limitInKib">limitInKib</param>
        /// <param name="logicalLfsUsedInKib">logicalLfsUsedInKib</param>
        /// <param name="physicalLfsUsedInKib">physicalLfsUsedInKib</param>
        /// <param name="usedInKib">usedInKib</param>
        [JsonConstructor]
        public WebGitSize(Option<string?> lfsLimitInKib = default, Option<string?> lfsUsedInKib = default, Option<string?> limitInKib = default, Option<string?> logicalLfsUsedInKib = default, Option<string?> physicalLfsUsedInKib = default, Option<string?> usedInKib = default)
        {
            LfsLimitInKibOption = lfsLimitInKib;
            LfsUsedInKibOption = lfsUsedInKib;
            LimitInKibOption = limitInKib;
            LogicalLfsUsedInKibOption = logicalLfsUsedInKib;
            PhysicalLfsUsedInKibOption = physicalLfsUsedInKib;
            UsedInKibOption = usedInKib;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of LfsLimitInKib
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LfsLimitInKibOption { get; private set; }

        /// <summary>
        /// Gets or Sets LfsLimitInKib
        /// </summary>
        [JsonPropertyName("lfs_limit_in_kib")]
        public string? LfsLimitInKib { get { return this.LfsLimitInKibOption; } set { this.LfsLimitInKibOption = new(value); } }

        /// <summary>
        /// Used to track the state of LfsUsedInKib
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LfsUsedInKibOption { get; private set; }

        /// <summary>
        /// Gets or Sets LfsUsedInKib
        /// </summary>
        [JsonPropertyName("lfs_used_in_kib")]
        public string? LfsUsedInKib { get { return this.LfsUsedInKibOption; } set { this.LfsUsedInKibOption = new(value); } }

        /// <summary>
        /// Used to track the state of LimitInKib
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LimitInKibOption { get; private set; }

        /// <summary>
        /// Gets or Sets LimitInKib
        /// </summary>
        [JsonPropertyName("limit_in_kib")]
        public string? LimitInKib { get { return this.LimitInKibOption; } set { this.LimitInKibOption = new(value); } }

        /// <summary>
        /// Used to track the state of LogicalLfsUsedInKib
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LogicalLfsUsedInKibOption { get; private set; }

        /// <summary>
        /// Gets or Sets LogicalLfsUsedInKib
        /// </summary>
        [JsonPropertyName("logical_lfs_used_in_kib")]
        public string? LogicalLfsUsedInKib { get { return this.LogicalLfsUsedInKibOption; } set { this.LogicalLfsUsedInKibOption = new(value); } }

        /// <summary>
        /// Used to track the state of PhysicalLfsUsedInKib
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhysicalLfsUsedInKibOption { get; private set; }

        /// <summary>
        /// Gets or Sets PhysicalLfsUsedInKib
        /// </summary>
        [JsonPropertyName("physical_lfs_used_in_kib")]
        public string? PhysicalLfsUsedInKib { get { return this.PhysicalLfsUsedInKibOption; } set { this.PhysicalLfsUsedInKibOption = new(value); } }

        /// <summary>
        /// Used to track the state of UsedInKib
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UsedInKibOption { get; private set; }

        /// <summary>
        /// Gets or Sets UsedInKib
        /// </summary>
        [JsonPropertyName("used_in_kib")]
        public string? UsedInKib { get { return this.UsedInKibOption; } set { this.UsedInKibOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebGitSize {\n");
            sb.Append("  LfsLimitInKib: ").Append(LfsLimitInKib).Append("\n");
            sb.Append("  LfsUsedInKib: ").Append(LfsUsedInKib).Append("\n");
            sb.Append("  LimitInKib: ").Append(LimitInKib).Append("\n");
            sb.Append("  LogicalLfsUsedInKib: ").Append(LogicalLfsUsedInKib).Append("\n");
            sb.Append("  PhysicalLfsUsedInKib: ").Append(PhysicalLfsUsedInKib).Append("\n");
            sb.Append("  UsedInKib: ").Append(UsedInKib).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebGitSize" />
    /// </summary>
    public class WebGitSizeJsonConverter : JsonConverter<WebGitSize>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebGitSize" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebGitSize Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> lfsLimitInKib = default;
            Option<string?> lfsUsedInKib = default;
            Option<string?> limitInKib = default;
            Option<string?> logicalLfsUsedInKib = default;
            Option<string?> physicalLfsUsedInKib = default;
            Option<string?> usedInKib = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "lfs_limit_in_kib":
                            lfsLimitInKib = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lfs_used_in_kib":
                            lfsUsedInKib = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "limit_in_kib":
                            limitInKib = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "logical_lfs_used_in_kib":
                            logicalLfsUsedInKib = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "physical_lfs_used_in_kib":
                            physicalLfsUsedInKib = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "used_in_kib":
                            usedInKib = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (lfsLimitInKib.IsSet && lfsLimitInKib.Value == null)
                throw new ArgumentNullException(nameof(lfsLimitInKib), "Property is not nullable for class WebGitSize.");

            if (lfsUsedInKib.IsSet && lfsUsedInKib.Value == null)
                throw new ArgumentNullException(nameof(lfsUsedInKib), "Property is not nullable for class WebGitSize.");

            if (limitInKib.IsSet && limitInKib.Value == null)
                throw new ArgumentNullException(nameof(limitInKib), "Property is not nullable for class WebGitSize.");

            if (logicalLfsUsedInKib.IsSet && logicalLfsUsedInKib.Value == null)
                throw new ArgumentNullException(nameof(logicalLfsUsedInKib), "Property is not nullable for class WebGitSize.");

            if (physicalLfsUsedInKib.IsSet && physicalLfsUsedInKib.Value == null)
                throw new ArgumentNullException(nameof(physicalLfsUsedInKib), "Property is not nullable for class WebGitSize.");

            if (usedInKib.IsSet && usedInKib.Value == null)
                throw new ArgumentNullException(nameof(usedInKib), "Property is not nullable for class WebGitSize.");

            return new WebGitSize(lfsLimitInKib, lfsUsedInKib, limitInKib, logicalLfsUsedInKib, physicalLfsUsedInKib, usedInKib);
        }

        /// <summary>
        /// Serializes a <see cref="WebGitSize" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webGitSize"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebGitSize webGitSize, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webGitSize, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebGitSize" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webGitSize"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebGitSize webGitSize, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webGitSize.LfsLimitInKibOption.IsSet && webGitSize.LfsLimitInKib == null)
                throw new ArgumentNullException(nameof(webGitSize.LfsLimitInKib), "Property is required for class WebGitSize.");

            if (webGitSize.LfsUsedInKibOption.IsSet && webGitSize.LfsUsedInKib == null)
                throw new ArgumentNullException(nameof(webGitSize.LfsUsedInKib), "Property is required for class WebGitSize.");

            if (webGitSize.LimitInKibOption.IsSet && webGitSize.LimitInKib == null)
                throw new ArgumentNullException(nameof(webGitSize.LimitInKib), "Property is required for class WebGitSize.");

            if (webGitSize.LogicalLfsUsedInKibOption.IsSet && webGitSize.LogicalLfsUsedInKib == null)
                throw new ArgumentNullException(nameof(webGitSize.LogicalLfsUsedInKib), "Property is required for class WebGitSize.");

            if (webGitSize.PhysicalLfsUsedInKibOption.IsSet && webGitSize.PhysicalLfsUsedInKib == null)
                throw new ArgumentNullException(nameof(webGitSize.PhysicalLfsUsedInKib), "Property is required for class WebGitSize.");

            if (webGitSize.UsedInKibOption.IsSet && webGitSize.UsedInKib == null)
                throw new ArgumentNullException(nameof(webGitSize.UsedInKib), "Property is required for class WebGitSize.");

            if (webGitSize.LfsLimitInKibOption.IsSet)
                writer.WriteString("lfs_limit_in_kib", webGitSize.LfsLimitInKib);

            if (webGitSize.LfsUsedInKibOption.IsSet)
                writer.WriteString("lfs_used_in_kib", webGitSize.LfsUsedInKib);

            if (webGitSize.LimitInKibOption.IsSet)
                writer.WriteString("limit_in_kib", webGitSize.LimitInKib);

            if (webGitSize.LogicalLfsUsedInKibOption.IsSet)
                writer.WriteString("logical_lfs_used_in_kib", webGitSize.LogicalLfsUsedInKib);

            if (webGitSize.PhysicalLfsUsedInKibOption.IsSet)
                writer.WriteString("physical_lfs_used_in_kib", webGitSize.PhysicalLfsUsedInKib);

            if (webGitSize.UsedInKibOption.IsSet)
                writer.WriteString("used_in_kib", webGitSize.UsedInKib);
        }
    }
}
