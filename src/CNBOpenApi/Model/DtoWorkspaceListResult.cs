// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoWorkspaceListResult
    /// </summary>
    public partial class DtoWorkspaceListResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoWorkspaceListResult" /> class.
        /// </summary>
        /// <param name="hasMore">开发环境状态，running: 开发环境已启动，closed：开发环境已关闭</param>
        /// <param name="list">查询开始时间，格式：YYYY-MM-DD HH:mm:ssZZ，例如：2024-12-01 00:00:00+0800</param>
        /// <param name="pageInfo">查询结束时间，格式：YYYY-MM-DD HH:mm:ssZZ，例如：2024-12-01 00:00:00+0800</param>
        /// <param name="total">分支名，例如：main</param>
        [JsonConstructor]
        public DtoWorkspaceListResult(Option<bool?> hasMore = default, Option<List<DtoWorkspaceInfo>?> list = default, Option<DtoWorkspacePageInfo?> pageInfo = default, Option<int?> total = default)
        {
            HasMoreOption = hasMore;
            ListOption = list;
            PageInfoOption = pageInfo;
            TotalOption = total;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of HasMore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasMoreOption { get; private set; }

        /// <summary>
        /// 开发环境状态，running: 开发环境已启动，closed：开发环境已关闭
        /// </summary>
        /// <value>开发环境状态，running: 开发环境已启动，closed：开发环境已关闭</value>
        [JsonPropertyName("hasMore")]
        public bool? HasMore { get { return this.HasMoreOption; } set { this.HasMoreOption = new(value); } }

        /// <summary>
        /// Used to track the state of List
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoWorkspaceInfo>?> ListOption { get; private set; }

        /// <summary>
        /// 查询开始时间，格式：YYYY-MM-DD HH:mm:ssZZ，例如：2024-12-01 00:00:00+0800
        /// </summary>
        /// <value>查询开始时间，格式：YYYY-MM-DD HH:mm:ssZZ，例如：2024-12-01 00:00:00+0800</value>
        [JsonPropertyName("list")]
        public List<DtoWorkspaceInfo>? List { get { return this.ListOption; } set { this.ListOption = new(value); } }

        /// <summary>
        /// Used to track the state of PageInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoWorkspacePageInfo?> PageInfoOption { get; private set; }

        /// <summary>
        /// 查询结束时间，格式：YYYY-MM-DD HH:mm:ssZZ，例如：2024-12-01 00:00:00+0800
        /// </summary>
        /// <value>查询结束时间，格式：YYYY-MM-DD HH:mm:ssZZ，例如：2024-12-01 00:00:00+0800</value>
        [JsonPropertyName("pageInfo")]
        public DtoWorkspacePageInfo? PageInfo { get { return this.PageInfoOption; } set { this.PageInfoOption = new(value); } }

        /// <summary>
        /// Used to track the state of Total
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalOption { get; private set; }

        /// <summary>
        /// 分支名，例如：main
        /// </summary>
        /// <value>分支名，例如：main</value>
        [JsonPropertyName("total")]
        public int? Total { get { return this.TotalOption; } set { this.TotalOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoWorkspaceListResult {\n");
            sb.Append("  HasMore: ").Append(HasMore).Append("\n");
            sb.Append("  List: ").Append(List).Append("\n");
            sb.Append("  PageInfo: ").Append(PageInfo).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoWorkspaceListResult" />
    /// </summary>
    public class DtoWorkspaceListResultJsonConverter : JsonConverter<DtoWorkspaceListResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoWorkspaceListResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoWorkspaceListResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> hasMore = default;
            Option<List<DtoWorkspaceInfo>?> list = default;
            Option<DtoWorkspacePageInfo?> pageInfo = default;
            Option<int?> total = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "hasMore":
                            hasMore = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "list":
                            list = new Option<List<DtoWorkspaceInfo>?>(JsonSerializer.Deserialize<List<DtoWorkspaceInfo>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "pageInfo":
                            pageInfo = new Option<DtoWorkspacePageInfo?>(JsonSerializer.Deserialize<DtoWorkspacePageInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "total":
                            total = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (hasMore.IsSet && hasMore.Value == null)
                throw new ArgumentNullException(nameof(hasMore), "Property is not nullable for class DtoWorkspaceListResult.");

            if (list.IsSet && list.Value == null)
                throw new ArgumentNullException(nameof(list), "Property is not nullable for class DtoWorkspaceListResult.");

            if (pageInfo.IsSet && pageInfo.Value == null)
                throw new ArgumentNullException(nameof(pageInfo), "Property is not nullable for class DtoWorkspaceListResult.");

            if (total.IsSet && total.Value == null)
                throw new ArgumentNullException(nameof(total), "Property is not nullable for class DtoWorkspaceListResult.");

            return new DtoWorkspaceListResult(hasMore, list, pageInfo, total);
        }

        /// <summary>
        /// Serializes a <see cref="DtoWorkspaceListResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoWorkspaceListResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoWorkspaceListResult dtoWorkspaceListResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoWorkspaceListResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoWorkspaceListResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoWorkspaceListResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoWorkspaceListResult dtoWorkspaceListResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoWorkspaceListResult.ListOption.IsSet && dtoWorkspaceListResult.List == null)
                throw new ArgumentNullException(nameof(dtoWorkspaceListResult.List), "Property is required for class DtoWorkspaceListResult.");

            if (dtoWorkspaceListResult.PageInfoOption.IsSet && dtoWorkspaceListResult.PageInfo == null)
                throw new ArgumentNullException(nameof(dtoWorkspaceListResult.PageInfo), "Property is required for class DtoWorkspaceListResult.");

            if (dtoWorkspaceListResult.HasMoreOption.IsSet)
                writer.WriteBoolean("hasMore", dtoWorkspaceListResult.HasMoreOption.Value!.Value);

            if (dtoWorkspaceListResult.ListOption.IsSet)
            {
                writer.WritePropertyName("list");
                JsonSerializer.Serialize(writer, dtoWorkspaceListResult.List, jsonSerializerOptions);
            }
            if (dtoWorkspaceListResult.PageInfoOption.IsSet)
            {
                writer.WritePropertyName("pageInfo");
                JsonSerializer.Serialize(writer, dtoWorkspaceListResult.PageInfo, jsonSerializerOptions);
            }
            if (dtoWorkspaceListResult.TotalOption.IsSet)
                writer.WriteNumber("total", dtoWorkspaceListResult.TotalOption.Value!.Value);
        }
    }
}
