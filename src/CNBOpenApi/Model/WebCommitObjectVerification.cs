// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebCommitObjectVerification
    /// </summary>
    public partial class WebCommitObjectVerification : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebCommitObjectVerification" /> class.
        /// </summary>
        /// <param name="payload">payload</param>
        /// <param name="reason">reason</param>
        /// <param name="signature">signature</param>
        /// <param name="verified">verified</param>
        [JsonConstructor]
        public WebCommitObjectVerification(Option<string?> payload = default, Option<string?> reason = default, Option<string?> signature = default, Option<bool?> verified = default)
        {
            PayloadOption = payload;
            ReasonOption = reason;
            SignatureOption = signature;
            VerifiedOption = verified;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Payload
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PayloadOption { get; private set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [JsonPropertyName("payload")]
        public string? Payload { get { return this.PayloadOption; } set { this.PayloadOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReasonOption { get; private set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [JsonPropertyName("reason")]
        public string? Reason { get { return this.ReasonOption; } set { this.ReasonOption = new(value); } }

        /// <summary>
        /// Used to track the state of Signature
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SignatureOption { get; private set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [JsonPropertyName("signature")]
        public string? Signature { get { return this.SignatureOption; } set { this.SignatureOption = new(value); } }

        /// <summary>
        /// Used to track the state of Verified
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> VerifiedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Verified
        /// </summary>
        [JsonPropertyName("verified")]
        public bool? Verified { get { return this.VerifiedOption; } set { this.VerifiedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebCommitObjectVerification {\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebCommitObjectVerification" />
    /// </summary>
    public class WebCommitObjectVerificationJsonConverter : JsonConverter<WebCommitObjectVerification>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebCommitObjectVerification" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebCommitObjectVerification Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> payload = default;
            Option<string?> reason = default;
            Option<string?> signature = default;
            Option<bool?> verified = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "payload":
                            payload = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "reason":
                            reason = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "signature":
                            signature = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "verified":
                            verified = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (payload.IsSet && payload.Value == null)
                throw new ArgumentNullException(nameof(payload), "Property is not nullable for class WebCommitObjectVerification.");

            if (reason.IsSet && reason.Value == null)
                throw new ArgumentNullException(nameof(reason), "Property is not nullable for class WebCommitObjectVerification.");

            if (signature.IsSet && signature.Value == null)
                throw new ArgumentNullException(nameof(signature), "Property is not nullable for class WebCommitObjectVerification.");

            if (verified.IsSet && verified.Value == null)
                throw new ArgumentNullException(nameof(verified), "Property is not nullable for class WebCommitObjectVerification.");

            return new WebCommitObjectVerification(payload, reason, signature, verified);
        }

        /// <summary>
        /// Serializes a <see cref="WebCommitObjectVerification" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webCommitObjectVerification"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebCommitObjectVerification webCommitObjectVerification, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webCommitObjectVerification, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebCommitObjectVerification" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webCommitObjectVerification"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebCommitObjectVerification webCommitObjectVerification, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webCommitObjectVerification.PayloadOption.IsSet && webCommitObjectVerification.Payload == null)
                throw new ArgumentNullException(nameof(webCommitObjectVerification.Payload), "Property is required for class WebCommitObjectVerification.");

            if (webCommitObjectVerification.ReasonOption.IsSet && webCommitObjectVerification.Reason == null)
                throw new ArgumentNullException(nameof(webCommitObjectVerification.Reason), "Property is required for class WebCommitObjectVerification.");

            if (webCommitObjectVerification.SignatureOption.IsSet && webCommitObjectVerification.Signature == null)
                throw new ArgumentNullException(nameof(webCommitObjectVerification.Signature), "Property is required for class WebCommitObjectVerification.");

            if (webCommitObjectVerification.PayloadOption.IsSet)
                writer.WriteString("payload", webCommitObjectVerification.Payload);

            if (webCommitObjectVerification.ReasonOption.IsSet)
                writer.WriteString("reason", webCommitObjectVerification.Reason);

            if (webCommitObjectVerification.SignatureOption.IsSet)
                writer.WriteString("signature", webCommitObjectVerification.Signature);

            if (webCommitObjectVerification.VerifiedOption.IsSet)
                writer.WriteBoolean("verified", webCommitObjectVerification.VerifiedOption.Value!.Value);
        }
    }
}
