// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebapiInitRepositoryForm
    /// </summary>
    public partial class WebapiInitRepositoryForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebapiInitRepositoryForm" /> class.
        /// </summary>
        /// <param name="gitignoreTemplate">gitignoreTemplate</param>
        /// <param name="isAutoReadme">isAutoReadme</param>
        /// <param name="licenseTemplate">licenseTemplate</param>
        [JsonConstructor]
        public WebapiInitRepositoryForm(Option<string?> gitignoreTemplate = default, Option<bool?> isAutoReadme = default, Option<string?> licenseTemplate = default)
        {
            GitignoreTemplateOption = gitignoreTemplate;
            IsAutoReadmeOption = isAutoReadme;
            LicenseTemplateOption = licenseTemplate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of GitignoreTemplate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GitignoreTemplateOption { get; private set; }

        /// <summary>
        /// Gets or Sets GitignoreTemplate
        /// </summary>
        [JsonPropertyName("gitignore_template")]
        public string? GitignoreTemplate { get { return this.GitignoreTemplateOption; } set { this.GitignoreTemplateOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsAutoReadme
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsAutoReadmeOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsAutoReadme
        /// </summary>
        [JsonPropertyName("is_auto_readme")]
        public bool? IsAutoReadme { get { return this.IsAutoReadmeOption; } set { this.IsAutoReadmeOption = new(value); } }

        /// <summary>
        /// Used to track the state of LicenseTemplate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LicenseTemplateOption { get; private set; }

        /// <summary>
        /// Gets or Sets LicenseTemplate
        /// </summary>
        [JsonPropertyName("license_template")]
        public string? LicenseTemplate { get { return this.LicenseTemplateOption; } set { this.LicenseTemplateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebapiInitRepositoryForm {\n");
            sb.Append("  GitignoreTemplate: ").Append(GitignoreTemplate).Append("\n");
            sb.Append("  IsAutoReadme: ").Append(IsAutoReadme).Append("\n");
            sb.Append("  LicenseTemplate: ").Append(LicenseTemplate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebapiInitRepositoryForm" />
    /// </summary>
    public class WebapiInitRepositoryFormJsonConverter : JsonConverter<WebapiInitRepositoryForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebapiInitRepositoryForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebapiInitRepositoryForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> gitignoreTemplate = default;
            Option<bool?> isAutoReadme = default;
            Option<string?> licenseTemplate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "gitignore_template":
                            gitignoreTemplate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_auto_readme":
                            isAutoReadme = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "license_template":
                            licenseTemplate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (gitignoreTemplate.IsSet && gitignoreTemplate.Value == null)
                throw new ArgumentNullException(nameof(gitignoreTemplate), "Property is not nullable for class WebapiInitRepositoryForm.");

            if (isAutoReadme.IsSet && isAutoReadme.Value == null)
                throw new ArgumentNullException(nameof(isAutoReadme), "Property is not nullable for class WebapiInitRepositoryForm.");

            if (licenseTemplate.IsSet && licenseTemplate.Value == null)
                throw new ArgumentNullException(nameof(licenseTemplate), "Property is not nullable for class WebapiInitRepositoryForm.");

            return new WebapiInitRepositoryForm(gitignoreTemplate, isAutoReadme, licenseTemplate);
        }

        /// <summary>
        /// Serializes a <see cref="WebapiInitRepositoryForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webapiInitRepositoryForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebapiInitRepositoryForm webapiInitRepositoryForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webapiInitRepositoryForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebapiInitRepositoryForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webapiInitRepositoryForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebapiInitRepositoryForm webapiInitRepositoryForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webapiInitRepositoryForm.GitignoreTemplateOption.IsSet && webapiInitRepositoryForm.GitignoreTemplate == null)
                throw new ArgumentNullException(nameof(webapiInitRepositoryForm.GitignoreTemplate), "Property is required for class WebapiInitRepositoryForm.");

            if (webapiInitRepositoryForm.LicenseTemplateOption.IsSet && webapiInitRepositoryForm.LicenseTemplate == null)
                throw new ArgumentNullException(nameof(webapiInitRepositoryForm.LicenseTemplate), "Property is required for class WebapiInitRepositoryForm.");

            if (webapiInitRepositoryForm.GitignoreTemplateOption.IsSet)
                writer.WriteString("gitignore_template", webapiInitRepositoryForm.GitignoreTemplate);

            if (webapiInitRepositoryForm.IsAutoReadmeOption.IsSet)
                writer.WriteBoolean("is_auto_readme", webapiInitRepositoryForm.IsAutoReadmeOption.Value!.Value);

            if (webapiInitRepositoryForm.LicenseTemplateOption.IsSet)
                writer.WriteString("license_template", webapiInitRepositoryForm.LicenseTemplate);
        }
    }
}
