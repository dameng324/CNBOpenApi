// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoStarUser
    /// </summary>
    public partial class DtoStarUser : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoStarUser" /> class.
        /// </summary>
        /// <param name="avatar">avatar</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="email">email</param>
        /// <param name="freeze">freeze</param>
        /// <param name="id">id</param>
        /// <param name="isFollow">isFollow</param>
        /// <param name="nickname">nickname</param>
        /// <param name="staredAt">staredAt</param>
        /// <param name="type">type</param>
        /// <param name="username">username</param>
        /// <param name="verified">认证类型</param>
        /// <param name="verifiedExpireIn">认证过期时间</param>
        [JsonConstructor]
        public DtoStarUser(Option<string?> avatar = default, Option<string?> createdAt = default, Option<string?> email = default, Option<bool?> freeze = default, Option<string?> id = default, Option<bool?> isFollow = default, Option<string?> nickname = default, Option<string?> staredAt = default, Option<ConstantUserType?> type = default, Option<string?> username = default, Option<int?> verified = default, Option<string?> verifiedExpireIn = default)
        {
            AvatarOption = avatar;
            CreatedAtOption = createdAt;
            EmailOption = email;
            FreezeOption = freeze;
            IdOption = id;
            IsFollowOption = isFollow;
            NicknameOption = nickname;
            StaredAtOption = staredAt;
            TypeOption = type;
            UsernameOption = username;
            VerifiedOption = verified;
            VerifiedExpireInOption = verifiedExpireIn;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantUserType?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public ConstantUserType? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Avatar
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AvatarOption { get; private set; }

        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        [JsonPropertyName("avatar")]
        public string? Avatar { get { return this.AvatarOption; } set { this.AvatarOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of Freeze
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FreezeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Freeze
        /// </summary>
        [JsonPropertyName("freeze")]
        public bool? Freeze { get { return this.FreezeOption; } set { this.FreezeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsFollow
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsFollowOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsFollow
        /// </summary>
        [JsonPropertyName("is_follow")]
        public bool? IsFollow { get { return this.IsFollowOption; } set { this.IsFollowOption = new(value); } }

        /// <summary>
        /// Used to track the state of Nickname
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NicknameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [JsonPropertyName("nickname")]
        public string? Nickname { get { return this.NicknameOption; } set { this.NicknameOption = new(value); } }

        /// <summary>
        /// Used to track the state of StaredAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StaredAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets StaredAt
        /// </summary>
        [JsonPropertyName("stared_at")]
        public string? StaredAt { get { return this.StaredAtOption; } set { this.StaredAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Username
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UsernameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [JsonPropertyName("username")]
        public string? Username { get { return this.UsernameOption; } set { this.UsernameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Verified
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VerifiedOption { get; private set; }

        /// <summary>
        /// 认证类型
        /// </summary>
        /// <value>认证类型</value>
        [JsonPropertyName("verified")]
        public int? Verified { get { return this.VerifiedOption; } set { this.VerifiedOption = new(value); } }

        /// <summary>
        /// Used to track the state of VerifiedExpireIn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VerifiedExpireInOption { get; private set; }

        /// <summary>
        /// 认证过期时间
        /// </summary>
        /// <value>认证过期时间</value>
        [JsonPropertyName("verified_expire_in")]
        public string? VerifiedExpireIn { get { return this.VerifiedExpireInOption; } set { this.VerifiedExpireInOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoStarUser {\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Freeze: ").Append(Freeze).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsFollow: ").Append(IsFollow).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  StaredAt: ").Append(StaredAt).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  VerifiedExpireIn: ").Append(VerifiedExpireIn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoStarUser" />
    /// </summary>
    public class DtoStarUserJsonConverter : JsonConverter<DtoStarUser>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoStarUser" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoStarUser Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> avatar = default;
            Option<string?> createdAt = default;
            Option<string?> email = default;
            Option<bool?> freeze = default;
            Option<string?> id = default;
            Option<bool?> isFollow = default;
            Option<string?> nickname = default;
            Option<string?> staredAt = default;
            Option<ConstantUserType?> type = default;
            Option<string?> username = default;
            Option<int?> verified = default;
            Option<string?> verifiedExpireIn = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "avatar":
                            avatar = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "freeze":
                            freeze = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_follow":
                            isFollow = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "nickname":
                            nickname = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "stared_at":
                            staredAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ConstantUserType?>(ConstantUserTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "username":
                            username = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "verified":
                            verified = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "verified_expire_in":
                            verifiedExpireIn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (avatar.IsSet && avatar.Value == null)
                throw new ArgumentNullException(nameof(avatar), "Property is not nullable for class DtoStarUser.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class DtoStarUser.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class DtoStarUser.");

            if (freeze.IsSet && freeze.Value == null)
                throw new ArgumentNullException(nameof(freeze), "Property is not nullable for class DtoStarUser.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DtoStarUser.");

            if (isFollow.IsSet && isFollow.Value == null)
                throw new ArgumentNullException(nameof(isFollow), "Property is not nullable for class DtoStarUser.");

            if (nickname.IsSet && nickname.Value == null)
                throw new ArgumentNullException(nameof(nickname), "Property is not nullable for class DtoStarUser.");

            if (staredAt.IsSet && staredAt.Value == null)
                throw new ArgumentNullException(nameof(staredAt), "Property is not nullable for class DtoStarUser.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class DtoStarUser.");

            if (username.IsSet && username.Value == null)
                throw new ArgumentNullException(nameof(username), "Property is not nullable for class DtoStarUser.");

            if (verified.IsSet && verified.Value == null)
                throw new ArgumentNullException(nameof(verified), "Property is not nullable for class DtoStarUser.");

            if (verifiedExpireIn.IsSet && verifiedExpireIn.Value == null)
                throw new ArgumentNullException(nameof(verifiedExpireIn), "Property is not nullable for class DtoStarUser.");

            return new DtoStarUser(avatar, createdAt, email, freeze, id, isFollow, nickname, staredAt, type, username, verified, verifiedExpireIn);
        }

        /// <summary>
        /// Serializes a <see cref="DtoStarUser" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoStarUser"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoStarUser dtoStarUser, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoStarUser, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoStarUser" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoStarUser"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoStarUser dtoStarUser, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoStarUser.AvatarOption.IsSet && dtoStarUser.Avatar == null)
                throw new ArgumentNullException(nameof(dtoStarUser.Avatar), "Property is required for class DtoStarUser.");

            if (dtoStarUser.CreatedAtOption.IsSet && dtoStarUser.CreatedAt == null)
                throw new ArgumentNullException(nameof(dtoStarUser.CreatedAt), "Property is required for class DtoStarUser.");

            if (dtoStarUser.EmailOption.IsSet && dtoStarUser.Email == null)
                throw new ArgumentNullException(nameof(dtoStarUser.Email), "Property is required for class DtoStarUser.");

            if (dtoStarUser.IdOption.IsSet && dtoStarUser.Id == null)
                throw new ArgumentNullException(nameof(dtoStarUser.Id), "Property is required for class DtoStarUser.");

            if (dtoStarUser.NicknameOption.IsSet && dtoStarUser.Nickname == null)
                throw new ArgumentNullException(nameof(dtoStarUser.Nickname), "Property is required for class DtoStarUser.");

            if (dtoStarUser.StaredAtOption.IsSet && dtoStarUser.StaredAt == null)
                throw new ArgumentNullException(nameof(dtoStarUser.StaredAt), "Property is required for class DtoStarUser.");

            if (dtoStarUser.UsernameOption.IsSet && dtoStarUser.Username == null)
                throw new ArgumentNullException(nameof(dtoStarUser.Username), "Property is required for class DtoStarUser.");

            if (dtoStarUser.VerifiedExpireInOption.IsSet && dtoStarUser.VerifiedExpireIn == null)
                throw new ArgumentNullException(nameof(dtoStarUser.VerifiedExpireIn), "Property is required for class DtoStarUser.");

            if (dtoStarUser.AvatarOption.IsSet)
                writer.WriteString("avatar", dtoStarUser.Avatar);

            if (dtoStarUser.CreatedAtOption.IsSet)
                writer.WriteString("created_at", dtoStarUser.CreatedAt);

            if (dtoStarUser.EmailOption.IsSet)
                writer.WriteString("email", dtoStarUser.Email);

            if (dtoStarUser.FreezeOption.IsSet)
                writer.WriteBoolean("freeze", dtoStarUser.FreezeOption.Value!.Value);

            if (dtoStarUser.IdOption.IsSet)
                writer.WriteString("id", dtoStarUser.Id);

            if (dtoStarUser.IsFollowOption.IsSet)
                writer.WriteBoolean("is_follow", dtoStarUser.IsFollowOption.Value!.Value);

            if (dtoStarUser.NicknameOption.IsSet)
                writer.WriteString("nickname", dtoStarUser.Nickname);

            if (dtoStarUser.StaredAtOption.IsSet)
                writer.WriteString("stared_at", dtoStarUser.StaredAt);

            if (dtoStarUser.TypeOption.IsSet)
            {
                var typeRawValue = ConstantUserTypeValueConverter.ToJsonValue(dtoStarUser.Type!.Value);
                writer.WriteNumber("type", typeRawValue);
            }
            if (dtoStarUser.UsernameOption.IsSet)
                writer.WriteString("username", dtoStarUser.Username);

            if (dtoStarUser.VerifiedOption.IsSet)
                writer.WriteNumber("verified", dtoStarUser.VerifiedOption.Value!.Value);

            if (dtoStarUser.VerifiedExpireInOption.IsSet)
                writer.WriteString("verified_expire_in", dtoStarUser.VerifiedExpireIn);
        }
    }
}
