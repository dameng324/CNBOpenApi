// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebFileContent
    /// </summary>
    public partial class WebFileContent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebFileContent" /> class.
        /// </summary>
        /// <param name="branchCount">branchCount</param>
        /// <param name="cnbSettings">cnbSettings</param>
        /// <param name="commitCount">commitCount</param>
        /// <param name="commitCountExceeded">commitCountExceeded</param>
        /// <param name="content">content</param>
        /// <param name="encoding">encoding</param>
        /// <param name="fileSizeExceeded">fileSizeExceeded</param>
        /// <param name="fileSizeLimit">fileSizeLimit</param>
        /// <param name="fileStat">fileStat</param>
        /// <param name="initialized">initialized</param>
        /// <param name="isLfs">isLfs</param>
        /// <param name="isProtected">如果当前访问的是分支，那么表示是否是保护分支</param>
        /// <param name="lastCommit">lastCommit</param>
        /// <param name="lfsHashAlgorithm">lfsHashAlgorithm</param>
        /// <param name="lfsOid">lfsOid</param>
        /// <param name="lfsSizeInByte">lfsSizeInByte</param>
        /// <param name="name">name</param>
        /// <param name="path">path</param>
        /// <param name="repository">repository</param>
        /// <param name="size">size</param>
        /// <param name="tagCount">tagCount</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public WebFileContent(Option<int?> branchCount = default, Option<WebPreloadFile?> cnbSettings = default, Option<int?> commitCount = default, Option<bool?> commitCountExceeded = default, Option<string?> content = default, Option<string?> encoding = default, Option<bool?> fileSizeExceeded = default, Option<int?> fileSizeLimit = default, Option<WebFileStat?> fileStat = default, Option<bool?> initialized = default, Option<bool?> isLfs = default, Option<bool?> isProtected = default, Option<WebCommit?> lastCommit = default, Option<string?> lfsHashAlgorithm = default, Option<string?> lfsOid = default, Option<string?> lfsSizeInByte = default, Option<string?> name = default, Option<string?> path = default, Option<WebRepository?> repository = default, Option<int?> size = default, Option<int?> tagCount = default, Option<string?> type = default)
        {
            BranchCountOption = branchCount;
            CnbSettingsOption = cnbSettings;
            CommitCountOption = commitCount;
            CommitCountExceededOption = commitCountExceeded;
            ContentOption = content;
            EncodingOption = encoding;
            FileSizeExceededOption = fileSizeExceeded;
            FileSizeLimitOption = fileSizeLimit;
            FileStatOption = fileStat;
            InitializedOption = initialized;
            IsLfsOption = isLfs;
            IsProtectedOption = isProtected;
            LastCommitOption = lastCommit;
            LfsHashAlgorithmOption = lfsHashAlgorithm;
            LfsOidOption = lfsOid;
            LfsSizeInByteOption = lfsSizeInByte;
            NameOption = name;
            PathOption = path;
            RepositoryOption = repository;
            SizeOption = size;
            TagCountOption = tagCount;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BranchCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BranchCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets BranchCount
        /// </summary>
        [JsonPropertyName("branch_count")]
        public int? BranchCount { get { return this.BranchCountOption; } set { this.BranchCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CnbSettings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebPreloadFile?> CnbSettingsOption { get; private set; }

        /// <summary>
        /// Gets or Sets CnbSettings
        /// </summary>
        [JsonPropertyName("cnb_settings")]
        public WebPreloadFile? CnbSettings { get { return this.CnbSettingsOption; } set { this.CnbSettingsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommitCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CommitCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommitCount
        /// </summary>
        [JsonPropertyName("commit_count")]
        public int? CommitCount { get { return this.CommitCountOption; } set { this.CommitCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommitCountExceeded
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CommitCountExceededOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommitCountExceeded
        /// </summary>
        [JsonPropertyName("commit_count_exceeded")]
        public bool? CommitCountExceeded { get { return this.CommitCountExceededOption; } set { this.CommitCountExceededOption = new(value); } }

        /// <summary>
        /// Used to track the state of Content
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [JsonPropertyName("content")]
        public string? Content { get { return this.ContentOption; } set { this.ContentOption = new(value); } }

        /// <summary>
        /// Used to track the state of Encoding
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EncodingOption { get; private set; }

        /// <summary>
        /// Gets or Sets Encoding
        /// </summary>
        [JsonPropertyName("encoding")]
        public string? Encoding { get { return this.EncodingOption; } set { this.EncodingOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileSizeExceeded
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FileSizeExceededOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileSizeExceeded
        /// </summary>
        [JsonPropertyName("file_size_exceeded")]
        public bool? FileSizeExceeded { get { return this.FileSizeExceededOption; } set { this.FileSizeExceededOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileSizeLimit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FileSizeLimitOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileSizeLimit
        /// </summary>
        [JsonPropertyName("file_size_limit")]
        public int? FileSizeLimit { get { return this.FileSizeLimitOption; } set { this.FileSizeLimitOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileStat
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebFileStat?> FileStatOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileStat
        /// </summary>
        [JsonPropertyName("file_stat")]
        public WebFileStat? FileStat { get { return this.FileStatOption; } set { this.FileStatOption = new(value); } }

        /// <summary>
        /// Used to track the state of Initialized
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> InitializedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Initialized
        /// </summary>
        [JsonPropertyName("initialized")]
        public bool? Initialized { get { return this.InitializedOption; } set { this.InitializedOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsLfs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsLfsOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsLfs
        /// </summary>
        [JsonPropertyName("is_lfs")]
        public bool? IsLfs { get { return this.IsLfsOption; } set { this.IsLfsOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsProtected
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsProtectedOption { get; private set; }

        /// <summary>
        /// 如果当前访问的是分支，那么表示是否是保护分支
        /// </summary>
        /// <value>如果当前访问的是分支，那么表示是否是保护分支</value>
        [JsonPropertyName("is_protected")]
        public bool? IsProtected { get { return this.IsProtectedOption; } set { this.IsProtectedOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastCommit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebCommit?> LastCommitOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastCommit
        /// </summary>
        [JsonPropertyName("last_commit")]
        public WebCommit? LastCommit { get { return this.LastCommitOption; } set { this.LastCommitOption = new(value); } }

        /// <summary>
        /// Used to track the state of LfsHashAlgorithm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LfsHashAlgorithmOption { get; private set; }

        /// <summary>
        /// Gets or Sets LfsHashAlgorithm
        /// </summary>
        [JsonPropertyName("lfs_hash_algorithm")]
        public string? LfsHashAlgorithm { get { return this.LfsHashAlgorithmOption; } set { this.LfsHashAlgorithmOption = new(value); } }

        /// <summary>
        /// Used to track the state of LfsOid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LfsOidOption { get; private set; }

        /// <summary>
        /// Gets or Sets LfsOid
        /// </summary>
        [JsonPropertyName("lfs_oid")]
        public string? LfsOid { get { return this.LfsOidOption; } set { this.LfsOidOption = new(value); } }

        /// <summary>
        /// Used to track the state of LfsSizeInByte
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LfsSizeInByteOption { get; private set; }

        /// <summary>
        /// Gets or Sets LfsSizeInByte
        /// </summary>
        [JsonPropertyName("lfs_size_in_byte")]
        public string? LfsSizeInByte { get { return this.LfsSizeInByteOption; } set { this.LfsSizeInByteOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of Repository
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebRepository?> RepositoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Repository
        /// </summary>
        [JsonPropertyName("repository")]
        public WebRepository? Repository { get { return this.RepositoryOption; } set { this.RepositoryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public int? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of TagCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TagCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets TagCount
        /// </summary>
        [JsonPropertyName("tag_count")]
        public int? TagCount { get { return this.TagCountOption; } set { this.TagCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebFileContent {\n");
            sb.Append("  BranchCount: ").Append(BranchCount).Append("\n");
            sb.Append("  CnbSettings: ").Append(CnbSettings).Append("\n");
            sb.Append("  CommitCount: ").Append(CommitCount).Append("\n");
            sb.Append("  CommitCountExceeded: ").Append(CommitCountExceeded).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  FileSizeExceeded: ").Append(FileSizeExceeded).Append("\n");
            sb.Append("  FileSizeLimit: ").Append(FileSizeLimit).Append("\n");
            sb.Append("  FileStat: ").Append(FileStat).Append("\n");
            sb.Append("  Initialized: ").Append(Initialized).Append("\n");
            sb.Append("  IsLfs: ").Append(IsLfs).Append("\n");
            sb.Append("  IsProtected: ").Append(IsProtected).Append("\n");
            sb.Append("  LastCommit: ").Append(LastCommit).Append("\n");
            sb.Append("  LfsHashAlgorithm: ").Append(LfsHashAlgorithm).Append("\n");
            sb.Append("  LfsOid: ").Append(LfsOid).Append("\n");
            sb.Append("  LfsSizeInByte: ").Append(LfsSizeInByte).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Repository: ").Append(Repository).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  TagCount: ").Append(TagCount).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebFileContent" />
    /// </summary>
    public class WebFileContentJsonConverter : JsonConverter<WebFileContent>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebFileContent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebFileContent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> branchCount = default;
            Option<WebPreloadFile?> cnbSettings = default;
            Option<int?> commitCount = default;
            Option<bool?> commitCountExceeded = default;
            Option<string?> content = default;
            Option<string?> encoding = default;
            Option<bool?> fileSizeExceeded = default;
            Option<int?> fileSizeLimit = default;
            Option<WebFileStat?> fileStat = default;
            Option<bool?> initialized = default;
            Option<bool?> isLfs = default;
            Option<bool?> isProtected = default;
            Option<WebCommit?> lastCommit = default;
            Option<string?> lfsHashAlgorithm = default;
            Option<string?> lfsOid = default;
            Option<string?> lfsSizeInByte = default;
            Option<string?> name = default;
            Option<string?> path = default;
            Option<WebRepository?> repository = default;
            Option<int?> size = default;
            Option<int?> tagCount = default;
            Option<string?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "branch_count":
                            branchCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "cnb_settings":
                            cnbSettings = new Option<WebPreloadFile?>(JsonSerializer.Deserialize<WebPreloadFile>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "commit_count":
                            commitCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "commit_count_exceeded":
                            commitCountExceeded = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "encoding":
                            encoding = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "file_size_exceeded":
                            fileSizeExceeded = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "file_size_limit":
                            fileSizeLimit = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "file_stat":
                            fileStat = new Option<WebFileStat?>(JsonSerializer.Deserialize<WebFileStat>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "initialized":
                            initialized = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_lfs":
                            isLfs = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_protected":
                            isProtected = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "last_commit":
                            lastCommit = new Option<WebCommit?>(JsonSerializer.Deserialize<WebCommit>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "lfs_hash_algorithm":
                            lfsHashAlgorithm = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lfs_oid":
                            lfsOid = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lfs_size_in_byte":
                            lfsSizeInByte = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "repository":
                            repository = new Option<WebRepository?>(JsonSerializer.Deserialize<WebRepository>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "tag_count":
                            tagCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (branchCount.IsSet && branchCount.Value == null)
                throw new ArgumentNullException(nameof(branchCount), "Property is not nullable for class WebFileContent.");

            if (cnbSettings.IsSet && cnbSettings.Value == null)
                throw new ArgumentNullException(nameof(cnbSettings), "Property is not nullable for class WebFileContent.");

            if (commitCount.IsSet && commitCount.Value == null)
                throw new ArgumentNullException(nameof(commitCount), "Property is not nullable for class WebFileContent.");

            if (commitCountExceeded.IsSet && commitCountExceeded.Value == null)
                throw new ArgumentNullException(nameof(commitCountExceeded), "Property is not nullable for class WebFileContent.");

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class WebFileContent.");

            if (encoding.IsSet && encoding.Value == null)
                throw new ArgumentNullException(nameof(encoding), "Property is not nullable for class WebFileContent.");

            if (fileSizeExceeded.IsSet && fileSizeExceeded.Value == null)
                throw new ArgumentNullException(nameof(fileSizeExceeded), "Property is not nullable for class WebFileContent.");

            if (fileSizeLimit.IsSet && fileSizeLimit.Value == null)
                throw new ArgumentNullException(nameof(fileSizeLimit), "Property is not nullable for class WebFileContent.");

            if (fileStat.IsSet && fileStat.Value == null)
                throw new ArgumentNullException(nameof(fileStat), "Property is not nullable for class WebFileContent.");

            if (initialized.IsSet && initialized.Value == null)
                throw new ArgumentNullException(nameof(initialized), "Property is not nullable for class WebFileContent.");

            if (isLfs.IsSet && isLfs.Value == null)
                throw new ArgumentNullException(nameof(isLfs), "Property is not nullable for class WebFileContent.");

            if (isProtected.IsSet && isProtected.Value == null)
                throw new ArgumentNullException(nameof(isProtected), "Property is not nullable for class WebFileContent.");

            if (lastCommit.IsSet && lastCommit.Value == null)
                throw new ArgumentNullException(nameof(lastCommit), "Property is not nullable for class WebFileContent.");

            if (lfsHashAlgorithm.IsSet && lfsHashAlgorithm.Value == null)
                throw new ArgumentNullException(nameof(lfsHashAlgorithm), "Property is not nullable for class WebFileContent.");

            if (lfsOid.IsSet && lfsOid.Value == null)
                throw new ArgumentNullException(nameof(lfsOid), "Property is not nullable for class WebFileContent.");

            if (lfsSizeInByte.IsSet && lfsSizeInByte.Value == null)
                throw new ArgumentNullException(nameof(lfsSizeInByte), "Property is not nullable for class WebFileContent.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class WebFileContent.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class WebFileContent.");

            if (repository.IsSet && repository.Value == null)
                throw new ArgumentNullException(nameof(repository), "Property is not nullable for class WebFileContent.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class WebFileContent.");

            if (tagCount.IsSet && tagCount.Value == null)
                throw new ArgumentNullException(nameof(tagCount), "Property is not nullable for class WebFileContent.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class WebFileContent.");

            return new WebFileContent(branchCount, cnbSettings, commitCount, commitCountExceeded, content, encoding, fileSizeExceeded, fileSizeLimit, fileStat, initialized, isLfs, isProtected, lastCommit, lfsHashAlgorithm, lfsOid, lfsSizeInByte, name, path, repository, size, tagCount, type);
        }

        /// <summary>
        /// Serializes a <see cref="WebFileContent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webFileContent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebFileContent webFileContent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webFileContent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebFileContent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webFileContent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebFileContent webFileContent, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webFileContent.CnbSettingsOption.IsSet && webFileContent.CnbSettings == null)
                throw new ArgumentNullException(nameof(webFileContent.CnbSettings), "Property is required for class WebFileContent.");

            if (webFileContent.ContentOption.IsSet && webFileContent.Content == null)
                throw new ArgumentNullException(nameof(webFileContent.Content), "Property is required for class WebFileContent.");

            if (webFileContent.EncodingOption.IsSet && webFileContent.Encoding == null)
                throw new ArgumentNullException(nameof(webFileContent.Encoding), "Property is required for class WebFileContent.");

            if (webFileContent.FileStatOption.IsSet && webFileContent.FileStat == null)
                throw new ArgumentNullException(nameof(webFileContent.FileStat), "Property is required for class WebFileContent.");

            if (webFileContent.LastCommitOption.IsSet && webFileContent.LastCommit == null)
                throw new ArgumentNullException(nameof(webFileContent.LastCommit), "Property is required for class WebFileContent.");

            if (webFileContent.LfsHashAlgorithmOption.IsSet && webFileContent.LfsHashAlgorithm == null)
                throw new ArgumentNullException(nameof(webFileContent.LfsHashAlgorithm), "Property is required for class WebFileContent.");

            if (webFileContent.LfsOidOption.IsSet && webFileContent.LfsOid == null)
                throw new ArgumentNullException(nameof(webFileContent.LfsOid), "Property is required for class WebFileContent.");

            if (webFileContent.LfsSizeInByteOption.IsSet && webFileContent.LfsSizeInByte == null)
                throw new ArgumentNullException(nameof(webFileContent.LfsSizeInByte), "Property is required for class WebFileContent.");

            if (webFileContent.NameOption.IsSet && webFileContent.Name == null)
                throw new ArgumentNullException(nameof(webFileContent.Name), "Property is required for class WebFileContent.");

            if (webFileContent.PathOption.IsSet && webFileContent.Path == null)
                throw new ArgumentNullException(nameof(webFileContent.Path), "Property is required for class WebFileContent.");

            if (webFileContent.RepositoryOption.IsSet && webFileContent.Repository == null)
                throw new ArgumentNullException(nameof(webFileContent.Repository), "Property is required for class WebFileContent.");

            if (webFileContent.TypeOption.IsSet && webFileContent.Type == null)
                throw new ArgumentNullException(nameof(webFileContent.Type), "Property is required for class WebFileContent.");

            if (webFileContent.BranchCountOption.IsSet)
                writer.WriteNumber("branch_count", webFileContent.BranchCountOption.Value!.Value);

            if (webFileContent.CnbSettingsOption.IsSet)
            {
                writer.WritePropertyName("cnb_settings");
                JsonSerializer.Serialize(writer, webFileContent.CnbSettings, jsonSerializerOptions);
            }
            if (webFileContent.CommitCountOption.IsSet)
                writer.WriteNumber("commit_count", webFileContent.CommitCountOption.Value!.Value);

            if (webFileContent.CommitCountExceededOption.IsSet)
                writer.WriteBoolean("commit_count_exceeded", webFileContent.CommitCountExceededOption.Value!.Value);

            if (webFileContent.ContentOption.IsSet)
                writer.WriteString("content", webFileContent.Content);

            if (webFileContent.EncodingOption.IsSet)
                writer.WriteString("encoding", webFileContent.Encoding);

            if (webFileContent.FileSizeExceededOption.IsSet)
                writer.WriteBoolean("file_size_exceeded", webFileContent.FileSizeExceededOption.Value!.Value);

            if (webFileContent.FileSizeLimitOption.IsSet)
                writer.WriteNumber("file_size_limit", webFileContent.FileSizeLimitOption.Value!.Value);

            if (webFileContent.FileStatOption.IsSet)
            {
                writer.WritePropertyName("file_stat");
                JsonSerializer.Serialize(writer, webFileContent.FileStat, jsonSerializerOptions);
            }
            if (webFileContent.InitializedOption.IsSet)
                writer.WriteBoolean("initialized", webFileContent.InitializedOption.Value!.Value);

            if (webFileContent.IsLfsOption.IsSet)
                writer.WriteBoolean("is_lfs", webFileContent.IsLfsOption.Value!.Value);

            if (webFileContent.IsProtectedOption.IsSet)
                writer.WriteBoolean("is_protected", webFileContent.IsProtectedOption.Value!.Value);

            if (webFileContent.LastCommitOption.IsSet)
            {
                writer.WritePropertyName("last_commit");
                JsonSerializer.Serialize(writer, webFileContent.LastCommit, jsonSerializerOptions);
            }
            if (webFileContent.LfsHashAlgorithmOption.IsSet)
                writer.WriteString("lfs_hash_algorithm", webFileContent.LfsHashAlgorithm);

            if (webFileContent.LfsOidOption.IsSet)
                writer.WriteString("lfs_oid", webFileContent.LfsOid);

            if (webFileContent.LfsSizeInByteOption.IsSet)
                writer.WriteString("lfs_size_in_byte", webFileContent.LfsSizeInByte);

            if (webFileContent.NameOption.IsSet)
                writer.WriteString("name", webFileContent.Name);

            if (webFileContent.PathOption.IsSet)
                writer.WriteString("path", webFileContent.Path);

            if (webFileContent.RepositoryOption.IsSet)
            {
                writer.WritePropertyName("repository");
                JsonSerializer.Serialize(writer, webFileContent.Repository, jsonSerializerOptions);
            }
            if (webFileContent.SizeOption.IsSet)
                writer.WriteNumber("size", webFileContent.SizeOption.Value!.Value);

            if (webFileContent.TagCountOption.IsSet)
                writer.WriteNumber("tag_count", webFileContent.TagCountOption.Value!.Value);

            if (webFileContent.TypeOption.IsSet)
                writer.WriteString("type", webFileContent.Type);
        }
    }
}
