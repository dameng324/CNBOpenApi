// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoForks
    /// </summary>
    public partial class DtoForks : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoForks" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="forkCount">forkCount</param>
        /// <param name="freeze">freeze</param>
        /// <param name="nickname">nickname</param>
        /// <param name="path">path</param>
        /// <param name="userFreeze">userFreeze</param>
        /// <param name="username">username</param>
        [JsonConstructor]
        public DtoForks(Option<string?> createdAt = default, Option<int?> forkCount = default, Option<bool?> freeze = default, Option<string?> nickname = default, Option<string?> path = default, Option<bool?> userFreeze = default, Option<string?> username = default)
        {
            CreatedAtOption = createdAt;
            ForkCountOption = forkCount;
            FreezeOption = freeze;
            NicknameOption = nickname;
            PathOption = path;
            UserFreezeOption = userFreeze;
            UsernameOption = username;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForkCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ForkCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets ForkCount
        /// </summary>
        [JsonPropertyName("fork_count")]
        public int? ForkCount { get { return this.ForkCountOption; } set { this.ForkCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Freeze
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FreezeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Freeze
        /// </summary>
        [JsonPropertyName("freeze")]
        public bool? Freeze { get { return this.FreezeOption; } set { this.FreezeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Nickname
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NicknameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [JsonPropertyName("nickname")]
        public string? Nickname { get { return this.NicknameOption; } set { this.NicknameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserFreeze
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UserFreezeOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserFreeze
        /// </summary>
        [JsonPropertyName("user_freeze")]
        public bool? UserFreeze { get { return this.UserFreezeOption; } set { this.UserFreezeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Username
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UsernameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [JsonPropertyName("username")]
        public string? Username { get { return this.UsernameOption; } set { this.UsernameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoForks {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ForkCount: ").Append(ForkCount).Append("\n");
            sb.Append("  Freeze: ").Append(Freeze).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  UserFreeze: ").Append(UserFreeze).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoForks" />
    /// </summary>
    public class DtoForksJsonConverter : JsonConverter<DtoForks>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoForks" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoForks Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> createdAt = default;
            Option<int?> forkCount = default;
            Option<bool?> freeze = default;
            Option<string?> nickname = default;
            Option<string?> path = default;
            Option<bool?> userFreeze = default;
            Option<string?> username = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fork_count":
                            forkCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "freeze":
                            freeze = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "nickname":
                            nickname = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_freeze":
                            userFreeze = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "username":
                            username = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class DtoForks.");

            if (forkCount.IsSet && forkCount.Value == null)
                throw new ArgumentNullException(nameof(forkCount), "Property is not nullable for class DtoForks.");

            if (freeze.IsSet && freeze.Value == null)
                throw new ArgumentNullException(nameof(freeze), "Property is not nullable for class DtoForks.");

            if (nickname.IsSet && nickname.Value == null)
                throw new ArgumentNullException(nameof(nickname), "Property is not nullable for class DtoForks.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class DtoForks.");

            if (userFreeze.IsSet && userFreeze.Value == null)
                throw new ArgumentNullException(nameof(userFreeze), "Property is not nullable for class DtoForks.");

            if (username.IsSet && username.Value == null)
                throw new ArgumentNullException(nameof(username), "Property is not nullable for class DtoForks.");

            return new DtoForks(createdAt, forkCount, freeze, nickname, path, userFreeze, username);
        }

        /// <summary>
        /// Serializes a <see cref="DtoForks" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoForks"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoForks dtoForks, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoForks, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoForks" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoForks"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoForks dtoForks, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoForks.CreatedAtOption.IsSet && dtoForks.CreatedAt == null)
                throw new ArgumentNullException(nameof(dtoForks.CreatedAt), "Property is required for class DtoForks.");

            if (dtoForks.NicknameOption.IsSet && dtoForks.Nickname == null)
                throw new ArgumentNullException(nameof(dtoForks.Nickname), "Property is required for class DtoForks.");

            if (dtoForks.PathOption.IsSet && dtoForks.Path == null)
                throw new ArgumentNullException(nameof(dtoForks.Path), "Property is required for class DtoForks.");

            if (dtoForks.UsernameOption.IsSet && dtoForks.Username == null)
                throw new ArgumentNullException(nameof(dtoForks.Username), "Property is required for class DtoForks.");

            if (dtoForks.CreatedAtOption.IsSet)
                writer.WriteString("created_at", dtoForks.CreatedAt);

            if (dtoForks.ForkCountOption.IsSet)
                writer.WriteNumber("fork_count", dtoForks.ForkCountOption.Value!.Value);

            if (dtoForks.FreezeOption.IsSet)
                writer.WriteBoolean("freeze", dtoForks.FreezeOption.Value!.Value);

            if (dtoForks.NicknameOption.IsSet)
                writer.WriteString("nickname", dtoForks.Nickname);

            if (dtoForks.PathOption.IsSet)
                writer.WriteString("path", dtoForks.Path);

            if (dtoForks.UserFreezeOption.IsSet)
                writer.WriteBoolean("user_freeze", dtoForks.UserFreezeOption.Value!.Value);

            if (dtoForks.UsernameOption.IsSet)
                writer.WriteString("username", dtoForks.Username);
        }
    }
}
