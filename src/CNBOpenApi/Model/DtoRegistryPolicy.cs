// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoRegistryPolicy
    /// </summary>
    public partial class DtoRegistryPolicy : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoRegistryPolicy" /> class.
        /// </summary>
        /// <param name="cleanPolicyDetail">cleanPolicyDetail</param>
        /// <param name="overwritePolicy">overwritePolicy</param>
        /// <param name="versionPolicy">versionPolicy</param>
        [JsonConstructor]
        public DtoRegistryPolicy(Option<DtoRegistryCleanDetail?> cleanPolicyDetail = default, Option<DtoOverwritePolicy?> overwritePolicy = default, Option<DtoVersionPolicy?> versionPolicy = default)
        {
            CleanPolicyDetailOption = cleanPolicyDetail;
            OverwritePolicyOption = overwritePolicy;
            VersionPolicyOption = versionPolicy;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of OverwritePolicy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoOverwritePolicy?> OverwritePolicyOption { get; private set; }

        /// <summary>
        /// Gets or Sets OverwritePolicy
        /// </summary>
        [JsonPropertyName("overwrite_policy")]
        public DtoOverwritePolicy? OverwritePolicy { get { return this.OverwritePolicyOption; } set { this.OverwritePolicyOption = new(value); } }

        /// <summary>
        /// Used to track the state of VersionPolicy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoVersionPolicy?> VersionPolicyOption { get; private set; }

        /// <summary>
        /// Gets or Sets VersionPolicy
        /// </summary>
        [JsonPropertyName("version_policy")]
        public DtoVersionPolicy? VersionPolicy { get { return this.VersionPolicyOption; } set { this.VersionPolicyOption = new(value); } }

        /// <summary>
        /// Used to track the state of CleanPolicyDetail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoRegistryCleanDetail?> CleanPolicyDetailOption { get; private set; }

        /// <summary>
        /// Gets or Sets CleanPolicyDetail
        /// </summary>
        [JsonPropertyName("clean_policy_detail")]
        public DtoRegistryCleanDetail? CleanPolicyDetail { get { return this.CleanPolicyDetailOption; } set { this.CleanPolicyDetailOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoRegistryPolicy {\n");
            sb.Append("  CleanPolicyDetail: ").Append(CleanPolicyDetail).Append("\n");
            sb.Append("  OverwritePolicy: ").Append(OverwritePolicy).Append("\n");
            sb.Append("  VersionPolicy: ").Append(VersionPolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoRegistryPolicy" />
    /// </summary>
    public class DtoRegistryPolicyJsonConverter : JsonConverter<DtoRegistryPolicy>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoRegistryPolicy" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoRegistryPolicy Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DtoRegistryCleanDetail?> cleanPolicyDetail = default;
            Option<DtoOverwritePolicy?> overwritePolicy = default;
            Option<DtoVersionPolicy?> versionPolicy = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "clean_policy_detail":
                            cleanPolicyDetail = new Option<DtoRegistryCleanDetail?>(JsonSerializer.Deserialize<DtoRegistryCleanDetail>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "overwrite_policy":
                            string? overwritePolicyRawValue = utf8JsonReader.GetString();
                            if (overwritePolicyRawValue != null)
                                overwritePolicy = new Option<DtoOverwritePolicy?>(DtoOverwritePolicyValueConverter.FromStringOrDefault(overwritePolicyRawValue));
                            break;
                        case "version_policy":
                            string? versionPolicyRawValue = utf8JsonReader.GetString();
                            if (versionPolicyRawValue != null)
                                versionPolicy = new Option<DtoVersionPolicy?>(DtoVersionPolicyValueConverter.FromStringOrDefault(versionPolicyRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (cleanPolicyDetail.IsSet && cleanPolicyDetail.Value == null)
                throw new ArgumentNullException(nameof(cleanPolicyDetail), "Property is not nullable for class DtoRegistryPolicy.");

            if (overwritePolicy.IsSet && overwritePolicy.Value == null)
                throw new ArgumentNullException(nameof(overwritePolicy), "Property is not nullable for class DtoRegistryPolicy.");

            if (versionPolicy.IsSet && versionPolicy.Value == null)
                throw new ArgumentNullException(nameof(versionPolicy), "Property is not nullable for class DtoRegistryPolicy.");

            return new DtoRegistryPolicy(cleanPolicyDetail, overwritePolicy, versionPolicy);
        }

        /// <summary>
        /// Serializes a <see cref="DtoRegistryPolicy" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoRegistryPolicy"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoRegistryPolicy dtoRegistryPolicy, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoRegistryPolicy, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoRegistryPolicy" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoRegistryPolicy"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoRegistryPolicy dtoRegistryPolicy, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoRegistryPolicy.CleanPolicyDetailOption.IsSet && dtoRegistryPolicy.CleanPolicyDetail == null)
                throw new ArgumentNullException(nameof(dtoRegistryPolicy.CleanPolicyDetail), "Property is required for class DtoRegistryPolicy.");

            if (dtoRegistryPolicy.CleanPolicyDetailOption.IsSet)
            {
                writer.WritePropertyName("clean_policy_detail");
                JsonSerializer.Serialize(writer, dtoRegistryPolicy.CleanPolicyDetail, jsonSerializerOptions);
            }
            if (dtoRegistryPolicy.OverwritePolicyOption.IsSet)
            {
                var overwritePolicyRawValue = DtoOverwritePolicyValueConverter.ToJsonValue(dtoRegistryPolicy.OverwritePolicy!.Value);
                writer.WriteString("overwrite_policy", overwritePolicyRawValue);
            }
            if (dtoRegistryPolicy.VersionPolicyOption.IsSet)
            {
                var versionPolicyRawValue = DtoVersionPolicyValueConverter.ToJsonValue(dtoRegistryPolicy.VersionPolicy!.Value);
                writer.WriteString("version_policy", versionPolicyRawValue);
            }
        }
    }
}
