// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebRepoContribTrend
    /// </summary>
    public partial class WebRepoContribTrend : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebRepoContribTrend" /> class.
        /// </summary>
        /// <param name="meta">meta</param>
        /// <param name="repoData">repoData</param>
        /// <param name="userTotal">userTotal</param>
        /// <param name="usersData">usersData</param>
        /// <param name="weekTotal">weekTotal</param>
        /// <param name="withLineCounts">是否统计增删的行数, 默认总提交超过 10000 的仓库不统计</param>
        [JsonConstructor]
        public WebRepoContribTrend(Option<WebMeta?> meta = default, Option<List<WebWeek>?> repoData = default, Option<int?> userTotal = default, Option<List<WebContributorTrend>?> usersData = default, Option<int?> weekTotal = default, Option<bool?> withLineCounts = default)
        {
            MetaOption = meta;
            RepoDataOption = repoData;
            UserTotalOption = userTotal;
            UsersDataOption = usersData;
            WeekTotalOption = weekTotal;
            WithLineCountsOption = withLineCounts;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Meta
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebMeta?> MetaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [JsonPropertyName("meta")]
        public WebMeta? Meta { get { return this.MetaOption; } set { this.MetaOption = new(value); } }

        /// <summary>
        /// Used to track the state of RepoData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebWeek>?> RepoDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets RepoData
        /// </summary>
        [JsonPropertyName("repo_data")]
        public List<WebWeek>? RepoData { get { return this.RepoDataOption; } set { this.RepoDataOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserTotal
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> UserTotalOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserTotal
        /// </summary>
        [JsonPropertyName("user_total")]
        public int? UserTotal { get { return this.UserTotalOption; } set { this.UserTotalOption = new(value); } }

        /// <summary>
        /// Used to track the state of UsersData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebContributorTrend>?> UsersDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets UsersData
        /// </summary>
        [JsonPropertyName("users_data")]
        public List<WebContributorTrend>? UsersData { get { return this.UsersDataOption; } set { this.UsersDataOption = new(value); } }

        /// <summary>
        /// Used to track the state of WeekTotal
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> WeekTotalOption { get; private set; }

        /// <summary>
        /// Gets or Sets WeekTotal
        /// </summary>
        [JsonPropertyName("week_total")]
        public int? WeekTotal { get { return this.WeekTotalOption; } set { this.WeekTotalOption = new(value); } }

        /// <summary>
        /// Used to track the state of WithLineCounts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> WithLineCountsOption { get; private set; }

        /// <summary>
        /// 是否统计增删的行数, 默认总提交超过 10000 的仓库不统计
        /// </summary>
        /// <value>是否统计增删的行数, 默认总提交超过 10000 的仓库不统计</value>
        [JsonPropertyName("with_line_counts")]
        public bool? WithLineCounts { get { return this.WithLineCountsOption; } set { this.WithLineCountsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebRepoContribTrend {\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  RepoData: ").Append(RepoData).Append("\n");
            sb.Append("  UserTotal: ").Append(UserTotal).Append("\n");
            sb.Append("  UsersData: ").Append(UsersData).Append("\n");
            sb.Append("  WeekTotal: ").Append(WeekTotal).Append("\n");
            sb.Append("  WithLineCounts: ").Append(WithLineCounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebRepoContribTrend" />
    /// </summary>
    public class WebRepoContribTrendJsonConverter : JsonConverter<WebRepoContribTrend>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebRepoContribTrend" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebRepoContribTrend Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<WebMeta?> meta = default;
            Option<List<WebWeek>?> repoData = default;
            Option<int?> userTotal = default;
            Option<List<WebContributorTrend>?> usersData = default;
            Option<int?> weekTotal = default;
            Option<bool?> withLineCounts = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "meta":
                            meta = new Option<WebMeta?>(JsonSerializer.Deserialize<WebMeta>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "repo_data":
                            repoData = new Option<List<WebWeek>?>(JsonSerializer.Deserialize<List<WebWeek>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "user_total":
                            userTotal = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "users_data":
                            usersData = new Option<List<WebContributorTrend>?>(JsonSerializer.Deserialize<List<WebContributorTrend>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "week_total":
                            weekTotal = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "with_line_counts":
                            withLineCounts = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (meta.IsSet && meta.Value == null)
                throw new ArgumentNullException(nameof(meta), "Property is not nullable for class WebRepoContribTrend.");

            if (repoData.IsSet && repoData.Value == null)
                throw new ArgumentNullException(nameof(repoData), "Property is not nullable for class WebRepoContribTrend.");

            if (userTotal.IsSet && userTotal.Value == null)
                throw new ArgumentNullException(nameof(userTotal), "Property is not nullable for class WebRepoContribTrend.");

            if (usersData.IsSet && usersData.Value == null)
                throw new ArgumentNullException(nameof(usersData), "Property is not nullable for class WebRepoContribTrend.");

            if (weekTotal.IsSet && weekTotal.Value == null)
                throw new ArgumentNullException(nameof(weekTotal), "Property is not nullable for class WebRepoContribTrend.");

            if (withLineCounts.IsSet && withLineCounts.Value == null)
                throw new ArgumentNullException(nameof(withLineCounts), "Property is not nullable for class WebRepoContribTrend.");

            return new WebRepoContribTrend(meta, repoData, userTotal, usersData, weekTotal, withLineCounts);
        }

        /// <summary>
        /// Serializes a <see cref="WebRepoContribTrend" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webRepoContribTrend"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebRepoContribTrend webRepoContribTrend, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webRepoContribTrend, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebRepoContribTrend" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webRepoContribTrend"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebRepoContribTrend webRepoContribTrend, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webRepoContribTrend.MetaOption.IsSet && webRepoContribTrend.Meta == null)
                throw new ArgumentNullException(nameof(webRepoContribTrend.Meta), "Property is required for class WebRepoContribTrend.");

            if (webRepoContribTrend.RepoDataOption.IsSet && webRepoContribTrend.RepoData == null)
                throw new ArgumentNullException(nameof(webRepoContribTrend.RepoData), "Property is required for class WebRepoContribTrend.");

            if (webRepoContribTrend.UsersDataOption.IsSet && webRepoContribTrend.UsersData == null)
                throw new ArgumentNullException(nameof(webRepoContribTrend.UsersData), "Property is required for class WebRepoContribTrend.");

            if (webRepoContribTrend.MetaOption.IsSet)
            {
                writer.WritePropertyName("meta");
                JsonSerializer.Serialize(writer, webRepoContribTrend.Meta, jsonSerializerOptions);
            }
            if (webRepoContribTrend.RepoDataOption.IsSet)
            {
                writer.WritePropertyName("repo_data");
                JsonSerializer.Serialize(writer, webRepoContribTrend.RepoData, jsonSerializerOptions);
            }
            if (webRepoContribTrend.UserTotalOption.IsSet)
                writer.WriteNumber("user_total", webRepoContribTrend.UserTotalOption.Value!.Value);

            if (webRepoContribTrend.UsersDataOption.IsSet)
            {
                writer.WritePropertyName("users_data");
                JsonSerializer.Serialize(writer, webRepoContribTrend.UsersData, jsonSerializerOptions);
            }
            if (webRepoContribTrend.WeekTotalOption.IsSet)
                writer.WriteNumber("week_total", webRepoContribTrend.WeekTotalOption.Value!.Value);

            if (webRepoContribTrend.WithLineCountsOption.IsSet)
                writer.WriteBoolean("with_line_counts", webRepoContribTrend.WithLineCountsOption.Value!.Value);
        }
    }
}
