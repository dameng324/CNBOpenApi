// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoPackage
    /// </summary>
    public partial class DtoPackage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoPackage" /> class.
        /// </summary>
        /// <param name="count">count</param>
        /// <param name="description">description</param>
        /// <param name="labels">labels</param>
        /// <param name="lastArtifactName">lastArtifactName</param>
        /// <param name="lastPusher">lastPusher</param>
        /// <param name="name">name</param>
        /// <param name="package">package</param>
        /// <param name="packageType">packageType</param>
        /// <param name="pullCount">pullCount</param>
        /// <param name="recentPullCount">recentPullCount</param>
        [JsonConstructor]
        public DtoPackage(Option<int?> count = default, Option<string?> description = default, Option<List<string>?> labels = default, Option<string?> lastArtifactName = default, Option<DtoLastPusher?> lastPusher = default, Option<string?> name = default, Option<string?> package = default, Option<DtoPackageType?> packageType = default, Option<int?> pullCount = default, Option<int?> recentPullCount = default)
        {
            CountOption = count;
            DescriptionOption = description;
            LabelsOption = labels;
            LastArtifactNameOption = lastArtifactName;
            LastPusherOption = lastPusher;
            NameOption = name;
            PackageOption = package;
            PackageTypeOption = packageType;
            PullCountOption = pullCount;
            RecentPullCountOption = recentPullCount;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of PackageType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoPackageType?> PackageTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PackageType
        /// </summary>
        [JsonPropertyName("package_type")]
        public DtoPackageType? PackageType { get { return this.PackageTypeOption; } set { this.PackageTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Count
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CountOption { get; private set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [JsonPropertyName("count")]
        public int? Count { get { return this.CountOption; } set { this.CountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Labels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> LabelsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [JsonPropertyName("labels")]
        public List<string>? Labels { get { return this.LabelsOption; } set { this.LabelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastArtifactName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastArtifactNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastArtifactName
        /// </summary>
        [JsonPropertyName("last_artifact_name")]
        public string? LastArtifactName { get { return this.LastArtifactNameOption; } set { this.LastArtifactNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastPusher
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoLastPusher?> LastPusherOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastPusher
        /// </summary>
        [JsonPropertyName("last_pusher")]
        public DtoLastPusher? LastPusher { get { return this.LastPusherOption; } set { this.LastPusherOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Package
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PackageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Package
        /// </summary>
        [JsonPropertyName("package")]
        public string? Package { get { return this.PackageOption; } set { this.PackageOption = new(value); } }

        /// <summary>
        /// Used to track the state of PullCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PullCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets PullCount
        /// </summary>
        [JsonPropertyName("pull_count")]
        public int? PullCount { get { return this.PullCountOption; } set { this.PullCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecentPullCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RecentPullCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets RecentPullCount
        /// </summary>
        [JsonPropertyName("recent_pull_count")]
        public int? RecentPullCount { get { return this.RecentPullCountOption; } set { this.RecentPullCountOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoPackage {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  LastArtifactName: ").Append(LastArtifactName).Append("\n");
            sb.Append("  LastPusher: ").Append(LastPusher).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Package: ").Append(Package).Append("\n");
            sb.Append("  PackageType: ").Append(PackageType).Append("\n");
            sb.Append("  PullCount: ").Append(PullCount).Append("\n");
            sb.Append("  RecentPullCount: ").Append(RecentPullCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoPackage" />
    /// </summary>
    public class DtoPackageJsonConverter : JsonConverter<DtoPackage>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoPackage" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoPackage Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> count = default;
            Option<string?> description = default;
            Option<List<string>?> labels = default;
            Option<string?> lastArtifactName = default;
            Option<DtoLastPusher?> lastPusher = default;
            Option<string?> name = default;
            Option<string?> package = default;
            Option<DtoPackageType?> packageType = default;
            Option<int?> pullCount = default;
            Option<int?> recentPullCount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "count":
                            count = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "labels":
                            labels = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "last_artifact_name":
                            lastArtifactName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_pusher":
                            lastPusher = new Option<DtoLastPusher?>(JsonSerializer.Deserialize<DtoLastPusher>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "package":
                            package = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "package_type":
                            string? packageTypeRawValue = utf8JsonReader.GetString();
                            if (packageTypeRawValue != null)
                                packageType = new Option<DtoPackageType?>(DtoPackageTypeValueConverter.FromStringOrDefault(packageTypeRawValue));
                            break;
                        case "pull_count":
                            pullCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "recent_pull_count":
                            recentPullCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (count.IsSet && count.Value == null)
                throw new ArgumentNullException(nameof(count), "Property is not nullable for class DtoPackage.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class DtoPackage.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class DtoPackage.");

            if (lastArtifactName.IsSet && lastArtifactName.Value == null)
                throw new ArgumentNullException(nameof(lastArtifactName), "Property is not nullable for class DtoPackage.");

            if (lastPusher.IsSet && lastPusher.Value == null)
                throw new ArgumentNullException(nameof(lastPusher), "Property is not nullable for class DtoPackage.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class DtoPackage.");

            if (package.IsSet && package.Value == null)
                throw new ArgumentNullException(nameof(package), "Property is not nullable for class DtoPackage.");

            if (packageType.IsSet && packageType.Value == null)
                throw new ArgumentNullException(nameof(packageType), "Property is not nullable for class DtoPackage.");

            if (pullCount.IsSet && pullCount.Value == null)
                throw new ArgumentNullException(nameof(pullCount), "Property is not nullable for class DtoPackage.");

            if (recentPullCount.IsSet && recentPullCount.Value == null)
                throw new ArgumentNullException(nameof(recentPullCount), "Property is not nullable for class DtoPackage.");

            return new DtoPackage(count, description, labels, lastArtifactName, lastPusher, name, package, packageType, pullCount, recentPullCount);
        }

        /// <summary>
        /// Serializes a <see cref="DtoPackage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoPackage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoPackage dtoPackage, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoPackage, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoPackage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoPackage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoPackage dtoPackage, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoPackage.DescriptionOption.IsSet && dtoPackage.Description == null)
                throw new ArgumentNullException(nameof(dtoPackage.Description), "Property is required for class DtoPackage.");

            if (dtoPackage.LabelsOption.IsSet && dtoPackage.Labels == null)
                throw new ArgumentNullException(nameof(dtoPackage.Labels), "Property is required for class DtoPackage.");

            if (dtoPackage.LastArtifactNameOption.IsSet && dtoPackage.LastArtifactName == null)
                throw new ArgumentNullException(nameof(dtoPackage.LastArtifactName), "Property is required for class DtoPackage.");

            if (dtoPackage.LastPusherOption.IsSet && dtoPackage.LastPusher == null)
                throw new ArgumentNullException(nameof(dtoPackage.LastPusher), "Property is required for class DtoPackage.");

            if (dtoPackage.NameOption.IsSet && dtoPackage.Name == null)
                throw new ArgumentNullException(nameof(dtoPackage.Name), "Property is required for class DtoPackage.");

            if (dtoPackage.PackageOption.IsSet && dtoPackage.Package == null)
                throw new ArgumentNullException(nameof(dtoPackage.Package), "Property is required for class DtoPackage.");

            if (dtoPackage.CountOption.IsSet)
                writer.WriteNumber("count", dtoPackage.CountOption.Value!.Value);

            if (dtoPackage.DescriptionOption.IsSet)
                writer.WriteString("description", dtoPackage.Description);

            if (dtoPackage.LabelsOption.IsSet)
            {
                writer.WritePropertyName("labels");
                JsonSerializer.Serialize(writer, dtoPackage.Labels, jsonSerializerOptions);
            }
            if (dtoPackage.LastArtifactNameOption.IsSet)
                writer.WriteString("last_artifact_name", dtoPackage.LastArtifactName);

            if (dtoPackage.LastPusherOption.IsSet)
            {
                writer.WritePropertyName("last_pusher");
                JsonSerializer.Serialize(writer, dtoPackage.LastPusher, jsonSerializerOptions);
            }
            if (dtoPackage.NameOption.IsSet)
                writer.WriteString("name", dtoPackage.Name);

            if (dtoPackage.PackageOption.IsSet)
                writer.WriteString("package", dtoPackage.Package);

            if (dtoPackage.PackageTypeOption.IsSet)
            {
                var packageTypeRawValue = DtoPackageTypeValueConverter.ToJsonValue(dtoPackage.PackageType!.Value);
                writer.WriteString("package_type", packageTypeRawValue);
            }
            if (dtoPackage.PullCountOption.IsSet)
                writer.WriteNumber("pull_count", dtoPackage.PullCountOption.Value!.Value);

            if (dtoPackage.RecentPullCountOption.IsSet)
                writer.WriteNumber("recent_pull_count", dtoPackage.RecentPullCountOption.Value!.Value);
        }
    }
}
