// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebPullRequestSetting
    /// </summary>
    public partial class WebPullRequestSetting : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebPullRequestSetting" /> class.
        /// </summary>
        /// <param name="allowMergeStyles">allowMergeStyles</param>
        /// <param name="baseBranchProtection">baseBranchProtection</param>
        /// <param name="mergeCommitMessageStyle">mergeCommitMessageStyle</param>
        /// <param name="squashCommitMessageStyle">squashCommitMessageStyle</param>
        [JsonConstructor]
        public WebPullRequestSetting(Option<List<string>?> allowMergeStyles = default, Option<WebPullRequestBranchProtection?> baseBranchProtection = default, Option<string?> mergeCommitMessageStyle = default, Option<string?> squashCommitMessageStyle = default)
        {
            AllowMergeStylesOption = allowMergeStyles;
            BaseBranchProtectionOption = baseBranchProtection;
            MergeCommitMessageStyleOption = mergeCommitMessageStyle;
            SquashCommitMessageStyleOption = squashCommitMessageStyle;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AllowMergeStyles
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> AllowMergeStylesOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowMergeStyles
        /// </summary>
        [JsonPropertyName("allow_merge_styles")]
        public List<string>? AllowMergeStyles { get { return this.AllowMergeStylesOption; } set { this.AllowMergeStylesOption = new(value); } }

        /// <summary>
        /// Used to track the state of BaseBranchProtection
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebPullRequestBranchProtection?> BaseBranchProtectionOption { get; private set; }

        /// <summary>
        /// Gets or Sets BaseBranchProtection
        /// </summary>
        [JsonPropertyName("base_branch_protection")]
        public WebPullRequestBranchProtection? BaseBranchProtection { get { return this.BaseBranchProtectionOption; } set { this.BaseBranchProtectionOption = new(value); } }

        /// <summary>
        /// Used to track the state of MergeCommitMessageStyle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MergeCommitMessageStyleOption { get; private set; }

        /// <summary>
        /// Gets or Sets MergeCommitMessageStyle
        /// </summary>
        [JsonPropertyName("merge_commit_message_style")]
        public string? MergeCommitMessageStyle { get { return this.MergeCommitMessageStyleOption; } set { this.MergeCommitMessageStyleOption = new(value); } }

        /// <summary>
        /// Used to track the state of SquashCommitMessageStyle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SquashCommitMessageStyleOption { get; private set; }

        /// <summary>
        /// Gets or Sets SquashCommitMessageStyle
        /// </summary>
        [JsonPropertyName("squash_commit_message_style")]
        public string? SquashCommitMessageStyle { get { return this.SquashCommitMessageStyleOption; } set { this.SquashCommitMessageStyleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebPullRequestSetting {\n");
            sb.Append("  AllowMergeStyles: ").Append(AllowMergeStyles).Append("\n");
            sb.Append("  BaseBranchProtection: ").Append(BaseBranchProtection).Append("\n");
            sb.Append("  MergeCommitMessageStyle: ").Append(MergeCommitMessageStyle).Append("\n");
            sb.Append("  SquashCommitMessageStyle: ").Append(SquashCommitMessageStyle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebPullRequestSetting" />
    /// </summary>
    public class WebPullRequestSettingJsonConverter : JsonConverter<WebPullRequestSetting>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebPullRequestSetting" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebPullRequestSetting Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> allowMergeStyles = default;
            Option<WebPullRequestBranchProtection?> baseBranchProtection = default;
            Option<string?> mergeCommitMessageStyle = default;
            Option<string?> squashCommitMessageStyle = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "allow_merge_styles":
                            allowMergeStyles = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "base_branch_protection":
                            baseBranchProtection = new Option<WebPullRequestBranchProtection?>(JsonSerializer.Deserialize<WebPullRequestBranchProtection>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "merge_commit_message_style":
                            mergeCommitMessageStyle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "squash_commit_message_style":
                            squashCommitMessageStyle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (allowMergeStyles.IsSet && allowMergeStyles.Value == null)
                throw new ArgumentNullException(nameof(allowMergeStyles), "Property is not nullable for class WebPullRequestSetting.");

            if (baseBranchProtection.IsSet && baseBranchProtection.Value == null)
                throw new ArgumentNullException(nameof(baseBranchProtection), "Property is not nullable for class WebPullRequestSetting.");

            if (mergeCommitMessageStyle.IsSet && mergeCommitMessageStyle.Value == null)
                throw new ArgumentNullException(nameof(mergeCommitMessageStyle), "Property is not nullable for class WebPullRequestSetting.");

            if (squashCommitMessageStyle.IsSet && squashCommitMessageStyle.Value == null)
                throw new ArgumentNullException(nameof(squashCommitMessageStyle), "Property is not nullable for class WebPullRequestSetting.");

            return new WebPullRequestSetting(allowMergeStyles, baseBranchProtection, mergeCommitMessageStyle, squashCommitMessageStyle);
        }

        /// <summary>
        /// Serializes a <see cref="WebPullRequestSetting" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webPullRequestSetting"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebPullRequestSetting webPullRequestSetting, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webPullRequestSetting, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebPullRequestSetting" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webPullRequestSetting"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebPullRequestSetting webPullRequestSetting, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webPullRequestSetting.AllowMergeStylesOption.IsSet && webPullRequestSetting.AllowMergeStyles == null)
                throw new ArgumentNullException(nameof(webPullRequestSetting.AllowMergeStyles), "Property is required for class WebPullRequestSetting.");

            if (webPullRequestSetting.BaseBranchProtectionOption.IsSet && webPullRequestSetting.BaseBranchProtection == null)
                throw new ArgumentNullException(nameof(webPullRequestSetting.BaseBranchProtection), "Property is required for class WebPullRequestSetting.");

            if (webPullRequestSetting.MergeCommitMessageStyleOption.IsSet && webPullRequestSetting.MergeCommitMessageStyle == null)
                throw new ArgumentNullException(nameof(webPullRequestSetting.MergeCommitMessageStyle), "Property is required for class WebPullRequestSetting.");

            if (webPullRequestSetting.SquashCommitMessageStyleOption.IsSet && webPullRequestSetting.SquashCommitMessageStyle == null)
                throw new ArgumentNullException(nameof(webPullRequestSetting.SquashCommitMessageStyle), "Property is required for class WebPullRequestSetting.");

            if (webPullRequestSetting.AllowMergeStylesOption.IsSet)
            {
                writer.WritePropertyName("allow_merge_styles");
                JsonSerializer.Serialize(writer, webPullRequestSetting.AllowMergeStyles, jsonSerializerOptions);
            }
            if (webPullRequestSetting.BaseBranchProtectionOption.IsSet)
            {
                writer.WritePropertyName("base_branch_protection");
                JsonSerializer.Serialize(writer, webPullRequestSetting.BaseBranchProtection, jsonSerializerOptions);
            }
            if (webPullRequestSetting.MergeCommitMessageStyleOption.IsSet)
                writer.WriteString("merge_commit_message_style", webPullRequestSetting.MergeCommitMessageStyle);

            if (webPullRequestSetting.SquashCommitMessageStyleOption.IsSet)
                writer.WriteString("squash_commit_message_style", webPullRequestSetting.SquashCommitMessageStyle);
        }
    }
}
