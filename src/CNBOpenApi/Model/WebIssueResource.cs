// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebIssueResource
    /// </summary>
    public partial class WebIssueResource : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebIssueResource" /> class.
        /// </summary>
        /// <param name="assignees">assignees</param>
        /// <param name="author">author</param>
        /// <param name="commentCount">commentCount</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="customerFields">customerFields</param>
        /// <param name="endedAt">endedAt</param>
        /// <param name="id">id</param>
        /// <param name="labels">labels</param>
        /// <param name="number">number</param>
        /// <param name="priority">priority</param>
        /// <param name="repoSlug">repoSlug</param>
        /// <param name="startedAt">startedAt</param>
        /// <param name="state">state</param>
        /// <param name="stateReason">stateReason</param>
        /// <param name="title">title</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public WebIssueResource(Option<List<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo>?> assignees = default, Option<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo?> author = default, Option<int?> commentCount = default, Option<string?> createdAt = default, Option<List<WebCustomerField>?> customerFields = default, Option<string?> endedAt = default, Option<string?> id = default, Option<List<WebLabelOption>?> labels = default, Option<string?> number = default, Option<string?> priority = default, Option<string?> repoSlug = default, Option<string?> startedAt = default, Option<string?> state = default, Option<string?> stateReason = default, Option<string?> title = default, Option<string?> updatedAt = default)
        {
            AssigneesOption = assignees;
            AuthorOption = author;
            CommentCountOption = commentCount;
            CreatedAtOption = createdAt;
            CustomerFieldsOption = customerFields;
            EndedAtOption = endedAt;
            IdOption = id;
            LabelsOption = labels;
            NumberOption = number;
            PriorityOption = priority;
            RepoSlugOption = repoSlug;
            StartedAtOption = startedAt;
            StateOption = state;
            StateReasonOption = stateReason;
            TitleOption = title;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Assignees
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo>?> AssigneesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Assignees
        /// </summary>
        [JsonPropertyName("assignees")]
        public List<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo>? Assignees { get { return this.AssigneesOption; } set { this.AssigneesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Author
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo?> AuthorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [JsonPropertyName("author")]
        public GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo? Author { get { return this.AuthorOption; } set { this.AuthorOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommentCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CommentCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommentCount
        /// </summary>
        [JsonPropertyName("comment_count")]
        public int? CommentCount { get { return this.CommentCountOption; } set { this.CommentCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomerFields
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebCustomerField>?> CustomerFieldsOption { get; private set; }

        /// <summary>
        /// Gets or Sets CustomerFields
        /// </summary>
        [JsonPropertyName("customer_fields")]
        public List<WebCustomerField>? CustomerFields { get { return this.CustomerFieldsOption; } set { this.CustomerFieldsOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EndedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndedAt
        /// </summary>
        [JsonPropertyName("ended_at")]
        public string? EndedAt { get { return this.EndedAtOption; } set { this.EndedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Labels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebLabelOption>?> LabelsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [JsonPropertyName("labels")]
        public List<WebLabelOption>? Labels { get { return this.LabelsOption; } set { this.LabelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public string? Number { get { return this.NumberOption; } set { this.NumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Priority
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PriorityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [JsonPropertyName("priority")]
        public string? Priority { get { return this.PriorityOption; } set { this.PriorityOption = new(value); } }

        /// <summary>
        /// Used to track the state of RepoSlug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RepoSlugOption { get; private set; }

        /// <summary>
        /// Gets or Sets RepoSlug
        /// </summary>
        [JsonPropertyName("repo_slug")]
        public string? RepoSlug { get { return this.RepoSlugOption; } set { this.RepoSlugOption = new(value); } }

        /// <summary>
        /// Used to track the state of StartedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StartedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartedAt
        /// </summary>
        [JsonPropertyName("started_at")]
        public string? StartedAt { get { return this.StartedAtOption; } set { this.StartedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public string? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Used to track the state of StateReason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateReasonOption { get; private set; }

        /// <summary>
        /// Gets or Sets StateReason
        /// </summary>
        [JsonPropertyName("state_reason")]
        public string? StateReason { get { return this.StateReasonOption; } set { this.StateReasonOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebIssueResource {\n");
            sb.Append("  Assignees: ").Append(Assignees).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  CommentCount: ").Append(CommentCount).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CustomerFields: ").Append(CustomerFields).Append("\n");
            sb.Append("  EndedAt: ").Append(EndedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  RepoSlug: ").Append(RepoSlug).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StateReason: ").Append(StateReason).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebIssueResource" />
    /// </summary>
    public class WebIssueResourceJsonConverter : JsonConverter<WebIssueResource>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebIssueResource" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebIssueResource Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo>?> assignees = default;
            Option<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo?> author = default;
            Option<int?> commentCount = default;
            Option<string?> createdAt = default;
            Option<List<WebCustomerField>?> customerFields = default;
            Option<string?> endedAt = default;
            Option<string?> id = default;
            Option<List<WebLabelOption>?> labels = default;
            Option<string?> number = default;
            Option<string?> priority = default;
            Option<string?> repoSlug = default;
            Option<string?> startedAt = default;
            Option<string?> state = default;
            Option<string?> stateReason = default;
            Option<string?> title = default;
            Option<string?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assignees":
                            assignees = new Option<List<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo>?>(JsonSerializer.Deserialize<List<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "author":
                            author = new Option<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo?>(JsonSerializer.Deserialize<GitWoaComCnbMonorepoMissionMissionResourceDtoWebUserInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "comment_count":
                            commentCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "customer_fields":
                            customerFields = new Option<List<WebCustomerField>?>(JsonSerializer.Deserialize<List<WebCustomerField>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ended_at":
                            endedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "labels":
                            labels = new Option<List<WebLabelOption>?>(JsonSerializer.Deserialize<List<WebLabelOption>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "number":
                            number = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "priority":
                            priority = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "repo_slug":
                            repoSlug = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "started_at":
                            startedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "state_reason":
                            stateReason = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (assignees.IsSet && assignees.Value == null)
                throw new ArgumentNullException(nameof(assignees), "Property is not nullable for class WebIssueResource.");

            if (author.IsSet && author.Value == null)
                throw new ArgumentNullException(nameof(author), "Property is not nullable for class WebIssueResource.");

            if (commentCount.IsSet && commentCount.Value == null)
                throw new ArgumentNullException(nameof(commentCount), "Property is not nullable for class WebIssueResource.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class WebIssueResource.");

            if (customerFields.IsSet && customerFields.Value == null)
                throw new ArgumentNullException(nameof(customerFields), "Property is not nullable for class WebIssueResource.");

            if (endedAt.IsSet && endedAt.Value == null)
                throw new ArgumentNullException(nameof(endedAt), "Property is not nullable for class WebIssueResource.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class WebIssueResource.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class WebIssueResource.");

            if (number.IsSet && number.Value == null)
                throw new ArgumentNullException(nameof(number), "Property is not nullable for class WebIssueResource.");

            if (priority.IsSet && priority.Value == null)
                throw new ArgumentNullException(nameof(priority), "Property is not nullable for class WebIssueResource.");

            if (repoSlug.IsSet && repoSlug.Value == null)
                throw new ArgumentNullException(nameof(repoSlug), "Property is not nullable for class WebIssueResource.");

            if (startedAt.IsSet && startedAt.Value == null)
                throw new ArgumentNullException(nameof(startedAt), "Property is not nullable for class WebIssueResource.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class WebIssueResource.");

            if (stateReason.IsSet && stateReason.Value == null)
                throw new ArgumentNullException(nameof(stateReason), "Property is not nullable for class WebIssueResource.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class WebIssueResource.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class WebIssueResource.");

            return new WebIssueResource(assignees, author, commentCount, createdAt, customerFields, endedAt, id, labels, number, priority, repoSlug, startedAt, state, stateReason, title, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="WebIssueResource" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webIssueResource"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebIssueResource webIssueResource, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webIssueResource, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebIssueResource" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webIssueResource"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebIssueResource webIssueResource, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webIssueResource.AssigneesOption.IsSet && webIssueResource.Assignees == null)
                throw new ArgumentNullException(nameof(webIssueResource.Assignees), "Property is required for class WebIssueResource.");

            if (webIssueResource.AuthorOption.IsSet && webIssueResource.Author == null)
                throw new ArgumentNullException(nameof(webIssueResource.Author), "Property is required for class WebIssueResource.");

            if (webIssueResource.CreatedAtOption.IsSet && webIssueResource.CreatedAt == null)
                throw new ArgumentNullException(nameof(webIssueResource.CreatedAt), "Property is required for class WebIssueResource.");

            if (webIssueResource.CustomerFieldsOption.IsSet && webIssueResource.CustomerFields == null)
                throw new ArgumentNullException(nameof(webIssueResource.CustomerFields), "Property is required for class WebIssueResource.");

            if (webIssueResource.EndedAtOption.IsSet && webIssueResource.EndedAt == null)
                throw new ArgumentNullException(nameof(webIssueResource.EndedAt), "Property is required for class WebIssueResource.");

            if (webIssueResource.IdOption.IsSet && webIssueResource.Id == null)
                throw new ArgumentNullException(nameof(webIssueResource.Id), "Property is required for class WebIssueResource.");

            if (webIssueResource.LabelsOption.IsSet && webIssueResource.Labels == null)
                throw new ArgumentNullException(nameof(webIssueResource.Labels), "Property is required for class WebIssueResource.");

            if (webIssueResource.NumberOption.IsSet && webIssueResource.Number == null)
                throw new ArgumentNullException(nameof(webIssueResource.Number), "Property is required for class WebIssueResource.");

            if (webIssueResource.PriorityOption.IsSet && webIssueResource.Priority == null)
                throw new ArgumentNullException(nameof(webIssueResource.Priority), "Property is required for class WebIssueResource.");

            if (webIssueResource.RepoSlugOption.IsSet && webIssueResource.RepoSlug == null)
                throw new ArgumentNullException(nameof(webIssueResource.RepoSlug), "Property is required for class WebIssueResource.");

            if (webIssueResource.StartedAtOption.IsSet && webIssueResource.StartedAt == null)
                throw new ArgumentNullException(nameof(webIssueResource.StartedAt), "Property is required for class WebIssueResource.");

            if (webIssueResource.StateOption.IsSet && webIssueResource.State == null)
                throw new ArgumentNullException(nameof(webIssueResource.State), "Property is required for class WebIssueResource.");

            if (webIssueResource.StateReasonOption.IsSet && webIssueResource.StateReason == null)
                throw new ArgumentNullException(nameof(webIssueResource.StateReason), "Property is required for class WebIssueResource.");

            if (webIssueResource.TitleOption.IsSet && webIssueResource.Title == null)
                throw new ArgumentNullException(nameof(webIssueResource.Title), "Property is required for class WebIssueResource.");

            if (webIssueResource.UpdatedAtOption.IsSet && webIssueResource.UpdatedAt == null)
                throw new ArgumentNullException(nameof(webIssueResource.UpdatedAt), "Property is required for class WebIssueResource.");

            if (webIssueResource.AssigneesOption.IsSet)
            {
                writer.WritePropertyName("assignees");
                JsonSerializer.Serialize(writer, webIssueResource.Assignees, jsonSerializerOptions);
            }
            if (webIssueResource.AuthorOption.IsSet)
            {
                writer.WritePropertyName("author");
                JsonSerializer.Serialize(writer, webIssueResource.Author, jsonSerializerOptions);
            }
            if (webIssueResource.CommentCountOption.IsSet)
                writer.WriteNumber("comment_count", webIssueResource.CommentCountOption.Value!.Value);

            if (webIssueResource.CreatedAtOption.IsSet)
                writer.WriteString("created_at", webIssueResource.CreatedAt);

            if (webIssueResource.CustomerFieldsOption.IsSet)
            {
                writer.WritePropertyName("customer_fields");
                JsonSerializer.Serialize(writer, webIssueResource.CustomerFields, jsonSerializerOptions);
            }
            if (webIssueResource.EndedAtOption.IsSet)
                writer.WriteString("ended_at", webIssueResource.EndedAt);

            if (webIssueResource.IdOption.IsSet)
                writer.WriteString("id", webIssueResource.Id);

            if (webIssueResource.LabelsOption.IsSet)
            {
                writer.WritePropertyName("labels");
                JsonSerializer.Serialize(writer, webIssueResource.Labels, jsonSerializerOptions);
            }
            if (webIssueResource.NumberOption.IsSet)
                writer.WriteString("number", webIssueResource.Number);

            if (webIssueResource.PriorityOption.IsSet)
                writer.WriteString("priority", webIssueResource.Priority);

            if (webIssueResource.RepoSlugOption.IsSet)
                writer.WriteString("repo_slug", webIssueResource.RepoSlug);

            if (webIssueResource.StartedAtOption.IsSet)
                writer.WriteString("started_at", webIssueResource.StartedAt);

            if (webIssueResource.StateOption.IsSet)
                writer.WriteString("state", webIssueResource.State);

            if (webIssueResource.StateReasonOption.IsSet)
                writer.WriteString("state_reason", webIssueResource.StateReason);

            if (webIssueResource.TitleOption.IsSet)
                writer.WriteString("title", webIssueResource.Title);

            if (webIssueResource.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", webIssueResource.UpdatedAt);
        }
    }
}
