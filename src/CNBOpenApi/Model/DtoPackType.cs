// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// Defines dto.PackType
    /// </summary>
    public enum DtoPackType
    {
        /// <summary>
        /// Enum PackTypeUnknown for value: -1
        /// </summary>
        PackTypeUnknown = -1,

        /// <summary>
        /// Enum PackTypeFree for value: 0
        /// </summary>
        PackTypeFree = 0,

        /// <summary>
        /// Enum PackTypeSpecial for value: 1
        /// </summary>
        PackTypeSpecial = 1,

        /// <summary>
        /// Enum PackTypeOpenSource for value: 10
        /// </summary>
        PackTypeOpenSource = 10,

        /// <summary>
        /// Enum PackTypeMigration for value: 20
        /// </summary>
        PackTypeMigration = 20,

        /// <summary>
        /// Enum PackTypeBudget for value: 255
        /// </summary>
        PackTypeBudget = 255
    }

    /// <summary>
    /// Converts <see cref="DtoPackType"/> to and from the JSON value
    /// </summary>
    public static class DtoPackTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="DtoPackType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DtoPackType FromString(string value)
        {
            if (value.Equals((-1).ToString()))
                return DtoPackType.PackTypeUnknown;

            if (value.Equals((0).ToString()))
                return DtoPackType.PackTypeFree;

            if (value.Equals((1).ToString()))
                return DtoPackType.PackTypeSpecial;

            if (value.Equals((10).ToString()))
                return DtoPackType.PackTypeOpenSource;

            if (value.Equals((20).ToString()))
                return DtoPackType.PackTypeMigration;

            if (value.Equals((255).ToString()))
                return DtoPackType.PackTypeBudget;

            throw new NotImplementedException($"Could not convert value to type DtoPackType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="DtoPackType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DtoPackType? FromStringOrDefault(string value)
        {
            if (value.Equals((-1).ToString()))
                return DtoPackType.PackTypeUnknown;

            if (value.Equals((0).ToString()))
                return DtoPackType.PackTypeFree;

            if (value.Equals((1).ToString()))
                return DtoPackType.PackTypeSpecial;

            if (value.Equals((10).ToString()))
                return DtoPackType.PackTypeOpenSource;

            if (value.Equals((20).ToString()))
                return DtoPackType.PackTypeMigration;

            if (value.Equals((255).ToString()))
                return DtoPackType.PackTypeBudget;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DtoPackType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(DtoPackType value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoPackType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class DtoPackTypeJsonConverter : JsonConverter<DtoPackType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DtoPackType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DtoPackType? result = rawValue == null
                ? null
                : DtoPackTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DtoPackType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoPackType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DtoPackType dtoPackType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dtoPackType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoPackType"/>
    /// </summary>
    public class DtoPackTypeNullableJsonConverter : JsonConverter<DtoPackType?>
    {
        /// <summary>
        /// Returns a DtoPackType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DtoPackType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DtoPackType? result = rawValue == null
                ? null
                : DtoPackTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoPackType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DtoPackType? dtoPackType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dtoPackType?.ToString() ?? "null");
        }
    }
}
