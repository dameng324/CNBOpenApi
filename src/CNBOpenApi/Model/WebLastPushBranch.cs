// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebLastPushBranch
    /// </summary>
    public partial class WebLastPushBranch : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebLastPushBranch" /> class.
        /// </summary>
        /// <param name="dateTime">dateTime</param>
        /// <param name="isHead">isHead</param>
        /// <param name="pullNumber">pullNumber</param>
        /// <param name="ref">ref</param>
        [JsonConstructor]
        public WebLastPushBranch(Option<string?> dateTime = default, Option<bool?> isHead = default, Option<int?> pullNumber = default, Option<string?> @ref = default)
        {
            DateTimeOption = dateTime;
            IsHeadOption = isHead;
            PullNumberOption = pullNumber;
            RefOption = @ref;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DateTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [JsonPropertyName("date_time")]
        public string? DateTime { get { return this.DateTimeOption; } set { this.DateTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsHead
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsHeadOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsHead
        /// </summary>
        [JsonPropertyName("is_head")]
        public bool? IsHead { get { return this.IsHeadOption; } set { this.IsHeadOption = new(value); } }

        /// <summary>
        /// Used to track the state of PullNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PullNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets PullNumber
        /// </summary>
        [JsonPropertyName("pull_number")]
        public int? PullNumber { get { return this.PullNumberOption; } set { this.PullNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ref
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RefOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ref
        /// </summary>
        [JsonPropertyName("ref")]
        public string? Ref { get { return this.RefOption; } set { this.RefOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebLastPushBranch {\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  IsHead: ").Append(IsHead).Append("\n");
            sb.Append("  PullNumber: ").Append(PullNumber).Append("\n");
            sb.Append("  Ref: ").Append(Ref).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebLastPushBranch" />
    /// </summary>
    public class WebLastPushBranchJsonConverter : JsonConverter<WebLastPushBranch>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebLastPushBranch" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebLastPushBranch Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> dateTime = default;
            Option<bool?> isHead = default;
            Option<int?> pullNumber = default;
            Option<string?> varRef = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "date_time":
                            dateTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_head":
                            isHead = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "pull_number":
                            pullNumber = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "ref":
                            varRef = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (dateTime.IsSet && dateTime.Value == null)
                throw new ArgumentNullException(nameof(dateTime), "Property is not nullable for class WebLastPushBranch.");

            if (isHead.IsSet && isHead.Value == null)
                throw new ArgumentNullException(nameof(isHead), "Property is not nullable for class WebLastPushBranch.");

            if (pullNumber.IsSet && pullNumber.Value == null)
                throw new ArgumentNullException(nameof(pullNumber), "Property is not nullable for class WebLastPushBranch.");

            if (varRef.IsSet && varRef.Value == null)
                throw new ArgumentNullException(nameof(varRef), "Property is not nullable for class WebLastPushBranch.");

            return new WebLastPushBranch(dateTime, isHead, pullNumber, varRef);
        }

        /// <summary>
        /// Serializes a <see cref="WebLastPushBranch" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webLastPushBranch"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebLastPushBranch webLastPushBranch, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webLastPushBranch, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebLastPushBranch" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webLastPushBranch"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebLastPushBranch webLastPushBranch, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webLastPushBranch.DateTimeOption.IsSet && webLastPushBranch.DateTime == null)
                throw new ArgumentNullException(nameof(webLastPushBranch.DateTime), "Property is required for class WebLastPushBranch.");

            if (webLastPushBranch.RefOption.IsSet && webLastPushBranch.Ref == null)
                throw new ArgumentNullException(nameof(webLastPushBranch.Ref), "Property is required for class WebLastPushBranch.");

            if (webLastPushBranch.DateTimeOption.IsSet)
                writer.WriteString("date_time", webLastPushBranch.DateTime);

            if (webLastPushBranch.IsHeadOption.IsSet)
                writer.WriteBoolean("is_head", webLastPushBranch.IsHeadOption.Value!.Value);

            if (webLastPushBranch.PullNumberOption.IsSet)
                writer.WriteNumber("pull_number", webLastPushBranch.PullNumberOption.Value!.Value);

            if (webLastPushBranch.RefOption.IsSet)
                writer.WriteString("ref", webLastPushBranch.Ref);
        }
    }
}
