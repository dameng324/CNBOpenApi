// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// Defines dto.PackageType
    /// </summary>
    public enum DtoPackageType
    {
        /// <summary>
        /// Enum PackageTypeAll for value: all
        /// </summary>
        PackageTypeAll = 1,

        /// <summary>
        /// Enum PackageTypeDocker for value: docker
        /// </summary>
        PackageTypeDocker = 2,

        /// <summary>
        /// Enum PackageTypeHelm for value: helm
        /// </summary>
        PackageTypeHelm = 3,

        /// <summary>
        /// Enum PackageTypeNpm for value: npm
        /// </summary>
        PackageTypeNpm = 4,

        /// <summary>
        /// Enum PackageTypeMaven for value: maven
        /// </summary>
        PackageTypeMaven = 5,

        /// <summary>
        /// Enum PackageTypeOhpm for value: ohpm
        /// </summary>
        PackageTypeOhpm = 6
    }

    /// <summary>
    /// Converts <see cref="DtoPackageType"/> to and from the JSON value
    /// </summary>
    public static class DtoPackageTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="DtoPackageType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DtoPackageType FromString(string value)
        {
            if (value.Equals("all"))
                return DtoPackageType.PackageTypeAll;

            if (value.Equals("docker"))
                return DtoPackageType.PackageTypeDocker;

            if (value.Equals("helm"))
                return DtoPackageType.PackageTypeHelm;

            if (value.Equals("npm"))
                return DtoPackageType.PackageTypeNpm;

            if (value.Equals("maven"))
                return DtoPackageType.PackageTypeMaven;

            if (value.Equals("ohpm"))
                return DtoPackageType.PackageTypeOhpm;

            throw new NotImplementedException($"Could not convert value to type DtoPackageType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="DtoPackageType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DtoPackageType? FromStringOrDefault(string value)
        {
            if (value.Equals("all"))
                return DtoPackageType.PackageTypeAll;

            if (value.Equals("docker"))
                return DtoPackageType.PackageTypeDocker;

            if (value.Equals("helm"))
                return DtoPackageType.PackageTypeHelm;

            if (value.Equals("npm"))
                return DtoPackageType.PackageTypeNpm;

            if (value.Equals("maven"))
                return DtoPackageType.PackageTypeMaven;

            if (value.Equals("ohpm"))
                return DtoPackageType.PackageTypeOhpm;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DtoPackageType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(DtoPackageType value)
        {
            if (value == DtoPackageType.PackageTypeAll)
                return "all";

            if (value == DtoPackageType.PackageTypeDocker)
                return "docker";

            if (value == DtoPackageType.PackageTypeHelm)
                return "helm";

            if (value == DtoPackageType.PackageTypeNpm)
                return "npm";

            if (value == DtoPackageType.PackageTypeMaven)
                return "maven";

            if (value == DtoPackageType.PackageTypeOhpm)
                return "ohpm";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoPackageType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class DtoPackageTypeJsonConverter : JsonConverter<DtoPackageType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DtoPackageType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DtoPackageType? result = rawValue == null
                ? null
                : DtoPackageTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DtoPackageType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoPackageType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DtoPackageType dtoPackageType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dtoPackageType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoPackageType"/>
    /// </summary>
    public class DtoPackageTypeNullableJsonConverter : JsonConverter<DtoPackageType?>
    {
        /// <summary>
        /// Returns a DtoPackageType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DtoPackageType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DtoPackageType? result = rawValue == null
                ? null
                : DtoPackageTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoPackageType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DtoPackageType? dtoPackageType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dtoPackageType?.ToString() ?? "null");
        }
    }
}
