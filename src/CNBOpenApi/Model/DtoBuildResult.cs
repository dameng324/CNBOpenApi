// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoBuildResult
    /// </summary>
    public partial class DtoBuildResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoBuildResult" /> class.
        /// </summary>
        /// <param name="buildLogUrl">构建链接</param>
        /// <param name="message">message</param>
        /// <param name="sn">构建号</param>
        [JsonConstructor]
        public DtoBuildResult(Option<string?> buildLogUrl = default, Option<string?> message = default, Option<string?> sn = default)
        {
            BuildLogUrlOption = buildLogUrl;
            MessageOption = message;
            SnOption = sn;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BuildLogUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BuildLogUrlOption { get; private set; }

        /// <summary>
        /// 构建链接
        /// </summary>
        /// <value>构建链接</value>
        [JsonPropertyName("buildLogUrl")]
        public string? BuildLogUrl { get { return this.BuildLogUrlOption; } set { this.BuildLogUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MessageOption { get; private set; }

        /// <summary>
        /// message
        /// </summary>
        /// <value>message</value>
        [JsonPropertyName("message")]
        public string? Message { get { return this.MessageOption; } set { this.MessageOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SnOption { get; private set; }

        /// <summary>
        /// 构建号
        /// </summary>
        /// <value>构建号</value>
        [JsonPropertyName("sn")]
        public string? Sn { get { return this.SnOption; } set { this.SnOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoBuildResult {\n");
            sb.Append("  BuildLogUrl: ").Append(BuildLogUrl).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Sn: ").Append(Sn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoBuildResult" />
    /// </summary>
    public class DtoBuildResultJsonConverter : JsonConverter<DtoBuildResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoBuildResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoBuildResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> buildLogUrl = default;
            Option<string?> message = default;
            Option<string?> sn = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "buildLogUrl":
                            buildLogUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sn":
                            sn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (buildLogUrl.IsSet && buildLogUrl.Value == null)
                throw new ArgumentNullException(nameof(buildLogUrl), "Property is not nullable for class DtoBuildResult.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class DtoBuildResult.");

            if (sn.IsSet && sn.Value == null)
                throw new ArgumentNullException(nameof(sn), "Property is not nullable for class DtoBuildResult.");

            return new DtoBuildResult(buildLogUrl, message, sn);
        }

        /// <summary>
        /// Serializes a <see cref="DtoBuildResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoBuildResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoBuildResult dtoBuildResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoBuildResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoBuildResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoBuildResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoBuildResult dtoBuildResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoBuildResult.BuildLogUrlOption.IsSet && dtoBuildResult.BuildLogUrl == null)
                throw new ArgumentNullException(nameof(dtoBuildResult.BuildLogUrl), "Property is required for class DtoBuildResult.");

            if (dtoBuildResult.MessageOption.IsSet && dtoBuildResult.Message == null)
                throw new ArgumentNullException(nameof(dtoBuildResult.Message), "Property is required for class DtoBuildResult.");

            if (dtoBuildResult.SnOption.IsSet && dtoBuildResult.Sn == null)
                throw new ArgumentNullException(nameof(dtoBuildResult.Sn), "Property is required for class DtoBuildResult.");

            if (dtoBuildResult.BuildLogUrlOption.IsSet)
                writer.WriteString("buildLogUrl", dtoBuildResult.BuildLogUrl);

            if (dtoBuildResult.MessageOption.IsSet)
                writer.WriteString("message", dtoBuildResult.Message);

            if (dtoBuildResult.SnOption.IsSet)
                writer.WriteString("sn", dtoBuildResult.Sn);
        }
    }
}
