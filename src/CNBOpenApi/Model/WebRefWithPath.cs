// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebRefWithPath
    /// </summary>
    public partial class WebRefWithPath : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebRefWithPath" /> class.
        /// </summary>
        /// <param name="initialized">initialized</param>
        /// <param name="path">path</param>
        /// <param name="ref">ref</param>
        /// <param name="refSimpleName">refSimpleName</param>
        /// <param name="refType">refType</param>
        [JsonConstructor]
        public WebRefWithPath(Option<bool?> initialized = default, Option<string?> path = default, Option<string?> @ref = default, Option<string?> refSimpleName = default, Option<string?> refType = default)
        {
            InitializedOption = initialized;
            PathOption = path;
            RefOption = @ref;
            RefSimpleNameOption = refSimpleName;
            RefTypeOption = refType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Initialized
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> InitializedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Initialized
        /// </summary>
        [JsonPropertyName("initialized")]
        public bool? Initialized { get { return this.InitializedOption; } set { this.InitializedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ref
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RefOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ref
        /// </summary>
        [JsonPropertyName("ref")]
        public string? Ref { get { return this.RefOption; } set { this.RefOption = new(value); } }

        /// <summary>
        /// Used to track the state of RefSimpleName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RefSimpleNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets RefSimpleName
        /// </summary>
        [JsonPropertyName("ref_simple_name")]
        public string? RefSimpleName { get { return this.RefSimpleNameOption; } set { this.RefSimpleNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of RefType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RefTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets RefType
        /// </summary>
        [JsonPropertyName("ref_type")]
        public string? RefType { get { return this.RefTypeOption; } set { this.RefTypeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebRefWithPath {\n");
            sb.Append("  Initialized: ").Append(Initialized).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Ref: ").Append(Ref).Append("\n");
            sb.Append("  RefSimpleName: ").Append(RefSimpleName).Append("\n");
            sb.Append("  RefType: ").Append(RefType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebRefWithPath" />
    /// </summary>
    public class WebRefWithPathJsonConverter : JsonConverter<WebRefWithPath>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebRefWithPath" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebRefWithPath Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> initialized = default;
            Option<string?> path = default;
            Option<string?> varRef = default;
            Option<string?> refSimpleName = default;
            Option<string?> refType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "initialized":
                            initialized = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ref":
                            varRef = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ref_simple_name":
                            refSimpleName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ref_type":
                            refType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (initialized.IsSet && initialized.Value == null)
                throw new ArgumentNullException(nameof(initialized), "Property is not nullable for class WebRefWithPath.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class WebRefWithPath.");

            if (varRef.IsSet && varRef.Value == null)
                throw new ArgumentNullException(nameof(varRef), "Property is not nullable for class WebRefWithPath.");

            if (refSimpleName.IsSet && refSimpleName.Value == null)
                throw new ArgumentNullException(nameof(refSimpleName), "Property is not nullable for class WebRefWithPath.");

            if (refType.IsSet && refType.Value == null)
                throw new ArgumentNullException(nameof(refType), "Property is not nullable for class WebRefWithPath.");

            return new WebRefWithPath(initialized, path, varRef, refSimpleName, refType);
        }

        /// <summary>
        /// Serializes a <see cref="WebRefWithPath" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webRefWithPath"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebRefWithPath webRefWithPath, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webRefWithPath, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebRefWithPath" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webRefWithPath"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebRefWithPath webRefWithPath, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webRefWithPath.PathOption.IsSet && webRefWithPath.Path == null)
                throw new ArgumentNullException(nameof(webRefWithPath.Path), "Property is required for class WebRefWithPath.");

            if (webRefWithPath.RefOption.IsSet && webRefWithPath.Ref == null)
                throw new ArgumentNullException(nameof(webRefWithPath.Ref), "Property is required for class WebRefWithPath.");

            if (webRefWithPath.RefSimpleNameOption.IsSet && webRefWithPath.RefSimpleName == null)
                throw new ArgumentNullException(nameof(webRefWithPath.RefSimpleName), "Property is required for class WebRefWithPath.");

            if (webRefWithPath.RefTypeOption.IsSet && webRefWithPath.RefType == null)
                throw new ArgumentNullException(nameof(webRefWithPath.RefType), "Property is required for class WebRefWithPath.");

            if (webRefWithPath.InitializedOption.IsSet)
                writer.WriteBoolean("initialized", webRefWithPath.InitializedOption.Value!.Value);

            if (webRefWithPath.PathOption.IsSet)
                writer.WriteString("path", webRefWithPath.Path);

            if (webRefWithPath.RefOption.IsSet)
                writer.WriteString("ref", webRefWithPath.Ref);

            if (webRefWithPath.RefSimpleNameOption.IsSet)
                writer.WriteString("ref_simple_name", webRefWithPath.RefSimpleName);

            if (webRefWithPath.RefTypeOption.IsSet)
                writer.WriteString("ref_type", webRefWithPath.RefType);
        }
    }
}
