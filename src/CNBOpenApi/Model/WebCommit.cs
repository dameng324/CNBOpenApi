// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebCommit
    /// </summary>
    public partial class WebCommit : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebCommit" /> class.
        /// </summary>
        /// <param name="author">author</param>
        /// <param name="commit">commit</param>
        /// <param name="commitStatuses">commitStatuses</param>
        /// <param name="committer">committer</param>
        /// <param name="files">files</param>
        /// <param name="parents">parents</param>
        /// <param name="sha">sha</param>
        [JsonConstructor]
        public WebCommit(Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffWebUserInfo?> author = default, Option<WebCommitObject?> commit = default, Option<WebCommitStatuses?> commitStatuses = default, Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffWebUserInfo?> committer = default, Option<WebCommitFiles?> files = default, Option<List<WebCommitParent>?> parents = default, Option<string?> sha = default)
        {
            AuthorOption = author;
            CommitOption = commit;
            CommitStatusesOption = commitStatuses;
            CommitterOption = committer;
            FilesOption = files;
            ParentsOption = parents;
            ShaOption = sha;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Author
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffWebUserInfo?> AuthorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [JsonPropertyName("author")]
        public GitWoaComCnbMonorepoGitInternalAppGitServiceBffWebUserInfo? Author { get { return this.AuthorOption; } set { this.AuthorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Commit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebCommitObject?> CommitOption { get; private set; }

        /// <summary>
        /// Gets or Sets Commit
        /// </summary>
        [JsonPropertyName("commit")]
        public WebCommitObject? Commit { get { return this.CommitOption; } set { this.CommitOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommitStatuses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebCommitStatuses?> CommitStatusesOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommitStatuses
        /// </summary>
        [JsonPropertyName("commit_statuses")]
        public WebCommitStatuses? CommitStatuses { get { return this.CommitStatusesOption; } set { this.CommitStatusesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Committer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffWebUserInfo?> CommitterOption { get; private set; }

        /// <summary>
        /// Gets or Sets Committer
        /// </summary>
        [JsonPropertyName("committer")]
        public GitWoaComCnbMonorepoGitInternalAppGitServiceBffWebUserInfo? Committer { get { return this.CommitterOption; } set { this.CommitterOption = new(value); } }

        /// <summary>
        /// Used to track the state of Files
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebCommitFiles?> FilesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [JsonPropertyName("files")]
        public WebCommitFiles? Files { get { return this.FilesOption; } set { this.FilesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Parents
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebCommitParent>?> ParentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Parents
        /// </summary>
        [JsonPropertyName("parents")]
        public List<WebCommitParent>? Parents { get { return this.ParentsOption; } set { this.ParentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sha
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ShaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sha
        /// </summary>
        [JsonPropertyName("sha")]
        public string? Sha { get { return this.ShaOption; } set { this.ShaOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebCommit {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Commit: ").Append(Commit).Append("\n");
            sb.Append("  CommitStatuses: ").Append(CommitStatuses).Append("\n");
            sb.Append("  Committer: ").Append(Committer).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  Parents: ").Append(Parents).Append("\n");
            sb.Append("  Sha: ").Append(Sha).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebCommit" />
    /// </summary>
    public class WebCommitJsonConverter : JsonConverter<WebCommit>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebCommit" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebCommit Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffWebUserInfo?> author = default;
            Option<WebCommitObject?> commit = default;
            Option<WebCommitStatuses?> commitStatuses = default;
            Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffWebUserInfo?> committer = default;
            Option<WebCommitFiles?> files = default;
            Option<List<WebCommitParent>?> parents = default;
            Option<string?> sha = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "author":
                            author = new Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffWebUserInfo?>(JsonSerializer.Deserialize<GitWoaComCnbMonorepoGitInternalAppGitServiceBffWebUserInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "commit":
                            commit = new Option<WebCommitObject?>(JsonSerializer.Deserialize<WebCommitObject>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "commit_statuses":
                            commitStatuses = new Option<WebCommitStatuses?>(JsonSerializer.Deserialize<WebCommitStatuses>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "committer":
                            committer = new Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffWebUserInfo?>(JsonSerializer.Deserialize<GitWoaComCnbMonorepoGitInternalAppGitServiceBffWebUserInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "files":
                            files = new Option<WebCommitFiles?>(JsonSerializer.Deserialize<WebCommitFiles>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "parents":
                            parents = new Option<List<WebCommitParent>?>(JsonSerializer.Deserialize<List<WebCommitParent>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sha":
                            sha = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (author.IsSet && author.Value == null)
                throw new ArgumentNullException(nameof(author), "Property is not nullable for class WebCommit.");

            if (commit.IsSet && commit.Value == null)
                throw new ArgumentNullException(nameof(commit), "Property is not nullable for class WebCommit.");

            if (commitStatuses.IsSet && commitStatuses.Value == null)
                throw new ArgumentNullException(nameof(commitStatuses), "Property is not nullable for class WebCommit.");

            if (committer.IsSet && committer.Value == null)
                throw new ArgumentNullException(nameof(committer), "Property is not nullable for class WebCommit.");

            if (files.IsSet && files.Value == null)
                throw new ArgumentNullException(nameof(files), "Property is not nullable for class WebCommit.");

            if (parents.IsSet && parents.Value == null)
                throw new ArgumentNullException(nameof(parents), "Property is not nullable for class WebCommit.");

            if (sha.IsSet && sha.Value == null)
                throw new ArgumentNullException(nameof(sha), "Property is not nullable for class WebCommit.");

            return new WebCommit(author, commit, commitStatuses, committer, files, parents, sha);
        }

        /// <summary>
        /// Serializes a <see cref="WebCommit" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webCommit"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebCommit webCommit, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webCommit, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebCommit" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webCommit"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebCommit webCommit, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webCommit.AuthorOption.IsSet && webCommit.Author == null)
                throw new ArgumentNullException(nameof(webCommit.Author), "Property is required for class WebCommit.");

            if (webCommit.CommitOption.IsSet && webCommit.Commit == null)
                throw new ArgumentNullException(nameof(webCommit.Commit), "Property is required for class WebCommit.");

            if (webCommit.CommitStatusesOption.IsSet && webCommit.CommitStatuses == null)
                throw new ArgumentNullException(nameof(webCommit.CommitStatuses), "Property is required for class WebCommit.");

            if (webCommit.CommitterOption.IsSet && webCommit.Committer == null)
                throw new ArgumentNullException(nameof(webCommit.Committer), "Property is required for class WebCommit.");

            if (webCommit.FilesOption.IsSet && webCommit.Files == null)
                throw new ArgumentNullException(nameof(webCommit.Files), "Property is required for class WebCommit.");

            if (webCommit.ParentsOption.IsSet && webCommit.Parents == null)
                throw new ArgumentNullException(nameof(webCommit.Parents), "Property is required for class WebCommit.");

            if (webCommit.ShaOption.IsSet && webCommit.Sha == null)
                throw new ArgumentNullException(nameof(webCommit.Sha), "Property is required for class WebCommit.");

            if (webCommit.AuthorOption.IsSet)
            {
                writer.WritePropertyName("author");
                JsonSerializer.Serialize(writer, webCommit.Author, jsonSerializerOptions);
            }
            if (webCommit.CommitOption.IsSet)
            {
                writer.WritePropertyName("commit");
                JsonSerializer.Serialize(writer, webCommit.Commit, jsonSerializerOptions);
            }
            if (webCommit.CommitStatusesOption.IsSet)
            {
                writer.WritePropertyName("commit_statuses");
                JsonSerializer.Serialize(writer, webCommit.CommitStatuses, jsonSerializerOptions);
            }
            if (webCommit.CommitterOption.IsSet)
            {
                writer.WritePropertyName("committer");
                JsonSerializer.Serialize(writer, webCommit.Committer, jsonSerializerOptions);
            }
            if (webCommit.FilesOption.IsSet)
            {
                writer.WritePropertyName("files");
                JsonSerializer.Serialize(writer, webCommit.Files, jsonSerializerOptions);
            }
            if (webCommit.ParentsOption.IsSet)
            {
                writer.WritePropertyName("parents");
                JsonSerializer.Serialize(writer, webCommit.Parents, jsonSerializerOptions);
            }
            if (webCommit.ShaOption.IsSet)
                writer.WriteString("sha", webCommit.Sha);
        }
    }
}
