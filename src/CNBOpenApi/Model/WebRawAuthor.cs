// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebRawAuthor
    /// </summary>
    public partial class WebRawAuthor : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebRawAuthor" /> class.
        /// </summary>
        /// <param name="authorEmail">authorEmail</param>
        /// <param name="authorName">authorName</param>
        [JsonConstructor]
        public WebRawAuthor(Option<string?> authorEmail = default, Option<string?> authorName = default)
        {
            AuthorEmailOption = authorEmail;
            AuthorNameOption = authorName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AuthorEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AuthorEmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets AuthorEmail
        /// </summary>
        [JsonPropertyName("author_email")]
        public string? AuthorEmail { get { return this.AuthorEmailOption; } set { this.AuthorEmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of AuthorName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AuthorNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets AuthorName
        /// </summary>
        [JsonPropertyName("author_name")]
        public string? AuthorName { get { return this.AuthorNameOption; } set { this.AuthorNameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebRawAuthor {\n");
            sb.Append("  AuthorEmail: ").Append(AuthorEmail).Append("\n");
            sb.Append("  AuthorName: ").Append(AuthorName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebRawAuthor" />
    /// </summary>
    public class WebRawAuthorJsonConverter : JsonConverter<WebRawAuthor>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebRawAuthor" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebRawAuthor Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> authorEmail = default;
            Option<string?> authorName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "author_email":
                            authorEmail = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "author_name":
                            authorName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (authorEmail.IsSet && authorEmail.Value == null)
                throw new ArgumentNullException(nameof(authorEmail), "Property is not nullable for class WebRawAuthor.");

            if (authorName.IsSet && authorName.Value == null)
                throw new ArgumentNullException(nameof(authorName), "Property is not nullable for class WebRawAuthor.");

            return new WebRawAuthor(authorEmail, authorName);
        }

        /// <summary>
        /// Serializes a <see cref="WebRawAuthor" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webRawAuthor"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebRawAuthor webRawAuthor, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webRawAuthor, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebRawAuthor" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webRawAuthor"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebRawAuthor webRawAuthor, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webRawAuthor.AuthorEmailOption.IsSet && webRawAuthor.AuthorEmail == null)
                throw new ArgumentNullException(nameof(webRawAuthor.AuthorEmail), "Property is required for class WebRawAuthor.");

            if (webRawAuthor.AuthorNameOption.IsSet && webRawAuthor.AuthorName == null)
                throw new ArgumentNullException(nameof(webRawAuthor.AuthorName), "Property is required for class WebRawAuthor.");

            if (webRawAuthor.AuthorEmailOption.IsSet)
                writer.WriteString("author_email", webRawAuthor.AuthorEmail);

            if (webRawAuthor.AuthorNameOption.IsSet)
                writer.WriteString("author_name", webRawAuthor.AuthorName);
        }
    }
}
