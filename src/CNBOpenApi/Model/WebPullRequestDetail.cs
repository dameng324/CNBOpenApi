// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebPullRequestDetail
    /// </summary>
    public partial class WebPullRequestDetail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebPullRequestDetail" /> class.
        /// </summary>
        /// <param name="allowMergeStyles">allowMergeStyles</param>
        /// <param name="assignees">assignees</param>
        /// <param name="author">author</param>
        /// <param name="base">base</param>
        /// <param name="baseRepoRef">baseRepoRef</param>
        /// <param name="blockedOn">blockedOn</param>
        /// <param name="body">body</param>
        /// <param name="canDoMerge">canDoMerge</param>
        /// <param name="commentCount">commentCount</param>
        /// <param name="commitCount">commitCount</param>
        /// <param name="commitStatuses">commitStatuses</param>
        /// <param name="conflictFileCount">conflictFileCount</param>
        /// <param name="conflictFiles">conflictFiles</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="fileCount">fileCount</param>
        /// <param name="head">head</param>
        /// <param name="headRepoRef">headRepoRef</param>
        /// <param name="headRepoSlug">headRepoSlug</param>
        /// <param name="isMerged">isMerged</param>
        /// <param name="isReadyForMerge">isReadyForMerge</param>
        /// <param name="labels">labels</param>
        /// <param name="lastActedAt">lastActedAt</param>
        /// <param name="mergeStyle">mergeStyle</param>
        /// <param name="mergeableState">mergeableState</param>
        /// <param name="number">number</param>
        /// <param name="participants">participants</param>
        /// <param name="reviewCommentCount">reviewCommentCount</param>
        /// <param name="reviewCount">reviewCount</param>
        /// <param name="reviewers">reviewers</param>
        /// <param name="reviews">reviews</param>
        /// <param name="settings">settings</param>
        /// <param name="state">state</param>
        /// <param name="statusCheckCommitSha">statusCheckCommitSha</param>
        /// <param name="title">title</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public WebPullRequestDetail(Option<List<string>?> allowMergeStyles = default, Option<List<WebPullRequestAssignee>?> assignees = default, Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?> author = default, Option<WebPullRequestRepository?> @base = default, Option<string?> baseRepoRef = default, Option<string?> blockedOn = default, Option<string?> body = default, Option<bool?> canDoMerge = default, Option<int?> commentCount = default, Option<int?> commitCount = default, Option<WebCommitStatuses?> commitStatuses = default, Option<int?> conflictFileCount = default, Option<List<string>?> conflictFiles = default, Option<string?> createdAt = default, Option<int?> fileCount = default, Option<WebPullRequestRepository?> head = default, Option<string?> headRepoRef = default, Option<string?> headRepoSlug = default, Option<bool?> isMerged = default, Option<bool?> isReadyForMerge = default, Option<List<LabelOption>?> labels = default, Option<string?> lastActedAt = default, Option<string?> mergeStyle = default, Option<string?> mergeableState = default, Option<string?> number = default, Option<List<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo>?> participants = default, Option<int?> reviewCommentCount = default, Option<int?> reviewCount = default, Option<List<WebPullRequestReviewer>?> reviewers = default, Option<WebPullRequestReviews?> reviews = default, Option<WebPullRequestSetting?> settings = default, Option<string?> state = default, Option<string?> statusCheckCommitSha = default, Option<string?> title = default, Option<string?> updatedAt = default)
        {
            AllowMergeStylesOption = allowMergeStyles;
            AssigneesOption = assignees;
            AuthorOption = author;
            BaseOption = @base;
            BaseRepoRefOption = baseRepoRef;
            BlockedOnOption = blockedOn;
            BodyOption = body;
            CanDoMergeOption = canDoMerge;
            CommentCountOption = commentCount;
            CommitCountOption = commitCount;
            CommitStatusesOption = commitStatuses;
            ConflictFileCountOption = conflictFileCount;
            ConflictFilesOption = conflictFiles;
            CreatedAtOption = createdAt;
            FileCountOption = fileCount;
            HeadOption = head;
            HeadRepoRefOption = headRepoRef;
            HeadRepoSlugOption = headRepoSlug;
            IsMergedOption = isMerged;
            IsReadyForMergeOption = isReadyForMerge;
            LabelsOption = labels;
            LastActedAtOption = lastActedAt;
            MergeStyleOption = mergeStyle;
            MergeableStateOption = mergeableState;
            NumberOption = number;
            ParticipantsOption = participants;
            ReviewCommentCountOption = reviewCommentCount;
            ReviewCountOption = reviewCount;
            ReviewersOption = reviewers;
            ReviewsOption = reviews;
            SettingsOption = settings;
            StateOption = state;
            StatusCheckCommitShaOption = statusCheckCommitSha;
            TitleOption = title;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AllowMergeStyles
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> AllowMergeStylesOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowMergeStyles
        /// </summary>
        [JsonPropertyName("allow_merge_styles")]
        public List<string>? AllowMergeStyles { get { return this.AllowMergeStylesOption; } set { this.AllowMergeStylesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Assignees
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebPullRequestAssignee>?> AssigneesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Assignees
        /// </summary>
        [JsonPropertyName("assignees")]
        public List<WebPullRequestAssignee>? Assignees { get { return this.AssigneesOption; } set { this.AssigneesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Author
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?> AuthorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [JsonPropertyName("author")]
        public GitWoaComCnbMonorepoGitInternalDtoWebUserInfo? Author { get { return this.AuthorOption; } set { this.AuthorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Base
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebPullRequestRepository?> BaseOption { get; private set; }

        /// <summary>
        /// Gets or Sets Base
        /// </summary>
        [JsonPropertyName("base")]
        public WebPullRequestRepository? Base { get { return this.BaseOption; } set { this.BaseOption = new(value); } }

        /// <summary>
        /// Used to track the state of BaseRepoRef
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BaseRepoRefOption { get; private set; }

        /// <summary>
        /// Gets or Sets BaseRepoRef
        /// </summary>
        [JsonPropertyName("base_repo_ref")]
        public string? BaseRepoRef { get { return this.BaseRepoRefOption; } set { this.BaseRepoRefOption = new(value); } }

        /// <summary>
        /// Used to track the state of BlockedOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BlockedOnOption { get; private set; }

        /// <summary>
        /// Gets or Sets BlockedOn
        /// </summary>
        [JsonPropertyName("blocked_on")]
        public string? BlockedOn { get { return this.BlockedOnOption; } set { this.BlockedOnOption = new(value); } }

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BodyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public string? Body { get { return this.BodyOption; } set { this.BodyOption = new(value); } }

        /// <summary>
        /// Used to track the state of CanDoMerge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CanDoMergeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CanDoMerge
        /// </summary>
        [JsonPropertyName("can_do_merge")]
        public bool? CanDoMerge { get { return this.CanDoMergeOption; } set { this.CanDoMergeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommentCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CommentCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommentCount
        /// </summary>
        [JsonPropertyName("comment_count")]
        public int? CommentCount { get { return this.CommentCountOption; } set { this.CommentCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommitCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CommitCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommitCount
        /// </summary>
        [JsonPropertyName("commit_count")]
        public int? CommitCount { get { return this.CommitCountOption; } set { this.CommitCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommitStatuses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebCommitStatuses?> CommitStatusesOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommitStatuses
        /// </summary>
        [JsonPropertyName("commit_statuses")]
        public WebCommitStatuses? CommitStatuses { get { return this.CommitStatusesOption; } set { this.CommitStatusesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ConflictFileCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ConflictFileCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets ConflictFileCount
        /// </summary>
        [JsonPropertyName("conflict_file_count")]
        public int? ConflictFileCount { get { return this.ConflictFileCountOption; } set { this.ConflictFileCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of ConflictFiles
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ConflictFilesOption { get; private set; }

        /// <summary>
        /// Gets or Sets ConflictFiles
        /// </summary>
        [JsonPropertyName("conflict_files")]
        public List<string>? ConflictFiles { get { return this.ConflictFilesOption; } set { this.ConflictFilesOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FileCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileCount
        /// </summary>
        [JsonPropertyName("file_count")]
        public int? FileCount { get { return this.FileCountOption; } set { this.FileCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Head
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebPullRequestRepository?> HeadOption { get; private set; }

        /// <summary>
        /// Gets or Sets Head
        /// </summary>
        [JsonPropertyName("head")]
        public WebPullRequestRepository? Head { get { return this.HeadOption; } set { this.HeadOption = new(value); } }

        /// <summary>
        /// Used to track the state of HeadRepoRef
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HeadRepoRefOption { get; private set; }

        /// <summary>
        /// Gets or Sets HeadRepoRef
        /// </summary>
        [JsonPropertyName("head_repo_ref")]
        public string? HeadRepoRef { get { return this.HeadRepoRefOption; } set { this.HeadRepoRefOption = new(value); } }

        /// <summary>
        /// Used to track the state of HeadRepoSlug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HeadRepoSlugOption { get; private set; }

        /// <summary>
        /// Gets or Sets HeadRepoSlug
        /// </summary>
        [JsonPropertyName("head_repo_slug")]
        public string? HeadRepoSlug { get { return this.HeadRepoSlugOption; } set { this.HeadRepoSlugOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsMerged
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsMergedOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsMerged
        /// </summary>
        [JsonPropertyName("is_merged")]
        public bool? IsMerged { get { return this.IsMergedOption; } set { this.IsMergedOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsReadyForMerge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsReadyForMergeOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsReadyForMerge
        /// </summary>
        [JsonPropertyName("is_ready_for_merge")]
        public bool? IsReadyForMerge { get { return this.IsReadyForMergeOption; } set { this.IsReadyForMergeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Labels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<LabelOption>?> LabelsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [JsonPropertyName("labels")]
        public List<LabelOption>? Labels { get { return this.LabelsOption; } set { this.LabelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastActedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastActedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastActedAt
        /// </summary>
        [JsonPropertyName("last_acted_at")]
        public string? LastActedAt { get { return this.LastActedAtOption; } set { this.LastActedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of MergeStyle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MergeStyleOption { get; private set; }

        /// <summary>
        /// Gets or Sets MergeStyle
        /// </summary>
        [JsonPropertyName("merge_style")]
        public string? MergeStyle { get { return this.MergeStyleOption; } set { this.MergeStyleOption = new(value); } }

        /// <summary>
        /// Used to track the state of MergeableState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MergeableStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets MergeableState
        /// </summary>
        [JsonPropertyName("mergeable_state")]
        public string? MergeableState { get { return this.MergeableStateOption; } set { this.MergeableStateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public string? Number { get { return this.NumberOption; } set { this.NumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Participants
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo>?> ParticipantsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Participants
        /// </summary>
        [JsonPropertyName("participants")]
        public List<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo>? Participants { get { return this.ParticipantsOption; } set { this.ParticipantsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReviewCommentCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ReviewCommentCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReviewCommentCount
        /// </summary>
        [JsonPropertyName("review_comment_count")]
        public int? ReviewCommentCount { get { return this.ReviewCommentCountOption; } set { this.ReviewCommentCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReviewCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ReviewCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReviewCount
        /// </summary>
        [JsonPropertyName("review_count")]
        public int? ReviewCount { get { return this.ReviewCountOption; } set { this.ReviewCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reviewers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebPullRequestReviewer>?> ReviewersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Reviewers
        /// </summary>
        [JsonPropertyName("reviewers")]
        public List<WebPullRequestReviewer>? Reviewers { get { return this.ReviewersOption; } set { this.ReviewersOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reviews
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebPullRequestReviews?> ReviewsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Reviews
        /// </summary>
        [JsonPropertyName("reviews")]
        public WebPullRequestReviews? Reviews { get { return this.ReviewsOption; } set { this.ReviewsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Settings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebPullRequestSetting?> SettingsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [JsonPropertyName("settings")]
        public WebPullRequestSetting? Settings { get { return this.SettingsOption; } set { this.SettingsOption = new(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public string? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Used to track the state of StatusCheckCommitSha
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusCheckCommitShaOption { get; private set; }

        /// <summary>
        /// Gets or Sets StatusCheckCommitSha
        /// </summary>
        [JsonPropertyName("status_check_commit_sha")]
        public string? StatusCheckCommitSha { get { return this.StatusCheckCommitShaOption; } set { this.StatusCheckCommitShaOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebPullRequestDetail {\n");
            sb.Append("  AllowMergeStyles: ").Append(AllowMergeStyles).Append("\n");
            sb.Append("  Assignees: ").Append(Assignees).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Base: ").Append(Base).Append("\n");
            sb.Append("  BaseRepoRef: ").Append(BaseRepoRef).Append("\n");
            sb.Append("  BlockedOn: ").Append(BlockedOn).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  CanDoMerge: ").Append(CanDoMerge).Append("\n");
            sb.Append("  CommentCount: ").Append(CommentCount).Append("\n");
            sb.Append("  CommitCount: ").Append(CommitCount).Append("\n");
            sb.Append("  CommitStatuses: ").Append(CommitStatuses).Append("\n");
            sb.Append("  ConflictFileCount: ").Append(ConflictFileCount).Append("\n");
            sb.Append("  ConflictFiles: ").Append(ConflictFiles).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  FileCount: ").Append(FileCount).Append("\n");
            sb.Append("  Head: ").Append(Head).Append("\n");
            sb.Append("  HeadRepoRef: ").Append(HeadRepoRef).Append("\n");
            sb.Append("  HeadRepoSlug: ").Append(HeadRepoSlug).Append("\n");
            sb.Append("  IsMerged: ").Append(IsMerged).Append("\n");
            sb.Append("  IsReadyForMerge: ").Append(IsReadyForMerge).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  LastActedAt: ").Append(LastActedAt).Append("\n");
            sb.Append("  MergeStyle: ").Append(MergeStyle).Append("\n");
            sb.Append("  MergeableState: ").Append(MergeableState).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Participants: ").Append(Participants).Append("\n");
            sb.Append("  ReviewCommentCount: ").Append(ReviewCommentCount).Append("\n");
            sb.Append("  ReviewCount: ").Append(ReviewCount).Append("\n");
            sb.Append("  Reviewers: ").Append(Reviewers).Append("\n");
            sb.Append("  Reviews: ").Append(Reviews).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StatusCheckCommitSha: ").Append(StatusCheckCommitSha).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebPullRequestDetail" />
    /// </summary>
    public class WebPullRequestDetailJsonConverter : JsonConverter<WebPullRequestDetail>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebPullRequestDetail" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebPullRequestDetail Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> allowMergeStyles = default;
            Option<List<WebPullRequestAssignee>?> assignees = default;
            Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?> author = default;
            Option<WebPullRequestRepository?> varBase = default;
            Option<string?> baseRepoRef = default;
            Option<string?> blockedOn = default;
            Option<string?> body = default;
            Option<bool?> canDoMerge = default;
            Option<int?> commentCount = default;
            Option<int?> commitCount = default;
            Option<WebCommitStatuses?> commitStatuses = default;
            Option<int?> conflictFileCount = default;
            Option<List<string>?> conflictFiles = default;
            Option<string?> createdAt = default;
            Option<int?> fileCount = default;
            Option<WebPullRequestRepository?> head = default;
            Option<string?> headRepoRef = default;
            Option<string?> headRepoSlug = default;
            Option<bool?> isMerged = default;
            Option<bool?> isReadyForMerge = default;
            Option<List<LabelOption>?> labels = default;
            Option<string?> lastActedAt = default;
            Option<string?> mergeStyle = default;
            Option<string?> mergeableState = default;
            Option<string?> number = default;
            Option<List<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo>?> participants = default;
            Option<int?> reviewCommentCount = default;
            Option<int?> reviewCount = default;
            Option<List<WebPullRequestReviewer>?> reviewers = default;
            Option<WebPullRequestReviews?> reviews = default;
            Option<WebPullRequestSetting?> settings = default;
            Option<string?> state = default;
            Option<string?> statusCheckCommitSha = default;
            Option<string?> title = default;
            Option<string?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "allow_merge_styles":
                            allowMergeStyles = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "assignees":
                            assignees = new Option<List<WebPullRequestAssignee>?>(JsonSerializer.Deserialize<List<WebPullRequestAssignee>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "author":
                            author = new Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?>(JsonSerializer.Deserialize<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "base":
                            varBase = new Option<WebPullRequestRepository?>(JsonSerializer.Deserialize<WebPullRequestRepository>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "base_repo_ref":
                            baseRepoRef = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "blocked_on":
                            blockedOn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "body":
                            body = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "can_do_merge":
                            canDoMerge = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "comment_count":
                            commentCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "commit_count":
                            commitCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "commit_statuses":
                            commitStatuses = new Option<WebCommitStatuses?>(JsonSerializer.Deserialize<WebCommitStatuses>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "conflict_file_count":
                            conflictFileCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "conflict_files":
                            conflictFiles = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "file_count":
                            fileCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "head":
                            head = new Option<WebPullRequestRepository?>(JsonSerializer.Deserialize<WebPullRequestRepository>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "head_repo_ref":
                            headRepoRef = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "head_repo_slug":
                            headRepoSlug = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_merged":
                            isMerged = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_ready_for_merge":
                            isReadyForMerge = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "labels":
                            labels = new Option<List<LabelOption>?>(JsonSerializer.Deserialize<List<LabelOption>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "last_acted_at":
                            lastActedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "merge_style":
                            mergeStyle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mergeable_state":
                            mergeableState = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "number":
                            number = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "participants":
                            participants = new Option<List<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo>?>(JsonSerializer.Deserialize<List<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "review_comment_count":
                            reviewCommentCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "review_count":
                            reviewCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "reviewers":
                            reviewers = new Option<List<WebPullRequestReviewer>?>(JsonSerializer.Deserialize<List<WebPullRequestReviewer>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "reviews":
                            reviews = new Option<WebPullRequestReviews?>(JsonSerializer.Deserialize<WebPullRequestReviews>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "settings":
                            settings = new Option<WebPullRequestSetting?>(JsonSerializer.Deserialize<WebPullRequestSetting>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status_check_commit_sha":
                            statusCheckCommitSha = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (allowMergeStyles.IsSet && allowMergeStyles.Value == null)
                throw new ArgumentNullException(nameof(allowMergeStyles), "Property is not nullable for class WebPullRequestDetail.");

            if (assignees.IsSet && assignees.Value == null)
                throw new ArgumentNullException(nameof(assignees), "Property is not nullable for class WebPullRequestDetail.");

            if (author.IsSet && author.Value == null)
                throw new ArgumentNullException(nameof(author), "Property is not nullable for class WebPullRequestDetail.");

            if (varBase.IsSet && varBase.Value == null)
                throw new ArgumentNullException(nameof(varBase), "Property is not nullable for class WebPullRequestDetail.");

            if (baseRepoRef.IsSet && baseRepoRef.Value == null)
                throw new ArgumentNullException(nameof(baseRepoRef), "Property is not nullable for class WebPullRequestDetail.");

            if (blockedOn.IsSet && blockedOn.Value == null)
                throw new ArgumentNullException(nameof(blockedOn), "Property is not nullable for class WebPullRequestDetail.");

            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body), "Property is not nullable for class WebPullRequestDetail.");

            if (canDoMerge.IsSet && canDoMerge.Value == null)
                throw new ArgumentNullException(nameof(canDoMerge), "Property is not nullable for class WebPullRequestDetail.");

            if (commentCount.IsSet && commentCount.Value == null)
                throw new ArgumentNullException(nameof(commentCount), "Property is not nullable for class WebPullRequestDetail.");

            if (commitCount.IsSet && commitCount.Value == null)
                throw new ArgumentNullException(nameof(commitCount), "Property is not nullable for class WebPullRequestDetail.");

            if (commitStatuses.IsSet && commitStatuses.Value == null)
                throw new ArgumentNullException(nameof(commitStatuses), "Property is not nullable for class WebPullRequestDetail.");

            if (conflictFileCount.IsSet && conflictFileCount.Value == null)
                throw new ArgumentNullException(nameof(conflictFileCount), "Property is not nullable for class WebPullRequestDetail.");

            if (conflictFiles.IsSet && conflictFiles.Value == null)
                throw new ArgumentNullException(nameof(conflictFiles), "Property is not nullable for class WebPullRequestDetail.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class WebPullRequestDetail.");

            if (fileCount.IsSet && fileCount.Value == null)
                throw new ArgumentNullException(nameof(fileCount), "Property is not nullable for class WebPullRequestDetail.");

            if (head.IsSet && head.Value == null)
                throw new ArgumentNullException(nameof(head), "Property is not nullable for class WebPullRequestDetail.");

            if (headRepoRef.IsSet && headRepoRef.Value == null)
                throw new ArgumentNullException(nameof(headRepoRef), "Property is not nullable for class WebPullRequestDetail.");

            if (headRepoSlug.IsSet && headRepoSlug.Value == null)
                throw new ArgumentNullException(nameof(headRepoSlug), "Property is not nullable for class WebPullRequestDetail.");

            if (isMerged.IsSet && isMerged.Value == null)
                throw new ArgumentNullException(nameof(isMerged), "Property is not nullable for class WebPullRequestDetail.");

            if (isReadyForMerge.IsSet && isReadyForMerge.Value == null)
                throw new ArgumentNullException(nameof(isReadyForMerge), "Property is not nullable for class WebPullRequestDetail.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class WebPullRequestDetail.");

            if (lastActedAt.IsSet && lastActedAt.Value == null)
                throw new ArgumentNullException(nameof(lastActedAt), "Property is not nullable for class WebPullRequestDetail.");

            if (mergeStyle.IsSet && mergeStyle.Value == null)
                throw new ArgumentNullException(nameof(mergeStyle), "Property is not nullable for class WebPullRequestDetail.");

            if (mergeableState.IsSet && mergeableState.Value == null)
                throw new ArgumentNullException(nameof(mergeableState), "Property is not nullable for class WebPullRequestDetail.");

            if (number.IsSet && number.Value == null)
                throw new ArgumentNullException(nameof(number), "Property is not nullable for class WebPullRequestDetail.");

            if (participants.IsSet && participants.Value == null)
                throw new ArgumentNullException(nameof(participants), "Property is not nullable for class WebPullRequestDetail.");

            if (reviewCommentCount.IsSet && reviewCommentCount.Value == null)
                throw new ArgumentNullException(nameof(reviewCommentCount), "Property is not nullable for class WebPullRequestDetail.");

            if (reviewCount.IsSet && reviewCount.Value == null)
                throw new ArgumentNullException(nameof(reviewCount), "Property is not nullable for class WebPullRequestDetail.");

            if (reviewers.IsSet && reviewers.Value == null)
                throw new ArgumentNullException(nameof(reviewers), "Property is not nullable for class WebPullRequestDetail.");

            if (reviews.IsSet && reviews.Value == null)
                throw new ArgumentNullException(nameof(reviews), "Property is not nullable for class WebPullRequestDetail.");

            if (settings.IsSet && settings.Value == null)
                throw new ArgumentNullException(nameof(settings), "Property is not nullable for class WebPullRequestDetail.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class WebPullRequestDetail.");

            if (statusCheckCommitSha.IsSet && statusCheckCommitSha.Value == null)
                throw new ArgumentNullException(nameof(statusCheckCommitSha), "Property is not nullable for class WebPullRequestDetail.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class WebPullRequestDetail.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class WebPullRequestDetail.");

            return new WebPullRequestDetail(allowMergeStyles, assignees, author, varBase, baseRepoRef, blockedOn, body, canDoMerge, commentCount, commitCount, commitStatuses, conflictFileCount, conflictFiles, createdAt, fileCount, head, headRepoRef, headRepoSlug, isMerged, isReadyForMerge, labels, lastActedAt, mergeStyle, mergeableState, number, participants, reviewCommentCount, reviewCount, reviewers, reviews, settings, state, statusCheckCommitSha, title, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="WebPullRequestDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webPullRequestDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebPullRequestDetail webPullRequestDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webPullRequestDetail, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebPullRequestDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webPullRequestDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebPullRequestDetail webPullRequestDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webPullRequestDetail.AllowMergeStylesOption.IsSet && webPullRequestDetail.AllowMergeStyles == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.AllowMergeStyles), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.AssigneesOption.IsSet && webPullRequestDetail.Assignees == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.Assignees), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.AuthorOption.IsSet && webPullRequestDetail.Author == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.Author), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.BaseOption.IsSet && webPullRequestDetail.Base == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.Base), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.BaseRepoRefOption.IsSet && webPullRequestDetail.BaseRepoRef == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.BaseRepoRef), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.BlockedOnOption.IsSet && webPullRequestDetail.BlockedOn == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.BlockedOn), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.BodyOption.IsSet && webPullRequestDetail.Body == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.Body), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.CommitStatusesOption.IsSet && webPullRequestDetail.CommitStatuses == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.CommitStatuses), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.ConflictFilesOption.IsSet && webPullRequestDetail.ConflictFiles == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.ConflictFiles), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.CreatedAtOption.IsSet && webPullRequestDetail.CreatedAt == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.CreatedAt), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.HeadOption.IsSet && webPullRequestDetail.Head == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.Head), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.HeadRepoRefOption.IsSet && webPullRequestDetail.HeadRepoRef == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.HeadRepoRef), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.HeadRepoSlugOption.IsSet && webPullRequestDetail.HeadRepoSlug == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.HeadRepoSlug), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.LabelsOption.IsSet && webPullRequestDetail.Labels == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.Labels), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.LastActedAtOption.IsSet && webPullRequestDetail.LastActedAt == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.LastActedAt), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.MergeStyleOption.IsSet && webPullRequestDetail.MergeStyle == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.MergeStyle), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.MergeableStateOption.IsSet && webPullRequestDetail.MergeableState == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.MergeableState), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.NumberOption.IsSet && webPullRequestDetail.Number == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.Number), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.ParticipantsOption.IsSet && webPullRequestDetail.Participants == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.Participants), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.ReviewersOption.IsSet && webPullRequestDetail.Reviewers == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.Reviewers), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.ReviewsOption.IsSet && webPullRequestDetail.Reviews == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.Reviews), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.SettingsOption.IsSet && webPullRequestDetail.Settings == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.Settings), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.StateOption.IsSet && webPullRequestDetail.State == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.State), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.StatusCheckCommitShaOption.IsSet && webPullRequestDetail.StatusCheckCommitSha == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.StatusCheckCommitSha), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.TitleOption.IsSet && webPullRequestDetail.Title == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.Title), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.UpdatedAtOption.IsSet && webPullRequestDetail.UpdatedAt == null)
                throw new ArgumentNullException(nameof(webPullRequestDetail.UpdatedAt), "Property is required for class WebPullRequestDetail.");

            if (webPullRequestDetail.AllowMergeStylesOption.IsSet)
            {
                writer.WritePropertyName("allow_merge_styles");
                JsonSerializer.Serialize(writer, webPullRequestDetail.AllowMergeStyles, jsonSerializerOptions);
            }
            if (webPullRequestDetail.AssigneesOption.IsSet)
            {
                writer.WritePropertyName("assignees");
                JsonSerializer.Serialize(writer, webPullRequestDetail.Assignees, jsonSerializerOptions);
            }
            if (webPullRequestDetail.AuthorOption.IsSet)
            {
                writer.WritePropertyName("author");
                JsonSerializer.Serialize(writer, webPullRequestDetail.Author, jsonSerializerOptions);
            }
            if (webPullRequestDetail.BaseOption.IsSet)
            {
                writer.WritePropertyName("base");
                JsonSerializer.Serialize(writer, webPullRequestDetail.Base, jsonSerializerOptions);
            }
            if (webPullRequestDetail.BaseRepoRefOption.IsSet)
                writer.WriteString("base_repo_ref", webPullRequestDetail.BaseRepoRef);

            if (webPullRequestDetail.BlockedOnOption.IsSet)
                writer.WriteString("blocked_on", webPullRequestDetail.BlockedOn);

            if (webPullRequestDetail.BodyOption.IsSet)
                writer.WriteString("body", webPullRequestDetail.Body);

            if (webPullRequestDetail.CanDoMergeOption.IsSet)
                writer.WriteBoolean("can_do_merge", webPullRequestDetail.CanDoMergeOption.Value!.Value);

            if (webPullRequestDetail.CommentCountOption.IsSet)
                writer.WriteNumber("comment_count", webPullRequestDetail.CommentCountOption.Value!.Value);

            if (webPullRequestDetail.CommitCountOption.IsSet)
                writer.WriteNumber("commit_count", webPullRequestDetail.CommitCountOption.Value!.Value);

            if (webPullRequestDetail.CommitStatusesOption.IsSet)
            {
                writer.WritePropertyName("commit_statuses");
                JsonSerializer.Serialize(writer, webPullRequestDetail.CommitStatuses, jsonSerializerOptions);
            }
            if (webPullRequestDetail.ConflictFileCountOption.IsSet)
                writer.WriteNumber("conflict_file_count", webPullRequestDetail.ConflictFileCountOption.Value!.Value);

            if (webPullRequestDetail.ConflictFilesOption.IsSet)
            {
                writer.WritePropertyName("conflict_files");
                JsonSerializer.Serialize(writer, webPullRequestDetail.ConflictFiles, jsonSerializerOptions);
            }
            if (webPullRequestDetail.CreatedAtOption.IsSet)
                writer.WriteString("created_at", webPullRequestDetail.CreatedAt);

            if (webPullRequestDetail.FileCountOption.IsSet)
                writer.WriteNumber("file_count", webPullRequestDetail.FileCountOption.Value!.Value);

            if (webPullRequestDetail.HeadOption.IsSet)
            {
                writer.WritePropertyName("head");
                JsonSerializer.Serialize(writer, webPullRequestDetail.Head, jsonSerializerOptions);
            }
            if (webPullRequestDetail.HeadRepoRefOption.IsSet)
                writer.WriteString("head_repo_ref", webPullRequestDetail.HeadRepoRef);

            if (webPullRequestDetail.HeadRepoSlugOption.IsSet)
                writer.WriteString("head_repo_slug", webPullRequestDetail.HeadRepoSlug);

            if (webPullRequestDetail.IsMergedOption.IsSet)
                writer.WriteBoolean("is_merged", webPullRequestDetail.IsMergedOption.Value!.Value);

            if (webPullRequestDetail.IsReadyForMergeOption.IsSet)
                writer.WriteBoolean("is_ready_for_merge", webPullRequestDetail.IsReadyForMergeOption.Value!.Value);

            if (webPullRequestDetail.LabelsOption.IsSet)
            {
                writer.WritePropertyName("labels");
                JsonSerializer.Serialize(writer, webPullRequestDetail.Labels, jsonSerializerOptions);
            }
            if (webPullRequestDetail.LastActedAtOption.IsSet)
                writer.WriteString("last_acted_at", webPullRequestDetail.LastActedAt);

            if (webPullRequestDetail.MergeStyleOption.IsSet)
                writer.WriteString("merge_style", webPullRequestDetail.MergeStyle);

            if (webPullRequestDetail.MergeableStateOption.IsSet)
                writer.WriteString("mergeable_state", webPullRequestDetail.MergeableState);

            if (webPullRequestDetail.NumberOption.IsSet)
                writer.WriteString("number", webPullRequestDetail.Number);

            if (webPullRequestDetail.ParticipantsOption.IsSet)
            {
                writer.WritePropertyName("participants");
                JsonSerializer.Serialize(writer, webPullRequestDetail.Participants, jsonSerializerOptions);
            }
            if (webPullRequestDetail.ReviewCommentCountOption.IsSet)
                writer.WriteNumber("review_comment_count", webPullRequestDetail.ReviewCommentCountOption.Value!.Value);

            if (webPullRequestDetail.ReviewCountOption.IsSet)
                writer.WriteNumber("review_count", webPullRequestDetail.ReviewCountOption.Value!.Value);

            if (webPullRequestDetail.ReviewersOption.IsSet)
            {
                writer.WritePropertyName("reviewers");
                JsonSerializer.Serialize(writer, webPullRequestDetail.Reviewers, jsonSerializerOptions);
            }
            if (webPullRequestDetail.ReviewsOption.IsSet)
            {
                writer.WritePropertyName("reviews");
                JsonSerializer.Serialize(writer, webPullRequestDetail.Reviews, jsonSerializerOptions);
            }
            if (webPullRequestDetail.SettingsOption.IsSet)
            {
                writer.WritePropertyName("settings");
                JsonSerializer.Serialize(writer, webPullRequestDetail.Settings, jsonSerializerOptions);
            }
            if (webPullRequestDetail.StateOption.IsSet)
                writer.WriteString("state", webPullRequestDetail.State);

            if (webPullRequestDetail.StatusCheckCommitShaOption.IsSet)
                writer.WriteString("status_check_commit_sha", webPullRequestDetail.StatusCheckCommitSha);

            if (webPullRequestDetail.TitleOption.IsSet)
                writer.WriteString("title", webPullRequestDetail.Title);

            if (webPullRequestDetail.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", webPullRequestDetail.UpdatedAt);
        }
    }
}
