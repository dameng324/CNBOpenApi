// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoChartPackageDetail
    /// </summary>
    public partial class DtoChartPackageDetail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoChartPackageDetail" /> class.
        /// </summary>
        /// <param name="address">address</param>
        /// <param name="desc">desc</param>
        /// <param name="lastPusher">lastPusher</param>
        /// <param name="package">package</param>
        /// <param name="pullCount">pullCount</param>
        /// <param name="recentPullCount">recentPullCount</param>
        /// <param name="slug">slug</param>
        /// <param name="tagTotal">tagTotal</param>
        /// <param name="tags">tags</param>
        [JsonConstructor]
        public DtoChartPackageDetail(Option<string?> address = default, Option<string?> desc = default, Option<DtoLastPusher?> lastPusher = default, Option<string?> package = default, Option<int?> pullCount = default, Option<int?> recentPullCount = default, Option<string?> slug = default, Option<int?> tagTotal = default, Option<List<DtoChartTag>?> tags = default)
        {
            AddressOption = address;
            DescOption = desc;
            LastPusherOption = lastPusher;
            PackageOption = package;
            PullCountOption = pullCount;
            RecentPullCountOption = recentPullCount;
            SlugOption = slug;
            TagTotalOption = tagTotal;
            TagsOption = tags;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Address
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public string? Address { get { return this.AddressOption; } set { this.AddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of Desc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescOption { get; private set; }

        /// <summary>
        /// Gets or Sets Desc
        /// </summary>
        [JsonPropertyName("desc")]
        public string? Desc { get { return this.DescOption; } set { this.DescOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastPusher
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoLastPusher?> LastPusherOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastPusher
        /// </summary>
        [JsonPropertyName("last_pusher")]
        public DtoLastPusher? LastPusher { get { return this.LastPusherOption; } set { this.LastPusherOption = new(value); } }

        /// <summary>
        /// Used to track the state of Package
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PackageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Package
        /// </summary>
        [JsonPropertyName("package")]
        public string? Package { get { return this.PackageOption; } set { this.PackageOption = new(value); } }

        /// <summary>
        /// Used to track the state of PullCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PullCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets PullCount
        /// </summary>
        [JsonPropertyName("pull_count")]
        public int? PullCount { get { return this.PullCountOption; } set { this.PullCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecentPullCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RecentPullCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets RecentPullCount
        /// </summary>
        [JsonPropertyName("recent_pull_count")]
        public int? RecentPullCount { get { return this.RecentPullCountOption; } set { this.RecentPullCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Slug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SlugOption { get; private set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [JsonPropertyName("slug")]
        public string? Slug { get { return this.SlugOption; } set { this.SlugOption = new(value); } }

        /// <summary>
        /// Used to track the state of TagTotal
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TagTotalOption { get; private set; }

        /// <summary>
        /// Gets or Sets TagTotal
        /// </summary>
        [JsonPropertyName("tag_total")]
        public int? TagTotal { get { return this.TagTotalOption; } set { this.TagTotalOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoChartTag>?> TagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [JsonPropertyName("tags")]
        public List<DtoChartTag>? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoChartPackageDetail {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Desc: ").Append(Desc).Append("\n");
            sb.Append("  LastPusher: ").Append(LastPusher).Append("\n");
            sb.Append("  Package: ").Append(Package).Append("\n");
            sb.Append("  PullCount: ").Append(PullCount).Append("\n");
            sb.Append("  RecentPullCount: ").Append(RecentPullCount).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  TagTotal: ").Append(TagTotal).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoChartPackageDetail" />
    /// </summary>
    public class DtoChartPackageDetailJsonConverter : JsonConverter<DtoChartPackageDetail>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoChartPackageDetail" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoChartPackageDetail Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> address = default;
            Option<string?> desc = default;
            Option<DtoLastPusher?> lastPusher = default;
            Option<string?> package = default;
            Option<int?> pullCount = default;
            Option<int?> recentPullCount = default;
            Option<string?> slug = default;
            Option<int?> tagTotal = default;
            Option<List<DtoChartTag>?> tags = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "address":
                            address = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "desc":
                            desc = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_pusher":
                            lastPusher = new Option<DtoLastPusher?>(JsonSerializer.Deserialize<DtoLastPusher>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "package":
                            package = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pull_count":
                            pullCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "recent_pull_count":
                            recentPullCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "slug":
                            slug = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tag_total":
                            tagTotal = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "tags":
                            tags = new Option<List<DtoChartTag>?>(JsonSerializer.Deserialize<List<DtoChartTag>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address), "Property is not nullable for class DtoChartPackageDetail.");

            if (desc.IsSet && desc.Value == null)
                throw new ArgumentNullException(nameof(desc), "Property is not nullable for class DtoChartPackageDetail.");

            if (lastPusher.IsSet && lastPusher.Value == null)
                throw new ArgumentNullException(nameof(lastPusher), "Property is not nullable for class DtoChartPackageDetail.");

            if (package.IsSet && package.Value == null)
                throw new ArgumentNullException(nameof(package), "Property is not nullable for class DtoChartPackageDetail.");

            if (pullCount.IsSet && pullCount.Value == null)
                throw new ArgumentNullException(nameof(pullCount), "Property is not nullable for class DtoChartPackageDetail.");

            if (recentPullCount.IsSet && recentPullCount.Value == null)
                throw new ArgumentNullException(nameof(recentPullCount), "Property is not nullable for class DtoChartPackageDetail.");

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug), "Property is not nullable for class DtoChartPackageDetail.");

            if (tagTotal.IsSet && tagTotal.Value == null)
                throw new ArgumentNullException(nameof(tagTotal), "Property is not nullable for class DtoChartPackageDetail.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class DtoChartPackageDetail.");

            return new DtoChartPackageDetail(address, desc, lastPusher, package, pullCount, recentPullCount, slug, tagTotal, tags);
        }

        /// <summary>
        /// Serializes a <see cref="DtoChartPackageDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoChartPackageDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoChartPackageDetail dtoChartPackageDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoChartPackageDetail, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoChartPackageDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoChartPackageDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoChartPackageDetail dtoChartPackageDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoChartPackageDetail.AddressOption.IsSet && dtoChartPackageDetail.Address == null)
                throw new ArgumentNullException(nameof(dtoChartPackageDetail.Address), "Property is required for class DtoChartPackageDetail.");

            if (dtoChartPackageDetail.DescOption.IsSet && dtoChartPackageDetail.Desc == null)
                throw new ArgumentNullException(nameof(dtoChartPackageDetail.Desc), "Property is required for class DtoChartPackageDetail.");

            if (dtoChartPackageDetail.LastPusherOption.IsSet && dtoChartPackageDetail.LastPusher == null)
                throw new ArgumentNullException(nameof(dtoChartPackageDetail.LastPusher), "Property is required for class DtoChartPackageDetail.");

            if (dtoChartPackageDetail.PackageOption.IsSet && dtoChartPackageDetail.Package == null)
                throw new ArgumentNullException(nameof(dtoChartPackageDetail.Package), "Property is required for class DtoChartPackageDetail.");

            if (dtoChartPackageDetail.SlugOption.IsSet && dtoChartPackageDetail.Slug == null)
                throw new ArgumentNullException(nameof(dtoChartPackageDetail.Slug), "Property is required for class DtoChartPackageDetail.");

            if (dtoChartPackageDetail.TagsOption.IsSet && dtoChartPackageDetail.Tags == null)
                throw new ArgumentNullException(nameof(dtoChartPackageDetail.Tags), "Property is required for class DtoChartPackageDetail.");

            if (dtoChartPackageDetail.AddressOption.IsSet)
                writer.WriteString("address", dtoChartPackageDetail.Address);

            if (dtoChartPackageDetail.DescOption.IsSet)
                writer.WriteString("desc", dtoChartPackageDetail.Desc);

            if (dtoChartPackageDetail.LastPusherOption.IsSet)
            {
                writer.WritePropertyName("last_pusher");
                JsonSerializer.Serialize(writer, dtoChartPackageDetail.LastPusher, jsonSerializerOptions);
            }
            if (dtoChartPackageDetail.PackageOption.IsSet)
                writer.WriteString("package", dtoChartPackageDetail.Package);

            if (dtoChartPackageDetail.PullCountOption.IsSet)
                writer.WriteNumber("pull_count", dtoChartPackageDetail.PullCountOption.Value!.Value);

            if (dtoChartPackageDetail.RecentPullCountOption.IsSet)
                writer.WriteNumber("recent_pull_count", dtoChartPackageDetail.RecentPullCountOption.Value!.Value);

            if (dtoChartPackageDetail.SlugOption.IsSet)
                writer.WriteString("slug", dtoChartPackageDetail.Slug);

            if (dtoChartPackageDetail.TagTotalOption.IsSet)
                writer.WriteNumber("tag_total", dtoChartPackageDetail.TagTotalOption.Value!.Value);

            if (dtoChartPackageDetail.TagsOption.IsSet)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, dtoChartPackageDetail.Tags, jsonSerializerOptions);
            }
        }
    }
}
