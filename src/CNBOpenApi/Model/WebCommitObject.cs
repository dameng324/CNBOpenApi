// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebCommitObject
    /// </summary>
    public partial class WebCommitObject : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebCommitObject" /> class.
        /// </summary>
        /// <param name="author">author</param>
        /// <param name="commentCount">commentCount</param>
        /// <param name="committer">committer</param>
        /// <param name="message">message</param>
        /// <param name="tree">tree</param>
        /// <param name="verification">verification</param>
        [JsonConstructor]
        public WebCommitObject(Option<WebSignature?> author = default, Option<int?> commentCount = default, Option<WebSignature?> committer = default, Option<string?> message = default, Option<WebCommitObjectTree?> tree = default, Option<WebCommitObjectVerification?> verification = default)
        {
            AuthorOption = author;
            CommentCountOption = commentCount;
            CommitterOption = committer;
            MessageOption = message;
            TreeOption = tree;
            VerificationOption = verification;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Author
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebSignature?> AuthorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [JsonPropertyName("author")]
        public WebSignature? Author { get { return this.AuthorOption; } set { this.AuthorOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommentCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CommentCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommentCount
        /// </summary>
        [JsonPropertyName("comment_count")]
        public int? CommentCount { get { return this.CommentCountOption; } set { this.CommentCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Committer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebSignature?> CommitterOption { get; private set; }

        /// <summary>
        /// Gets or Sets Committer
        /// </summary>
        [JsonPropertyName("committer")]
        public WebSignature? Committer { get { return this.CommitterOption; } set { this.CommitterOption = new(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [JsonPropertyName("message")]
        public string? Message { get { return this.MessageOption; } set { this.MessageOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tree
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebCommitObjectTree?> TreeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tree
        /// </summary>
        [JsonPropertyName("tree")]
        public WebCommitObjectTree? Tree { get { return this.TreeOption; } set { this.TreeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Verification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebCommitObjectVerification?> VerificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Verification
        /// </summary>
        [JsonPropertyName("verification")]
        public WebCommitObjectVerification? Verification { get { return this.VerificationOption; } set { this.VerificationOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebCommitObject {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  CommentCount: ").Append(CommentCount).Append("\n");
            sb.Append("  Committer: ").Append(Committer).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Tree: ").Append(Tree).Append("\n");
            sb.Append("  Verification: ").Append(Verification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebCommitObject" />
    /// </summary>
    public class WebCommitObjectJsonConverter : JsonConverter<WebCommitObject>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebCommitObject" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebCommitObject Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<WebSignature?> author = default;
            Option<int?> commentCount = default;
            Option<WebSignature?> committer = default;
            Option<string?> message = default;
            Option<WebCommitObjectTree?> tree = default;
            Option<WebCommitObjectVerification?> verification = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "author":
                            author = new Option<WebSignature?>(JsonSerializer.Deserialize<WebSignature>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "comment_count":
                            commentCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "committer":
                            committer = new Option<WebSignature?>(JsonSerializer.Deserialize<WebSignature>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tree":
                            tree = new Option<WebCommitObjectTree?>(JsonSerializer.Deserialize<WebCommitObjectTree>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "verification":
                            verification = new Option<WebCommitObjectVerification?>(JsonSerializer.Deserialize<WebCommitObjectVerification>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (author.IsSet && author.Value == null)
                throw new ArgumentNullException(nameof(author), "Property is not nullable for class WebCommitObject.");

            if (commentCount.IsSet && commentCount.Value == null)
                throw new ArgumentNullException(nameof(commentCount), "Property is not nullable for class WebCommitObject.");

            if (committer.IsSet && committer.Value == null)
                throw new ArgumentNullException(nameof(committer), "Property is not nullable for class WebCommitObject.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class WebCommitObject.");

            if (tree.IsSet && tree.Value == null)
                throw new ArgumentNullException(nameof(tree), "Property is not nullable for class WebCommitObject.");

            if (verification.IsSet && verification.Value == null)
                throw new ArgumentNullException(nameof(verification), "Property is not nullable for class WebCommitObject.");

            return new WebCommitObject(author, commentCount, committer, message, tree, verification);
        }

        /// <summary>
        /// Serializes a <see cref="WebCommitObject" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webCommitObject"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebCommitObject webCommitObject, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webCommitObject, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebCommitObject" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webCommitObject"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebCommitObject webCommitObject, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webCommitObject.AuthorOption.IsSet && webCommitObject.Author == null)
                throw new ArgumentNullException(nameof(webCommitObject.Author), "Property is required for class WebCommitObject.");

            if (webCommitObject.CommitterOption.IsSet && webCommitObject.Committer == null)
                throw new ArgumentNullException(nameof(webCommitObject.Committer), "Property is required for class WebCommitObject.");

            if (webCommitObject.MessageOption.IsSet && webCommitObject.Message == null)
                throw new ArgumentNullException(nameof(webCommitObject.Message), "Property is required for class WebCommitObject.");

            if (webCommitObject.TreeOption.IsSet && webCommitObject.Tree == null)
                throw new ArgumentNullException(nameof(webCommitObject.Tree), "Property is required for class WebCommitObject.");

            if (webCommitObject.VerificationOption.IsSet && webCommitObject.Verification == null)
                throw new ArgumentNullException(nameof(webCommitObject.Verification), "Property is required for class WebCommitObject.");

            if (webCommitObject.AuthorOption.IsSet)
            {
                writer.WritePropertyName("author");
                JsonSerializer.Serialize(writer, webCommitObject.Author, jsonSerializerOptions);
            }
            if (webCommitObject.CommentCountOption.IsSet)
                writer.WriteNumber("comment_count", webCommitObject.CommentCountOption.Value!.Value);

            if (webCommitObject.CommitterOption.IsSet)
            {
                writer.WritePropertyName("committer");
                JsonSerializer.Serialize(writer, webCommitObject.Committer, jsonSerializerOptions);
            }
            if (webCommitObject.MessageOption.IsSet)
                writer.WriteString("message", webCommitObject.Message);

            if (webCommitObject.TreeOption.IsSet)
            {
                writer.WritePropertyName("tree");
                JsonSerializer.Serialize(writer, webCommitObject.Tree, jsonSerializerOptions);
            }
            if (webCommitObject.VerificationOption.IsSet)
            {
                writer.WritePropertyName("verification");
                JsonSerializer.Serialize(writer, webCommitObject.Verification, jsonSerializerOptions);
            }
        }
    }
}
