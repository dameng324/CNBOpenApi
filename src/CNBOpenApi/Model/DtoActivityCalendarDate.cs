// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoActivityCalendarDate
    /// </summary>
    public partial class DtoActivityCalendarDate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoActivityCalendarDate" /> class.
        /// </summary>
        /// <param name="commitCount">commitCount</param>
        /// <param name="issuesCount">issuesCount</param>
        /// <param name="prCount">prCount</param>
        /// <param name="score">score</param>
        /// <param name="validCrCount">有效cr数，代码评审通过且对应的pr被合入</param>
        /// <param name="validPrCount">有效pr数，已被合入，且pr具有至少一个已通过的代码评审</param>
        [JsonConstructor]
        public DtoActivityCalendarDate(Option<int?> commitCount = default, Option<int?> issuesCount = default, Option<int?> prCount = default, Option<decimal?> score = default, Option<int?> validCrCount = default, Option<int?> validPrCount = default)
        {
            CommitCountOption = commitCount;
            IssuesCountOption = issuesCount;
            PrCountOption = prCount;
            ScoreOption = score;
            ValidCrCountOption = validCrCount;
            ValidPrCountOption = validPrCount;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CommitCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CommitCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommitCount
        /// </summary>
        [JsonPropertyName("commit_count")]
        public int? CommitCount { get { return this.CommitCountOption; } set { this.CommitCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of IssuesCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IssuesCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets IssuesCount
        /// </summary>
        [JsonPropertyName("issues_count")]
        public int? IssuesCount { get { return this.IssuesCountOption; } set { this.IssuesCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PrCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets PrCount
        /// </summary>
        [JsonPropertyName("pr_count")]
        public int? PrCount { get { return this.PrCountOption; } set { this.PrCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Score
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ScoreOption { get; private set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [JsonPropertyName("score")]
        public decimal? Score { get { return this.ScoreOption; } set { this.ScoreOption = new(value); } }

        /// <summary>
        /// Used to track the state of ValidCrCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ValidCrCountOption { get; private set; }

        /// <summary>
        /// 有效cr数，代码评审通过且对应的pr被合入
        /// </summary>
        /// <value>有效cr数，代码评审通过且对应的pr被合入</value>
        [JsonPropertyName("valid_cr_count")]
        public int? ValidCrCount { get { return this.ValidCrCountOption; } set { this.ValidCrCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of ValidPrCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ValidPrCountOption { get; private set; }

        /// <summary>
        /// 有效pr数，已被合入，且pr具有至少一个已通过的代码评审
        /// </summary>
        /// <value>有效pr数，已被合入，且pr具有至少一个已通过的代码评审</value>
        [JsonPropertyName("valid_pr_count")]
        public int? ValidPrCount { get { return this.ValidPrCountOption; } set { this.ValidPrCountOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoActivityCalendarDate {\n");
            sb.Append("  CommitCount: ").Append(CommitCount).Append("\n");
            sb.Append("  IssuesCount: ").Append(IssuesCount).Append("\n");
            sb.Append("  PrCount: ").Append(PrCount).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  ValidCrCount: ").Append(ValidCrCount).Append("\n");
            sb.Append("  ValidPrCount: ").Append(ValidPrCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoActivityCalendarDate" />
    /// </summary>
    public class DtoActivityCalendarDateJsonConverter : JsonConverter<DtoActivityCalendarDate>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoActivityCalendarDate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoActivityCalendarDate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> commitCount = default;
            Option<int?> issuesCount = default;
            Option<int?> prCount = default;
            Option<decimal?> score = default;
            Option<int?> validCrCount = default;
            Option<int?> validPrCount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "commit_count":
                            commitCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "issues_count":
                            issuesCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pr_count":
                            prCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "score":
                            score = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "valid_cr_count":
                            validCrCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "valid_pr_count":
                            validPrCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (commitCount.IsSet && commitCount.Value == null)
                throw new ArgumentNullException(nameof(commitCount), "Property is not nullable for class DtoActivityCalendarDate.");

            if (issuesCount.IsSet && issuesCount.Value == null)
                throw new ArgumentNullException(nameof(issuesCount), "Property is not nullable for class DtoActivityCalendarDate.");

            if (prCount.IsSet && prCount.Value == null)
                throw new ArgumentNullException(nameof(prCount), "Property is not nullable for class DtoActivityCalendarDate.");

            if (score.IsSet && score.Value == null)
                throw new ArgumentNullException(nameof(score), "Property is not nullable for class DtoActivityCalendarDate.");

            if (validCrCount.IsSet && validCrCount.Value == null)
                throw new ArgumentNullException(nameof(validCrCount), "Property is not nullable for class DtoActivityCalendarDate.");

            if (validPrCount.IsSet && validPrCount.Value == null)
                throw new ArgumentNullException(nameof(validPrCount), "Property is not nullable for class DtoActivityCalendarDate.");

            return new DtoActivityCalendarDate(commitCount, issuesCount, prCount, score, validCrCount, validPrCount);
        }

        /// <summary>
        /// Serializes a <see cref="DtoActivityCalendarDate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoActivityCalendarDate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoActivityCalendarDate dtoActivityCalendarDate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoActivityCalendarDate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoActivityCalendarDate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoActivityCalendarDate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoActivityCalendarDate dtoActivityCalendarDate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoActivityCalendarDate.CommitCountOption.IsSet)
                writer.WriteNumber("commit_count", dtoActivityCalendarDate.CommitCountOption.Value!.Value);

            if (dtoActivityCalendarDate.IssuesCountOption.IsSet)
                writer.WriteNumber("issues_count", dtoActivityCalendarDate.IssuesCountOption.Value!.Value);

            if (dtoActivityCalendarDate.PrCountOption.IsSet)
                writer.WriteNumber("pr_count", dtoActivityCalendarDate.PrCountOption.Value!.Value);

            if (dtoActivityCalendarDate.ScoreOption.IsSet)
                writer.WriteNumber("score", dtoActivityCalendarDate.ScoreOption.Value!.Value);

            if (dtoActivityCalendarDate.ValidCrCountOption.IsSet)
                writer.WriteNumber("valid_cr_count", dtoActivityCalendarDate.ValidCrCountOption.Value!.Value);

            if (dtoActivityCalendarDate.ValidPrCountOption.IsSet)
                writer.WriteNumber("valid_pr_count", dtoActivityCalendarDate.ValidPrCountOption.Value!.Value);
        }
    }
}
