// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// ApiPullRequest
    /// </summary>
    public partial class ApiPullRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiPullRequest" /> class.
        /// </summary>
        /// <param name="assignees">assignees</param>
        /// <param name="author">author</param>
        /// <param name="base">base</param>
        /// <param name="blockedOn">blockedOn</param>
        /// <param name="commentCount">commentCount</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="head">head</param>
        /// <param name="lastActedAt">lastActedAt</param>
        /// <param name="mergeableState">mergeableState</param>
        /// <param name="mergedBy">mergedBy</param>
        /// <param name="number">number</param>
        /// <param name="repo">repo</param>
        /// <param name="reviewCount">reviewCount</param>
        /// <param name="state">state</param>
        /// <param name="title">title</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public ApiPullRequest(Option<List<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo>?> assignees = default, Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo?> author = default, Option<ApiPullRef?> @base = default, Option<string?> blockedOn = default, Option<int?> commentCount = default, Option<string?> createdAt = default, Option<ApiPullRef?> head = default, Option<string?> lastActedAt = default, Option<string?> mergeableState = default, Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo?> mergedBy = default, Option<string?> number = default, Option<ApiRepo?> repo = default, Option<int?> reviewCount = default, Option<string?> state = default, Option<string?> title = default, Option<string?> updatedAt = default)
        {
            AssigneesOption = assignees;
            AuthorOption = author;
            BaseOption = @base;
            BlockedOnOption = blockedOn;
            CommentCountOption = commentCount;
            CreatedAtOption = createdAt;
            HeadOption = head;
            LastActedAtOption = lastActedAt;
            MergeableStateOption = mergeableState;
            MergedByOption = mergedBy;
            NumberOption = number;
            RepoOption = repo;
            ReviewCountOption = reviewCount;
            StateOption = state;
            TitleOption = title;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Assignees
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo>?> AssigneesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Assignees
        /// </summary>
        [JsonPropertyName("assignees")]
        public List<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo>? Assignees { get { return this.AssigneesOption; } set { this.AssigneesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Author
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo?> AuthorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [JsonPropertyName("author")]
        public GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo? Author { get { return this.AuthorOption; } set { this.AuthorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Base
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ApiPullRef?> BaseOption { get; private set; }

        /// <summary>
        /// Gets or Sets Base
        /// </summary>
        [JsonPropertyName("base")]
        public ApiPullRef? Base { get { return this.BaseOption; } set { this.BaseOption = new(value); } }

        /// <summary>
        /// Used to track the state of BlockedOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BlockedOnOption { get; private set; }

        /// <summary>
        /// Gets or Sets BlockedOn
        /// </summary>
        [JsonPropertyName("blocked_on")]
        public string? BlockedOn { get { return this.BlockedOnOption; } set { this.BlockedOnOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommentCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CommentCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommentCount
        /// </summary>
        [JsonPropertyName("comment_count")]
        public int? CommentCount { get { return this.CommentCountOption; } set { this.CommentCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Head
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ApiPullRef?> HeadOption { get; private set; }

        /// <summary>
        /// Gets or Sets Head
        /// </summary>
        [JsonPropertyName("head")]
        public ApiPullRef? Head { get { return this.HeadOption; } set { this.HeadOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastActedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastActedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastActedAt
        /// </summary>
        [JsonPropertyName("last_acted_at")]
        public string? LastActedAt { get { return this.LastActedAtOption; } set { this.LastActedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of MergeableState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MergeableStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets MergeableState
        /// </summary>
        [JsonPropertyName("mergeable_state")]
        public string? MergeableState { get { return this.MergeableStateOption; } set { this.MergeableStateOption = new(value); } }

        /// <summary>
        /// Used to track the state of MergedBy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo?> MergedByOption { get; private set; }

        /// <summary>
        /// Gets or Sets MergedBy
        /// </summary>
        [JsonPropertyName("merged_by")]
        public GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo? MergedBy { get { return this.MergedByOption; } set { this.MergedByOption = new(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public string? Number { get { return this.NumberOption; } set { this.NumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Repo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ApiRepo?> RepoOption { get; private set; }

        /// <summary>
        /// Gets or Sets Repo
        /// </summary>
        [JsonPropertyName("repo")]
        public ApiRepo? Repo { get { return this.RepoOption; } set { this.RepoOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReviewCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ReviewCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReviewCount
        /// </summary>
        [JsonPropertyName("review_count")]
        public int? ReviewCount { get { return this.ReviewCountOption; } set { this.ReviewCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public string? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiPullRequest {\n");
            sb.Append("  Assignees: ").Append(Assignees).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Base: ").Append(Base).Append("\n");
            sb.Append("  BlockedOn: ").Append(BlockedOn).Append("\n");
            sb.Append("  CommentCount: ").Append(CommentCount).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Head: ").Append(Head).Append("\n");
            sb.Append("  LastActedAt: ").Append(LastActedAt).Append("\n");
            sb.Append("  MergeableState: ").Append(MergeableState).Append("\n");
            sb.Append("  MergedBy: ").Append(MergedBy).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Repo: ").Append(Repo).Append("\n");
            sb.Append("  ReviewCount: ").Append(ReviewCount).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApiPullRequest" />
    /// </summary>
    public class ApiPullRequestJsonConverter : JsonConverter<ApiPullRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApiPullRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApiPullRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo>?> assignees = default;
            Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo?> author = default;
            Option<ApiPullRef?> varBase = default;
            Option<string?> blockedOn = default;
            Option<int?> commentCount = default;
            Option<string?> createdAt = default;
            Option<ApiPullRef?> head = default;
            Option<string?> lastActedAt = default;
            Option<string?> mergeableState = default;
            Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo?> mergedBy = default;
            Option<string?> number = default;
            Option<ApiRepo?> repo = default;
            Option<int?> reviewCount = default;
            Option<string?> state = default;
            Option<string?> title = default;
            Option<string?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assignees":
                            assignees = new Option<List<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo>?>(JsonSerializer.Deserialize<List<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "author":
                            author = new Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo?>(JsonSerializer.Deserialize<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "base":
                            varBase = new Option<ApiPullRef?>(JsonSerializer.Deserialize<ApiPullRef>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "blocked_on":
                            blockedOn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "comment_count":
                            commentCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "head":
                            head = new Option<ApiPullRef?>(JsonSerializer.Deserialize<ApiPullRef>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "last_acted_at":
                            lastActedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mergeable_state":
                            mergeableState = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "merged_by":
                            mergedBy = new Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo?>(JsonSerializer.Deserialize<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "number":
                            number = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "repo":
                            repo = new Option<ApiRepo?>(JsonSerializer.Deserialize<ApiRepo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "review_count":
                            reviewCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (assignees.IsSet && assignees.Value == null)
                throw new ArgumentNullException(nameof(assignees), "Property is not nullable for class ApiPullRequest.");

            if (author.IsSet && author.Value == null)
                throw new ArgumentNullException(nameof(author), "Property is not nullable for class ApiPullRequest.");

            if (varBase.IsSet && varBase.Value == null)
                throw new ArgumentNullException(nameof(varBase), "Property is not nullable for class ApiPullRequest.");

            if (blockedOn.IsSet && blockedOn.Value == null)
                throw new ArgumentNullException(nameof(blockedOn), "Property is not nullable for class ApiPullRequest.");

            if (commentCount.IsSet && commentCount.Value == null)
                throw new ArgumentNullException(nameof(commentCount), "Property is not nullable for class ApiPullRequest.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class ApiPullRequest.");

            if (head.IsSet && head.Value == null)
                throw new ArgumentNullException(nameof(head), "Property is not nullable for class ApiPullRequest.");

            if (lastActedAt.IsSet && lastActedAt.Value == null)
                throw new ArgumentNullException(nameof(lastActedAt), "Property is not nullable for class ApiPullRequest.");

            if (mergeableState.IsSet && mergeableState.Value == null)
                throw new ArgumentNullException(nameof(mergeableState), "Property is not nullable for class ApiPullRequest.");

            if (mergedBy.IsSet && mergedBy.Value == null)
                throw new ArgumentNullException(nameof(mergedBy), "Property is not nullable for class ApiPullRequest.");

            if (number.IsSet && number.Value == null)
                throw new ArgumentNullException(nameof(number), "Property is not nullable for class ApiPullRequest.");

            if (repo.IsSet && repo.Value == null)
                throw new ArgumentNullException(nameof(repo), "Property is not nullable for class ApiPullRequest.");

            if (reviewCount.IsSet && reviewCount.Value == null)
                throw new ArgumentNullException(nameof(reviewCount), "Property is not nullable for class ApiPullRequest.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class ApiPullRequest.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class ApiPullRequest.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class ApiPullRequest.");

            return new ApiPullRequest(assignees, author, varBase, blockedOn, commentCount, createdAt, head, lastActedAt, mergeableState, mergedBy, number, repo, reviewCount, state, title, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="ApiPullRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiPullRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApiPullRequest apiPullRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, apiPullRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApiPullRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiPullRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApiPullRequest apiPullRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (apiPullRequest.AssigneesOption.IsSet && apiPullRequest.Assignees == null)
                throw new ArgumentNullException(nameof(apiPullRequest.Assignees), "Property is required for class ApiPullRequest.");

            if (apiPullRequest.AuthorOption.IsSet && apiPullRequest.Author == null)
                throw new ArgumentNullException(nameof(apiPullRequest.Author), "Property is required for class ApiPullRequest.");

            if (apiPullRequest.BaseOption.IsSet && apiPullRequest.Base == null)
                throw new ArgumentNullException(nameof(apiPullRequest.Base), "Property is required for class ApiPullRequest.");

            if (apiPullRequest.BlockedOnOption.IsSet && apiPullRequest.BlockedOn == null)
                throw new ArgumentNullException(nameof(apiPullRequest.BlockedOn), "Property is required for class ApiPullRequest.");

            if (apiPullRequest.CreatedAtOption.IsSet && apiPullRequest.CreatedAt == null)
                throw new ArgumentNullException(nameof(apiPullRequest.CreatedAt), "Property is required for class ApiPullRequest.");

            if (apiPullRequest.HeadOption.IsSet && apiPullRequest.Head == null)
                throw new ArgumentNullException(nameof(apiPullRequest.Head), "Property is required for class ApiPullRequest.");

            if (apiPullRequest.LastActedAtOption.IsSet && apiPullRequest.LastActedAt == null)
                throw new ArgumentNullException(nameof(apiPullRequest.LastActedAt), "Property is required for class ApiPullRequest.");

            if (apiPullRequest.MergeableStateOption.IsSet && apiPullRequest.MergeableState == null)
                throw new ArgumentNullException(nameof(apiPullRequest.MergeableState), "Property is required for class ApiPullRequest.");

            if (apiPullRequest.MergedByOption.IsSet && apiPullRequest.MergedBy == null)
                throw new ArgumentNullException(nameof(apiPullRequest.MergedBy), "Property is required for class ApiPullRequest.");

            if (apiPullRequest.NumberOption.IsSet && apiPullRequest.Number == null)
                throw new ArgumentNullException(nameof(apiPullRequest.Number), "Property is required for class ApiPullRequest.");

            if (apiPullRequest.RepoOption.IsSet && apiPullRequest.Repo == null)
                throw new ArgumentNullException(nameof(apiPullRequest.Repo), "Property is required for class ApiPullRequest.");

            if (apiPullRequest.StateOption.IsSet && apiPullRequest.State == null)
                throw new ArgumentNullException(nameof(apiPullRequest.State), "Property is required for class ApiPullRequest.");

            if (apiPullRequest.TitleOption.IsSet && apiPullRequest.Title == null)
                throw new ArgumentNullException(nameof(apiPullRequest.Title), "Property is required for class ApiPullRequest.");

            if (apiPullRequest.UpdatedAtOption.IsSet && apiPullRequest.UpdatedAt == null)
                throw new ArgumentNullException(nameof(apiPullRequest.UpdatedAt), "Property is required for class ApiPullRequest.");

            if (apiPullRequest.AssigneesOption.IsSet)
            {
                writer.WritePropertyName("assignees");
                JsonSerializer.Serialize(writer, apiPullRequest.Assignees, jsonSerializerOptions);
            }
            if (apiPullRequest.AuthorOption.IsSet)
            {
                writer.WritePropertyName("author");
                JsonSerializer.Serialize(writer, apiPullRequest.Author, jsonSerializerOptions);
            }
            if (apiPullRequest.BaseOption.IsSet)
            {
                writer.WritePropertyName("base");
                JsonSerializer.Serialize(writer, apiPullRequest.Base, jsonSerializerOptions);
            }
            if (apiPullRequest.BlockedOnOption.IsSet)
                writer.WriteString("blocked_on", apiPullRequest.BlockedOn);

            if (apiPullRequest.CommentCountOption.IsSet)
                writer.WriteNumber("comment_count", apiPullRequest.CommentCountOption.Value!.Value);

            if (apiPullRequest.CreatedAtOption.IsSet)
                writer.WriteString("created_at", apiPullRequest.CreatedAt);

            if (apiPullRequest.HeadOption.IsSet)
            {
                writer.WritePropertyName("head");
                JsonSerializer.Serialize(writer, apiPullRequest.Head, jsonSerializerOptions);
            }
            if (apiPullRequest.LastActedAtOption.IsSet)
                writer.WriteString("last_acted_at", apiPullRequest.LastActedAt);

            if (apiPullRequest.MergeableStateOption.IsSet)
                writer.WriteString("mergeable_state", apiPullRequest.MergeableState);

            if (apiPullRequest.MergedByOption.IsSet)
            {
                writer.WritePropertyName("merged_by");
                JsonSerializer.Serialize(writer, apiPullRequest.MergedBy, jsonSerializerOptions);
            }
            if (apiPullRequest.NumberOption.IsSet)
                writer.WriteString("number", apiPullRequest.Number);

            if (apiPullRequest.RepoOption.IsSet)
            {
                writer.WritePropertyName("repo");
                JsonSerializer.Serialize(writer, apiPullRequest.Repo, jsonSerializerOptions);
            }
            if (apiPullRequest.ReviewCountOption.IsSet)
                writer.WriteNumber("review_count", apiPullRequest.ReviewCountOption.Value!.Value);

            if (apiPullRequest.StateOption.IsSet)
                writer.WriteString("state", apiPullRequest.State);

            if (apiPullRequest.TitleOption.IsSet)
                writer.WriteString("title", apiPullRequest.Title);

            if (apiPullRequest.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", apiPullRequest.UpdatedAt);
        }
    }
}
