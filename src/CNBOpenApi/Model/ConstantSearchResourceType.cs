// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// Defines constant.SearchResourceType
    /// </summary>
    public enum ConstantSearchResourceType
    {
        /// <summary>
        /// Enum All for value: 0
        /// </summary>
        All = 0,

        /// <summary>
        /// Enum Group for value: 1
        /// </summary>
        Group = 1,

        /// <summary>
        /// Enum Repo for value: 2
        /// </summary>
        Repo = 2,

        /// <summary>
        /// Enum User for value: 3
        /// </summary>
        User = 3,

        /// <summary>
        /// Enum Release for value: 4
        /// </summary>
        Release = 4,

        /// <summary>
        /// Enum PullRequest for value: 5
        /// </summary>
        PullRequest = 5
    }

    /// <summary>
    /// Converts <see cref="ConstantSearchResourceType"/> to and from the JSON value
    /// </summary>
    public static class ConstantSearchResourceTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ConstantSearchResourceType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConstantSearchResourceType FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return ConstantSearchResourceType.All;

            if (value.Equals((1).ToString()))
                return ConstantSearchResourceType.Group;

            if (value.Equals((2).ToString()))
                return ConstantSearchResourceType.Repo;

            if (value.Equals((3).ToString()))
                return ConstantSearchResourceType.User;

            if (value.Equals((4).ToString()))
                return ConstantSearchResourceType.Release;

            if (value.Equals((5).ToString()))
                return ConstantSearchResourceType.PullRequest;

            throw new NotImplementedException($"Could not convert value to type ConstantSearchResourceType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ConstantSearchResourceType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConstantSearchResourceType? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return ConstantSearchResourceType.All;

            if (value.Equals((1).ToString()))
                return ConstantSearchResourceType.Group;

            if (value.Equals((2).ToString()))
                return ConstantSearchResourceType.Repo;

            if (value.Equals((3).ToString()))
                return ConstantSearchResourceType.User;

            if (value.Equals((4).ToString()))
                return ConstantSearchResourceType.Release;

            if (value.Equals((5).ToString()))
                return ConstantSearchResourceType.PullRequest;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ConstantSearchResourceType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(ConstantSearchResourceType value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConstantSearchResourceType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ConstantSearchResourceTypeJsonConverter : JsonConverter<ConstantSearchResourceType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ConstantSearchResourceType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ConstantSearchResourceType? result = rawValue == null
                ? null
                : ConstantSearchResourceTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ConstantSearchResourceType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="constantSearchResourceType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ConstantSearchResourceType constantSearchResourceType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(constantSearchResourceType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConstantSearchResourceType"/>
    /// </summary>
    public class ConstantSearchResourceTypeNullableJsonConverter : JsonConverter<ConstantSearchResourceType?>
    {
        /// <summary>
        /// Returns a ConstantSearchResourceType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ConstantSearchResourceType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ConstantSearchResourceType? result = rawValue == null
                ? null
                : ConstantSearchResourceTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="constantSearchResourceType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ConstantSearchResourceType? constantSearchResourceType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(constantSearchResourceType?.ToString() ?? "null");
        }
    }
}
