// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebIssueActivity
    /// </summary>
    public partial class WebIssueActivity : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebIssueActivity" /> class.
        /// </summary>
        /// <param name="actor">actor</param>
        /// <param name="actorAccessRole">actorAccessRole</param>
        /// <param name="actorMeta">actorMeta</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="payload">payload</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public WebIssueActivity(Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?> actor = default, Option<string?> actorAccessRole = default, Option<List<int>?> actorMeta = default, Option<string?> createdAt = default, Option<Object?> payload = default, Option<string?> type = default)
        {
            ActorOption = actor;
            ActorAccessRoleOption = actorAccessRole;
            ActorMetaOption = actorMeta;
            CreatedAtOption = createdAt;
            PayloadOption = payload;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Actor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?> ActorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Actor
        /// </summary>
        [JsonPropertyName("actor")]
        public GitWoaComCnbMonorepoGitInternalDtoWebUserInfo? Actor { get { return this.ActorOption; } set { this.ActorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ActorAccessRole
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ActorAccessRoleOption { get; private set; }

        /// <summary>
        /// Gets or Sets ActorAccessRole
        /// </summary>
        [JsonPropertyName("actor_access_role")]
        public string? ActorAccessRole { get { return this.ActorAccessRoleOption; } set { this.ActorAccessRoleOption = new(value); } }

        /// <summary>
        /// Used to track the state of ActorMeta
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> ActorMetaOption { get; private set; }

        /// <summary>
        /// Gets or Sets ActorMeta
        /// </summary>
        [JsonPropertyName("actor_meta")]
        public List<int>? ActorMeta { get { return this.ActorMetaOption; } set { this.ActorMetaOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Payload
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> PayloadOption { get; private set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [JsonPropertyName("payload")]
        public Object? Payload { get { return this.PayloadOption; } set { this.PayloadOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebIssueActivity {\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("  ActorAccessRole: ").Append(ActorAccessRole).Append("\n");
            sb.Append("  ActorMeta: ").Append(ActorMeta).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebIssueActivity" />
    /// </summary>
    public class WebIssueActivityJsonConverter : JsonConverter<WebIssueActivity>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebIssueActivity" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebIssueActivity Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?> actor = default;
            Option<string?> actorAccessRole = default;
            Option<List<int>?> actorMeta = default;
            Option<string?> createdAt = default;
            Option<Object?> payload = default;
            Option<string?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "actor":
                            actor = new Option<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo?>(JsonSerializer.Deserialize<GitWoaComCnbMonorepoGitInternalDtoWebUserInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "actor_access_role":
                            actorAccessRole = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "actor_meta":
                            actorMeta = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "payload":
                            payload = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (actor.IsSet && actor.Value == null)
                throw new ArgumentNullException(nameof(actor), "Property is not nullable for class WebIssueActivity.");

            if (actorAccessRole.IsSet && actorAccessRole.Value == null)
                throw new ArgumentNullException(nameof(actorAccessRole), "Property is not nullable for class WebIssueActivity.");

            if (actorMeta.IsSet && actorMeta.Value == null)
                throw new ArgumentNullException(nameof(actorMeta), "Property is not nullable for class WebIssueActivity.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class WebIssueActivity.");

            if (payload.IsSet && payload.Value == null)
                throw new ArgumentNullException(nameof(payload), "Property is not nullable for class WebIssueActivity.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class WebIssueActivity.");

            return new WebIssueActivity(actor, actorAccessRole, actorMeta, createdAt, payload, type);
        }

        /// <summary>
        /// Serializes a <see cref="WebIssueActivity" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webIssueActivity"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebIssueActivity webIssueActivity, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webIssueActivity, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebIssueActivity" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webIssueActivity"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebIssueActivity webIssueActivity, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webIssueActivity.ActorOption.IsSet && webIssueActivity.Actor == null)
                throw new ArgumentNullException(nameof(webIssueActivity.Actor), "Property is required for class WebIssueActivity.");

            if (webIssueActivity.ActorAccessRoleOption.IsSet && webIssueActivity.ActorAccessRole == null)
                throw new ArgumentNullException(nameof(webIssueActivity.ActorAccessRole), "Property is required for class WebIssueActivity.");

            if (webIssueActivity.ActorMetaOption.IsSet && webIssueActivity.ActorMeta == null)
                throw new ArgumentNullException(nameof(webIssueActivity.ActorMeta), "Property is required for class WebIssueActivity.");

            if (webIssueActivity.CreatedAtOption.IsSet && webIssueActivity.CreatedAt == null)
                throw new ArgumentNullException(nameof(webIssueActivity.CreatedAt), "Property is required for class WebIssueActivity.");

            if (webIssueActivity.PayloadOption.IsSet && webIssueActivity.Payload == null)
                throw new ArgumentNullException(nameof(webIssueActivity.Payload), "Property is required for class WebIssueActivity.");

            if (webIssueActivity.TypeOption.IsSet && webIssueActivity.Type == null)
                throw new ArgumentNullException(nameof(webIssueActivity.Type), "Property is required for class WebIssueActivity.");

            if (webIssueActivity.ActorOption.IsSet)
            {
                writer.WritePropertyName("actor");
                JsonSerializer.Serialize(writer, webIssueActivity.Actor, jsonSerializerOptions);
            }
            if (webIssueActivity.ActorAccessRoleOption.IsSet)
                writer.WriteString("actor_access_role", webIssueActivity.ActorAccessRole);

            if (webIssueActivity.ActorMetaOption.IsSet)
            {
                writer.WritePropertyName("actor_meta");
                JsonSerializer.Serialize(writer, webIssueActivity.ActorMeta, jsonSerializerOptions);
            }
            if (webIssueActivity.CreatedAtOption.IsSet)
                writer.WriteString("created_at", webIssueActivity.CreatedAt);

            if (webIssueActivity.PayloadOption.IsSet)
            {
                writer.WritePropertyName("payload");
                JsonSerializer.Serialize(writer, webIssueActivity.Payload, jsonSerializerOptions);
            }
            if (webIssueActivity.TypeOption.IsSet)
                writer.WriteString("type", webIssueActivity.Type);
        }
    }
}
