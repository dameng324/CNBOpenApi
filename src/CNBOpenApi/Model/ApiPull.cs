// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// ApiPull
    /// </summary>
    public partial class ApiPull : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiPull" /> class.
        /// </summary>
        /// <param name="base">base</param>
        /// <param name="body">body</param>
        /// <param name="head">head</param>
        /// <param name="mergedBy">mergedBy</param>
        /// <param name="number">number</param>
        /// <param name="state">state</param>
        /// <param name="title">title</param>
        [JsonConstructor]
        public ApiPull(Option<ApiPullRef?> @base = default, Option<string?> body = default, Option<ApiPullRef?> head = default, Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo?> mergedBy = default, Option<string?> number = default, Option<string?> state = default, Option<string?> title = default)
        {
            BaseOption = @base;
            BodyOption = body;
            HeadOption = head;
            MergedByOption = mergedBy;
            NumberOption = number;
            StateOption = state;
            TitleOption = title;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Base
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ApiPullRef?> BaseOption { get; private set; }

        /// <summary>
        /// Gets or Sets Base
        /// </summary>
        [JsonPropertyName("base")]
        public ApiPullRef? Base { get { return this.BaseOption; } set { this.BaseOption = new(value); } }

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BodyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public string? Body { get { return this.BodyOption; } set { this.BodyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Head
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ApiPullRef?> HeadOption { get; private set; }

        /// <summary>
        /// Gets or Sets Head
        /// </summary>
        [JsonPropertyName("head")]
        public ApiPullRef? Head { get { return this.HeadOption; } set { this.HeadOption = new(value); } }

        /// <summary>
        /// Used to track the state of MergedBy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo?> MergedByOption { get; private set; }

        /// <summary>
        /// Gets or Sets MergedBy
        /// </summary>
        [JsonPropertyName("merged_by")]
        public GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo? MergedBy { get { return this.MergedByOption; } set { this.MergedByOption = new(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public string? Number { get { return this.NumberOption; } set { this.NumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public string? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiPull {\n");
            sb.Append("  Base: ").Append(Base).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Head: ").Append(Head).Append("\n");
            sb.Append("  MergedBy: ").Append(MergedBy).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApiPull" />
    /// </summary>
    public class ApiPullJsonConverter : JsonConverter<ApiPull>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApiPull" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApiPull Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ApiPullRef?> varBase = default;
            Option<string?> body = default;
            Option<ApiPullRef?> head = default;
            Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo?> mergedBy = default;
            Option<string?> number = default;
            Option<string?> state = default;
            Option<string?> title = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "base":
                            varBase = new Option<ApiPullRef?>(JsonSerializer.Deserialize<ApiPullRef>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "body":
                            body = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "head":
                            head = new Option<ApiPullRef?>(JsonSerializer.Deserialize<ApiPullRef>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "merged_by":
                            mergedBy = new Option<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo?>(JsonSerializer.Deserialize<GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "number":
                            number = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varBase.IsSet && varBase.Value == null)
                throw new ArgumentNullException(nameof(varBase), "Property is not nullable for class ApiPull.");

            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body), "Property is not nullable for class ApiPull.");

            if (head.IsSet && head.Value == null)
                throw new ArgumentNullException(nameof(head), "Property is not nullable for class ApiPull.");

            if (mergedBy.IsSet && mergedBy.Value == null)
                throw new ArgumentNullException(nameof(mergedBy), "Property is not nullable for class ApiPull.");

            if (number.IsSet && number.Value == null)
                throw new ArgumentNullException(nameof(number), "Property is not nullable for class ApiPull.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class ApiPull.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class ApiPull.");

            return new ApiPull(varBase, body, head, mergedBy, number, state, title);
        }

        /// <summary>
        /// Serializes a <see cref="ApiPull" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiPull"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApiPull apiPull, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, apiPull, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApiPull" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiPull"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApiPull apiPull, JsonSerializerOptions jsonSerializerOptions)
        {
            if (apiPull.BaseOption.IsSet && apiPull.Base == null)
                throw new ArgumentNullException(nameof(apiPull.Base), "Property is required for class ApiPull.");

            if (apiPull.BodyOption.IsSet && apiPull.Body == null)
                throw new ArgumentNullException(nameof(apiPull.Body), "Property is required for class ApiPull.");

            if (apiPull.HeadOption.IsSet && apiPull.Head == null)
                throw new ArgumentNullException(nameof(apiPull.Head), "Property is required for class ApiPull.");

            if (apiPull.MergedByOption.IsSet && apiPull.MergedBy == null)
                throw new ArgumentNullException(nameof(apiPull.MergedBy), "Property is required for class ApiPull.");

            if (apiPull.NumberOption.IsSet && apiPull.Number == null)
                throw new ArgumentNullException(nameof(apiPull.Number), "Property is required for class ApiPull.");

            if (apiPull.StateOption.IsSet && apiPull.State == null)
                throw new ArgumentNullException(nameof(apiPull.State), "Property is required for class ApiPull.");

            if (apiPull.TitleOption.IsSet && apiPull.Title == null)
                throw new ArgumentNullException(nameof(apiPull.Title), "Property is required for class ApiPull.");

            if (apiPull.BaseOption.IsSet)
            {
                writer.WritePropertyName("base");
                JsonSerializer.Serialize(writer, apiPull.Base, jsonSerializerOptions);
            }
            if (apiPull.BodyOption.IsSet)
                writer.WriteString("body", apiPull.Body);

            if (apiPull.HeadOption.IsSet)
            {
                writer.WritePropertyName("head");
                JsonSerializer.Serialize(writer, apiPull.Head, jsonSerializerOptions);
            }
            if (apiPull.MergedByOption.IsSet)
            {
                writer.WritePropertyName("merged_by");
                JsonSerializer.Serialize(writer, apiPull.MergedBy, jsonSerializerOptions);
            }
            if (apiPull.NumberOption.IsSet)
                writer.WriteString("number", apiPull.Number);

            if (apiPull.StateOption.IsSet)
                writer.WriteString("state", apiPull.State);

            if (apiPull.TitleOption.IsSet)
                writer.WriteString("title", apiPull.Title);
        }
    }
}
