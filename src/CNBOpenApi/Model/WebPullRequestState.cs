// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebPullRequestState
    /// </summary>
    public partial class WebPullRequestState : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebPullRequestState" /> class.
        /// </summary>
        /// <param name="commitStatuses">commitStatuses</param>
        /// <param name="mergeStyle">mergeStyle</param>
        /// <param name="mergeableState">mergeableState</param>
        /// <param name="number">number</param>
        /// <param name="reviews">reviews</param>
        /// <param name="settings">settings</param>
        /// <param name="state">state</param>
        /// <param name="statusCheckCommitSha">statusCheckCommitSha</param>
        [JsonConstructor]
        public WebPullRequestState(Option<WebCommitStatuses?> commitStatuses = default, Option<string?> mergeStyle = default, Option<string?> mergeableState = default, Option<string?> number = default, Option<WebPullRequestReviews?> reviews = default, Option<WebPullRequestSetting?> settings = default, Option<string?> state = default, Option<string?> statusCheckCommitSha = default)
        {
            CommitStatusesOption = commitStatuses;
            MergeStyleOption = mergeStyle;
            MergeableStateOption = mergeableState;
            NumberOption = number;
            ReviewsOption = reviews;
            SettingsOption = settings;
            StateOption = state;
            StatusCheckCommitShaOption = statusCheckCommitSha;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CommitStatuses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebCommitStatuses?> CommitStatusesOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommitStatuses
        /// </summary>
        [JsonPropertyName("commit_statuses")]
        public WebCommitStatuses? CommitStatuses { get { return this.CommitStatusesOption; } set { this.CommitStatusesOption = new(value); } }

        /// <summary>
        /// Used to track the state of MergeStyle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MergeStyleOption { get; private set; }

        /// <summary>
        /// Gets or Sets MergeStyle
        /// </summary>
        [JsonPropertyName("merge_style")]
        public string? MergeStyle { get { return this.MergeStyleOption; } set { this.MergeStyleOption = new(value); } }

        /// <summary>
        /// Used to track the state of MergeableState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MergeableStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets MergeableState
        /// </summary>
        [JsonPropertyName("mergeable_state")]
        public string? MergeableState { get { return this.MergeableStateOption; } set { this.MergeableStateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public string? Number { get { return this.NumberOption; } set { this.NumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reviews
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebPullRequestReviews?> ReviewsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Reviews
        /// </summary>
        [JsonPropertyName("reviews")]
        public WebPullRequestReviews? Reviews { get { return this.ReviewsOption; } set { this.ReviewsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Settings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebPullRequestSetting?> SettingsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [JsonPropertyName("settings")]
        public WebPullRequestSetting? Settings { get { return this.SettingsOption; } set { this.SettingsOption = new(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public string? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Used to track the state of StatusCheckCommitSha
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusCheckCommitShaOption { get; private set; }

        /// <summary>
        /// Gets or Sets StatusCheckCommitSha
        /// </summary>
        [JsonPropertyName("status_check_commit_sha")]
        public string? StatusCheckCommitSha { get { return this.StatusCheckCommitShaOption; } set { this.StatusCheckCommitShaOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebPullRequestState {\n");
            sb.Append("  CommitStatuses: ").Append(CommitStatuses).Append("\n");
            sb.Append("  MergeStyle: ").Append(MergeStyle).Append("\n");
            sb.Append("  MergeableState: ").Append(MergeableState).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Reviews: ").Append(Reviews).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StatusCheckCommitSha: ").Append(StatusCheckCommitSha).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebPullRequestState" />
    /// </summary>
    public class WebPullRequestStateJsonConverter : JsonConverter<WebPullRequestState>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebPullRequestState" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebPullRequestState Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<WebCommitStatuses?> commitStatuses = default;
            Option<string?> mergeStyle = default;
            Option<string?> mergeableState = default;
            Option<string?> number = default;
            Option<WebPullRequestReviews?> reviews = default;
            Option<WebPullRequestSetting?> settings = default;
            Option<string?> state = default;
            Option<string?> statusCheckCommitSha = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "commit_statuses":
                            commitStatuses = new Option<WebCommitStatuses?>(JsonSerializer.Deserialize<WebCommitStatuses>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "merge_style":
                            mergeStyle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mergeable_state":
                            mergeableState = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "number":
                            number = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "reviews":
                            reviews = new Option<WebPullRequestReviews?>(JsonSerializer.Deserialize<WebPullRequestReviews>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "settings":
                            settings = new Option<WebPullRequestSetting?>(JsonSerializer.Deserialize<WebPullRequestSetting>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status_check_commit_sha":
                            statusCheckCommitSha = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (commitStatuses.IsSet && commitStatuses.Value == null)
                throw new ArgumentNullException(nameof(commitStatuses), "Property is not nullable for class WebPullRequestState.");

            if (mergeStyle.IsSet && mergeStyle.Value == null)
                throw new ArgumentNullException(nameof(mergeStyle), "Property is not nullable for class WebPullRequestState.");

            if (mergeableState.IsSet && mergeableState.Value == null)
                throw new ArgumentNullException(nameof(mergeableState), "Property is not nullable for class WebPullRequestState.");

            if (number.IsSet && number.Value == null)
                throw new ArgumentNullException(nameof(number), "Property is not nullable for class WebPullRequestState.");

            if (reviews.IsSet && reviews.Value == null)
                throw new ArgumentNullException(nameof(reviews), "Property is not nullable for class WebPullRequestState.");

            if (settings.IsSet && settings.Value == null)
                throw new ArgumentNullException(nameof(settings), "Property is not nullable for class WebPullRequestState.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class WebPullRequestState.");

            if (statusCheckCommitSha.IsSet && statusCheckCommitSha.Value == null)
                throw new ArgumentNullException(nameof(statusCheckCommitSha), "Property is not nullable for class WebPullRequestState.");

            return new WebPullRequestState(commitStatuses, mergeStyle, mergeableState, number, reviews, settings, state, statusCheckCommitSha);
        }

        /// <summary>
        /// Serializes a <see cref="WebPullRequestState" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webPullRequestState"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebPullRequestState webPullRequestState, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webPullRequestState, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebPullRequestState" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webPullRequestState"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebPullRequestState webPullRequestState, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webPullRequestState.CommitStatusesOption.IsSet && webPullRequestState.CommitStatuses == null)
                throw new ArgumentNullException(nameof(webPullRequestState.CommitStatuses), "Property is required for class WebPullRequestState.");

            if (webPullRequestState.MergeStyleOption.IsSet && webPullRequestState.MergeStyle == null)
                throw new ArgumentNullException(nameof(webPullRequestState.MergeStyle), "Property is required for class WebPullRequestState.");

            if (webPullRequestState.MergeableStateOption.IsSet && webPullRequestState.MergeableState == null)
                throw new ArgumentNullException(nameof(webPullRequestState.MergeableState), "Property is required for class WebPullRequestState.");

            if (webPullRequestState.NumberOption.IsSet && webPullRequestState.Number == null)
                throw new ArgumentNullException(nameof(webPullRequestState.Number), "Property is required for class WebPullRequestState.");

            if (webPullRequestState.ReviewsOption.IsSet && webPullRequestState.Reviews == null)
                throw new ArgumentNullException(nameof(webPullRequestState.Reviews), "Property is required for class WebPullRequestState.");

            if (webPullRequestState.SettingsOption.IsSet && webPullRequestState.Settings == null)
                throw new ArgumentNullException(nameof(webPullRequestState.Settings), "Property is required for class WebPullRequestState.");

            if (webPullRequestState.StateOption.IsSet && webPullRequestState.State == null)
                throw new ArgumentNullException(nameof(webPullRequestState.State), "Property is required for class WebPullRequestState.");

            if (webPullRequestState.StatusCheckCommitShaOption.IsSet && webPullRequestState.StatusCheckCommitSha == null)
                throw new ArgumentNullException(nameof(webPullRequestState.StatusCheckCommitSha), "Property is required for class WebPullRequestState.");

            if (webPullRequestState.CommitStatusesOption.IsSet)
            {
                writer.WritePropertyName("commit_statuses");
                JsonSerializer.Serialize(writer, webPullRequestState.CommitStatuses, jsonSerializerOptions);
            }
            if (webPullRequestState.MergeStyleOption.IsSet)
                writer.WriteString("merge_style", webPullRequestState.MergeStyle);

            if (webPullRequestState.MergeableStateOption.IsSet)
                writer.WriteString("mergeable_state", webPullRequestState.MergeableState);

            if (webPullRequestState.NumberOption.IsSet)
                writer.WriteString("number", webPullRequestState.Number);

            if (webPullRequestState.ReviewsOption.IsSet)
            {
                writer.WritePropertyName("reviews");
                JsonSerializer.Serialize(writer, webPullRequestState.Reviews, jsonSerializerOptions);
            }
            if (webPullRequestState.SettingsOption.IsSet)
            {
                writer.WritePropertyName("settings");
                JsonSerializer.Serialize(writer, webPullRequestState.Settings, jsonSerializerOptions);
            }
            if (webPullRequestState.StateOption.IsSet)
                writer.WriteString("state", webPullRequestState.State);

            if (webPullRequestState.StatusCheckCommitShaOption.IsSet)
                writer.WriteString("status_check_commit_sha", webPullRequestState.StatusCheckCommitSha);
        }
    }
}
