// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// HandlerLicense
    /// </summary>
    public partial class HandlerLicense : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HandlerLicense" /> class.
        /// </summary>
        /// <param name="body">body</param>
        /// <param name="conditions">conditions</param>
        /// <param name="description">description</param>
        /// <param name="key">key</param>
        /// <param name="limitations">limitations</param>
        /// <param name="name">name</param>
        /// <param name="permissions">permissions</param>
        /// <param name="spdxId">spdxId</param>
        [JsonConstructor]
        public HandlerLicense(Option<string?> body = default, Option<List<string>?> conditions = default, Option<string?> description = default, Option<string?> key = default, Option<List<string>?> limitations = default, Option<string?> name = default, Option<List<string>?> permissions = default, Option<string?> spdxId = default)
        {
            BodyOption = body;
            ConditionsOption = conditions;
            DescriptionOption = description;
            KeyOption = key;
            LimitationsOption = limitations;
            NameOption = name;
            PermissionsOption = permissions;
            SpdxIdOption = spdxId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BodyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public string? Body { get { return this.BodyOption; } set { this.BodyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Conditions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ConditionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Conditions
        /// </summary>
        [JsonPropertyName("conditions")]
        public List<string>? Conditions { get { return this.ConditionsOption; } set { this.ConditionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Key
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [JsonPropertyName("key")]
        public string? Key { get { return this.KeyOption; } set { this.KeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Limitations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> LimitationsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Limitations
        /// </summary>
        [JsonPropertyName("limitations")]
        public List<string>? Limitations { get { return this.LimitationsOption; } set { this.LimitationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Permissions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> PermissionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [JsonPropertyName("permissions")]
        public List<string>? Permissions { get { return this.PermissionsOption; } set { this.PermissionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of SpdxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SpdxIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SpdxId
        /// </summary>
        [JsonPropertyName("spdx_id")]
        public string? SpdxId { get { return this.SpdxIdOption; } set { this.SpdxIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HandlerLicense {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Limitations: ").Append(Limitations).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  SpdxId: ").Append(SpdxId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HandlerLicense" />
    /// </summary>
    public class HandlerLicenseJsonConverter : JsonConverter<HandlerLicense>
    {
        /// <summary>
        /// Deserializes json to <see cref="HandlerLicense" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HandlerLicense Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> body = default;
            Option<List<string>?> conditions = default;
            Option<string?> description = default;
            Option<string?> key = default;
            Option<List<string>?> limitations = default;
            Option<string?> name = default;
            Option<List<string>?> permissions = default;
            Option<string?> spdxId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "body":
                            body = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "conditions":
                            conditions = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "key":
                            key = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "limitations":
                            limitations = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "permissions":
                            permissions = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "spdx_id":
                            spdxId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body), "Property is not nullable for class HandlerLicense.");

            if (conditions.IsSet && conditions.Value == null)
                throw new ArgumentNullException(nameof(conditions), "Property is not nullable for class HandlerLicense.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class HandlerLicense.");

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class HandlerLicense.");

            if (limitations.IsSet && limitations.Value == null)
                throw new ArgumentNullException(nameof(limitations), "Property is not nullable for class HandlerLicense.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class HandlerLicense.");

            if (permissions.IsSet && permissions.Value == null)
                throw new ArgumentNullException(nameof(permissions), "Property is not nullable for class HandlerLicense.");

            if (spdxId.IsSet && spdxId.Value == null)
                throw new ArgumentNullException(nameof(spdxId), "Property is not nullable for class HandlerLicense.");

            return new HandlerLicense(body, conditions, description, key, limitations, name, permissions, spdxId);
        }

        /// <summary>
        /// Serializes a <see cref="HandlerLicense" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="handlerLicense"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HandlerLicense handlerLicense, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, handlerLicense, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HandlerLicense" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="handlerLicense"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HandlerLicense handlerLicense, JsonSerializerOptions jsonSerializerOptions)
        {
            if (handlerLicense.BodyOption.IsSet && handlerLicense.Body == null)
                throw new ArgumentNullException(nameof(handlerLicense.Body), "Property is required for class HandlerLicense.");

            if (handlerLicense.ConditionsOption.IsSet && handlerLicense.Conditions == null)
                throw new ArgumentNullException(nameof(handlerLicense.Conditions), "Property is required for class HandlerLicense.");

            if (handlerLicense.DescriptionOption.IsSet && handlerLicense.Description == null)
                throw new ArgumentNullException(nameof(handlerLicense.Description), "Property is required for class HandlerLicense.");

            if (handlerLicense.KeyOption.IsSet && handlerLicense.Key == null)
                throw new ArgumentNullException(nameof(handlerLicense.Key), "Property is required for class HandlerLicense.");

            if (handlerLicense.LimitationsOption.IsSet && handlerLicense.Limitations == null)
                throw new ArgumentNullException(nameof(handlerLicense.Limitations), "Property is required for class HandlerLicense.");

            if (handlerLicense.NameOption.IsSet && handlerLicense.Name == null)
                throw new ArgumentNullException(nameof(handlerLicense.Name), "Property is required for class HandlerLicense.");

            if (handlerLicense.PermissionsOption.IsSet && handlerLicense.Permissions == null)
                throw new ArgumentNullException(nameof(handlerLicense.Permissions), "Property is required for class HandlerLicense.");

            if (handlerLicense.SpdxIdOption.IsSet && handlerLicense.SpdxId == null)
                throw new ArgumentNullException(nameof(handlerLicense.SpdxId), "Property is required for class HandlerLicense.");

            if (handlerLicense.BodyOption.IsSet)
                writer.WriteString("body", handlerLicense.Body);

            if (handlerLicense.ConditionsOption.IsSet)
            {
                writer.WritePropertyName("conditions");
                JsonSerializer.Serialize(writer, handlerLicense.Conditions, jsonSerializerOptions);
            }
            if (handlerLicense.DescriptionOption.IsSet)
                writer.WriteString("description", handlerLicense.Description);

            if (handlerLicense.KeyOption.IsSet)
                writer.WriteString("key", handlerLicense.Key);

            if (handlerLicense.LimitationsOption.IsSet)
            {
                writer.WritePropertyName("limitations");
                JsonSerializer.Serialize(writer, handlerLicense.Limitations, jsonSerializerOptions);
            }
            if (handlerLicense.NameOption.IsSet)
                writer.WriteString("name", handlerLicense.Name);

            if (handlerLicense.PermissionsOption.IsSet)
            {
                writer.WritePropertyName("permissions");
                JsonSerializer.Serialize(writer, handlerLicense.Permissions, jsonSerializerOptions);
            }
            if (handlerLicense.SpdxIdOption.IsSet)
                writer.WriteString("spdx_id", handlerLicense.SpdxId);
        }
    }
}
