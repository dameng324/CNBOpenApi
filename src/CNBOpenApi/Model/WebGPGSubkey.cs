// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebGPGSubkey
    /// </summary>
    public partial class WebGPGSubkey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebGPGSubkey" /> class.
        /// </summary>
        /// <param name="createdAt">子密钥系统创建时间（添加到系统时间）</param>
        /// <param name="expiredAt">子密钥过期时间</param>
        /// <param name="fingerprint">子密钥指纹</param>
        /// <param name="id">id</param>
        /// <param name="keyCreationTime">子密钥创建时间</param>
        /// <param name="keyId">子密钥 KeyID</param>
        /// <param name="primaryKeyId">主密钥 KeyID</param>
        [JsonConstructor]
        public WebGPGSubkey(Option<string?> createdAt = default, Option<string?> expiredAt = default, Option<string?> fingerprint = default, Option<string?> id = default, Option<string?> keyCreationTime = default, Option<string?> keyId = default, Option<string?> primaryKeyId = default)
        {
            CreatedAtOption = createdAt;
            ExpiredAtOption = expiredAt;
            FingerprintOption = fingerprint;
            IdOption = id;
            KeyCreationTimeOption = keyCreationTime;
            KeyIdOption = keyId;
            PrimaryKeyIdOption = primaryKeyId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// 子密钥系统创建时间（添加到系统时间）
        /// </summary>
        /// <value>子密钥系统创建时间（添加到系统时间）</value>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpiredAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExpiredAtOption { get; private set; }

        /// <summary>
        /// 子密钥过期时间
        /// </summary>
        /// <value>子密钥过期时间</value>
        [JsonPropertyName("expired_at")]
        public string? ExpiredAt { get { return this.ExpiredAtOption; } set { this.ExpiredAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Fingerprint
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FingerprintOption { get; private set; }

        /// <summary>
        /// 子密钥指纹
        /// </summary>
        /// <value>子密钥指纹</value>
        [JsonPropertyName("fingerprint")]
        public string? Fingerprint { get { return this.FingerprintOption; } set { this.FingerprintOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of KeyCreationTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeyCreationTimeOption { get; private set; }

        /// <summary>
        /// 子密钥创建时间
        /// </summary>
        /// <value>子密钥创建时间</value>
        [JsonPropertyName("key_creation_time")]
        public string? KeyCreationTime { get { return this.KeyCreationTimeOption; } set { this.KeyCreationTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of KeyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeyIdOption { get; private set; }

        /// <summary>
        /// 子密钥 KeyID
        /// </summary>
        /// <value>子密钥 KeyID</value>
        [JsonPropertyName("key_id")]
        public string? KeyId { get { return this.KeyIdOption; } set { this.KeyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrimaryKeyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryKeyIdOption { get; private set; }

        /// <summary>
        /// 主密钥 KeyID
        /// </summary>
        /// <value>主密钥 KeyID</value>
        [JsonPropertyName("primary_key_id")]
        public string? PrimaryKeyId { get { return this.PrimaryKeyIdOption; } set { this.PrimaryKeyIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebGPGSubkey {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ExpiredAt: ").Append(ExpiredAt).Append("\n");
            sb.Append("  Fingerprint: ").Append(Fingerprint).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  KeyCreationTime: ").Append(KeyCreationTime).Append("\n");
            sb.Append("  KeyId: ").Append(KeyId).Append("\n");
            sb.Append("  PrimaryKeyId: ").Append(PrimaryKeyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebGPGSubkey" />
    /// </summary>
    public class WebGPGSubkeyJsonConverter : JsonConverter<WebGPGSubkey>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebGPGSubkey" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebGPGSubkey Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> createdAt = default;
            Option<string?> expiredAt = default;
            Option<string?> fingerprint = default;
            Option<string?> id = default;
            Option<string?> keyCreationTime = default;
            Option<string?> keyId = default;
            Option<string?> primaryKeyId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expired_at":
                            expiredAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fingerprint":
                            fingerprint = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "key_creation_time":
                            keyCreationTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "key_id":
                            keyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_key_id":
                            primaryKeyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class WebGPGSubkey.");

            if (expiredAt.IsSet && expiredAt.Value == null)
                throw new ArgumentNullException(nameof(expiredAt), "Property is not nullable for class WebGPGSubkey.");

            if (fingerprint.IsSet && fingerprint.Value == null)
                throw new ArgumentNullException(nameof(fingerprint), "Property is not nullable for class WebGPGSubkey.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class WebGPGSubkey.");

            if (keyCreationTime.IsSet && keyCreationTime.Value == null)
                throw new ArgumentNullException(nameof(keyCreationTime), "Property is not nullable for class WebGPGSubkey.");

            if (keyId.IsSet && keyId.Value == null)
                throw new ArgumentNullException(nameof(keyId), "Property is not nullable for class WebGPGSubkey.");

            if (primaryKeyId.IsSet && primaryKeyId.Value == null)
                throw new ArgumentNullException(nameof(primaryKeyId), "Property is not nullable for class WebGPGSubkey.");

            return new WebGPGSubkey(createdAt, expiredAt, fingerprint, id, keyCreationTime, keyId, primaryKeyId);
        }

        /// <summary>
        /// Serializes a <see cref="WebGPGSubkey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webGPGSubkey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebGPGSubkey webGPGSubkey, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webGPGSubkey, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebGPGSubkey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webGPGSubkey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebGPGSubkey webGPGSubkey, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webGPGSubkey.CreatedAtOption.IsSet && webGPGSubkey.CreatedAt == null)
                throw new ArgumentNullException(nameof(webGPGSubkey.CreatedAt), "Property is required for class WebGPGSubkey.");

            if (webGPGSubkey.ExpiredAtOption.IsSet && webGPGSubkey.ExpiredAt == null)
                throw new ArgumentNullException(nameof(webGPGSubkey.ExpiredAt), "Property is required for class WebGPGSubkey.");

            if (webGPGSubkey.FingerprintOption.IsSet && webGPGSubkey.Fingerprint == null)
                throw new ArgumentNullException(nameof(webGPGSubkey.Fingerprint), "Property is required for class WebGPGSubkey.");

            if (webGPGSubkey.IdOption.IsSet && webGPGSubkey.Id == null)
                throw new ArgumentNullException(nameof(webGPGSubkey.Id), "Property is required for class WebGPGSubkey.");

            if (webGPGSubkey.KeyCreationTimeOption.IsSet && webGPGSubkey.KeyCreationTime == null)
                throw new ArgumentNullException(nameof(webGPGSubkey.KeyCreationTime), "Property is required for class WebGPGSubkey.");

            if (webGPGSubkey.KeyIdOption.IsSet && webGPGSubkey.KeyId == null)
                throw new ArgumentNullException(nameof(webGPGSubkey.KeyId), "Property is required for class WebGPGSubkey.");

            if (webGPGSubkey.PrimaryKeyIdOption.IsSet && webGPGSubkey.PrimaryKeyId == null)
                throw new ArgumentNullException(nameof(webGPGSubkey.PrimaryKeyId), "Property is required for class WebGPGSubkey.");

            if (webGPGSubkey.CreatedAtOption.IsSet)
                writer.WriteString("created_at", webGPGSubkey.CreatedAt);

            if (webGPGSubkey.ExpiredAtOption.IsSet)
                writer.WriteString("expired_at", webGPGSubkey.ExpiredAt);

            if (webGPGSubkey.FingerprintOption.IsSet)
                writer.WriteString("fingerprint", webGPGSubkey.Fingerprint);

            if (webGPGSubkey.IdOption.IsSet)
                writer.WriteString("id", webGPGSubkey.Id);

            if (webGPGSubkey.KeyCreationTimeOption.IsSet)
                writer.WriteString("key_creation_time", webGPGSubkey.KeyCreationTime);

            if (webGPGSubkey.KeyIdOption.IsSet)
                writer.WriteString("key_id", webGPGSubkey.KeyId);

            if (webGPGSubkey.PrimaryKeyIdOption.IsSet)
                writer.WriteString("primary_key_id", webGPGSubkey.PrimaryKeyId);
        }
    }
}
