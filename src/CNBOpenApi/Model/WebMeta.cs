// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebMeta
    /// </summary>
    public partial class WebMeta : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebMeta" /> class.
        /// </summary>
        /// <param name="genBranch">genBranch</param>
        /// <param name="genHash">genHash</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public WebMeta(Option<string?> genBranch = default, Option<string?> genHash = default, Option<string?> updatedAt = default)
        {
            GenBranchOption = genBranch;
            GenHashOption = genHash;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of GenBranch
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GenBranchOption { get; private set; }

        /// <summary>
        /// Gets or Sets GenBranch
        /// </summary>
        [JsonPropertyName("gen_branch")]
        public string? GenBranch { get { return this.GenBranchOption; } set { this.GenBranchOption = new(value); } }

        /// <summary>
        /// Used to track the state of GenHash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GenHashOption { get; private set; }

        /// <summary>
        /// Gets or Sets GenHash
        /// </summary>
        [JsonPropertyName("gen_hash")]
        public string? GenHash { get { return this.GenHashOption; } set { this.GenHashOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebMeta {\n");
            sb.Append("  GenBranch: ").Append(GenBranch).Append("\n");
            sb.Append("  GenHash: ").Append(GenHash).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebMeta" />
    /// </summary>
    public class WebMetaJsonConverter : JsonConverter<WebMeta>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebMeta" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebMeta Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> genBranch = default;
            Option<string?> genHash = default;
            Option<string?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "gen_branch":
                            genBranch = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gen_hash":
                            genHash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (genBranch.IsSet && genBranch.Value == null)
                throw new ArgumentNullException(nameof(genBranch), "Property is not nullable for class WebMeta.");

            if (genHash.IsSet && genHash.Value == null)
                throw new ArgumentNullException(nameof(genHash), "Property is not nullable for class WebMeta.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class WebMeta.");

            return new WebMeta(genBranch, genHash, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="WebMeta" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webMeta"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebMeta webMeta, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webMeta, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebMeta" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webMeta"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebMeta webMeta, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webMeta.GenBranchOption.IsSet && webMeta.GenBranch == null)
                throw new ArgumentNullException(nameof(webMeta.GenBranch), "Property is required for class WebMeta.");

            if (webMeta.GenHashOption.IsSet && webMeta.GenHash == null)
                throw new ArgumentNullException(nameof(webMeta.GenHash), "Property is required for class WebMeta.");

            if (webMeta.UpdatedAtOption.IsSet && webMeta.UpdatedAt == null)
                throw new ArgumentNullException(nameof(webMeta.UpdatedAt), "Property is required for class WebMeta.");

            if (webMeta.GenBranchOption.IsSet)
                writer.WriteString("gen_branch", webMeta.GenBranch);

            if (webMeta.GenHashOption.IsSet)
                writer.WriteString("gen_hash", webMeta.GenHash);

            if (webMeta.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", webMeta.UpdatedAt);
        }
    }
}
