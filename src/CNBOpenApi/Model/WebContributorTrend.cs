// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebContributorTrend
    /// </summary>
    public partial class WebContributorTrend : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebContributorTrend" /> class.
        /// </summary>
        /// <param name="author">贡献者信息</param>
        /// <param name="commitCount">贡献者的总提交数</param>
        /// <param name="weeks">贡献者以周为单位的提交趋势数据</param>
        [JsonConstructor]
        public WebContributorTrend(Option<WebAuthor?> author = default, Option<int?> commitCount = default, Option<List<WebWeek>?> weeks = default)
        {
            AuthorOption = author;
            CommitCountOption = commitCount;
            WeeksOption = weeks;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Author
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebAuthor?> AuthorOption { get; private set; }

        /// <summary>
        /// 贡献者信息
        /// </summary>
        /// <value>贡献者信息</value>
        [JsonPropertyName("author")]
        public WebAuthor? Author { get { return this.AuthorOption; } set { this.AuthorOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommitCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CommitCountOption { get; private set; }

        /// <summary>
        /// 贡献者的总提交数
        /// </summary>
        /// <value>贡献者的总提交数</value>
        [JsonPropertyName("commit_count")]
        public int? CommitCount { get { return this.CommitCountOption; } set { this.CommitCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Weeks
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebWeek>?> WeeksOption { get; private set; }

        /// <summary>
        /// 贡献者以周为单位的提交趋势数据
        /// </summary>
        /// <value>贡献者以周为单位的提交趋势数据</value>
        [JsonPropertyName("weeks")]
        public List<WebWeek>? Weeks { get { return this.WeeksOption; } set { this.WeeksOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebContributorTrend {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  CommitCount: ").Append(CommitCount).Append("\n");
            sb.Append("  Weeks: ").Append(Weeks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebContributorTrend" />
    /// </summary>
    public class WebContributorTrendJsonConverter : JsonConverter<WebContributorTrend>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebContributorTrend" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebContributorTrend Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<WebAuthor?> author = default;
            Option<int?> commitCount = default;
            Option<List<WebWeek>?> weeks = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "author":
                            author = new Option<WebAuthor?>(JsonSerializer.Deserialize<WebAuthor>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "commit_count":
                            commitCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "weeks":
                            weeks = new Option<List<WebWeek>?>(JsonSerializer.Deserialize<List<WebWeek>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (author.IsSet && author.Value == null)
                throw new ArgumentNullException(nameof(author), "Property is not nullable for class WebContributorTrend.");

            if (commitCount.IsSet && commitCount.Value == null)
                throw new ArgumentNullException(nameof(commitCount), "Property is not nullable for class WebContributorTrend.");

            if (weeks.IsSet && weeks.Value == null)
                throw new ArgumentNullException(nameof(weeks), "Property is not nullable for class WebContributorTrend.");

            return new WebContributorTrend(author, commitCount, weeks);
        }

        /// <summary>
        /// Serializes a <see cref="WebContributorTrend" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webContributorTrend"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebContributorTrend webContributorTrend, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webContributorTrend, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebContributorTrend" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webContributorTrend"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebContributorTrend webContributorTrend, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webContributorTrend.AuthorOption.IsSet && webContributorTrend.Author == null)
                throw new ArgumentNullException(nameof(webContributorTrend.Author), "Property is required for class WebContributorTrend.");

            if (webContributorTrend.WeeksOption.IsSet && webContributorTrend.Weeks == null)
                throw new ArgumentNullException(nameof(webContributorTrend.Weeks), "Property is required for class WebContributorTrend.");

            if (webContributorTrend.AuthorOption.IsSet)
            {
                writer.WritePropertyName("author");
                JsonSerializer.Serialize(writer, webContributorTrend.Author, jsonSerializerOptions);
            }
            if (webContributorTrend.CommitCountOption.IsSet)
                writer.WriteNumber("commit_count", webContributorTrend.CommitCountOption.Value!.Value);

            if (webContributorTrend.WeeksOption.IsSet)
            {
                writer.WritePropertyName("weeks");
                JsonSerializer.Serialize(writer, webContributorTrend.Weeks, jsonSerializerOptions);
            }
        }
    }
}
