// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebBranchProtection
    /// </summary>
    public partial class WebBranchProtection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebBranchProtection" /> class.
        /// </summary>
        /// <param name="allowCreation">allowCreation</param>
        /// <param name="allowDeletions">allowDeletions</param>
        /// <param name="allowForcePushes">allowForcePushes</param>
        /// <param name="allowMasterCreation">allowMasterCreation</param>
        /// <param name="allowMasterDeletions">allowMasterDeletions</param>
        /// <param name="allowMasterForcePushes">allowMasterForcePushes</param>
        /// <param name="allowMasterPushes">allowMasterPushes</param>
        /// <param name="allowPushes">allowPushes</param>
        /// <param name="id">id</param>
        /// <param name="matchCount">matchCount</param>
        /// <param name="requiredApprovedReviewCount">requiredApprovedReviewCount</param>
        /// <param name="requiredApprovedReviewRatio">requiredApprovedReviewRatio</param>
        /// <param name="requiredCommitSignatures">requiredCommitSignatures</param>
        /// <param name="requiredLinearHistory">requiredLinearHistory</param>
        /// <param name="requiredMasterApprove">requiredMasterApprove</param>
        /// <param name="requiredMustAutoMerge">requiredMustAutoMerge</param>
        /// <param name="requiredMustPushViaPullRequest">requiredMustPushViaPullRequest</param>
        /// <param name="requiredPullRequestReviews">requiredPullRequestReviews</param>
        /// <param name="requiredStatusChecks">requiredStatusChecks</param>
        /// <param name="rule">rule</param>
        [JsonConstructor]
        public WebBranchProtection(Option<bool?> allowCreation = default, Option<bool?> allowDeletions = default, Option<bool?> allowForcePushes = default, Option<bool?> allowMasterCreation = default, Option<bool?> allowMasterDeletions = default, Option<bool?> allowMasterForcePushes = default, Option<bool?> allowMasterPushes = default, Option<bool?> allowPushes = default, Option<string?> id = default, Option<int?> matchCount = default, Option<int?> requiredApprovedReviewCount = default, Option<int?> requiredApprovedReviewRatio = default, Option<bool?> requiredCommitSignatures = default, Option<bool?> requiredLinearHistory = default, Option<bool?> requiredMasterApprove = default, Option<bool?> requiredMustAutoMerge = default, Option<bool?> requiredMustPushViaPullRequest = default, Option<bool?> requiredPullRequestReviews = default, Option<bool?> requiredStatusChecks = default, Option<string?> rule = default)
        {
            AllowCreationOption = allowCreation;
            AllowDeletionsOption = allowDeletions;
            AllowForcePushesOption = allowForcePushes;
            AllowMasterCreationOption = allowMasterCreation;
            AllowMasterDeletionsOption = allowMasterDeletions;
            AllowMasterForcePushesOption = allowMasterForcePushes;
            AllowMasterPushesOption = allowMasterPushes;
            AllowPushesOption = allowPushes;
            IdOption = id;
            MatchCountOption = matchCount;
            RequiredApprovedReviewCountOption = requiredApprovedReviewCount;
            RequiredApprovedReviewRatioOption = requiredApprovedReviewRatio;
            RequiredCommitSignaturesOption = requiredCommitSignatures;
            RequiredLinearHistoryOption = requiredLinearHistory;
            RequiredMasterApproveOption = requiredMasterApprove;
            RequiredMustAutoMergeOption = requiredMustAutoMerge;
            RequiredMustPushViaPullRequestOption = requiredMustPushViaPullRequest;
            RequiredPullRequestReviewsOption = requiredPullRequestReviews;
            RequiredStatusChecksOption = requiredStatusChecks;
            RuleOption = rule;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AllowCreation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowCreationOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowCreation
        /// </summary>
        [JsonPropertyName("allow_creation")]
        public bool? AllowCreation { get { return this.AllowCreationOption; } set { this.AllowCreationOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowDeletions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowDeletionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowDeletions
        /// </summary>
        [JsonPropertyName("allow_deletions")]
        public bool? AllowDeletions { get { return this.AllowDeletionsOption; } set { this.AllowDeletionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowForcePushes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowForcePushesOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowForcePushes
        /// </summary>
        [JsonPropertyName("allow_force_pushes")]
        public bool? AllowForcePushes { get { return this.AllowForcePushesOption; } set { this.AllowForcePushesOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowMasterCreation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowMasterCreationOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowMasterCreation
        /// </summary>
        [JsonPropertyName("allow_master_creation")]
        public bool? AllowMasterCreation { get { return this.AllowMasterCreationOption; } set { this.AllowMasterCreationOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowMasterDeletions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowMasterDeletionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowMasterDeletions
        /// </summary>
        [JsonPropertyName("allow_master_deletions")]
        public bool? AllowMasterDeletions { get { return this.AllowMasterDeletionsOption; } set { this.AllowMasterDeletionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowMasterForcePushes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowMasterForcePushesOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowMasterForcePushes
        /// </summary>
        [JsonPropertyName("allow_master_force_pushes")]
        public bool? AllowMasterForcePushes { get { return this.AllowMasterForcePushesOption; } set { this.AllowMasterForcePushesOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowMasterPushes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowMasterPushesOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowMasterPushes
        /// </summary>
        [JsonPropertyName("allow_master_pushes")]
        public bool? AllowMasterPushes { get { return this.AllowMasterPushesOption; } set { this.AllowMasterPushesOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowPushes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowPushesOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowPushes
        /// </summary>
        [JsonPropertyName("allow_pushes")]
        public bool? AllowPushes { get { return this.AllowPushesOption; } set { this.AllowPushesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of MatchCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MatchCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets MatchCount
        /// </summary>
        [JsonPropertyName("match_count")]
        public int? MatchCount { get { return this.MatchCountOption; } set { this.MatchCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of RequiredApprovedReviewCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RequiredApprovedReviewCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets RequiredApprovedReviewCount
        /// </summary>
        [JsonPropertyName("required_approved_review_count")]
        public int? RequiredApprovedReviewCount { get { return this.RequiredApprovedReviewCountOption; } set { this.RequiredApprovedReviewCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of RequiredApprovedReviewRatio
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RequiredApprovedReviewRatioOption { get; private set; }

        /// <summary>
        /// Gets or Sets RequiredApprovedReviewRatio
        /// </summary>
        [JsonPropertyName("required_approved_review_ratio")]
        public int? RequiredApprovedReviewRatio { get { return this.RequiredApprovedReviewRatioOption; } set { this.RequiredApprovedReviewRatioOption = new(value); } }

        /// <summary>
        /// Used to track the state of RequiredCommitSignatures
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RequiredCommitSignaturesOption { get; private set; }

        /// <summary>
        /// Gets or Sets RequiredCommitSignatures
        /// </summary>
        [JsonPropertyName("required_commit_signatures")]
        public bool? RequiredCommitSignatures { get { return this.RequiredCommitSignaturesOption; } set { this.RequiredCommitSignaturesOption = new(value); } }

        /// <summary>
        /// Used to track the state of RequiredLinearHistory
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RequiredLinearHistoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets RequiredLinearHistory
        /// </summary>
        [JsonPropertyName("required_linear_history")]
        public bool? RequiredLinearHistory { get { return this.RequiredLinearHistoryOption; } set { this.RequiredLinearHistoryOption = new(value); } }

        /// <summary>
        /// Used to track the state of RequiredMasterApprove
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RequiredMasterApproveOption { get; private set; }

        /// <summary>
        /// Gets or Sets RequiredMasterApprove
        /// </summary>
        [JsonPropertyName("required_master_approve")]
        public bool? RequiredMasterApprove { get { return this.RequiredMasterApproveOption; } set { this.RequiredMasterApproveOption = new(value); } }

        /// <summary>
        /// Used to track the state of RequiredMustAutoMerge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RequiredMustAutoMergeOption { get; private set; }

        /// <summary>
        /// Gets or Sets RequiredMustAutoMerge
        /// </summary>
        [JsonPropertyName("required_must_auto_merge")]
        public bool? RequiredMustAutoMerge { get { return this.RequiredMustAutoMergeOption; } set { this.RequiredMustAutoMergeOption = new(value); } }

        /// <summary>
        /// Used to track the state of RequiredMustPushViaPullRequest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RequiredMustPushViaPullRequestOption { get; private set; }

        /// <summary>
        /// Gets or Sets RequiredMustPushViaPullRequest
        /// </summary>
        [JsonPropertyName("required_must_push_via_pull_request")]
        public bool? RequiredMustPushViaPullRequest { get { return this.RequiredMustPushViaPullRequestOption; } set { this.RequiredMustPushViaPullRequestOption = new(value); } }

        /// <summary>
        /// Used to track the state of RequiredPullRequestReviews
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RequiredPullRequestReviewsOption { get; private set; }

        /// <summary>
        /// Gets or Sets RequiredPullRequestReviews
        /// </summary>
        [JsonPropertyName("required_pull_request_reviews")]
        public bool? RequiredPullRequestReviews { get { return this.RequiredPullRequestReviewsOption; } set { this.RequiredPullRequestReviewsOption = new(value); } }

        /// <summary>
        /// Used to track the state of RequiredStatusChecks
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RequiredStatusChecksOption { get; private set; }

        /// <summary>
        /// Gets or Sets RequiredStatusChecks
        /// </summary>
        [JsonPropertyName("required_status_checks")]
        public bool? RequiredStatusChecks { get { return this.RequiredStatusChecksOption; } set { this.RequiredStatusChecksOption = new(value); } }

        /// <summary>
        /// Used to track the state of Rule
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RuleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Rule
        /// </summary>
        [JsonPropertyName("rule")]
        public string? Rule { get { return this.RuleOption; } set { this.RuleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebBranchProtection {\n");
            sb.Append("  AllowCreation: ").Append(AllowCreation).Append("\n");
            sb.Append("  AllowDeletions: ").Append(AllowDeletions).Append("\n");
            sb.Append("  AllowForcePushes: ").Append(AllowForcePushes).Append("\n");
            sb.Append("  AllowMasterCreation: ").Append(AllowMasterCreation).Append("\n");
            sb.Append("  AllowMasterDeletions: ").Append(AllowMasterDeletions).Append("\n");
            sb.Append("  AllowMasterForcePushes: ").Append(AllowMasterForcePushes).Append("\n");
            sb.Append("  AllowMasterPushes: ").Append(AllowMasterPushes).Append("\n");
            sb.Append("  AllowPushes: ").Append(AllowPushes).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MatchCount: ").Append(MatchCount).Append("\n");
            sb.Append("  RequiredApprovedReviewCount: ").Append(RequiredApprovedReviewCount).Append("\n");
            sb.Append("  RequiredApprovedReviewRatio: ").Append(RequiredApprovedReviewRatio).Append("\n");
            sb.Append("  RequiredCommitSignatures: ").Append(RequiredCommitSignatures).Append("\n");
            sb.Append("  RequiredLinearHistory: ").Append(RequiredLinearHistory).Append("\n");
            sb.Append("  RequiredMasterApprove: ").Append(RequiredMasterApprove).Append("\n");
            sb.Append("  RequiredMustAutoMerge: ").Append(RequiredMustAutoMerge).Append("\n");
            sb.Append("  RequiredMustPushViaPullRequest: ").Append(RequiredMustPushViaPullRequest).Append("\n");
            sb.Append("  RequiredPullRequestReviews: ").Append(RequiredPullRequestReviews).Append("\n");
            sb.Append("  RequiredStatusChecks: ").Append(RequiredStatusChecks).Append("\n");
            sb.Append("  Rule: ").Append(Rule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebBranchProtection" />
    /// </summary>
    public class WebBranchProtectionJsonConverter : JsonConverter<WebBranchProtection>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebBranchProtection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebBranchProtection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> allowCreation = default;
            Option<bool?> allowDeletions = default;
            Option<bool?> allowForcePushes = default;
            Option<bool?> allowMasterCreation = default;
            Option<bool?> allowMasterDeletions = default;
            Option<bool?> allowMasterForcePushes = default;
            Option<bool?> allowMasterPushes = default;
            Option<bool?> allowPushes = default;
            Option<string?> id = default;
            Option<int?> matchCount = default;
            Option<int?> requiredApprovedReviewCount = default;
            Option<int?> requiredApprovedReviewRatio = default;
            Option<bool?> requiredCommitSignatures = default;
            Option<bool?> requiredLinearHistory = default;
            Option<bool?> requiredMasterApprove = default;
            Option<bool?> requiredMustAutoMerge = default;
            Option<bool?> requiredMustPushViaPullRequest = default;
            Option<bool?> requiredPullRequestReviews = default;
            Option<bool?> requiredStatusChecks = default;
            Option<string?> rule = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "allow_creation":
                            allowCreation = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allow_deletions":
                            allowDeletions = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allow_force_pushes":
                            allowForcePushes = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allow_master_creation":
                            allowMasterCreation = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allow_master_deletions":
                            allowMasterDeletions = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allow_master_force_pushes":
                            allowMasterForcePushes = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allow_master_pushes":
                            allowMasterPushes = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allow_pushes":
                            allowPushes = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "match_count":
                            matchCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "required_approved_review_count":
                            requiredApprovedReviewCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "required_approved_review_ratio":
                            requiredApprovedReviewRatio = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "required_commit_signatures":
                            requiredCommitSignatures = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "required_linear_history":
                            requiredLinearHistory = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "required_master_approve":
                            requiredMasterApprove = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "required_must_auto_merge":
                            requiredMustAutoMerge = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "required_must_push_via_pull_request":
                            requiredMustPushViaPullRequest = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "required_pull_request_reviews":
                            requiredPullRequestReviews = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "required_status_checks":
                            requiredStatusChecks = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "rule":
                            rule = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (allowCreation.IsSet && allowCreation.Value == null)
                throw new ArgumentNullException(nameof(allowCreation), "Property is not nullable for class WebBranchProtection.");

            if (allowDeletions.IsSet && allowDeletions.Value == null)
                throw new ArgumentNullException(nameof(allowDeletions), "Property is not nullable for class WebBranchProtection.");

            if (allowForcePushes.IsSet && allowForcePushes.Value == null)
                throw new ArgumentNullException(nameof(allowForcePushes), "Property is not nullable for class WebBranchProtection.");

            if (allowMasterCreation.IsSet && allowMasterCreation.Value == null)
                throw new ArgumentNullException(nameof(allowMasterCreation), "Property is not nullable for class WebBranchProtection.");

            if (allowMasterDeletions.IsSet && allowMasterDeletions.Value == null)
                throw new ArgumentNullException(nameof(allowMasterDeletions), "Property is not nullable for class WebBranchProtection.");

            if (allowMasterForcePushes.IsSet && allowMasterForcePushes.Value == null)
                throw new ArgumentNullException(nameof(allowMasterForcePushes), "Property is not nullable for class WebBranchProtection.");

            if (allowMasterPushes.IsSet && allowMasterPushes.Value == null)
                throw new ArgumentNullException(nameof(allowMasterPushes), "Property is not nullable for class WebBranchProtection.");

            if (allowPushes.IsSet && allowPushes.Value == null)
                throw new ArgumentNullException(nameof(allowPushes), "Property is not nullable for class WebBranchProtection.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class WebBranchProtection.");

            if (matchCount.IsSet && matchCount.Value == null)
                throw new ArgumentNullException(nameof(matchCount), "Property is not nullable for class WebBranchProtection.");

            if (requiredApprovedReviewCount.IsSet && requiredApprovedReviewCount.Value == null)
                throw new ArgumentNullException(nameof(requiredApprovedReviewCount), "Property is not nullable for class WebBranchProtection.");

            if (requiredApprovedReviewRatio.IsSet && requiredApprovedReviewRatio.Value == null)
                throw new ArgumentNullException(nameof(requiredApprovedReviewRatio), "Property is not nullable for class WebBranchProtection.");

            if (requiredCommitSignatures.IsSet && requiredCommitSignatures.Value == null)
                throw new ArgumentNullException(nameof(requiredCommitSignatures), "Property is not nullable for class WebBranchProtection.");

            if (requiredLinearHistory.IsSet && requiredLinearHistory.Value == null)
                throw new ArgumentNullException(nameof(requiredLinearHistory), "Property is not nullable for class WebBranchProtection.");

            if (requiredMasterApprove.IsSet && requiredMasterApprove.Value == null)
                throw new ArgumentNullException(nameof(requiredMasterApprove), "Property is not nullable for class WebBranchProtection.");

            if (requiredMustAutoMerge.IsSet && requiredMustAutoMerge.Value == null)
                throw new ArgumentNullException(nameof(requiredMustAutoMerge), "Property is not nullable for class WebBranchProtection.");

            if (requiredMustPushViaPullRequest.IsSet && requiredMustPushViaPullRequest.Value == null)
                throw new ArgumentNullException(nameof(requiredMustPushViaPullRequest), "Property is not nullable for class WebBranchProtection.");

            if (requiredPullRequestReviews.IsSet && requiredPullRequestReviews.Value == null)
                throw new ArgumentNullException(nameof(requiredPullRequestReviews), "Property is not nullable for class WebBranchProtection.");

            if (requiredStatusChecks.IsSet && requiredStatusChecks.Value == null)
                throw new ArgumentNullException(nameof(requiredStatusChecks), "Property is not nullable for class WebBranchProtection.");

            if (rule.IsSet && rule.Value == null)
                throw new ArgumentNullException(nameof(rule), "Property is not nullable for class WebBranchProtection.");

            return new WebBranchProtection(allowCreation, allowDeletions, allowForcePushes, allowMasterCreation, allowMasterDeletions, allowMasterForcePushes, allowMasterPushes, allowPushes, id, matchCount, requiredApprovedReviewCount, requiredApprovedReviewRatio, requiredCommitSignatures, requiredLinearHistory, requiredMasterApprove, requiredMustAutoMerge, requiredMustPushViaPullRequest, requiredPullRequestReviews, requiredStatusChecks, rule);
        }

        /// <summary>
        /// Serializes a <see cref="WebBranchProtection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webBranchProtection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebBranchProtection webBranchProtection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webBranchProtection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebBranchProtection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webBranchProtection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebBranchProtection webBranchProtection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webBranchProtection.IdOption.IsSet && webBranchProtection.Id == null)
                throw new ArgumentNullException(nameof(webBranchProtection.Id), "Property is required for class WebBranchProtection.");

            if (webBranchProtection.RuleOption.IsSet && webBranchProtection.Rule == null)
                throw new ArgumentNullException(nameof(webBranchProtection.Rule), "Property is required for class WebBranchProtection.");

            if (webBranchProtection.AllowCreationOption.IsSet)
                writer.WriteBoolean("allow_creation", webBranchProtection.AllowCreationOption.Value!.Value);

            if (webBranchProtection.AllowDeletionsOption.IsSet)
                writer.WriteBoolean("allow_deletions", webBranchProtection.AllowDeletionsOption.Value!.Value);

            if (webBranchProtection.AllowForcePushesOption.IsSet)
                writer.WriteBoolean("allow_force_pushes", webBranchProtection.AllowForcePushesOption.Value!.Value);

            if (webBranchProtection.AllowMasterCreationOption.IsSet)
                writer.WriteBoolean("allow_master_creation", webBranchProtection.AllowMasterCreationOption.Value!.Value);

            if (webBranchProtection.AllowMasterDeletionsOption.IsSet)
                writer.WriteBoolean("allow_master_deletions", webBranchProtection.AllowMasterDeletionsOption.Value!.Value);

            if (webBranchProtection.AllowMasterForcePushesOption.IsSet)
                writer.WriteBoolean("allow_master_force_pushes", webBranchProtection.AllowMasterForcePushesOption.Value!.Value);

            if (webBranchProtection.AllowMasterPushesOption.IsSet)
                writer.WriteBoolean("allow_master_pushes", webBranchProtection.AllowMasterPushesOption.Value!.Value);

            if (webBranchProtection.AllowPushesOption.IsSet)
                writer.WriteBoolean("allow_pushes", webBranchProtection.AllowPushesOption.Value!.Value);

            if (webBranchProtection.IdOption.IsSet)
                writer.WriteString("id", webBranchProtection.Id);

            if (webBranchProtection.MatchCountOption.IsSet)
                writer.WriteNumber("match_count", webBranchProtection.MatchCountOption.Value!.Value);

            if (webBranchProtection.RequiredApprovedReviewCountOption.IsSet)
                writer.WriteNumber("required_approved_review_count", webBranchProtection.RequiredApprovedReviewCountOption.Value!.Value);

            if (webBranchProtection.RequiredApprovedReviewRatioOption.IsSet)
                writer.WriteNumber("required_approved_review_ratio", webBranchProtection.RequiredApprovedReviewRatioOption.Value!.Value);

            if (webBranchProtection.RequiredCommitSignaturesOption.IsSet)
                writer.WriteBoolean("required_commit_signatures", webBranchProtection.RequiredCommitSignaturesOption.Value!.Value);

            if (webBranchProtection.RequiredLinearHistoryOption.IsSet)
                writer.WriteBoolean("required_linear_history", webBranchProtection.RequiredLinearHistoryOption.Value!.Value);

            if (webBranchProtection.RequiredMasterApproveOption.IsSet)
                writer.WriteBoolean("required_master_approve", webBranchProtection.RequiredMasterApproveOption.Value!.Value);

            if (webBranchProtection.RequiredMustAutoMergeOption.IsSet)
                writer.WriteBoolean("required_must_auto_merge", webBranchProtection.RequiredMustAutoMergeOption.Value!.Value);

            if (webBranchProtection.RequiredMustPushViaPullRequestOption.IsSet)
                writer.WriteBoolean("required_must_push_via_pull_request", webBranchProtection.RequiredMustPushViaPullRequestOption.Value!.Value);

            if (webBranchProtection.RequiredPullRequestReviewsOption.IsSet)
                writer.WriteBoolean("required_pull_request_reviews", webBranchProtection.RequiredPullRequestReviewsOption.Value!.Value);

            if (webBranchProtection.RequiredStatusChecksOption.IsSet)
                writer.WriteBoolean("required_status_checks", webBranchProtection.RequiredStatusChecksOption.Value!.Value);

            if (webBranchProtection.RuleOption.IsSet)
                writer.WriteString("rule", webBranchProtection.Rule);
        }
    }
}
