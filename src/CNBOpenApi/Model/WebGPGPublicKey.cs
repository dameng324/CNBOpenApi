// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebGPGPublicKey
    /// </summary>
    public partial class WebGPGPublicKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebGPGPublicKey" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="emails">emails</param>
        /// <param name="expiredAt">过期时间</param>
        /// <param name="fingerprint">公钥指纹</param>
        /// <param name="id">id</param>
        /// <param name="keyCreationTime">密钥创建时间</param>
        /// <param name="keyId">公钥 ID</param>
        /// <param name="name">标题</param>
        /// <param name="publicKey">publicKey</param>
        /// <param name="subkeys">子密钥指纹，当为 primary key 时与 primary_fingerprint 相同</param>
        /// <param name="userId">userId</param>
        [JsonConstructor]
        public WebGPGPublicKey(Option<string?> createdAt = default, Option<List<WebGPGEmail>?> emails = default, Option<string?> expiredAt = default, Option<string?> fingerprint = default, Option<string?> id = default, Option<string?> keyCreationTime = default, Option<string?> keyId = default, Option<string?> name = default, Option<string?> publicKey = default, Option<List<WebGPGSubkey>?> subkeys = default, Option<string?> userId = default)
        {
            CreatedAtOption = createdAt;
            EmailsOption = emails;
            ExpiredAtOption = expiredAt;
            FingerprintOption = fingerprint;
            IdOption = id;
            KeyCreationTimeOption = keyCreationTime;
            KeyIdOption = keyId;
            NameOption = name;
            PublicKeyOption = publicKey;
            SubkeysOption = subkeys;
            UserIdOption = userId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Emails
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebGPGEmail>?> EmailsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Emails
        /// </summary>
        [JsonPropertyName("emails")]
        public List<WebGPGEmail>? Emails { get { return this.EmailsOption; } set { this.EmailsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpiredAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExpiredAtOption { get; private set; }

        /// <summary>
        /// 过期时间
        /// </summary>
        /// <value>过期时间</value>
        [JsonPropertyName("expired_at")]
        public string? ExpiredAt { get { return this.ExpiredAtOption; } set { this.ExpiredAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Fingerprint
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FingerprintOption { get; private set; }

        /// <summary>
        /// 公钥指纹
        /// </summary>
        /// <value>公钥指纹</value>
        [JsonPropertyName("fingerprint")]
        public string? Fingerprint { get { return this.FingerprintOption; } set { this.FingerprintOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of KeyCreationTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeyCreationTimeOption { get; private set; }

        /// <summary>
        /// 密钥创建时间
        /// </summary>
        /// <value>密钥创建时间</value>
        [JsonPropertyName("key_creation_time")]
        public string? KeyCreationTime { get { return this.KeyCreationTimeOption; } set { this.KeyCreationTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of KeyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeyIdOption { get; private set; }

        /// <summary>
        /// 公钥 ID
        /// </summary>
        /// <value>公钥 ID</value>
        [JsonPropertyName("key_id")]
        public string? KeyId { get { return this.KeyIdOption; } set { this.KeyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// 标题
        /// </summary>
        /// <value>标题</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of PublicKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PublicKeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets PublicKey
        /// </summary>
        [JsonPropertyName("public_key")]
        public string? PublicKey { get { return this.PublicKeyOption; } set { this.PublicKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Subkeys
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebGPGSubkey>?> SubkeysOption { get; private set; }

        /// <summary>
        /// 子密钥指纹，当为 primary key 时与 primary_fingerprint 相同
        /// </summary>
        /// <value>子密钥指纹，当为 primary key 时与 primary_fingerprint 相同</value>
        [JsonPropertyName("subkeys")]
        public List<WebGPGSubkey>? Subkeys { get { return this.SubkeysOption; } set { this.SubkeysOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("user_id")]
        public string? UserId { get { return this.UserIdOption; } set { this.UserIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebGPGPublicKey {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Emails: ").Append(Emails).Append("\n");
            sb.Append("  ExpiredAt: ").Append(ExpiredAt).Append("\n");
            sb.Append("  Fingerprint: ").Append(Fingerprint).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  KeyCreationTime: ").Append(KeyCreationTime).Append("\n");
            sb.Append("  KeyId: ").Append(KeyId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("  Subkeys: ").Append(Subkeys).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebGPGPublicKey" />
    /// </summary>
    public class WebGPGPublicKeyJsonConverter : JsonConverter<WebGPGPublicKey>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebGPGPublicKey" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebGPGPublicKey Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> createdAt = default;
            Option<List<WebGPGEmail>?> emails = default;
            Option<string?> expiredAt = default;
            Option<string?> fingerprint = default;
            Option<string?> id = default;
            Option<string?> keyCreationTime = default;
            Option<string?> keyId = default;
            Option<string?> name = default;
            Option<string?> publicKey = default;
            Option<List<WebGPGSubkey>?> subkeys = default;
            Option<string?> userId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "emails":
                            emails = new Option<List<WebGPGEmail>?>(JsonSerializer.Deserialize<List<WebGPGEmail>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "expired_at":
                            expiredAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fingerprint":
                            fingerprint = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "key_creation_time":
                            keyCreationTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "key_id":
                            keyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "public_key":
                            publicKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subkeys":
                            subkeys = new Option<List<WebGPGSubkey>?>(JsonSerializer.Deserialize<List<WebGPGSubkey>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class WebGPGPublicKey.");

            if (emails.IsSet && emails.Value == null)
                throw new ArgumentNullException(nameof(emails), "Property is not nullable for class WebGPGPublicKey.");

            if (expiredAt.IsSet && expiredAt.Value == null)
                throw new ArgumentNullException(nameof(expiredAt), "Property is not nullable for class WebGPGPublicKey.");

            if (fingerprint.IsSet && fingerprint.Value == null)
                throw new ArgumentNullException(nameof(fingerprint), "Property is not nullable for class WebGPGPublicKey.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class WebGPGPublicKey.");

            if (keyCreationTime.IsSet && keyCreationTime.Value == null)
                throw new ArgumentNullException(nameof(keyCreationTime), "Property is not nullable for class WebGPGPublicKey.");

            if (keyId.IsSet && keyId.Value == null)
                throw new ArgumentNullException(nameof(keyId), "Property is not nullable for class WebGPGPublicKey.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class WebGPGPublicKey.");

            if (publicKey.IsSet && publicKey.Value == null)
                throw new ArgumentNullException(nameof(publicKey), "Property is not nullable for class WebGPGPublicKey.");

            if (subkeys.IsSet && subkeys.Value == null)
                throw new ArgumentNullException(nameof(subkeys), "Property is not nullable for class WebGPGPublicKey.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class WebGPGPublicKey.");

            return new WebGPGPublicKey(createdAt, emails, expiredAt, fingerprint, id, keyCreationTime, keyId, name, publicKey, subkeys, userId);
        }

        /// <summary>
        /// Serializes a <see cref="WebGPGPublicKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webGPGPublicKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebGPGPublicKey webGPGPublicKey, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webGPGPublicKey, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebGPGPublicKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webGPGPublicKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebGPGPublicKey webGPGPublicKey, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webGPGPublicKey.CreatedAtOption.IsSet && webGPGPublicKey.CreatedAt == null)
                throw new ArgumentNullException(nameof(webGPGPublicKey.CreatedAt), "Property is required for class WebGPGPublicKey.");

            if (webGPGPublicKey.EmailsOption.IsSet && webGPGPublicKey.Emails == null)
                throw new ArgumentNullException(nameof(webGPGPublicKey.Emails), "Property is required for class WebGPGPublicKey.");

            if (webGPGPublicKey.ExpiredAtOption.IsSet && webGPGPublicKey.ExpiredAt == null)
                throw new ArgumentNullException(nameof(webGPGPublicKey.ExpiredAt), "Property is required for class WebGPGPublicKey.");

            if (webGPGPublicKey.FingerprintOption.IsSet && webGPGPublicKey.Fingerprint == null)
                throw new ArgumentNullException(nameof(webGPGPublicKey.Fingerprint), "Property is required for class WebGPGPublicKey.");

            if (webGPGPublicKey.IdOption.IsSet && webGPGPublicKey.Id == null)
                throw new ArgumentNullException(nameof(webGPGPublicKey.Id), "Property is required for class WebGPGPublicKey.");

            if (webGPGPublicKey.KeyCreationTimeOption.IsSet && webGPGPublicKey.KeyCreationTime == null)
                throw new ArgumentNullException(nameof(webGPGPublicKey.KeyCreationTime), "Property is required for class WebGPGPublicKey.");

            if (webGPGPublicKey.KeyIdOption.IsSet && webGPGPublicKey.KeyId == null)
                throw new ArgumentNullException(nameof(webGPGPublicKey.KeyId), "Property is required for class WebGPGPublicKey.");

            if (webGPGPublicKey.NameOption.IsSet && webGPGPublicKey.Name == null)
                throw new ArgumentNullException(nameof(webGPGPublicKey.Name), "Property is required for class WebGPGPublicKey.");

            if (webGPGPublicKey.PublicKeyOption.IsSet && webGPGPublicKey.PublicKey == null)
                throw new ArgumentNullException(nameof(webGPGPublicKey.PublicKey), "Property is required for class WebGPGPublicKey.");

            if (webGPGPublicKey.SubkeysOption.IsSet && webGPGPublicKey.Subkeys == null)
                throw new ArgumentNullException(nameof(webGPGPublicKey.Subkeys), "Property is required for class WebGPGPublicKey.");

            if (webGPGPublicKey.UserIdOption.IsSet && webGPGPublicKey.UserId == null)
                throw new ArgumentNullException(nameof(webGPGPublicKey.UserId), "Property is required for class WebGPGPublicKey.");

            if (webGPGPublicKey.CreatedAtOption.IsSet)
                writer.WriteString("created_at", webGPGPublicKey.CreatedAt);

            if (webGPGPublicKey.EmailsOption.IsSet)
            {
                writer.WritePropertyName("emails");
                JsonSerializer.Serialize(writer, webGPGPublicKey.Emails, jsonSerializerOptions);
            }
            if (webGPGPublicKey.ExpiredAtOption.IsSet)
                writer.WriteString("expired_at", webGPGPublicKey.ExpiredAt);

            if (webGPGPublicKey.FingerprintOption.IsSet)
                writer.WriteString("fingerprint", webGPGPublicKey.Fingerprint);

            if (webGPGPublicKey.IdOption.IsSet)
                writer.WriteString("id", webGPGPublicKey.Id);

            if (webGPGPublicKey.KeyCreationTimeOption.IsSet)
                writer.WriteString("key_creation_time", webGPGPublicKey.KeyCreationTime);

            if (webGPGPublicKey.KeyIdOption.IsSet)
                writer.WriteString("key_id", webGPGPublicKey.KeyId);

            if (webGPGPublicKey.NameOption.IsSet)
                writer.WriteString("name", webGPGPublicKey.Name);

            if (webGPGPublicKey.PublicKeyOption.IsSet)
                writer.WriteString("public_key", webGPGPublicKey.PublicKey);

            if (webGPGPublicKey.SubkeysOption.IsSet)
            {
                writer.WritePropertyName("subkeys");
                JsonSerializer.Serialize(writer, webGPGPublicKey.Subkeys, jsonSerializerOptions);
            }
            if (webGPGPublicKey.UserIdOption.IsSet)
                writer.WriteString("user_id", webGPGPublicKey.UserId);
        }
    }
}
