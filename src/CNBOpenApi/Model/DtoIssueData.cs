// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoIssueData
    /// </summary>
    public partial class DtoIssueData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoIssueData" /> class.
        /// </summary>
        /// <param name="associatedPullRequestCounts">associatedPullRequestCounts</param>
        /// <param name="commentCounts">commentCounts</param>
        /// <param name="createdTime">createdTime</param>
        /// <param name="creator">creator</param>
        /// <param name="label">label</param>
        /// <param name="number">number</param>
        /// <param name="pinned">pinned</param>
        /// <param name="priority">priority</param>
        /// <param name="slug">slug</param>
        /// <param name="slugFreeze">slugFreeze</param>
        /// <param name="state">state</param>
        /// <param name="title">title</param>
        /// <param name="todoId">todoId</param>
        /// <param name="updatedTime">updatedTime</param>
        [JsonConstructor]
        public DtoIssueData(Option<int?> associatedPullRequestCounts = default, Option<int?> commentCounts = default, Option<string?> createdTime = default, Option<DtoCreator?> creator = default, Option<List<DtoLabel>?> label = default, Option<int?> number = default, Option<bool?> pinned = default, Option<string?> priority = default, Option<string?> slug = default, Option<bool?> slugFreeze = default, Option<string?> state = default, Option<string?> title = default, Option<string?> todoId = default, Option<string?> updatedTime = default)
        {
            AssociatedPullRequestCountsOption = associatedPullRequestCounts;
            CommentCountsOption = commentCounts;
            CreatedTimeOption = createdTime;
            CreatorOption = creator;
            LabelOption = label;
            NumberOption = number;
            PinnedOption = pinned;
            PriorityOption = priority;
            SlugOption = slug;
            SlugFreezeOption = slugFreeze;
            StateOption = state;
            TitleOption = title;
            TodoIdOption = todoId;
            UpdatedTimeOption = updatedTime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AssociatedPullRequestCounts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AssociatedPullRequestCountsOption { get; private set; }

        /// <summary>
        /// Gets or Sets AssociatedPullRequestCounts
        /// </summary>
        [JsonPropertyName("associated_pull_request_counts")]
        public int? AssociatedPullRequestCounts { get { return this.AssociatedPullRequestCountsOption; } set { this.AssociatedPullRequestCountsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommentCounts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CommentCountsOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommentCounts
        /// </summary>
        [JsonPropertyName("comment_counts")]
        public int? CommentCounts { get { return this.CommentCountsOption; } set { this.CommentCountsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedTime
        /// </summary>
        [JsonPropertyName("created_time")]
        public string? CreatedTime { get { return this.CreatedTimeOption; } set { this.CreatedTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Creator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoCreator?> CreatorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [JsonPropertyName("creator")]
        public DtoCreator? Creator { get { return this.CreatorOption; } set { this.CreatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Label
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoLabel>?> LabelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [JsonPropertyName("label")]
        public List<DtoLabel>? Label { get { return this.LabelOption; } set { this.LabelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public int? Number { get { return this.NumberOption; } set { this.NumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Pinned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PinnedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Pinned
        /// </summary>
        [JsonPropertyName("pinned")]
        public bool? Pinned { get { return this.PinnedOption; } set { this.PinnedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Priority
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PriorityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [JsonPropertyName("priority")]
        public string? Priority { get { return this.PriorityOption; } set { this.PriorityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Slug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SlugOption { get; private set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [JsonPropertyName("slug")]
        public string? Slug { get { return this.SlugOption; } set { this.SlugOption = new(value); } }

        /// <summary>
        /// Used to track the state of SlugFreeze
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SlugFreezeOption { get; private set; }

        /// <summary>
        /// Gets or Sets SlugFreeze
        /// </summary>
        [JsonPropertyName("slug_freeze")]
        public bool? SlugFreeze { get { return this.SlugFreezeOption; } set { this.SlugFreezeOption = new(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public string? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of TodoId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TodoIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TodoId
        /// </summary>
        [JsonPropertyName("todo_id")]
        public string? TodoId { get { return this.TodoIdOption; } set { this.TodoIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedTime
        /// </summary>
        [JsonPropertyName("updated_time")]
        public string? UpdatedTime { get { return this.UpdatedTimeOption; } set { this.UpdatedTimeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoIssueData {\n");
            sb.Append("  AssociatedPullRequestCounts: ").Append(AssociatedPullRequestCounts).Append("\n");
            sb.Append("  CommentCounts: ").Append(CommentCounts).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Pinned: ").Append(Pinned).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  SlugFreeze: ").Append(SlugFreeze).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TodoId: ").Append(TodoId).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoIssueData" />
    /// </summary>
    public class DtoIssueDataJsonConverter : JsonConverter<DtoIssueData>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoIssueData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoIssueData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> associatedPullRequestCounts = default;
            Option<int?> commentCounts = default;
            Option<string?> createdTime = default;
            Option<DtoCreator?> creator = default;
            Option<List<DtoLabel>?> label = default;
            Option<int?> number = default;
            Option<bool?> pinned = default;
            Option<string?> priority = default;
            Option<string?> slug = default;
            Option<bool?> slugFreeze = default;
            Option<string?> state = default;
            Option<string?> title = default;
            Option<string?> todoId = default;
            Option<string?> updatedTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "associated_pull_request_counts":
                            associatedPullRequestCounts = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "comment_counts":
                            commentCounts = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "created_time":
                            createdTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "creator":
                            creator = new Option<DtoCreator?>(JsonSerializer.Deserialize<DtoCreator>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "label":
                            label = new Option<List<DtoLabel>?>(JsonSerializer.Deserialize<List<DtoLabel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "number":
                            number = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pinned":
                            pinned = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "priority":
                            priority = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "slug":
                            slug = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "slug_freeze":
                            slugFreeze = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "todo_id":
                            todoId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_time":
                            updatedTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (associatedPullRequestCounts.IsSet && associatedPullRequestCounts.Value == null)
                throw new ArgumentNullException(nameof(associatedPullRequestCounts), "Property is not nullable for class DtoIssueData.");

            if (commentCounts.IsSet && commentCounts.Value == null)
                throw new ArgumentNullException(nameof(commentCounts), "Property is not nullable for class DtoIssueData.");

            if (createdTime.IsSet && createdTime.Value == null)
                throw new ArgumentNullException(nameof(createdTime), "Property is not nullable for class DtoIssueData.");

            if (creator.IsSet && creator.Value == null)
                throw new ArgumentNullException(nameof(creator), "Property is not nullable for class DtoIssueData.");

            if (label.IsSet && label.Value == null)
                throw new ArgumentNullException(nameof(label), "Property is not nullable for class DtoIssueData.");

            if (number.IsSet && number.Value == null)
                throw new ArgumentNullException(nameof(number), "Property is not nullable for class DtoIssueData.");

            if (pinned.IsSet && pinned.Value == null)
                throw new ArgumentNullException(nameof(pinned), "Property is not nullable for class DtoIssueData.");

            if (priority.IsSet && priority.Value == null)
                throw new ArgumentNullException(nameof(priority), "Property is not nullable for class DtoIssueData.");

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug), "Property is not nullable for class DtoIssueData.");

            if (slugFreeze.IsSet && slugFreeze.Value == null)
                throw new ArgumentNullException(nameof(slugFreeze), "Property is not nullable for class DtoIssueData.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class DtoIssueData.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class DtoIssueData.");

            if (todoId.IsSet && todoId.Value == null)
                throw new ArgumentNullException(nameof(todoId), "Property is not nullable for class DtoIssueData.");

            if (updatedTime.IsSet && updatedTime.Value == null)
                throw new ArgumentNullException(nameof(updatedTime), "Property is not nullable for class DtoIssueData.");

            return new DtoIssueData(associatedPullRequestCounts, commentCounts, createdTime, creator, label, number, pinned, priority, slug, slugFreeze, state, title, todoId, updatedTime);
        }

        /// <summary>
        /// Serializes a <see cref="DtoIssueData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoIssueData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoIssueData dtoIssueData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoIssueData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoIssueData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoIssueData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoIssueData dtoIssueData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoIssueData.CreatedTimeOption.IsSet && dtoIssueData.CreatedTime == null)
                throw new ArgumentNullException(nameof(dtoIssueData.CreatedTime), "Property is required for class DtoIssueData.");

            if (dtoIssueData.CreatorOption.IsSet && dtoIssueData.Creator == null)
                throw new ArgumentNullException(nameof(dtoIssueData.Creator), "Property is required for class DtoIssueData.");

            if (dtoIssueData.LabelOption.IsSet && dtoIssueData.Label == null)
                throw new ArgumentNullException(nameof(dtoIssueData.Label), "Property is required for class DtoIssueData.");

            if (dtoIssueData.PriorityOption.IsSet && dtoIssueData.Priority == null)
                throw new ArgumentNullException(nameof(dtoIssueData.Priority), "Property is required for class DtoIssueData.");

            if (dtoIssueData.SlugOption.IsSet && dtoIssueData.Slug == null)
                throw new ArgumentNullException(nameof(dtoIssueData.Slug), "Property is required for class DtoIssueData.");

            if (dtoIssueData.StateOption.IsSet && dtoIssueData.State == null)
                throw new ArgumentNullException(nameof(dtoIssueData.State), "Property is required for class DtoIssueData.");

            if (dtoIssueData.TitleOption.IsSet && dtoIssueData.Title == null)
                throw new ArgumentNullException(nameof(dtoIssueData.Title), "Property is required for class DtoIssueData.");

            if (dtoIssueData.TodoIdOption.IsSet && dtoIssueData.TodoId == null)
                throw new ArgumentNullException(nameof(dtoIssueData.TodoId), "Property is required for class DtoIssueData.");

            if (dtoIssueData.UpdatedTimeOption.IsSet && dtoIssueData.UpdatedTime == null)
                throw new ArgumentNullException(nameof(dtoIssueData.UpdatedTime), "Property is required for class DtoIssueData.");

            if (dtoIssueData.AssociatedPullRequestCountsOption.IsSet)
                writer.WriteNumber("associated_pull_request_counts", dtoIssueData.AssociatedPullRequestCountsOption.Value!.Value);

            if (dtoIssueData.CommentCountsOption.IsSet)
                writer.WriteNumber("comment_counts", dtoIssueData.CommentCountsOption.Value!.Value);

            if (dtoIssueData.CreatedTimeOption.IsSet)
                writer.WriteString("created_time", dtoIssueData.CreatedTime);

            if (dtoIssueData.CreatorOption.IsSet)
            {
                writer.WritePropertyName("creator");
                JsonSerializer.Serialize(writer, dtoIssueData.Creator, jsonSerializerOptions);
            }
            if (dtoIssueData.LabelOption.IsSet)
            {
                writer.WritePropertyName("label");
                JsonSerializer.Serialize(writer, dtoIssueData.Label, jsonSerializerOptions);
            }
            if (dtoIssueData.NumberOption.IsSet)
                writer.WriteNumber("number", dtoIssueData.NumberOption.Value!.Value);

            if (dtoIssueData.PinnedOption.IsSet)
                writer.WriteBoolean("pinned", dtoIssueData.PinnedOption.Value!.Value);

            if (dtoIssueData.PriorityOption.IsSet)
                writer.WriteString("priority", dtoIssueData.Priority);

            if (dtoIssueData.SlugOption.IsSet)
                writer.WriteString("slug", dtoIssueData.Slug);

            if (dtoIssueData.SlugFreezeOption.IsSet)
                writer.WriteBoolean("slug_freeze", dtoIssueData.SlugFreezeOption.Value!.Value);

            if (dtoIssueData.StateOption.IsSet)
                writer.WriteString("state", dtoIssueData.State);

            if (dtoIssueData.TitleOption.IsSet)
                writer.WriteString("title", dtoIssueData.Title);

            if (dtoIssueData.TodoIdOption.IsSet)
                writer.WriteString("todo_id", dtoIssueData.TodoId);

            if (dtoIssueData.UpdatedTimeOption.IsSet)
                writer.WriteString("updated_time", dtoIssueData.UpdatedTime);
        }
    }
}
