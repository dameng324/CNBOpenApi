// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoRankDetail
    /// </summary>
    public partial class DtoRankDetail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoRankDetail" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="description">description</param>
        /// <param name="displayModule">displayModule</param>
        /// <param name="forkCount">forkCount</param>
        /// <param name="forkedFromRepo">预留</param>
        /// <param name="freeze">freeze</param>
        /// <param name="id">id</param>
        /// <param name="language">仓库程序语言，预留</param>
        /// <param name="languages">仓库语言</param>
        /// <param name="lastUpdateNickname">最新代码更新人姓名</param>
        /// <param name="lastUpdateUsername">最新代码更新人账户名</param>
        /// <param name="lastUpdatedAt">最新代码更新时间</param>
        /// <param name="license">license</param>
        /// <param name="markCount">markCount</param>
        /// <param name="name">name</param>
        /// <param name="openIssueCount">开启的issue数</param>
        /// <param name="openPullRequestCount">开启的pull request数</param>
        /// <param name="path">完整仓库路径</param>
        /// <param name="rankValue">rankValue</param>
        /// <param name="site">site</param>
        /// <param name="starCount">starCount</param>
        /// <param name="status">status</param>
        /// <param name="tags">tags</param>
        /// <param name="topics">topics</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="visibilityLevel">visibilityLevel</param>
        /// <param name="webUrl">webUrl</param>
        [JsonConstructor]
        public DtoRankDetail(Option<string?> createdAt = default, Option<string?> description = default, Option<ConstantRepoDisplayModule?> displayModule = default, Option<int?> forkCount = default, Option<DtoSlugs?> forkedFromRepo = default, Option<bool?> freeze = default, Option<int?> id = default, Option<string?> language = default, Option<List<DtoRepoLanguage>?> languages = default, Option<string?> lastUpdateNickname = default, Option<string?> lastUpdateUsername = default, Option<ConvertNullTime?> lastUpdatedAt = default, Option<string?> license = default, Option<int?> markCount = default, Option<string?> name = default, Option<int?> openIssueCount = default, Option<int?> openPullRequestCount = default, Option<string?> path = default, Option<int?> rankValue = default, Option<string?> site = default, Option<int?> starCount = default, Option<ConstantRepoStatus?> status = default, Option<List<DtoRankDetailTagsInner>?> tags = default, Option<string?> topics = default, Option<string?> updatedAt = default, Option<ConstantVisibility?> visibilityLevel = default, Option<string?> webUrl = default)
        {
            CreatedAtOption = createdAt;
            DescriptionOption = description;
            DisplayModuleOption = displayModule;
            ForkCountOption = forkCount;
            ForkedFromRepoOption = forkedFromRepo;
            FreezeOption = freeze;
            IdOption = id;
            LanguageOption = language;
            LanguagesOption = languages;
            LastUpdateNicknameOption = lastUpdateNickname;
            LastUpdateUsernameOption = lastUpdateUsername;
            LastUpdatedAtOption = lastUpdatedAt;
            LicenseOption = license;
            MarkCountOption = markCount;
            NameOption = name;
            OpenIssueCountOption = openIssueCount;
            OpenPullRequestCountOption = openPullRequestCount;
            PathOption = path;
            RankValueOption = rankValue;
            SiteOption = site;
            StarCountOption = starCount;
            StatusOption = status;
            TagsOption = tags;
            TopicsOption = topics;
            UpdatedAtOption = updatedAt;
            VisibilityLevelOption = visibilityLevel;
            WebUrlOption = webUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DisplayModule
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantRepoDisplayModule?> DisplayModuleOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayModule
        /// </summary>
        [JsonPropertyName("display_module")]
        public ConstantRepoDisplayModule? DisplayModule { get { return this.DisplayModuleOption; } set { this.DisplayModuleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantRepoStatus?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public ConstantRepoStatus? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of VisibilityLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantVisibility?> VisibilityLevelOption { get; private set; }

        /// <summary>
        /// Gets or Sets VisibilityLevel
        /// </summary>
        [JsonPropertyName("visibility_level")]
        public ConstantVisibility? VisibilityLevel { get { return this.VisibilityLevelOption; } set { this.VisibilityLevelOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForkCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ForkCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets ForkCount
        /// </summary>
        [JsonPropertyName("fork_count")]
        public int? ForkCount { get { return this.ForkCountOption; } set { this.ForkCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForkedFromRepo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoSlugs?> ForkedFromRepoOption { get; private set; }

        /// <summary>
        /// 预留
        /// </summary>
        /// <value>预留</value>
        [JsonPropertyName("forked_from_repo")]
        public DtoSlugs? ForkedFromRepo { get { return this.ForkedFromRepoOption; } set { this.ForkedFromRepoOption = new(value); } }

        /// <summary>
        /// Used to track the state of Freeze
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FreezeOption { get; }

        /// <summary>
        /// Gets or Sets Freeze
        /// </summary>
        [JsonPropertyName("freeze")]
        public bool? Freeze { get { return this.FreezeOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Language
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LanguageOption { get; private set; }

        /// <summary>
        /// 仓库程序语言，预留
        /// </summary>
        /// <value>仓库程序语言，预留</value>
        [JsonPropertyName("language")]
        public string? Language { get { return this.LanguageOption; } set { this.LanguageOption = new(value); } }

        /// <summary>
        /// Used to track the state of Languages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoRepoLanguage>?> LanguagesOption { get; private set; }

        /// <summary>
        /// 仓库语言
        /// </summary>
        /// <value>仓库语言</value>
        [JsonPropertyName("languages")]
        public List<DtoRepoLanguage>? Languages { get { return this.LanguagesOption; } set { this.LanguagesOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastUpdateNickname
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastUpdateNicknameOption { get; private set; }

        /// <summary>
        /// 最新代码更新人姓名
        /// </summary>
        /// <value>最新代码更新人姓名</value>
        [JsonPropertyName("last_update_nickname")]
        public string? LastUpdateNickname { get { return this.LastUpdateNicknameOption; } set { this.LastUpdateNicknameOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastUpdateUsername
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastUpdateUsernameOption { get; private set; }

        /// <summary>
        /// 最新代码更新人账户名
        /// </summary>
        /// <value>最新代码更新人账户名</value>
        [JsonPropertyName("last_update_username")]
        public string? LastUpdateUsername { get { return this.LastUpdateUsernameOption; } set { this.LastUpdateUsernameOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastUpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConvertNullTime?> LastUpdatedAtOption { get; private set; }

        /// <summary>
        /// 最新代码更新时间
        /// </summary>
        /// <value>最新代码更新时间</value>
        [JsonPropertyName("last_updated_at")]
        public ConvertNullTime? LastUpdatedAt { get { return this.LastUpdatedAtOption; } set { this.LastUpdatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of License
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LicenseOption { get; private set; }

        /// <summary>
        /// Gets or Sets License
        /// </summary>
        [JsonPropertyName("license")]
        public string? License { get { return this.LicenseOption; } set { this.LicenseOption = new(value); } }

        /// <summary>
        /// Used to track the state of MarkCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MarkCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets MarkCount
        /// </summary>
        [JsonPropertyName("mark_count")]
        public int? MarkCount { get { return this.MarkCountOption; } set { this.MarkCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of OpenIssueCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OpenIssueCountOption { get; private set; }

        /// <summary>
        /// 开启的issue数
        /// </summary>
        /// <value>开启的issue数</value>
        [JsonPropertyName("open_issue_count")]
        public int? OpenIssueCount { get { return this.OpenIssueCountOption; } set { this.OpenIssueCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of OpenPullRequestCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OpenPullRequestCountOption { get; private set; }

        /// <summary>
        /// 开启的pull request数
        /// </summary>
        /// <value>开启的pull request数</value>
        [JsonPropertyName("open_pull_request_count")]
        public int? OpenPullRequestCount { get { return this.OpenPullRequestCountOption; } set { this.OpenPullRequestCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// 完整仓库路径
        /// </summary>
        /// <value>完整仓库路径</value>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of RankValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RankValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets RankValue
        /// </summary>
        [JsonPropertyName("rank_value")]
        public int? RankValue { get { return this.RankValueOption; } set { this.RankValueOption = new(value); } }

        /// <summary>
        /// Used to track the state of Site
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SiteOption { get; private set; }

        /// <summary>
        /// Gets or Sets Site
        /// </summary>
        [JsonPropertyName("site")]
        public string? Site { get { return this.SiteOption; } set { this.SiteOption = new(value); } }

        /// <summary>
        /// Used to track the state of StarCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StarCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets StarCount
        /// </summary>
        [JsonPropertyName("star_count")]
        public int? StarCount { get { return this.StarCountOption; } set { this.StarCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoRankDetailTagsInner>?> TagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [JsonPropertyName("tags")]
        public List<DtoRankDetailTagsInner>? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Topics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TopicsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Topics
        /// </summary>
        [JsonPropertyName("topics")]
        public string? Topics { get { return this.TopicsOption; } set { this.TopicsOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of WebUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WebUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets WebUrl
        /// </summary>
        [JsonPropertyName("web_url")]
        public string? WebUrl { get { return this.WebUrlOption; } set { this.WebUrlOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoRankDetail {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayModule: ").Append(DisplayModule).Append("\n");
            sb.Append("  ForkCount: ").Append(ForkCount).Append("\n");
            sb.Append("  ForkedFromRepo: ").Append(ForkedFromRepo).Append("\n");
            sb.Append("  Freeze: ").Append(Freeze).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  LastUpdateNickname: ").Append(LastUpdateNickname).Append("\n");
            sb.Append("  LastUpdateUsername: ").Append(LastUpdateUsername).Append("\n");
            sb.Append("  LastUpdatedAt: ").Append(LastUpdatedAt).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  MarkCount: ").Append(MarkCount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OpenIssueCount: ").Append(OpenIssueCount).Append("\n");
            sb.Append("  OpenPullRequestCount: ").Append(OpenPullRequestCount).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  RankValue: ").Append(RankValue).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  StarCount: ").Append(StarCount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Topics: ").Append(Topics).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  VisibilityLevel: ").Append(VisibilityLevel).Append("\n");
            sb.Append("  WebUrl: ").Append(WebUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoRankDetail" />
    /// </summary>
    public class DtoRankDetailJsonConverter : JsonConverter<DtoRankDetail>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoRankDetail" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoRankDetail Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> createdAt = default;
            Option<string?> description = default;
            Option<ConstantRepoDisplayModule?> displayModule = default;
            Option<int?> forkCount = default;
            Option<DtoSlugs?> forkedFromRepo = default;
            Option<bool?> freeze = default;
            Option<int?> id = default;
            Option<string?> language = default;
            Option<List<DtoRepoLanguage>?> languages = default;
            Option<string?> lastUpdateNickname = default;
            Option<string?> lastUpdateUsername = default;
            Option<ConvertNullTime?> lastUpdatedAt = default;
            Option<string?> license = default;
            Option<int?> markCount = default;
            Option<string?> name = default;
            Option<int?> openIssueCount = default;
            Option<int?> openPullRequestCount = default;
            Option<string?> path = default;
            Option<int?> rankValue = default;
            Option<string?> site = default;
            Option<int?> starCount = default;
            Option<ConstantRepoStatus?> status = default;
            Option<List<DtoRankDetailTagsInner>?> tags = default;
            Option<string?> topics = default;
            Option<string?> updatedAt = default;
            Option<ConstantVisibility?> visibilityLevel = default;
            Option<string?> webUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "display_module":
                            string? displayModuleRawValue = utf8JsonReader.GetString();
                            if (displayModuleRawValue != null)
                                displayModule = new Option<ConstantRepoDisplayModule?>(ConstantRepoDisplayModuleValueConverter.FromStringOrDefault(displayModuleRawValue));
                            break;
                        case "fork_count":
                            forkCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "forked_from_repo":
                            forkedFromRepo = new Option<DtoSlugs?>(JsonSerializer.Deserialize<DtoSlugs>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "freeze":
                            freeze = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "language":
                            language = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "languages":
                            languages = new Option<List<DtoRepoLanguage>?>(JsonSerializer.Deserialize<List<DtoRepoLanguage>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "last_update_nickname":
                            lastUpdateNickname = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_update_username":
                            lastUpdateUsername = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_updated_at":
                            lastUpdatedAt = new Option<ConvertNullTime?>(JsonSerializer.Deserialize<ConvertNullTime>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "license":
                            license = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mark_count":
                            markCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "open_issue_count":
                            openIssueCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "open_pull_request_count":
                            openPullRequestCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "rank_value":
                            rankValue = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "site":
                            site = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "star_count":
                            starCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<ConstantRepoStatus?>(ConstantRepoStatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "tags":
                            tags = new Option<List<DtoRankDetailTagsInner>?>(JsonSerializer.Deserialize<List<DtoRankDetailTagsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "topics":
                            topics = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "visibility_level":
                            string? visibilityLevelRawValue = utf8JsonReader.GetString();
                            if (visibilityLevelRawValue != null)
                                visibilityLevel = new Option<ConstantVisibility?>(ConstantVisibilityValueConverter.FromStringOrDefault(visibilityLevelRawValue));
                            break;
                        case "web_url":
                            webUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class DtoRankDetail.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class DtoRankDetail.");

            if (displayModule.IsSet && displayModule.Value == null)
                throw new ArgumentNullException(nameof(displayModule), "Property is not nullable for class DtoRankDetail.");

            if (forkCount.IsSet && forkCount.Value == null)
                throw new ArgumentNullException(nameof(forkCount), "Property is not nullable for class DtoRankDetail.");

            if (forkedFromRepo.IsSet && forkedFromRepo.Value == null)
                throw new ArgumentNullException(nameof(forkedFromRepo), "Property is not nullable for class DtoRankDetail.");

            if (freeze.IsSet && freeze.Value == null)
                throw new ArgumentNullException(nameof(freeze), "Property is not nullable for class DtoRankDetail.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DtoRankDetail.");

            if (language.IsSet && language.Value == null)
                throw new ArgumentNullException(nameof(language), "Property is not nullable for class DtoRankDetail.");

            if (languages.IsSet && languages.Value == null)
                throw new ArgumentNullException(nameof(languages), "Property is not nullable for class DtoRankDetail.");

            if (lastUpdateNickname.IsSet && lastUpdateNickname.Value == null)
                throw new ArgumentNullException(nameof(lastUpdateNickname), "Property is not nullable for class DtoRankDetail.");

            if (lastUpdateUsername.IsSet && lastUpdateUsername.Value == null)
                throw new ArgumentNullException(nameof(lastUpdateUsername), "Property is not nullable for class DtoRankDetail.");

            if (lastUpdatedAt.IsSet && lastUpdatedAt.Value == null)
                throw new ArgumentNullException(nameof(lastUpdatedAt), "Property is not nullable for class DtoRankDetail.");

            if (license.IsSet && license.Value == null)
                throw new ArgumentNullException(nameof(license), "Property is not nullable for class DtoRankDetail.");

            if (markCount.IsSet && markCount.Value == null)
                throw new ArgumentNullException(nameof(markCount), "Property is not nullable for class DtoRankDetail.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class DtoRankDetail.");

            if (openIssueCount.IsSet && openIssueCount.Value == null)
                throw new ArgumentNullException(nameof(openIssueCount), "Property is not nullable for class DtoRankDetail.");

            if (openPullRequestCount.IsSet && openPullRequestCount.Value == null)
                throw new ArgumentNullException(nameof(openPullRequestCount), "Property is not nullable for class DtoRankDetail.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class DtoRankDetail.");

            if (rankValue.IsSet && rankValue.Value == null)
                throw new ArgumentNullException(nameof(rankValue), "Property is not nullable for class DtoRankDetail.");

            if (site.IsSet && site.Value == null)
                throw new ArgumentNullException(nameof(site), "Property is not nullable for class DtoRankDetail.");

            if (starCount.IsSet && starCount.Value == null)
                throw new ArgumentNullException(nameof(starCount), "Property is not nullable for class DtoRankDetail.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class DtoRankDetail.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class DtoRankDetail.");

            if (topics.IsSet && topics.Value == null)
                throw new ArgumentNullException(nameof(topics), "Property is not nullable for class DtoRankDetail.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class DtoRankDetail.");

            if (visibilityLevel.IsSet && visibilityLevel.Value == null)
                throw new ArgumentNullException(nameof(visibilityLevel), "Property is not nullable for class DtoRankDetail.");

            if (webUrl.IsSet && webUrl.Value == null)
                throw new ArgumentNullException(nameof(webUrl), "Property is not nullable for class DtoRankDetail.");

            return new DtoRankDetail(createdAt, description, displayModule, forkCount, forkedFromRepo, freeze, id, language, languages, lastUpdateNickname, lastUpdateUsername, lastUpdatedAt, license, markCount, name, openIssueCount, openPullRequestCount, path, rankValue, site, starCount, status, tags, topics, updatedAt, visibilityLevel, webUrl);
        }

        /// <summary>
        /// Serializes a <see cref="DtoRankDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoRankDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoRankDetail dtoRankDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoRankDetail, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoRankDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoRankDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoRankDetail dtoRankDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoRankDetail.CreatedAtOption.IsSet && dtoRankDetail.CreatedAt == null)
                throw new ArgumentNullException(nameof(dtoRankDetail.CreatedAt), "Property is required for class DtoRankDetail.");

            if (dtoRankDetail.DescriptionOption.IsSet && dtoRankDetail.Description == null)
                throw new ArgumentNullException(nameof(dtoRankDetail.Description), "Property is required for class DtoRankDetail.");

            if (dtoRankDetail.ForkedFromRepoOption.IsSet && dtoRankDetail.ForkedFromRepo == null)
                throw new ArgumentNullException(nameof(dtoRankDetail.ForkedFromRepo), "Property is required for class DtoRankDetail.");

            if (dtoRankDetail.LanguageOption.IsSet && dtoRankDetail.Language == null)
                throw new ArgumentNullException(nameof(dtoRankDetail.Language), "Property is required for class DtoRankDetail.");

            if (dtoRankDetail.LanguagesOption.IsSet && dtoRankDetail.Languages == null)
                throw new ArgumentNullException(nameof(dtoRankDetail.Languages), "Property is required for class DtoRankDetail.");

            if (dtoRankDetail.LastUpdateNicknameOption.IsSet && dtoRankDetail.LastUpdateNickname == null)
                throw new ArgumentNullException(nameof(dtoRankDetail.LastUpdateNickname), "Property is required for class DtoRankDetail.");

            if (dtoRankDetail.LastUpdateUsernameOption.IsSet && dtoRankDetail.LastUpdateUsername == null)
                throw new ArgumentNullException(nameof(dtoRankDetail.LastUpdateUsername), "Property is required for class DtoRankDetail.");

            if (dtoRankDetail.LastUpdatedAtOption.IsSet && dtoRankDetail.LastUpdatedAt == null)
                throw new ArgumentNullException(nameof(dtoRankDetail.LastUpdatedAt), "Property is required for class DtoRankDetail.");

            if (dtoRankDetail.LicenseOption.IsSet && dtoRankDetail.License == null)
                throw new ArgumentNullException(nameof(dtoRankDetail.License), "Property is required for class DtoRankDetail.");

            if (dtoRankDetail.NameOption.IsSet && dtoRankDetail.Name == null)
                throw new ArgumentNullException(nameof(dtoRankDetail.Name), "Property is required for class DtoRankDetail.");

            if (dtoRankDetail.PathOption.IsSet && dtoRankDetail.Path == null)
                throw new ArgumentNullException(nameof(dtoRankDetail.Path), "Property is required for class DtoRankDetail.");

            if (dtoRankDetail.SiteOption.IsSet && dtoRankDetail.Site == null)
                throw new ArgumentNullException(nameof(dtoRankDetail.Site), "Property is required for class DtoRankDetail.");

            if (dtoRankDetail.TagsOption.IsSet && dtoRankDetail.Tags == null)
                throw new ArgumentNullException(nameof(dtoRankDetail.Tags), "Property is required for class DtoRankDetail.");

            if (dtoRankDetail.TopicsOption.IsSet && dtoRankDetail.Topics == null)
                throw new ArgumentNullException(nameof(dtoRankDetail.Topics), "Property is required for class DtoRankDetail.");

            if (dtoRankDetail.UpdatedAtOption.IsSet && dtoRankDetail.UpdatedAt == null)
                throw new ArgumentNullException(nameof(dtoRankDetail.UpdatedAt), "Property is required for class DtoRankDetail.");

            if (dtoRankDetail.WebUrlOption.IsSet && dtoRankDetail.WebUrl == null)
                throw new ArgumentNullException(nameof(dtoRankDetail.WebUrl), "Property is required for class DtoRankDetail.");

            if (dtoRankDetail.CreatedAtOption.IsSet)
                writer.WriteString("created_at", dtoRankDetail.CreatedAt);

            if (dtoRankDetail.DescriptionOption.IsSet)
                writer.WriteString("description", dtoRankDetail.Description);

            if (dtoRankDetail.DisplayModuleOption.IsSet)
            {
                var displayModuleRawValue = ConstantRepoDisplayModuleValueConverter.ToJsonValue(dtoRankDetail.DisplayModule!.Value);
                writer.WriteNumber("display_module", displayModuleRawValue);
            }
            if (dtoRankDetail.ForkCountOption.IsSet)
                writer.WriteNumber("fork_count", dtoRankDetail.ForkCountOption.Value!.Value);

            if (dtoRankDetail.ForkedFromRepoOption.IsSet)
            {
                writer.WritePropertyName("forked_from_repo");
                JsonSerializer.Serialize(writer, dtoRankDetail.ForkedFromRepo, jsonSerializerOptions);
            }
            if (dtoRankDetail.FreezeOption.IsSet)
                writer.WriteBoolean("freeze", dtoRankDetail.FreezeOption.Value!.Value);

            if (dtoRankDetail.IdOption.IsSet)
                writer.WriteNumber("id", dtoRankDetail.IdOption.Value!.Value);

            if (dtoRankDetail.LanguageOption.IsSet)
                writer.WriteString("language", dtoRankDetail.Language);

            if (dtoRankDetail.LanguagesOption.IsSet)
            {
                writer.WritePropertyName("languages");
                JsonSerializer.Serialize(writer, dtoRankDetail.Languages, jsonSerializerOptions);
            }
            if (dtoRankDetail.LastUpdateNicknameOption.IsSet)
                writer.WriteString("last_update_nickname", dtoRankDetail.LastUpdateNickname);

            if (dtoRankDetail.LastUpdateUsernameOption.IsSet)
                writer.WriteString("last_update_username", dtoRankDetail.LastUpdateUsername);

            if (dtoRankDetail.LastUpdatedAtOption.IsSet)
            {
                writer.WritePropertyName("last_updated_at");
                JsonSerializer.Serialize(writer, dtoRankDetail.LastUpdatedAt, jsonSerializerOptions);
            }
            if (dtoRankDetail.LicenseOption.IsSet)
                writer.WriteString("license", dtoRankDetail.License);

            if (dtoRankDetail.MarkCountOption.IsSet)
                writer.WriteNumber("mark_count", dtoRankDetail.MarkCountOption.Value!.Value);

            if (dtoRankDetail.NameOption.IsSet)
                writer.WriteString("name", dtoRankDetail.Name);

            if (dtoRankDetail.OpenIssueCountOption.IsSet)
                writer.WriteNumber("open_issue_count", dtoRankDetail.OpenIssueCountOption.Value!.Value);

            if (dtoRankDetail.OpenPullRequestCountOption.IsSet)
                writer.WriteNumber("open_pull_request_count", dtoRankDetail.OpenPullRequestCountOption.Value!.Value);

            if (dtoRankDetail.PathOption.IsSet)
                writer.WriteString("path", dtoRankDetail.Path);

            if (dtoRankDetail.RankValueOption.IsSet)
                writer.WriteNumber("rank_value", dtoRankDetail.RankValueOption.Value!.Value);

            if (dtoRankDetail.SiteOption.IsSet)
                writer.WriteString("site", dtoRankDetail.Site);

            if (dtoRankDetail.StarCountOption.IsSet)
                writer.WriteNumber("star_count", dtoRankDetail.StarCountOption.Value!.Value);

            if (dtoRankDetail.StatusOption.IsSet)
            {
                var statusRawValue = ConstantRepoStatusValueConverter.ToJsonValue(dtoRankDetail.Status!.Value);
                writer.WriteNumber("status", statusRawValue);
            }
            if (dtoRankDetail.TagsOption.IsSet)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, dtoRankDetail.Tags, jsonSerializerOptions);
            }
            if (dtoRankDetail.TopicsOption.IsSet)
                writer.WriteString("topics", dtoRankDetail.Topics);

            if (dtoRankDetail.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", dtoRankDetail.UpdatedAt);

            if (dtoRankDetail.VisibilityLevelOption.IsSet)
            {
                var visibilityLevelRawValue = ConstantVisibilityValueConverter.ToJsonValue(dtoRankDetail.VisibilityLevel!.Value);
                writer.WriteNumber("visibility_level", visibilityLevelRawValue);
            }
            if (dtoRankDetail.WebUrlOption.IsSet)
                writer.WriteString("web_url", dtoRankDetail.WebUrl);
        }
    }
}
