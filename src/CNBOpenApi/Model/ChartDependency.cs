// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// ChartDependency
    /// </summary>
    public partial class ChartDependency : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChartDependency" /> class.
        /// </summary>
        /// <param name="alias">Alias usable alias to be used for the chart</param>
        /// <param name="condition">A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )</param>
        /// <param name="enabled">Enabled bool determines if chart should be loaded</param>
        /// <param name="importValues">ImportValues holds the mapping of source values to parent key to be imported. Each item can be a string or pair of child/parent sublist items.</param>
        /// <param name="name">Name is the name of the dependency.  This must mach the name in the dependency&#39;s Chart.yaml.</param>
        /// <param name="repository">The URL to the repository.  Appending &#x60;index.yaml&#x60; to this string should result in a URL that can be used to fetch the repository index.</param>
        /// <param name="tags">Tags can be used to group charts for enabling/disabling together</param>
        /// <param name="varVersion">Version is the version (range) of this chart.  A lock file will always produce a single version, while a dependency may contain a semantic version range.</param>
        [JsonConstructor]
        public ChartDependency(Option<string?> alias = default, Option<string?> condition = default, Option<bool?> enabled = default, Option<List<Object>?> importValues = default, Option<string?> name = default, Option<string?> repository = default, Option<List<string>?> tags = default, Option<string?> varVersion = default)
        {
            AliasOption = alias;
            ConditionOption = condition;
            EnabledOption = enabled;
            ImportValuesOption = importValues;
            NameOption = name;
            RepositoryOption = repository;
            TagsOption = tags;
            VarVersionOption = varVersion;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Alias
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AliasOption { get; private set; }

        /// <summary>
        /// Alias usable alias to be used for the chart
        /// </summary>
        /// <value>Alias usable alias to be used for the chart</value>
        [JsonPropertyName("alias")]
        public string? Alias { get { return this.AliasOption; } set { this.AliasOption = new(value); } }

        /// <summary>
        /// Used to track the state of Condition
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ConditionOption { get; private set; }

        /// <summary>
        /// A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )
        /// </summary>
        /// <value>A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )</value>
        [JsonPropertyName("condition")]
        public string? Condition { get { return this.ConditionOption; } set { this.ConditionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Enabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnabledOption { get; private set; }

        /// <summary>
        /// Enabled bool determines if chart should be loaded
        /// </summary>
        /// <value>Enabled bool determines if chart should be loaded</value>
        [JsonPropertyName("enabled")]
        public bool? Enabled { get { return this.EnabledOption; } set { this.EnabledOption = new(value); } }

        /// <summary>
        /// Used to track the state of ImportValues
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Object>?> ImportValuesOption { get; private set; }

        /// <summary>
        /// ImportValues holds the mapping of source values to parent key to be imported. Each item can be a string or pair of child/parent sublist items.
        /// </summary>
        /// <value>ImportValues holds the mapping of source values to parent key to be imported. Each item can be a string or pair of child/parent sublist items.</value>
        [JsonPropertyName("import-values")]
        public List<Object>? ImportValues { get { return this.ImportValuesOption; } set { this.ImportValuesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Name is the name of the dependency.  This must mach the name in the dependency&#39;s Chart.yaml.
        /// </summary>
        /// <value>Name is the name of the dependency.  This must mach the name in the dependency&#39;s Chart.yaml.</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Repository
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RepositoryOption { get; private set; }

        /// <summary>
        /// The URL to the repository.  Appending &#x60;index.yaml&#x60; to this string should result in a URL that can be used to fetch the repository index.
        /// </summary>
        /// <value>The URL to the repository.  Appending &#x60;index.yaml&#x60; to this string should result in a URL that can be used to fetch the repository index.</value>
        [JsonPropertyName("repository")]
        public string? Repository { get { return this.RepositoryOption; } set { this.RepositoryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> TagsOption { get; private set; }

        /// <summary>
        /// Tags can be used to group charts for enabling/disabling together
        /// </summary>
        /// <value>Tags can be used to group charts for enabling/disabling together</value>
        [JsonPropertyName("tags")]
        public List<string>? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarVersionOption { get; private set; }

        /// <summary>
        /// Version is the version (range) of this chart.  A lock file will always produce a single version, while a dependency may contain a semantic version range.
        /// </summary>
        /// <value>Version is the version (range) of this chart.  A lock file will always produce a single version, while a dependency may contain a semantic version range.</value>
        [JsonPropertyName("version")]
        public string? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChartDependency {\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  ImportValues: ").Append(ImportValues).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Repository: ").Append(Repository).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChartDependency" />
    /// </summary>
    public class ChartDependencyJsonConverter : JsonConverter<ChartDependency>
    {
        /// <summary>
        /// Deserializes json to <see cref="ChartDependency" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ChartDependency Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> alias = default;
            Option<string?> condition = default;
            Option<bool?> enabled = default;
            Option<List<Object>?> importValues = default;
            Option<string?> name = default;
            Option<string?> repository = default;
            Option<List<string>?> tags = default;
            Option<string?> varVersion = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "alias":
                            alias = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "condition":
                            condition = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "enabled":
                            enabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "import-values":
                            importValues = new Option<List<Object>?>(JsonSerializer.Deserialize<List<Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "repository":
                            repository = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tags":
                            tags = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (alias.IsSet && alias.Value == null)
                throw new ArgumentNullException(nameof(alias), "Property is not nullable for class ChartDependency.");

            if (condition.IsSet && condition.Value == null)
                throw new ArgumentNullException(nameof(condition), "Property is not nullable for class ChartDependency.");

            if (enabled.IsSet && enabled.Value == null)
                throw new ArgumentNullException(nameof(enabled), "Property is not nullable for class ChartDependency.");

            if (importValues.IsSet && importValues.Value == null)
                throw new ArgumentNullException(nameof(importValues), "Property is not nullable for class ChartDependency.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ChartDependency.");

            if (repository.IsSet && repository.Value == null)
                throw new ArgumentNullException(nameof(repository), "Property is not nullable for class ChartDependency.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class ChartDependency.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class ChartDependency.");

            return new ChartDependency(alias, condition, enabled, importValues, name, repository, tags, varVersion);
        }

        /// <summary>
        /// Serializes a <see cref="ChartDependency" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="chartDependency"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ChartDependency chartDependency, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, chartDependency, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ChartDependency" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="chartDependency"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ChartDependency chartDependency, JsonSerializerOptions jsonSerializerOptions)
        {
            if (chartDependency.AliasOption.IsSet && chartDependency.Alias == null)
                throw new ArgumentNullException(nameof(chartDependency.Alias), "Property is required for class ChartDependency.");

            if (chartDependency.ConditionOption.IsSet && chartDependency.Condition == null)
                throw new ArgumentNullException(nameof(chartDependency.Condition), "Property is required for class ChartDependency.");

            if (chartDependency.ImportValuesOption.IsSet && chartDependency.ImportValues == null)
                throw new ArgumentNullException(nameof(chartDependency.ImportValues), "Property is required for class ChartDependency.");

            if (chartDependency.NameOption.IsSet && chartDependency.Name == null)
                throw new ArgumentNullException(nameof(chartDependency.Name), "Property is required for class ChartDependency.");

            if (chartDependency.RepositoryOption.IsSet && chartDependency.Repository == null)
                throw new ArgumentNullException(nameof(chartDependency.Repository), "Property is required for class ChartDependency.");

            if (chartDependency.TagsOption.IsSet && chartDependency.Tags == null)
                throw new ArgumentNullException(nameof(chartDependency.Tags), "Property is required for class ChartDependency.");

            if (chartDependency.VarVersionOption.IsSet && chartDependency.VarVersion == null)
                throw new ArgumentNullException(nameof(chartDependency.VarVersion), "Property is required for class ChartDependency.");

            if (chartDependency.AliasOption.IsSet)
                writer.WriteString("alias", chartDependency.Alias);

            if (chartDependency.ConditionOption.IsSet)
                writer.WriteString("condition", chartDependency.Condition);

            if (chartDependency.EnabledOption.IsSet)
                writer.WriteBoolean("enabled", chartDependency.EnabledOption.Value!.Value);

            if (chartDependency.ImportValuesOption.IsSet)
            {
                writer.WritePropertyName("import-values");
                JsonSerializer.Serialize(writer, chartDependency.ImportValues, jsonSerializerOptions);
            }
            if (chartDependency.NameOption.IsSet)
                writer.WriteString("name", chartDependency.Name);

            if (chartDependency.RepositoryOption.IsSet)
                writer.WriteString("repository", chartDependency.Repository);

            if (chartDependency.TagsOption.IsSet)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, chartDependency.Tags, jsonSerializerOptions);
            }
            if (chartDependency.VarVersionOption.IsSet)
                writer.WriteString("version", chartDependency.VarVersion);
        }
    }
}
