// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// Defines dto.OverwritePolicy
    /// </summary>
    public enum DtoOverwritePolicy
    {
        /// <summary>
        /// Enum OverwritePolicyForbid for value: forbid
        /// </summary>
        OverwritePolicyForbid = 1,

        /// <summary>
        /// Enum OverwritePolicyAllow for value: allow
        /// </summary>
        OverwritePolicyAllow = 2
    }

    /// <summary>
    /// Converts <see cref="DtoOverwritePolicy"/> to and from the JSON value
    /// </summary>
    public static class DtoOverwritePolicyValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="DtoOverwritePolicy"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DtoOverwritePolicy FromString(string value)
        {
            if (value.Equals("forbid"))
                return DtoOverwritePolicy.OverwritePolicyForbid;

            if (value.Equals("allow"))
                return DtoOverwritePolicy.OverwritePolicyAllow;

            throw new NotImplementedException($"Could not convert value to type DtoOverwritePolicy: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="DtoOverwritePolicy"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DtoOverwritePolicy? FromStringOrDefault(string value)
        {
            if (value.Equals("forbid"))
                return DtoOverwritePolicy.OverwritePolicyForbid;

            if (value.Equals("allow"))
                return DtoOverwritePolicy.OverwritePolicyAllow;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DtoOverwritePolicy"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(DtoOverwritePolicy value)
        {
            if (value == DtoOverwritePolicy.OverwritePolicyForbid)
                return "forbid";

            if (value == DtoOverwritePolicy.OverwritePolicyAllow)
                return "allow";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoOverwritePolicy"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class DtoOverwritePolicyJsonConverter : JsonConverter<DtoOverwritePolicy>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DtoOverwritePolicy Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DtoOverwritePolicy? result = rawValue == null
                ? null
                : DtoOverwritePolicyValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DtoOverwritePolicy to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoOverwritePolicy"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DtoOverwritePolicy dtoOverwritePolicy, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dtoOverwritePolicy.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoOverwritePolicy"/>
    /// </summary>
    public class DtoOverwritePolicyNullableJsonConverter : JsonConverter<DtoOverwritePolicy?>
    {
        /// <summary>
        /// Returns a DtoOverwritePolicy from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DtoOverwritePolicy? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DtoOverwritePolicy? result = rawValue == null
                ? null
                : DtoOverwritePolicyValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoOverwritePolicy"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DtoOverwritePolicy? dtoOverwritePolicy, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dtoOverwritePolicy?.ToString() ?? "null");
        }
    }
}
