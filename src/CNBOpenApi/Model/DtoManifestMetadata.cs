// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoManifestMetadata
    /// </summary>
    public partial class DtoManifestMetadata : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoManifestMetadata" /> class.
        /// </summary>
        /// <param name="annotations">Annotations contains arbitrary metadata for the image manifest.</param>
        /// <param name="artifactType">ArtifactType specifies the IANA media type of artifact when the manifest is used for an artifact.</param>
        /// <param name="config">Config references a configuration object for a container, by digest. The referenced configuration object is a JSON blob that the runtime uses to set up the container.</param>
        /// <param name="layers">Layers is an indexed list of layers referenced by the manifest.</param>
        /// <param name="manifests">Manifests references platform specific manifests.</param>
        /// <param name="mediaType">MediaType specifies the type of this document data structure e.g. &#x60;application/vnd.oci.image.manifest.v1+json&#x60;</param>
        /// <param name="schemaVersion">SchemaVersion is the image manifest schema that this image follows</param>
        /// <param name="subject">Subject is an optional link from the image manifest to another manifest forming an association between the image manifest and the other manifest.</param>
        [JsonConstructor]
        public DtoManifestMetadata(Option<Dictionary<string, string>?> annotations = default, Option<string?> artifactType = default, Option<V1Descriptor?> config = default, Option<List<V1Descriptor>?> layers = default, Option<List<V1Descriptor>?> manifests = default, Option<string?> mediaType = default, Option<int?> schemaVersion = default, Option<V1Descriptor?> subject = default)
        {
            AnnotationsOption = annotations;
            ArtifactTypeOption = artifactType;
            ConfigOption = config;
            LayersOption = layers;
            ManifestsOption = manifests;
            MediaTypeOption = mediaType;
            SchemaVersionOption = schemaVersion;
            SubjectOption = subject;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Annotations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> AnnotationsOption { get; private set; }

        /// <summary>
        /// Annotations contains arbitrary metadata for the image manifest.
        /// </summary>
        /// <value>Annotations contains arbitrary metadata for the image manifest.</value>
        [JsonPropertyName("annotations")]
        public Dictionary<string, string>? Annotations { get { return this.AnnotationsOption; } set { this.AnnotationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ArtifactType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ArtifactTypeOption { get; private set; }

        /// <summary>
        /// ArtifactType specifies the IANA media type of artifact when the manifest is used for an artifact.
        /// </summary>
        /// <value>ArtifactType specifies the IANA media type of artifact when the manifest is used for an artifact.</value>
        [JsonPropertyName("artifactType")]
        public string? ArtifactType { get { return this.ArtifactTypeOption; } set { this.ArtifactTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Config
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<V1Descriptor?> ConfigOption { get; private set; }

        /// <summary>
        /// Config references a configuration object for a container, by digest. The referenced configuration object is a JSON blob that the runtime uses to set up the container.
        /// </summary>
        /// <value>Config references a configuration object for a container, by digest. The referenced configuration object is a JSON blob that the runtime uses to set up the container.</value>
        [JsonPropertyName("config")]
        public V1Descriptor? Config { get { return this.ConfigOption; } set { this.ConfigOption = new(value); } }

        /// <summary>
        /// Used to track the state of Layers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<V1Descriptor>?> LayersOption { get; private set; }

        /// <summary>
        /// Layers is an indexed list of layers referenced by the manifest.
        /// </summary>
        /// <value>Layers is an indexed list of layers referenced by the manifest.</value>
        [JsonPropertyName("layers")]
        public List<V1Descriptor>? Layers { get { return this.LayersOption; } set { this.LayersOption = new(value); } }

        /// <summary>
        /// Used to track the state of Manifests
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<V1Descriptor>?> ManifestsOption { get; private set; }

        /// <summary>
        /// Manifests references platform specific manifests.
        /// </summary>
        /// <value>Manifests references platform specific manifests.</value>
        [JsonPropertyName("manifests")]
        public List<V1Descriptor>? Manifests { get { return this.ManifestsOption; } set { this.ManifestsOption = new(value); } }

        /// <summary>
        /// Used to track the state of MediaType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MediaTypeOption { get; private set; }

        /// <summary>
        /// MediaType specifies the type of this document data structure e.g. &#x60;application/vnd.oci.image.manifest.v1+json&#x60;
        /// </summary>
        /// <value>MediaType specifies the type of this document data structure e.g. &#x60;application/vnd.oci.image.manifest.v1+json&#x60;</value>
        [JsonPropertyName("mediaType")]
        public string? MediaType { get { return this.MediaTypeOption; } set { this.MediaTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of SchemaVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SchemaVersionOption { get; private set; }

        /// <summary>
        /// SchemaVersion is the image manifest schema that this image follows
        /// </summary>
        /// <value>SchemaVersion is the image manifest schema that this image follows</value>
        [JsonPropertyName("schemaVersion")]
        public int? SchemaVersion { get { return this.SchemaVersionOption; } set { this.SchemaVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<V1Descriptor?> SubjectOption { get; private set; }

        /// <summary>
        /// Subject is an optional link from the image manifest to another manifest forming an association between the image manifest and the other manifest.
        /// </summary>
        /// <value>Subject is an optional link from the image manifest to another manifest forming an association between the image manifest and the other manifest.</value>
        [JsonPropertyName("subject")]
        public V1Descriptor? Subject { get { return this.SubjectOption; } set { this.SubjectOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoManifestMetadata {\n");
            sb.Append("  Annotations: ").Append(Annotations).Append("\n");
            sb.Append("  ArtifactType: ").Append(ArtifactType).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  Layers: ").Append(Layers).Append("\n");
            sb.Append("  Manifests: ").Append(Manifests).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  SchemaVersion: ").Append(SchemaVersion).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoManifestMetadata" />
    /// </summary>
    public class DtoManifestMetadataJsonConverter : JsonConverter<DtoManifestMetadata>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoManifestMetadata" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoManifestMetadata Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Dictionary<string, string>?> annotations = default;
            Option<string?> artifactType = default;
            Option<V1Descriptor?> config = default;
            Option<List<V1Descriptor>?> layers = default;
            Option<List<V1Descriptor>?> manifests = default;
            Option<string?> mediaType = default;
            Option<int?> schemaVersion = default;
            Option<V1Descriptor?> subject = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "annotations":
                            annotations = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "artifactType":
                            artifactType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "config":
                            config = new Option<V1Descriptor?>(JsonSerializer.Deserialize<V1Descriptor>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "layers":
                            layers = new Option<List<V1Descriptor>?>(JsonSerializer.Deserialize<List<V1Descriptor>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "manifests":
                            manifests = new Option<List<V1Descriptor>?>(JsonSerializer.Deserialize<List<V1Descriptor>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "mediaType":
                            mediaType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "schemaVersion":
                            schemaVersion = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "subject":
                            subject = new Option<V1Descriptor?>(JsonSerializer.Deserialize<V1Descriptor>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (annotations.IsSet && annotations.Value == null)
                throw new ArgumentNullException(nameof(annotations), "Property is not nullable for class DtoManifestMetadata.");

            if (artifactType.IsSet && artifactType.Value == null)
                throw new ArgumentNullException(nameof(artifactType), "Property is not nullable for class DtoManifestMetadata.");

            if (config.IsSet && config.Value == null)
                throw new ArgumentNullException(nameof(config), "Property is not nullable for class DtoManifestMetadata.");

            if (layers.IsSet && layers.Value == null)
                throw new ArgumentNullException(nameof(layers), "Property is not nullable for class DtoManifestMetadata.");

            if (manifests.IsSet && manifests.Value == null)
                throw new ArgumentNullException(nameof(manifests), "Property is not nullable for class DtoManifestMetadata.");

            if (mediaType.IsSet && mediaType.Value == null)
                throw new ArgumentNullException(nameof(mediaType), "Property is not nullable for class DtoManifestMetadata.");

            if (schemaVersion.IsSet && schemaVersion.Value == null)
                throw new ArgumentNullException(nameof(schemaVersion), "Property is not nullable for class DtoManifestMetadata.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class DtoManifestMetadata.");

            return new DtoManifestMetadata(annotations, artifactType, config, layers, manifests, mediaType, schemaVersion, subject);
        }

        /// <summary>
        /// Serializes a <see cref="DtoManifestMetadata" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoManifestMetadata"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoManifestMetadata dtoManifestMetadata, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoManifestMetadata, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoManifestMetadata" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoManifestMetadata"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoManifestMetadata dtoManifestMetadata, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoManifestMetadata.AnnotationsOption.IsSet && dtoManifestMetadata.Annotations == null)
                throw new ArgumentNullException(nameof(dtoManifestMetadata.Annotations), "Property is required for class DtoManifestMetadata.");

            if (dtoManifestMetadata.ArtifactTypeOption.IsSet && dtoManifestMetadata.ArtifactType == null)
                throw new ArgumentNullException(nameof(dtoManifestMetadata.ArtifactType), "Property is required for class DtoManifestMetadata.");

            if (dtoManifestMetadata.ConfigOption.IsSet && dtoManifestMetadata.Config == null)
                throw new ArgumentNullException(nameof(dtoManifestMetadata.Config), "Property is required for class DtoManifestMetadata.");

            if (dtoManifestMetadata.LayersOption.IsSet && dtoManifestMetadata.Layers == null)
                throw new ArgumentNullException(nameof(dtoManifestMetadata.Layers), "Property is required for class DtoManifestMetadata.");

            if (dtoManifestMetadata.ManifestsOption.IsSet && dtoManifestMetadata.Manifests == null)
                throw new ArgumentNullException(nameof(dtoManifestMetadata.Manifests), "Property is required for class DtoManifestMetadata.");

            if (dtoManifestMetadata.MediaTypeOption.IsSet && dtoManifestMetadata.MediaType == null)
                throw new ArgumentNullException(nameof(dtoManifestMetadata.MediaType), "Property is required for class DtoManifestMetadata.");

            if (dtoManifestMetadata.SubjectOption.IsSet && dtoManifestMetadata.Subject == null)
                throw new ArgumentNullException(nameof(dtoManifestMetadata.Subject), "Property is required for class DtoManifestMetadata.");

            if (dtoManifestMetadata.AnnotationsOption.IsSet)
            {
                writer.WritePropertyName("annotations");
                JsonSerializer.Serialize(writer, dtoManifestMetadata.Annotations, jsonSerializerOptions);
            }
            if (dtoManifestMetadata.ArtifactTypeOption.IsSet)
                writer.WriteString("artifactType", dtoManifestMetadata.ArtifactType);

            if (dtoManifestMetadata.ConfigOption.IsSet)
            {
                writer.WritePropertyName("config");
                JsonSerializer.Serialize(writer, dtoManifestMetadata.Config, jsonSerializerOptions);
            }
            if (dtoManifestMetadata.LayersOption.IsSet)
            {
                writer.WritePropertyName("layers");
                JsonSerializer.Serialize(writer, dtoManifestMetadata.Layers, jsonSerializerOptions);
            }
            if (dtoManifestMetadata.ManifestsOption.IsSet)
            {
                writer.WritePropertyName("manifests");
                JsonSerializer.Serialize(writer, dtoManifestMetadata.Manifests, jsonSerializerOptions);
            }
            if (dtoManifestMetadata.MediaTypeOption.IsSet)
                writer.WriteString("mediaType", dtoManifestMetadata.MediaType);

            if (dtoManifestMetadata.SchemaVersionOption.IsSet)
                writer.WriteNumber("schemaVersion", dtoManifestMetadata.SchemaVersionOption.Value!.Value);

            if (dtoManifestMetadata.SubjectOption.IsSet)
            {
                writer.WritePropertyName("subject");
                JsonSerializer.Serialize(writer, dtoManifestMetadata.Subject, jsonSerializerOptions);
            }
        }
    }
}
