// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebLabelOption
    /// </summary>
    public partial class WebLabelOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebLabelOption" /> class.
        /// </summary>
        /// <param name="color">color</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="description">description</param>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="repoId">repoId</param>
        /// <param name="slug">slug</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public WebLabelOption(Option<string?> color = default, Option<string?> createdAt = default, Option<string?> description = default, Option<string?> id = default, Option<string?> name = default, Option<int?> repoId = default, Option<string?> slug = default, Option<string?> updatedAt = default)
        {
            ColorOption = color;
            CreatedAtOption = createdAt;
            DescriptionOption = description;
            IdOption = id;
            NameOption = name;
            RepoIdOption = repoId;
            SlugOption = slug;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Color
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ColorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [JsonPropertyName("color")]
        public string? Color { get { return this.ColorOption; } set { this.ColorOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of RepoId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RepoIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets RepoId
        /// </summary>
        [JsonPropertyName("repo_id")]
        public int? RepoId { get { return this.RepoIdOption; } set { this.RepoIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Slug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SlugOption { get; private set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [JsonPropertyName("slug")]
        public string? Slug { get { return this.SlugOption; } set { this.SlugOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebLabelOption {\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RepoId: ").Append(RepoId).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebLabelOption" />
    /// </summary>
    public class WebLabelOptionJsonConverter : JsonConverter<WebLabelOption>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebLabelOption" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebLabelOption Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> color = default;
            Option<string?> createdAt = default;
            Option<string?> description = default;
            Option<string?> id = default;
            Option<string?> name = default;
            Option<int?> repoId = default;
            Option<string?> slug = default;
            Option<string?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "color":
                            color = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "repo_id":
                            repoId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "slug":
                            slug = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (color.IsSet && color.Value == null)
                throw new ArgumentNullException(nameof(color), "Property is not nullable for class WebLabelOption.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class WebLabelOption.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class WebLabelOption.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class WebLabelOption.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class WebLabelOption.");

            if (repoId.IsSet && repoId.Value == null)
                throw new ArgumentNullException(nameof(repoId), "Property is not nullable for class WebLabelOption.");

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug), "Property is not nullable for class WebLabelOption.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class WebLabelOption.");

            return new WebLabelOption(color, createdAt, description, id, name, repoId, slug, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="WebLabelOption" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webLabelOption"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebLabelOption webLabelOption, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webLabelOption, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebLabelOption" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webLabelOption"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebLabelOption webLabelOption, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webLabelOption.ColorOption.IsSet && webLabelOption.Color == null)
                throw new ArgumentNullException(nameof(webLabelOption.Color), "Property is required for class WebLabelOption.");

            if (webLabelOption.CreatedAtOption.IsSet && webLabelOption.CreatedAt == null)
                throw new ArgumentNullException(nameof(webLabelOption.CreatedAt), "Property is required for class WebLabelOption.");

            if (webLabelOption.DescriptionOption.IsSet && webLabelOption.Description == null)
                throw new ArgumentNullException(nameof(webLabelOption.Description), "Property is required for class WebLabelOption.");

            if (webLabelOption.IdOption.IsSet && webLabelOption.Id == null)
                throw new ArgumentNullException(nameof(webLabelOption.Id), "Property is required for class WebLabelOption.");

            if (webLabelOption.NameOption.IsSet && webLabelOption.Name == null)
                throw new ArgumentNullException(nameof(webLabelOption.Name), "Property is required for class WebLabelOption.");

            if (webLabelOption.SlugOption.IsSet && webLabelOption.Slug == null)
                throw new ArgumentNullException(nameof(webLabelOption.Slug), "Property is required for class WebLabelOption.");

            if (webLabelOption.UpdatedAtOption.IsSet && webLabelOption.UpdatedAt == null)
                throw new ArgumentNullException(nameof(webLabelOption.UpdatedAt), "Property is required for class WebLabelOption.");

            if (webLabelOption.ColorOption.IsSet)
                writer.WriteString("color", webLabelOption.Color);

            if (webLabelOption.CreatedAtOption.IsSet)
                writer.WriteString("created_at", webLabelOption.CreatedAt);

            if (webLabelOption.DescriptionOption.IsSet)
                writer.WriteString("description", webLabelOption.Description);

            if (webLabelOption.IdOption.IsSet)
                writer.WriteString("id", webLabelOption.Id);

            if (webLabelOption.NameOption.IsSet)
                writer.WriteString("name", webLabelOption.Name);

            if (webLabelOption.RepoIdOption.IsSet)
                writer.WriteNumber("repo_id", webLabelOption.RepoIdOption.Value!.Value);

            if (webLabelOption.SlugOption.IsSet)
                writer.WriteString("slug", webLabelOption.Slug);

            if (webLabelOption.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", webLabelOption.UpdatedAt);
        }
    }
}
