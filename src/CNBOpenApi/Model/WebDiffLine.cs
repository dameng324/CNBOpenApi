// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebDiffLine
    /// </summary>
    public partial class WebDiffLine : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebDiffLine" /> class.
        /// </summary>
        /// <param name="content">content</param>
        /// <param name="leftLineNumber">leftLineNumber</param>
        /// <param name="prefix">prefix</param>
        /// <param name="rightLineNumber">rightLineNumber</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public WebDiffLine(Option<string?> content = default, Option<int?> leftLineNumber = default, Option<string?> prefix = default, Option<int?> rightLineNumber = default, Option<string?> type = default)
        {
            ContentOption = content;
            LeftLineNumberOption = leftLineNumber;
            PrefixOption = prefix;
            RightLineNumberOption = rightLineNumber;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Content
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [JsonPropertyName("content")]
        public string? Content { get { return this.ContentOption; } set { this.ContentOption = new(value); } }

        /// <summary>
        /// Used to track the state of LeftLineNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LeftLineNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets LeftLineNumber
        /// </summary>
        [JsonPropertyName("left_line_number")]
        public int? LeftLineNumber { get { return this.LeftLineNumberOption; } set { this.LeftLineNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Prefix
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrefixOption { get; private set; }

        /// <summary>
        /// Gets or Sets Prefix
        /// </summary>
        [JsonPropertyName("prefix")]
        public string? Prefix { get { return this.PrefixOption; } set { this.PrefixOption = new(value); } }

        /// <summary>
        /// Used to track the state of RightLineNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RightLineNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets RightLineNumber
        /// </summary>
        [JsonPropertyName("right_line_number")]
        public int? RightLineNumber { get { return this.RightLineNumberOption; } set { this.RightLineNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebDiffLine {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  LeftLineNumber: ").Append(LeftLineNumber).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  RightLineNumber: ").Append(RightLineNumber).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebDiffLine" />
    /// </summary>
    public class WebDiffLineJsonConverter : JsonConverter<WebDiffLine>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebDiffLine" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebDiffLine Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> content = default;
            Option<int?> leftLineNumber = default;
            Option<string?> prefix = default;
            Option<int?> rightLineNumber = default;
            Option<string?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "left_line_number":
                            leftLineNumber = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "prefix":
                            prefix = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "right_line_number":
                            rightLineNumber = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class WebDiffLine.");

            if (leftLineNumber.IsSet && leftLineNumber.Value == null)
                throw new ArgumentNullException(nameof(leftLineNumber), "Property is not nullable for class WebDiffLine.");

            if (prefix.IsSet && prefix.Value == null)
                throw new ArgumentNullException(nameof(prefix), "Property is not nullable for class WebDiffLine.");

            if (rightLineNumber.IsSet && rightLineNumber.Value == null)
                throw new ArgumentNullException(nameof(rightLineNumber), "Property is not nullable for class WebDiffLine.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class WebDiffLine.");

            return new WebDiffLine(content, leftLineNumber, prefix, rightLineNumber, type);
        }

        /// <summary>
        /// Serializes a <see cref="WebDiffLine" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webDiffLine"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebDiffLine webDiffLine, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webDiffLine, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebDiffLine" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webDiffLine"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebDiffLine webDiffLine, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webDiffLine.ContentOption.IsSet && webDiffLine.Content == null)
                throw new ArgumentNullException(nameof(webDiffLine.Content), "Property is required for class WebDiffLine.");

            if (webDiffLine.PrefixOption.IsSet && webDiffLine.Prefix == null)
                throw new ArgumentNullException(nameof(webDiffLine.Prefix), "Property is required for class WebDiffLine.");

            if (webDiffLine.TypeOption.IsSet && webDiffLine.Type == null)
                throw new ArgumentNullException(nameof(webDiffLine.Type), "Property is required for class WebDiffLine.");

            if (webDiffLine.ContentOption.IsSet)
                writer.WriteString("content", webDiffLine.Content);

            if (webDiffLine.LeftLineNumberOption.IsSet)
                writer.WriteNumber("left_line_number", webDiffLine.LeftLineNumberOption.Value!.Value);

            if (webDiffLine.PrefixOption.IsSet)
                writer.WriteString("prefix", webDiffLine.Prefix);

            if (webDiffLine.RightLineNumberOption.IsSet)
                writer.WriteNumber("right_line_number", webDiffLine.RightLineNumberOption.Value!.Value);

            if (webDiffLine.TypeOption.IsSet)
                writer.WriteString("type", webDiffLine.Type);
        }
    }
}
