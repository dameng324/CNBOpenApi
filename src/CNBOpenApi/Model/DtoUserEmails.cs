// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoUserEmails
    /// </summary>
    public partial class DtoUserEmails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoUserEmails" /> class.
        /// </summary>
        /// <param name="contactEmail">ContactEmail 用户通知邮箱</param>
        /// <param name="email">Email 用户git提交邮箱，是 emails 里面的某一个</param>
        /// <param name="emails">Emails 邮箱列表</param>
        /// <param name="systemEmail">系统默认邮箱</param>
        /// <param name="systemEmailContact">系统默认邮箱是否可以通知</param>
        [JsonConstructor]
        public DtoUserEmails(Option<string?> contactEmail = default, Option<string?> email = default, Option<List<string>?> emails = default, Option<string?> systemEmail = default, Option<bool?> systemEmailContact = default)
        {
            ContactEmailOption = contactEmail;
            EmailOption = email;
            EmailsOption = emails;
            SystemEmailOption = systemEmail;
            SystemEmailContactOption = systemEmailContact;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ContactEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContactEmailOption { get; private set; }

        /// <summary>
        /// ContactEmail 用户通知邮箱
        /// </summary>
        /// <value>ContactEmail 用户通知邮箱</value>
        [JsonPropertyName("contact_email")]
        public string? ContactEmail { get { return this.ContactEmailOption; } set { this.ContactEmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// Email 用户git提交邮箱，是 emails 里面的某一个
        /// </summary>
        /// <value>Email 用户git提交邮箱，是 emails 里面的某一个</value>
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of Emails
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> EmailsOption { get; private set; }

        /// <summary>
        /// Emails 邮箱列表
        /// </summary>
        /// <value>Emails 邮箱列表</value>
        [JsonPropertyName("emails")]
        public List<string>? Emails { get { return this.EmailsOption; } set { this.EmailsOption = new(value); } }

        /// <summary>
        /// Used to track the state of SystemEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SystemEmailOption { get; private set; }

        /// <summary>
        /// 系统默认邮箱
        /// </summary>
        /// <value>系统默认邮箱</value>
        [JsonPropertyName("system_email")]
        public string? SystemEmail { get { return this.SystemEmailOption; } set { this.SystemEmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of SystemEmailContact
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SystemEmailContactOption { get; private set; }

        /// <summary>
        /// 系统默认邮箱是否可以通知
        /// </summary>
        /// <value>系统默认邮箱是否可以通知</value>
        [JsonPropertyName("system_email_contact")]
        public bool? SystemEmailContact { get { return this.SystemEmailContactOption; } set { this.SystemEmailContactOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoUserEmails {\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Emails: ").Append(Emails).Append("\n");
            sb.Append("  SystemEmail: ").Append(SystemEmail).Append("\n");
            sb.Append("  SystemEmailContact: ").Append(SystemEmailContact).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoUserEmails" />
    /// </summary>
    public class DtoUserEmailsJsonConverter : JsonConverter<DtoUserEmails>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoUserEmails" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoUserEmails Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> contactEmail = default;
            Option<string?> email = default;
            Option<List<string>?> emails = default;
            Option<string?> systemEmail = default;
            Option<bool?> systemEmailContact = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "contact_email":
                            contactEmail = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "emails":
                            emails = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "system_email":
                            systemEmail = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "system_email_contact":
                            systemEmailContact = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (contactEmail.IsSet && contactEmail.Value == null)
                throw new ArgumentNullException(nameof(contactEmail), "Property is not nullable for class DtoUserEmails.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class DtoUserEmails.");

            if (emails.IsSet && emails.Value == null)
                throw new ArgumentNullException(nameof(emails), "Property is not nullable for class DtoUserEmails.");

            if (systemEmail.IsSet && systemEmail.Value == null)
                throw new ArgumentNullException(nameof(systemEmail), "Property is not nullable for class DtoUserEmails.");

            if (systemEmailContact.IsSet && systemEmailContact.Value == null)
                throw new ArgumentNullException(nameof(systemEmailContact), "Property is not nullable for class DtoUserEmails.");

            return new DtoUserEmails(contactEmail, email, emails, systemEmail, systemEmailContact);
        }

        /// <summary>
        /// Serializes a <see cref="DtoUserEmails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoUserEmails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoUserEmails dtoUserEmails, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoUserEmails, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoUserEmails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoUserEmails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoUserEmails dtoUserEmails, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoUserEmails.ContactEmailOption.IsSet && dtoUserEmails.ContactEmail == null)
                throw new ArgumentNullException(nameof(dtoUserEmails.ContactEmail), "Property is required for class DtoUserEmails.");

            if (dtoUserEmails.EmailOption.IsSet && dtoUserEmails.Email == null)
                throw new ArgumentNullException(nameof(dtoUserEmails.Email), "Property is required for class DtoUserEmails.");

            if (dtoUserEmails.EmailsOption.IsSet && dtoUserEmails.Emails == null)
                throw new ArgumentNullException(nameof(dtoUserEmails.Emails), "Property is required for class DtoUserEmails.");

            if (dtoUserEmails.SystemEmailOption.IsSet && dtoUserEmails.SystemEmail == null)
                throw new ArgumentNullException(nameof(dtoUserEmails.SystemEmail), "Property is required for class DtoUserEmails.");

            if (dtoUserEmails.ContactEmailOption.IsSet)
                writer.WriteString("contact_email", dtoUserEmails.ContactEmail);

            if (dtoUserEmails.EmailOption.IsSet)
                writer.WriteString("email", dtoUserEmails.Email);

            if (dtoUserEmails.EmailsOption.IsSet)
            {
                writer.WritePropertyName("emails");
                JsonSerializer.Serialize(writer, dtoUserEmails.Emails, jsonSerializerOptions);
            }
            if (dtoUserEmails.SystemEmailOption.IsSet)
                writer.WriteString("system_email", dtoUserEmails.SystemEmail);

            if (dtoUserEmails.SystemEmailContactOption.IsSet)
                writer.WriteBoolean("system_email_contact", dtoUserEmails.SystemEmailContactOption.Value!.Value);
        }
    }
}
