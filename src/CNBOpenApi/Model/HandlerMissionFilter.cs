// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// HandlerMissionFilter
    /// </summary>
    public partial class HandlerMissionFilter : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HandlerMissionFilter" /> class.
        /// </summary>
        /// <param name="field">属性名</param>
        /// <param name="operator">筛选符</param>
        /// <param name="value">属性值</param>
        [JsonConstructor]
        public HandlerMissionFilter(Option<string?> field = default, Option<string?> @operator = default, Option<List<string>?> value = default)
        {
            FieldOption = field;
            OperatorOption = @operator;
            ValueOption = value;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Field
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FieldOption { get; private set; }

        /// <summary>
        /// 属性名
        /// </summary>
        /// <value>属性名</value>
        [JsonPropertyName("field")]
        public string? Field { get { return this.FieldOption; } set { this.FieldOption = new(value); } }

        /// <summary>
        /// Used to track the state of Operator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OperatorOption { get; private set; }

        /// <summary>
        /// 筛选符
        /// </summary>
        /// <value>筛选符</value>
        [JsonPropertyName("operator")]
        public string? Operator { get { return this.OperatorOption; } set { this.OperatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ValueOption { get; private set; }

        /// <summary>
        /// 属性值
        /// </summary>
        /// <value>属性值</value>
        [JsonPropertyName("value")]
        public List<string>? Value { get { return this.ValueOption; } set { this.ValueOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HandlerMissionFilter {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HandlerMissionFilter" />
    /// </summary>
    public class HandlerMissionFilterJsonConverter : JsonConverter<HandlerMissionFilter>
    {
        /// <summary>
        /// Deserializes json to <see cref="HandlerMissionFilter" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HandlerMissionFilter Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> field = default;
            Option<string?> varOperator = default;
            Option<List<string>?> value = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "field":
                            field = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "operator":
                            varOperator = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "value":
                            value = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (field.IsSet && field.Value == null)
                throw new ArgumentNullException(nameof(field), "Property is not nullable for class HandlerMissionFilter.");

            if (varOperator.IsSet && varOperator.Value == null)
                throw new ArgumentNullException(nameof(varOperator), "Property is not nullable for class HandlerMissionFilter.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class HandlerMissionFilter.");

            return new HandlerMissionFilter(field, varOperator, value);
        }

        /// <summary>
        /// Serializes a <see cref="HandlerMissionFilter" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="handlerMissionFilter"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HandlerMissionFilter handlerMissionFilter, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, handlerMissionFilter, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HandlerMissionFilter" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="handlerMissionFilter"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HandlerMissionFilter handlerMissionFilter, JsonSerializerOptions jsonSerializerOptions)
        {
            if (handlerMissionFilter.FieldOption.IsSet && handlerMissionFilter.Field == null)
                throw new ArgumentNullException(nameof(handlerMissionFilter.Field), "Property is required for class HandlerMissionFilter.");

            if (handlerMissionFilter.OperatorOption.IsSet && handlerMissionFilter.Operator == null)
                throw new ArgumentNullException(nameof(handlerMissionFilter.Operator), "Property is required for class HandlerMissionFilter.");

            if (handlerMissionFilter.ValueOption.IsSet && handlerMissionFilter.Value == null)
                throw new ArgumentNullException(nameof(handlerMissionFilter.Value), "Property is required for class HandlerMissionFilter.");

            if (handlerMissionFilter.FieldOption.IsSet)
                writer.WriteString("field", handlerMissionFilter.Field);

            if (handlerMissionFilter.OperatorOption.IsSet)
                writer.WriteString("operator", handlerMissionFilter.Operator);

            if (handlerMissionFilter.ValueOption.IsSet)
            {
                writer.WritePropertyName("value");
                JsonSerializer.Serialize(writer, handlerMissionFilter.Value, jsonSerializerOptions);
            }
        }
    }
}
