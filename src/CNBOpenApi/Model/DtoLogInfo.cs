// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoLogInfo
    /// </summary>
    public partial class DtoLogInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoLogInfo" /> class.
        /// </summary>
        /// <param name="buildLogUrl">构建日志 url</param>
        /// <param name="commitTitle">提交日志 title</param>
        /// <param name="createTime">构建开始时间</param>
        /// <param name="duration">构建耗时，单位：ms</param>
        /// <param name="event">事件名</param>
        /// <param name="eventUrl">事件 url</param>
        /// <param name="freeze">构建用户是否被冻结</param>
        /// <param name="groupName">组织名</param>
        /// <param name="labels">流水线标签</param>
        /// <param name="nickName">构建用户昵称</param>
        /// <param name="pipelineFailCount">失败的子流水线个数</param>
        /// <param name="pipelineSuccessCount">成功的子流水线个数</param>
        /// <param name="pipelineTotalCount">子流水线个数</param>
        /// <param name="sha">commitid</param>
        /// <param name="slug">仓库路径</param>
        /// <param name="sn">构建号</param>
        /// <param name="sourceRef">源分支名</param>
        /// <param name="sourceSlug">源仓库路径</param>
        /// <param name="status">构建状态</param>
        /// <param name="targetRef">目标分支名</param>
        /// <param name="title">构建 title</param>
        /// <param name="userName">用户名</param>
        [JsonConstructor]
        public DtoLogInfo(Option<string?> buildLogUrl = default, Option<string?> commitTitle = default, Option<string?> createTime = default, Option<int?> duration = default, Option<string?> @event = default, Option<string?> eventUrl = default, Option<bool?> freeze = default, Option<string?> groupName = default, Option<string?> labels = default, Option<string?> nickName = default, Option<int?> pipelineFailCount = default, Option<int?> pipelineSuccessCount = default, Option<int?> pipelineTotalCount = default, Option<string?> sha = default, Option<string?> slug = default, Option<string?> sn = default, Option<string?> sourceRef = default, Option<string?> sourceSlug = default, Option<string?> status = default, Option<string?> targetRef = default, Option<string?> title = default, Option<string?> userName = default)
        {
            BuildLogUrlOption = buildLogUrl;
            CommitTitleOption = commitTitle;
            CreateTimeOption = createTime;
            DurationOption = duration;
            EventOption = @event;
            EventUrlOption = eventUrl;
            FreezeOption = freeze;
            GroupNameOption = groupName;
            LabelsOption = labels;
            NickNameOption = nickName;
            PipelineFailCountOption = pipelineFailCount;
            PipelineSuccessCountOption = pipelineSuccessCount;
            PipelineTotalCountOption = pipelineTotalCount;
            ShaOption = sha;
            SlugOption = slug;
            SnOption = sn;
            SourceRefOption = sourceRef;
            SourceSlugOption = sourceSlug;
            StatusOption = status;
            TargetRefOption = targetRef;
            TitleOption = title;
            UserNameOption = userName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BuildLogUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BuildLogUrlOption { get; private set; }

        /// <summary>
        /// 构建日志 url
        /// </summary>
        /// <value>构建日志 url</value>
        [JsonPropertyName("buildLogUrl")]
        public string? BuildLogUrl { get { return this.BuildLogUrlOption; } set { this.BuildLogUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommitTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommitTitleOption { get; private set; }

        /// <summary>
        /// 提交日志 title
        /// </summary>
        /// <value>提交日志 title</value>
        [JsonPropertyName("commitTitle")]
        public string? CommitTitle { get { return this.CommitTitleOption; } set { this.CommitTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreateTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreateTimeOption { get; private set; }

        /// <summary>
        /// 构建开始时间
        /// </summary>
        /// <value>构建开始时间</value>
        [JsonPropertyName("createTime")]
        public string? CreateTime { get { return this.CreateTimeOption; } set { this.CreateTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Duration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DurationOption { get; private set; }

        /// <summary>
        /// 构建耗时，单位：ms
        /// </summary>
        /// <value>构建耗时，单位：ms</value>
        [JsonPropertyName("duration")]
        public int? Duration { get { return this.DurationOption; } set { this.DurationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Event
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EventOption { get; private set; }

        /// <summary>
        /// 事件名
        /// </summary>
        /// <value>事件名</value>
        [JsonPropertyName("event")]
        public string? Event { get { return this.EventOption; } set { this.EventOption = new(value); } }

        /// <summary>
        /// Used to track the state of EventUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EventUrlOption { get; private set; }

        /// <summary>
        /// 事件 url
        /// </summary>
        /// <value>事件 url</value>
        [JsonPropertyName("eventUrl")]
        public string? EventUrl { get { return this.EventUrlOption; } set { this.EventUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Freeze
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FreezeOption { get; private set; }

        /// <summary>
        /// 构建用户是否被冻结
        /// </summary>
        /// <value>构建用户是否被冻结</value>
        [JsonPropertyName("freeze")]
        public bool? Freeze { get { return this.FreezeOption; } set { this.FreezeOption = new(value); } }

        /// <summary>
        /// Used to track the state of GroupName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GroupNameOption { get; private set; }

        /// <summary>
        /// 组织名
        /// </summary>
        /// <value>组织名</value>
        [JsonPropertyName("groupName")]
        public string? GroupName { get { return this.GroupNameOption; } set { this.GroupNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Labels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LabelsOption { get; private set; }

        /// <summary>
        /// 流水线标签
        /// </summary>
        /// <value>流水线标签</value>
        [JsonPropertyName("labels")]
        public string? Labels { get { return this.LabelsOption; } set { this.LabelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of NickName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NickNameOption { get; private set; }

        /// <summary>
        /// 构建用户昵称
        /// </summary>
        /// <value>构建用户昵称</value>
        [JsonPropertyName("nickName")]
        public string? NickName { get { return this.NickNameOption; } set { this.NickNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of PipelineFailCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PipelineFailCountOption { get; private set; }

        /// <summary>
        /// 失败的子流水线个数
        /// </summary>
        /// <value>失败的子流水线个数</value>
        [JsonPropertyName("pipelineFailCount")]
        public int? PipelineFailCount { get { return this.PipelineFailCountOption; } set { this.PipelineFailCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of PipelineSuccessCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PipelineSuccessCountOption { get; private set; }

        /// <summary>
        /// 成功的子流水线个数
        /// </summary>
        /// <value>成功的子流水线个数</value>
        [JsonPropertyName("pipelineSuccessCount")]
        public int? PipelineSuccessCount { get { return this.PipelineSuccessCountOption; } set { this.PipelineSuccessCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of PipelineTotalCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PipelineTotalCountOption { get; private set; }

        /// <summary>
        /// 子流水线个数
        /// </summary>
        /// <value>子流水线个数</value>
        [JsonPropertyName("pipelineTotalCount")]
        public int? PipelineTotalCount { get { return this.PipelineTotalCountOption; } set { this.PipelineTotalCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sha
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ShaOption { get; private set; }

        /// <summary>
        /// commitid
        /// </summary>
        /// <value>commitid</value>
        [JsonPropertyName("sha")]
        public string? Sha { get { return this.ShaOption; } set { this.ShaOption = new(value); } }

        /// <summary>
        /// Used to track the state of Slug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SlugOption { get; private set; }

        /// <summary>
        /// 仓库路径
        /// </summary>
        /// <value>仓库路径</value>
        [JsonPropertyName("slug")]
        public string? Slug { get { return this.SlugOption; } set { this.SlugOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SnOption { get; private set; }

        /// <summary>
        /// 构建号
        /// </summary>
        /// <value>构建号</value>
        [JsonPropertyName("sn")]
        public string? Sn { get { return this.SnOption; } set { this.SnOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceRef
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceRefOption { get; private set; }

        /// <summary>
        /// 源分支名
        /// </summary>
        /// <value>源分支名</value>
        [JsonPropertyName("sourceRef")]
        public string? SourceRef { get { return this.SourceRefOption; } set { this.SourceRefOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceSlug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceSlugOption { get; private set; }

        /// <summary>
        /// 源仓库路径
        /// </summary>
        /// <value>源仓库路径</value>
        [JsonPropertyName("sourceSlug")]
        public string? SourceSlug { get { return this.SourceSlugOption; } set { this.SourceSlugOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusOption { get; private set; }

        /// <summary>
        /// 构建状态
        /// </summary>
        /// <value>构建状态</value>
        [JsonPropertyName("status")]
        public string? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of TargetRef
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TargetRefOption { get; private set; }

        /// <summary>
        /// 目标分支名
        /// </summary>
        /// <value>目标分支名</value>
        [JsonPropertyName("targetRef")]
        public string? TargetRef { get { return this.TargetRefOption; } set { this.TargetRefOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// 构建 title
        /// </summary>
        /// <value>构建 title</value>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserNameOption { get; private set; }

        /// <summary>
        /// 用户名
        /// </summary>
        /// <value>用户名</value>
        [JsonPropertyName("userName")]
        public string? UserName { get { return this.UserNameOption; } set { this.UserNameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoLogInfo {\n");
            sb.Append("  BuildLogUrl: ").Append(BuildLogUrl).Append("\n");
            sb.Append("  CommitTitle: ").Append(CommitTitle).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  EventUrl: ").Append(EventUrl).Append("\n");
            sb.Append("  Freeze: ").Append(Freeze).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  NickName: ").Append(NickName).Append("\n");
            sb.Append("  PipelineFailCount: ").Append(PipelineFailCount).Append("\n");
            sb.Append("  PipelineSuccessCount: ").Append(PipelineSuccessCount).Append("\n");
            sb.Append("  PipelineTotalCount: ").Append(PipelineTotalCount).Append("\n");
            sb.Append("  Sha: ").Append(Sha).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Sn: ").Append(Sn).Append("\n");
            sb.Append("  SourceRef: ").Append(SourceRef).Append("\n");
            sb.Append("  SourceSlug: ").Append(SourceSlug).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TargetRef: ").Append(TargetRef).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoLogInfo" />
    /// </summary>
    public class DtoLogInfoJsonConverter : JsonConverter<DtoLogInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoLogInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoLogInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> buildLogUrl = default;
            Option<string?> commitTitle = default;
            Option<string?> createTime = default;
            Option<int?> duration = default;
            Option<string?> varEvent = default;
            Option<string?> eventUrl = default;
            Option<bool?> freeze = default;
            Option<string?> groupName = default;
            Option<string?> labels = default;
            Option<string?> nickName = default;
            Option<int?> pipelineFailCount = default;
            Option<int?> pipelineSuccessCount = default;
            Option<int?> pipelineTotalCount = default;
            Option<string?> sha = default;
            Option<string?> slug = default;
            Option<string?> sn = default;
            Option<string?> sourceRef = default;
            Option<string?> sourceSlug = default;
            Option<string?> status = default;
            Option<string?> targetRef = default;
            Option<string?> title = default;
            Option<string?> userName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "buildLogUrl":
                            buildLogUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "commitTitle":
                            commitTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "createTime":
                            createTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "duration":
                            duration = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "event":
                            varEvent = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "eventUrl":
                            eventUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "freeze":
                            freeze = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "groupName":
                            groupName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "labels":
                            labels = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "nickName":
                            nickName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pipelineFailCount":
                            pipelineFailCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pipelineSuccessCount":
                            pipelineSuccessCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pipelineTotalCount":
                            pipelineTotalCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "sha":
                            sha = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "slug":
                            slug = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sn":
                            sn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sourceRef":
                            sourceRef = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sourceSlug":
                            sourceSlug = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "targetRef":
                            targetRef = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "userName":
                            userName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (buildLogUrl.IsSet && buildLogUrl.Value == null)
                throw new ArgumentNullException(nameof(buildLogUrl), "Property is not nullable for class DtoLogInfo.");

            if (commitTitle.IsSet && commitTitle.Value == null)
                throw new ArgumentNullException(nameof(commitTitle), "Property is not nullable for class DtoLogInfo.");

            if (createTime.IsSet && createTime.Value == null)
                throw new ArgumentNullException(nameof(createTime), "Property is not nullable for class DtoLogInfo.");

            if (duration.IsSet && duration.Value == null)
                throw new ArgumentNullException(nameof(duration), "Property is not nullable for class DtoLogInfo.");

            if (varEvent.IsSet && varEvent.Value == null)
                throw new ArgumentNullException(nameof(varEvent), "Property is not nullable for class DtoLogInfo.");

            if (eventUrl.IsSet && eventUrl.Value == null)
                throw new ArgumentNullException(nameof(eventUrl), "Property is not nullable for class DtoLogInfo.");

            if (freeze.IsSet && freeze.Value == null)
                throw new ArgumentNullException(nameof(freeze), "Property is not nullable for class DtoLogInfo.");

            if (groupName.IsSet && groupName.Value == null)
                throw new ArgumentNullException(nameof(groupName), "Property is not nullable for class DtoLogInfo.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class DtoLogInfo.");

            if (nickName.IsSet && nickName.Value == null)
                throw new ArgumentNullException(nameof(nickName), "Property is not nullable for class DtoLogInfo.");

            if (pipelineFailCount.IsSet && pipelineFailCount.Value == null)
                throw new ArgumentNullException(nameof(pipelineFailCount), "Property is not nullable for class DtoLogInfo.");

            if (pipelineSuccessCount.IsSet && pipelineSuccessCount.Value == null)
                throw new ArgumentNullException(nameof(pipelineSuccessCount), "Property is not nullable for class DtoLogInfo.");

            if (pipelineTotalCount.IsSet && pipelineTotalCount.Value == null)
                throw new ArgumentNullException(nameof(pipelineTotalCount), "Property is not nullable for class DtoLogInfo.");

            if (sha.IsSet && sha.Value == null)
                throw new ArgumentNullException(nameof(sha), "Property is not nullable for class DtoLogInfo.");

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug), "Property is not nullable for class DtoLogInfo.");

            if (sn.IsSet && sn.Value == null)
                throw new ArgumentNullException(nameof(sn), "Property is not nullable for class DtoLogInfo.");

            if (sourceRef.IsSet && sourceRef.Value == null)
                throw new ArgumentNullException(nameof(sourceRef), "Property is not nullable for class DtoLogInfo.");

            if (sourceSlug.IsSet && sourceSlug.Value == null)
                throw new ArgumentNullException(nameof(sourceSlug), "Property is not nullable for class DtoLogInfo.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class DtoLogInfo.");

            if (targetRef.IsSet && targetRef.Value == null)
                throw new ArgumentNullException(nameof(targetRef), "Property is not nullable for class DtoLogInfo.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class DtoLogInfo.");

            if (userName.IsSet && userName.Value == null)
                throw new ArgumentNullException(nameof(userName), "Property is not nullable for class DtoLogInfo.");

            return new DtoLogInfo(buildLogUrl, commitTitle, createTime, duration, varEvent, eventUrl, freeze, groupName, labels, nickName, pipelineFailCount, pipelineSuccessCount, pipelineTotalCount, sha, slug, sn, sourceRef, sourceSlug, status, targetRef, title, userName);
        }

        /// <summary>
        /// Serializes a <see cref="DtoLogInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoLogInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoLogInfo dtoLogInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoLogInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoLogInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoLogInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoLogInfo dtoLogInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoLogInfo.BuildLogUrlOption.IsSet && dtoLogInfo.BuildLogUrl == null)
                throw new ArgumentNullException(nameof(dtoLogInfo.BuildLogUrl), "Property is required for class DtoLogInfo.");

            if (dtoLogInfo.CommitTitleOption.IsSet && dtoLogInfo.CommitTitle == null)
                throw new ArgumentNullException(nameof(dtoLogInfo.CommitTitle), "Property is required for class DtoLogInfo.");

            if (dtoLogInfo.CreateTimeOption.IsSet && dtoLogInfo.CreateTime == null)
                throw new ArgumentNullException(nameof(dtoLogInfo.CreateTime), "Property is required for class DtoLogInfo.");

            if (dtoLogInfo.EventOption.IsSet && dtoLogInfo.Event == null)
                throw new ArgumentNullException(nameof(dtoLogInfo.Event), "Property is required for class DtoLogInfo.");

            if (dtoLogInfo.EventUrlOption.IsSet && dtoLogInfo.EventUrl == null)
                throw new ArgumentNullException(nameof(dtoLogInfo.EventUrl), "Property is required for class DtoLogInfo.");

            if (dtoLogInfo.GroupNameOption.IsSet && dtoLogInfo.GroupName == null)
                throw new ArgumentNullException(nameof(dtoLogInfo.GroupName), "Property is required for class DtoLogInfo.");

            if (dtoLogInfo.LabelsOption.IsSet && dtoLogInfo.Labels == null)
                throw new ArgumentNullException(nameof(dtoLogInfo.Labels), "Property is required for class DtoLogInfo.");

            if (dtoLogInfo.NickNameOption.IsSet && dtoLogInfo.NickName == null)
                throw new ArgumentNullException(nameof(dtoLogInfo.NickName), "Property is required for class DtoLogInfo.");

            if (dtoLogInfo.ShaOption.IsSet && dtoLogInfo.Sha == null)
                throw new ArgumentNullException(nameof(dtoLogInfo.Sha), "Property is required for class DtoLogInfo.");

            if (dtoLogInfo.SlugOption.IsSet && dtoLogInfo.Slug == null)
                throw new ArgumentNullException(nameof(dtoLogInfo.Slug), "Property is required for class DtoLogInfo.");

            if (dtoLogInfo.SnOption.IsSet && dtoLogInfo.Sn == null)
                throw new ArgumentNullException(nameof(dtoLogInfo.Sn), "Property is required for class DtoLogInfo.");

            if (dtoLogInfo.SourceRefOption.IsSet && dtoLogInfo.SourceRef == null)
                throw new ArgumentNullException(nameof(dtoLogInfo.SourceRef), "Property is required for class DtoLogInfo.");

            if (dtoLogInfo.SourceSlugOption.IsSet && dtoLogInfo.SourceSlug == null)
                throw new ArgumentNullException(nameof(dtoLogInfo.SourceSlug), "Property is required for class DtoLogInfo.");

            if (dtoLogInfo.StatusOption.IsSet && dtoLogInfo.Status == null)
                throw new ArgumentNullException(nameof(dtoLogInfo.Status), "Property is required for class DtoLogInfo.");

            if (dtoLogInfo.TargetRefOption.IsSet && dtoLogInfo.TargetRef == null)
                throw new ArgumentNullException(nameof(dtoLogInfo.TargetRef), "Property is required for class DtoLogInfo.");

            if (dtoLogInfo.TitleOption.IsSet && dtoLogInfo.Title == null)
                throw new ArgumentNullException(nameof(dtoLogInfo.Title), "Property is required for class DtoLogInfo.");

            if (dtoLogInfo.UserNameOption.IsSet && dtoLogInfo.UserName == null)
                throw new ArgumentNullException(nameof(dtoLogInfo.UserName), "Property is required for class DtoLogInfo.");

            if (dtoLogInfo.BuildLogUrlOption.IsSet)
                writer.WriteString("buildLogUrl", dtoLogInfo.BuildLogUrl);

            if (dtoLogInfo.CommitTitleOption.IsSet)
                writer.WriteString("commitTitle", dtoLogInfo.CommitTitle);

            if (dtoLogInfo.CreateTimeOption.IsSet)
                writer.WriteString("createTime", dtoLogInfo.CreateTime);

            if (dtoLogInfo.DurationOption.IsSet)
                writer.WriteNumber("duration", dtoLogInfo.DurationOption.Value!.Value);

            if (dtoLogInfo.EventOption.IsSet)
                writer.WriteString("event", dtoLogInfo.Event);

            if (dtoLogInfo.EventUrlOption.IsSet)
                writer.WriteString("eventUrl", dtoLogInfo.EventUrl);

            if (dtoLogInfo.FreezeOption.IsSet)
                writer.WriteBoolean("freeze", dtoLogInfo.FreezeOption.Value!.Value);

            if (dtoLogInfo.GroupNameOption.IsSet)
                writer.WriteString("groupName", dtoLogInfo.GroupName);

            if (dtoLogInfo.LabelsOption.IsSet)
                writer.WriteString("labels", dtoLogInfo.Labels);

            if (dtoLogInfo.NickNameOption.IsSet)
                writer.WriteString("nickName", dtoLogInfo.NickName);

            if (dtoLogInfo.PipelineFailCountOption.IsSet)
                writer.WriteNumber("pipelineFailCount", dtoLogInfo.PipelineFailCountOption.Value!.Value);

            if (dtoLogInfo.PipelineSuccessCountOption.IsSet)
                writer.WriteNumber("pipelineSuccessCount", dtoLogInfo.PipelineSuccessCountOption.Value!.Value);

            if (dtoLogInfo.PipelineTotalCountOption.IsSet)
                writer.WriteNumber("pipelineTotalCount", dtoLogInfo.PipelineTotalCountOption.Value!.Value);

            if (dtoLogInfo.ShaOption.IsSet)
                writer.WriteString("sha", dtoLogInfo.Sha);

            if (dtoLogInfo.SlugOption.IsSet)
                writer.WriteString("slug", dtoLogInfo.Slug);

            if (dtoLogInfo.SnOption.IsSet)
                writer.WriteString("sn", dtoLogInfo.Sn);

            if (dtoLogInfo.SourceRefOption.IsSet)
                writer.WriteString("sourceRef", dtoLogInfo.SourceRef);

            if (dtoLogInfo.SourceSlugOption.IsSet)
                writer.WriteString("sourceSlug", dtoLogInfo.SourceSlug);

            if (dtoLogInfo.StatusOption.IsSet)
                writer.WriteString("status", dtoLogInfo.Status);

            if (dtoLogInfo.TargetRefOption.IsSet)
                writer.WriteString("targetRef", dtoLogInfo.TargetRef);

            if (dtoLogInfo.TitleOption.IsSet)
                writer.WriteString("title", dtoLogInfo.Title);

            if (dtoLogInfo.UserNameOption.IsSet)
                writer.WriteString("userName", dtoLogInfo.UserName);
        }
    }
}
