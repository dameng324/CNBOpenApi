// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebForkSyncStatus
    /// </summary>
    public partial class WebForkSyncStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebForkSyncStatus" /> class.
        /// </summary>
        /// <param name="ahead">ahead</param>
        /// <param name="behind">behind</param>
        /// <param name="upstreamRef">upstreamRef</param>
        /// <param name="upstreamSlug">upstreamSlug</param>
        [JsonConstructor]
        public WebForkSyncStatus(Option<int?> ahead = default, Option<int?> behind = default, Option<string?> upstreamRef = default, Option<string?> upstreamSlug = default)
        {
            AheadOption = ahead;
            BehindOption = behind;
            UpstreamRefOption = upstreamRef;
            UpstreamSlugOption = upstreamSlug;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Ahead
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AheadOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ahead
        /// </summary>
        [JsonPropertyName("ahead")]
        public int? Ahead { get { return this.AheadOption; } set { this.AheadOption = new(value); } }

        /// <summary>
        /// Used to track the state of Behind
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BehindOption { get; private set; }

        /// <summary>
        /// Gets or Sets Behind
        /// </summary>
        [JsonPropertyName("behind")]
        public int? Behind { get { return this.BehindOption; } set { this.BehindOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpstreamRef
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpstreamRefOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpstreamRef
        /// </summary>
        [JsonPropertyName("upstream_ref")]
        public string? UpstreamRef { get { return this.UpstreamRefOption; } set { this.UpstreamRefOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpstreamSlug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpstreamSlugOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpstreamSlug
        /// </summary>
        [JsonPropertyName("upstream_slug")]
        public string? UpstreamSlug { get { return this.UpstreamSlugOption; } set { this.UpstreamSlugOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebForkSyncStatus {\n");
            sb.Append("  Ahead: ").Append(Ahead).Append("\n");
            sb.Append("  Behind: ").Append(Behind).Append("\n");
            sb.Append("  UpstreamRef: ").Append(UpstreamRef).Append("\n");
            sb.Append("  UpstreamSlug: ").Append(UpstreamSlug).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebForkSyncStatus" />
    /// </summary>
    public class WebForkSyncStatusJsonConverter : JsonConverter<WebForkSyncStatus>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebForkSyncStatus" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebForkSyncStatus Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> ahead = default;
            Option<int?> behind = default;
            Option<string?> upstreamRef = default;
            Option<string?> upstreamSlug = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ahead":
                            ahead = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "behind":
                            behind = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "upstream_ref":
                            upstreamRef = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "upstream_slug":
                            upstreamSlug = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (ahead.IsSet && ahead.Value == null)
                throw new ArgumentNullException(nameof(ahead), "Property is not nullable for class WebForkSyncStatus.");

            if (behind.IsSet && behind.Value == null)
                throw new ArgumentNullException(nameof(behind), "Property is not nullable for class WebForkSyncStatus.");

            if (upstreamRef.IsSet && upstreamRef.Value == null)
                throw new ArgumentNullException(nameof(upstreamRef), "Property is not nullable for class WebForkSyncStatus.");

            if (upstreamSlug.IsSet && upstreamSlug.Value == null)
                throw new ArgumentNullException(nameof(upstreamSlug), "Property is not nullable for class WebForkSyncStatus.");

            return new WebForkSyncStatus(ahead, behind, upstreamRef, upstreamSlug);
        }

        /// <summary>
        /// Serializes a <see cref="WebForkSyncStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webForkSyncStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebForkSyncStatus webForkSyncStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webForkSyncStatus, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebForkSyncStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webForkSyncStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebForkSyncStatus webForkSyncStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webForkSyncStatus.UpstreamRefOption.IsSet && webForkSyncStatus.UpstreamRef == null)
                throw new ArgumentNullException(nameof(webForkSyncStatus.UpstreamRef), "Property is required for class WebForkSyncStatus.");

            if (webForkSyncStatus.UpstreamSlugOption.IsSet && webForkSyncStatus.UpstreamSlug == null)
                throw new ArgumentNullException(nameof(webForkSyncStatus.UpstreamSlug), "Property is required for class WebForkSyncStatus.");

            if (webForkSyncStatus.AheadOption.IsSet)
                writer.WriteNumber("ahead", webForkSyncStatus.AheadOption.Value!.Value);

            if (webForkSyncStatus.BehindOption.IsSet)
                writer.WriteNumber("behind", webForkSyncStatus.BehindOption.Value!.Value);

            if (webForkSyncStatus.UpstreamRefOption.IsSet)
                writer.WriteString("upstream_ref", webForkSyncStatus.UpstreamRef);

            if (webForkSyncStatus.UpstreamSlugOption.IsSet)
                writer.WriteString("upstream_slug", webForkSyncStatus.UpstreamSlug);
        }
    }
}
