// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoLastPusher
    /// </summary>
    public partial class DtoLastPusher : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoLastPusher" /> class.
        /// </summary>
        /// <param name="isFrozen">isFrozen</param>
        /// <param name="name">name</param>
        /// <param name="nickname">nickname</param>
        /// <param name="pushAt">pushAt</param>
        [JsonConstructor]
        public DtoLastPusher(Option<bool?> isFrozen = default, Option<string?> name = default, Option<string?> nickname = default, Option<string?> pushAt = default)
        {
            IsFrozenOption = isFrozen;
            NameOption = name;
            NicknameOption = nickname;
            PushAtOption = pushAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of IsFrozen
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsFrozenOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsFrozen
        /// </summary>
        [JsonPropertyName("is_frozen")]
        public bool? IsFrozen { get { return this.IsFrozenOption; } set { this.IsFrozenOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Nickname
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NicknameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [JsonPropertyName("nickname")]
        public string? Nickname { get { return this.NicknameOption; } set { this.NicknameOption = new(value); } }

        /// <summary>
        /// Used to track the state of PushAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PushAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets PushAt
        /// </summary>
        [JsonPropertyName("push_at")]
        public string? PushAt { get { return this.PushAtOption; } set { this.PushAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoLastPusher {\n");
            sb.Append("  IsFrozen: ").Append(IsFrozen).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  PushAt: ").Append(PushAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoLastPusher" />
    /// </summary>
    public class DtoLastPusherJsonConverter : JsonConverter<DtoLastPusher>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoLastPusher" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoLastPusher Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> isFrozen = default;
            Option<string?> name = default;
            Option<string?> nickname = default;
            Option<string?> pushAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "is_frozen":
                            isFrozen = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "nickname":
                            nickname = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "push_at":
                            pushAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (isFrozen.IsSet && isFrozen.Value == null)
                throw new ArgumentNullException(nameof(isFrozen), "Property is not nullable for class DtoLastPusher.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class DtoLastPusher.");

            if (nickname.IsSet && nickname.Value == null)
                throw new ArgumentNullException(nameof(nickname), "Property is not nullable for class DtoLastPusher.");

            if (pushAt.IsSet && pushAt.Value == null)
                throw new ArgumentNullException(nameof(pushAt), "Property is not nullable for class DtoLastPusher.");

            return new DtoLastPusher(isFrozen, name, nickname, pushAt);
        }

        /// <summary>
        /// Serializes a <see cref="DtoLastPusher" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoLastPusher"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoLastPusher dtoLastPusher, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoLastPusher, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoLastPusher" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoLastPusher"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoLastPusher dtoLastPusher, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoLastPusher.NameOption.IsSet && dtoLastPusher.Name == null)
                throw new ArgumentNullException(nameof(dtoLastPusher.Name), "Property is required for class DtoLastPusher.");

            if (dtoLastPusher.NicknameOption.IsSet && dtoLastPusher.Nickname == null)
                throw new ArgumentNullException(nameof(dtoLastPusher.Nickname), "Property is required for class DtoLastPusher.");

            if (dtoLastPusher.PushAtOption.IsSet && dtoLastPusher.PushAt == null)
                throw new ArgumentNullException(nameof(dtoLastPusher.PushAt), "Property is required for class DtoLastPusher.");

            if (dtoLastPusher.IsFrozenOption.IsSet)
                writer.WriteBoolean("is_frozen", dtoLastPusher.IsFrozenOption.Value!.Value);

            if (dtoLastPusher.NameOption.IsSet)
                writer.WriteString("name", dtoLastPusher.Name);

            if (dtoLastPusher.NicknameOption.IsSet)
                writer.WriteString("nickname", dtoLastPusher.Nickname);

            if (dtoLastPusher.PushAtOption.IsSet)
                writer.WriteString("push_at", dtoLastPusher.PushAt);
        }
    }
}
