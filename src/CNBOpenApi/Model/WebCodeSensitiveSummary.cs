// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebCodeSensitiveSummary
    /// </summary>
    public partial class WebCodeSensitiveSummary : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebCodeSensitiveSummary" /> class.
        /// </summary>
        /// <param name="ignored">忽略问题数量</param>
        /// <param name="open">开启中问题数量</param>
        [JsonConstructor]
        public WebCodeSensitiveSummary(Option<int?> ignored = default, Option<int?> open = default)
        {
            IgnoredOption = ignored;
            OpenOption = open;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Ignored
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IgnoredOption { get; private set; }

        /// <summary>
        /// 忽略问题数量
        /// </summary>
        /// <value>忽略问题数量</value>
        [JsonPropertyName("ignored")]
        public int? Ignored { get { return this.IgnoredOption; } set { this.IgnoredOption = new(value); } }

        /// <summary>
        /// Used to track the state of Open
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OpenOption { get; private set; }

        /// <summary>
        /// 开启中问题数量
        /// </summary>
        /// <value>开启中问题数量</value>
        [JsonPropertyName("open")]
        public int? Open { get { return this.OpenOption; } set { this.OpenOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebCodeSensitiveSummary {\n");
            sb.Append("  Ignored: ").Append(Ignored).Append("\n");
            sb.Append("  Open: ").Append(Open).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebCodeSensitiveSummary" />
    /// </summary>
    public class WebCodeSensitiveSummaryJsonConverter : JsonConverter<WebCodeSensitiveSummary>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebCodeSensitiveSummary" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebCodeSensitiveSummary Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> ignored = default;
            Option<int?> open = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ignored":
                            ignored = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "open":
                            open = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (ignored.IsSet && ignored.Value == null)
                throw new ArgumentNullException(nameof(ignored), "Property is not nullable for class WebCodeSensitiveSummary.");

            if (open.IsSet && open.Value == null)
                throw new ArgumentNullException(nameof(open), "Property is not nullable for class WebCodeSensitiveSummary.");

            return new WebCodeSensitiveSummary(ignored, open);
        }

        /// <summary>
        /// Serializes a <see cref="WebCodeSensitiveSummary" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webCodeSensitiveSummary"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebCodeSensitiveSummary webCodeSensitiveSummary, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webCodeSensitiveSummary, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebCodeSensitiveSummary" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webCodeSensitiveSummary"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebCodeSensitiveSummary webCodeSensitiveSummary, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webCodeSensitiveSummary.IgnoredOption.IsSet)
                writer.WriteNumber("ignored", webCodeSensitiveSummary.IgnoredOption.Value!.Value);

            if (webCodeSensitiveSummary.OpenOption.IsSet)
                writer.WriteNumber("open", webCodeSensitiveSummary.OpenOption.Value!.Value);
        }
    }
}
