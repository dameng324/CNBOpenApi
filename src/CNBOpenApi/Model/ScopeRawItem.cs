// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// ScopeRawItem
    /// </summary>
    public partial class ScopeRawItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScopeRawItem" /> class.
        /// </summary>
        /// <param name="code">code</param>
        /// <param name="text">text</param>
        /// <param name="values">values</param>
        [JsonConstructor]
        public ScopeRawItem(Option<string?> code = default, Option<string?> text = default, Option<List<string>?> values = default)
        {
            CodeOption = code;
            TextOption = text;
            ValuesOption = values;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [JsonPropertyName("code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Text
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TextOption { get; private set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [JsonPropertyName("text")]
        public string? Text { get { return this.TextOption; } set { this.TextOption = new(value); } }

        /// <summary>
        /// Used to track the state of Values
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ValuesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [JsonPropertyName("values")]
        public List<string>? Values { get { return this.ValuesOption; } set { this.ValuesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScopeRawItem {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ScopeRawItem" />
    /// </summary>
    public class ScopeRawItemJsonConverter : JsonConverter<ScopeRawItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="ScopeRawItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ScopeRawItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<string?> text = default;
            Option<List<string>?> values = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "text":
                            text = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "values":
                            values = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class ScopeRawItem.");

            if (text.IsSet && text.Value == null)
                throw new ArgumentNullException(nameof(text), "Property is not nullable for class ScopeRawItem.");

            if (values.IsSet && values.Value == null)
                throw new ArgumentNullException(nameof(values), "Property is not nullable for class ScopeRawItem.");

            return new ScopeRawItem(code, text, values);
        }

        /// <summary>
        /// Serializes a <see cref="ScopeRawItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="scopeRawItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ScopeRawItem scopeRawItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, scopeRawItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ScopeRawItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="scopeRawItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ScopeRawItem scopeRawItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (scopeRawItem.CodeOption.IsSet && scopeRawItem.Code == null)
                throw new ArgumentNullException(nameof(scopeRawItem.Code), "Property is required for class ScopeRawItem.");

            if (scopeRawItem.TextOption.IsSet && scopeRawItem.Text == null)
                throw new ArgumentNullException(nameof(scopeRawItem.Text), "Property is required for class ScopeRawItem.");

            if (scopeRawItem.ValuesOption.IsSet && scopeRawItem.Values == null)
                throw new ArgumentNullException(nameof(scopeRawItem.Values), "Property is required for class ScopeRawItem.");

            if (scopeRawItem.CodeOption.IsSet)
                writer.WriteString("code", scopeRawItem.Code);

            if (scopeRawItem.TextOption.IsSet)
                writer.WriteString("text", scopeRawItem.Text);

            if (scopeRawItem.ValuesOption.IsSet)
            {
                writer.WritePropertyName("values");
                JsonSerializer.Serialize(writer, scopeRawItem.Values, jsonSerializerOptions);
            }
        }
    }
}
