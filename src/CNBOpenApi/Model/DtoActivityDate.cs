// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoActivityDate
    /// </summary>
    public partial class DtoActivityDate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoActivityDate" /> class.
        /// </summary>
        /// <param name="codeReviewCount">codeReviewCount</param>
        /// <param name="codeReviews">codeReviews</param>
        /// <param name="commitCount">commitCount</param>
        /// <param name="commits">commits</param>
        /// <param name="groupCount">groupCount</param>
        /// <param name="groups">groups</param>
        /// <param name="issues">issues</param>
        /// <param name="issuesCount">issuesCount</param>
        /// <param name="privateScore">privateScore</param>
        /// <param name="pullRequestCount">pullRequestCount</param>
        /// <param name="pullRequests">pullRequests</param>
        /// <param name="repoCount">repoCount</param>
        /// <param name="repos">repos</param>
        [JsonConstructor]
        public DtoActivityDate(Option<int?> codeReviewCount = default, Option<List<DtoActivityRepoDetail>?> codeReviews = default, Option<int?> commitCount = default, Option<List<DtoActivityRepoDetail>?> commits = default, Option<int?> groupCount = default, Option<List<DtoActivityJoinGroupDetail>?> groups = default, Option<List<DtoActivityRepoDetail>?> issues = default, Option<int?> issuesCount = default, Option<int?> privateScore = default, Option<int?> pullRequestCount = default, Option<List<DtoActivityRepoDetail>?> pullRequests = default, Option<int?> repoCount = default, Option<List<DtoActivityCreateRepoDetail>?> repos = default)
        {
            CodeReviewCountOption = codeReviewCount;
            CodeReviewsOption = codeReviews;
            CommitCountOption = commitCount;
            CommitsOption = commits;
            GroupCountOption = groupCount;
            GroupsOption = groups;
            IssuesOption = issues;
            IssuesCountOption = issuesCount;
            PrivateScoreOption = privateScore;
            PullRequestCountOption = pullRequestCount;
            PullRequestsOption = pullRequests;
            RepoCountOption = repoCount;
            ReposOption = repos;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CodeReviewCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CodeReviewCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets CodeReviewCount
        /// </summary>
        [JsonPropertyName("code_review_count")]
        public int? CodeReviewCount { get { return this.CodeReviewCountOption; } set { this.CodeReviewCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CodeReviews
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoActivityRepoDetail>?> CodeReviewsOption { get; private set; }

        /// <summary>
        /// Gets or Sets CodeReviews
        /// </summary>
        [JsonPropertyName("code_reviews")]
        public List<DtoActivityRepoDetail>? CodeReviews { get { return this.CodeReviewsOption; } set { this.CodeReviewsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommitCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CommitCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommitCount
        /// </summary>
        [JsonPropertyName("commit_count")]
        public int? CommitCount { get { return this.CommitCountOption; } set { this.CommitCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Commits
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoActivityRepoDetail>?> CommitsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Commits
        /// </summary>
        [JsonPropertyName("commits")]
        public List<DtoActivityRepoDetail>? Commits { get { return this.CommitsOption; } set { this.CommitsOption = new(value); } }

        /// <summary>
        /// Used to track the state of GroupCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> GroupCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets GroupCount
        /// </summary>
        [JsonPropertyName("group_count")]
        public int? GroupCount { get { return this.GroupCountOption; } set { this.GroupCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Groups
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoActivityJoinGroupDetail>?> GroupsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [JsonPropertyName("groups")]
        public List<DtoActivityJoinGroupDetail>? Groups { get { return this.GroupsOption; } set { this.GroupsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Issues
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoActivityRepoDetail>?> IssuesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Issues
        /// </summary>
        [JsonPropertyName("issues")]
        public List<DtoActivityRepoDetail>? Issues { get { return this.IssuesOption; } set { this.IssuesOption = new(value); } }

        /// <summary>
        /// Used to track the state of IssuesCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IssuesCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets IssuesCount
        /// </summary>
        [JsonPropertyName("issues_count")]
        public int? IssuesCount { get { return this.IssuesCountOption; } set { this.IssuesCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrivateScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PrivateScoreOption { get; private set; }

        /// <summary>
        /// Gets or Sets PrivateScore
        /// </summary>
        [JsonPropertyName("private_score")]
        public int? PrivateScore { get { return this.PrivateScoreOption; } set { this.PrivateScoreOption = new(value); } }

        /// <summary>
        /// Used to track the state of PullRequestCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PullRequestCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets PullRequestCount
        /// </summary>
        [JsonPropertyName("pull_request_count")]
        public int? PullRequestCount { get { return this.PullRequestCountOption; } set { this.PullRequestCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of PullRequests
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoActivityRepoDetail>?> PullRequestsOption { get; private set; }

        /// <summary>
        /// Gets or Sets PullRequests
        /// </summary>
        [JsonPropertyName("pull_requests")]
        public List<DtoActivityRepoDetail>? PullRequests { get { return this.PullRequestsOption; } set { this.PullRequestsOption = new(value); } }

        /// <summary>
        /// Used to track the state of RepoCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RepoCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets RepoCount
        /// </summary>
        [JsonPropertyName("repo_count")]
        public int? RepoCount { get { return this.RepoCountOption; } set { this.RepoCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Repos
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoActivityCreateRepoDetail>?> ReposOption { get; private set; }

        /// <summary>
        /// Gets or Sets Repos
        /// </summary>
        [JsonPropertyName("repos")]
        public List<DtoActivityCreateRepoDetail>? Repos { get { return this.ReposOption; } set { this.ReposOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoActivityDate {\n");
            sb.Append("  CodeReviewCount: ").Append(CodeReviewCount).Append("\n");
            sb.Append("  CodeReviews: ").Append(CodeReviews).Append("\n");
            sb.Append("  CommitCount: ").Append(CommitCount).Append("\n");
            sb.Append("  Commits: ").Append(Commits).Append("\n");
            sb.Append("  GroupCount: ").Append(GroupCount).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Issues: ").Append(Issues).Append("\n");
            sb.Append("  IssuesCount: ").Append(IssuesCount).Append("\n");
            sb.Append("  PrivateScore: ").Append(PrivateScore).Append("\n");
            sb.Append("  PullRequestCount: ").Append(PullRequestCount).Append("\n");
            sb.Append("  PullRequests: ").Append(PullRequests).Append("\n");
            sb.Append("  RepoCount: ").Append(RepoCount).Append("\n");
            sb.Append("  Repos: ").Append(Repos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoActivityDate" />
    /// </summary>
    public class DtoActivityDateJsonConverter : JsonConverter<DtoActivityDate>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoActivityDate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoActivityDate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> codeReviewCount = default;
            Option<List<DtoActivityRepoDetail>?> codeReviews = default;
            Option<int?> commitCount = default;
            Option<List<DtoActivityRepoDetail>?> commits = default;
            Option<int?> groupCount = default;
            Option<List<DtoActivityJoinGroupDetail>?> groups = default;
            Option<List<DtoActivityRepoDetail>?> issues = default;
            Option<int?> issuesCount = default;
            Option<int?> privateScore = default;
            Option<int?> pullRequestCount = default;
            Option<List<DtoActivityRepoDetail>?> pullRequests = default;
            Option<int?> repoCount = default;
            Option<List<DtoActivityCreateRepoDetail>?> repos = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code_review_count":
                            codeReviewCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "code_reviews":
                            codeReviews = new Option<List<DtoActivityRepoDetail>?>(JsonSerializer.Deserialize<List<DtoActivityRepoDetail>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "commit_count":
                            commitCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "commits":
                            commits = new Option<List<DtoActivityRepoDetail>?>(JsonSerializer.Deserialize<List<DtoActivityRepoDetail>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "group_count":
                            groupCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "groups":
                            groups = new Option<List<DtoActivityJoinGroupDetail>?>(JsonSerializer.Deserialize<List<DtoActivityJoinGroupDetail>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "issues":
                            issues = new Option<List<DtoActivityRepoDetail>?>(JsonSerializer.Deserialize<List<DtoActivityRepoDetail>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "issues_count":
                            issuesCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "private_score":
                            privateScore = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pull_request_count":
                            pullRequestCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pull_requests":
                            pullRequests = new Option<List<DtoActivityRepoDetail>?>(JsonSerializer.Deserialize<List<DtoActivityRepoDetail>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "repo_count":
                            repoCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "repos":
                            repos = new Option<List<DtoActivityCreateRepoDetail>?>(JsonSerializer.Deserialize<List<DtoActivityCreateRepoDetail>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (codeReviewCount.IsSet && codeReviewCount.Value == null)
                throw new ArgumentNullException(nameof(codeReviewCount), "Property is not nullable for class DtoActivityDate.");

            if (codeReviews.IsSet && codeReviews.Value == null)
                throw new ArgumentNullException(nameof(codeReviews), "Property is not nullable for class DtoActivityDate.");

            if (commitCount.IsSet && commitCount.Value == null)
                throw new ArgumentNullException(nameof(commitCount), "Property is not nullable for class DtoActivityDate.");

            if (commits.IsSet && commits.Value == null)
                throw new ArgumentNullException(nameof(commits), "Property is not nullable for class DtoActivityDate.");

            if (groupCount.IsSet && groupCount.Value == null)
                throw new ArgumentNullException(nameof(groupCount), "Property is not nullable for class DtoActivityDate.");

            if (groups.IsSet && groups.Value == null)
                throw new ArgumentNullException(nameof(groups), "Property is not nullable for class DtoActivityDate.");

            if (issues.IsSet && issues.Value == null)
                throw new ArgumentNullException(nameof(issues), "Property is not nullable for class DtoActivityDate.");

            if (issuesCount.IsSet && issuesCount.Value == null)
                throw new ArgumentNullException(nameof(issuesCount), "Property is not nullable for class DtoActivityDate.");

            if (privateScore.IsSet && privateScore.Value == null)
                throw new ArgumentNullException(nameof(privateScore), "Property is not nullable for class DtoActivityDate.");

            if (pullRequestCount.IsSet && pullRequestCount.Value == null)
                throw new ArgumentNullException(nameof(pullRequestCount), "Property is not nullable for class DtoActivityDate.");

            if (pullRequests.IsSet && pullRequests.Value == null)
                throw new ArgumentNullException(nameof(pullRequests), "Property is not nullable for class DtoActivityDate.");

            if (repoCount.IsSet && repoCount.Value == null)
                throw new ArgumentNullException(nameof(repoCount), "Property is not nullable for class DtoActivityDate.");

            if (repos.IsSet && repos.Value == null)
                throw new ArgumentNullException(nameof(repos), "Property is not nullable for class DtoActivityDate.");

            return new DtoActivityDate(codeReviewCount, codeReviews, commitCount, commits, groupCount, groups, issues, issuesCount, privateScore, pullRequestCount, pullRequests, repoCount, repos);
        }

        /// <summary>
        /// Serializes a <see cref="DtoActivityDate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoActivityDate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoActivityDate dtoActivityDate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoActivityDate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoActivityDate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoActivityDate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoActivityDate dtoActivityDate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoActivityDate.CodeReviewsOption.IsSet && dtoActivityDate.CodeReviews == null)
                throw new ArgumentNullException(nameof(dtoActivityDate.CodeReviews), "Property is required for class DtoActivityDate.");

            if (dtoActivityDate.CommitsOption.IsSet && dtoActivityDate.Commits == null)
                throw new ArgumentNullException(nameof(dtoActivityDate.Commits), "Property is required for class DtoActivityDate.");

            if (dtoActivityDate.GroupsOption.IsSet && dtoActivityDate.Groups == null)
                throw new ArgumentNullException(nameof(dtoActivityDate.Groups), "Property is required for class DtoActivityDate.");

            if (dtoActivityDate.IssuesOption.IsSet && dtoActivityDate.Issues == null)
                throw new ArgumentNullException(nameof(dtoActivityDate.Issues), "Property is required for class DtoActivityDate.");

            if (dtoActivityDate.PullRequestsOption.IsSet && dtoActivityDate.PullRequests == null)
                throw new ArgumentNullException(nameof(dtoActivityDate.PullRequests), "Property is required for class DtoActivityDate.");

            if (dtoActivityDate.ReposOption.IsSet && dtoActivityDate.Repos == null)
                throw new ArgumentNullException(nameof(dtoActivityDate.Repos), "Property is required for class DtoActivityDate.");

            if (dtoActivityDate.CodeReviewCountOption.IsSet)
                writer.WriteNumber("code_review_count", dtoActivityDate.CodeReviewCountOption.Value!.Value);

            if (dtoActivityDate.CodeReviewsOption.IsSet)
            {
                writer.WritePropertyName("code_reviews");
                JsonSerializer.Serialize(writer, dtoActivityDate.CodeReviews, jsonSerializerOptions);
            }
            if (dtoActivityDate.CommitCountOption.IsSet)
                writer.WriteNumber("commit_count", dtoActivityDate.CommitCountOption.Value!.Value);

            if (dtoActivityDate.CommitsOption.IsSet)
            {
                writer.WritePropertyName("commits");
                JsonSerializer.Serialize(writer, dtoActivityDate.Commits, jsonSerializerOptions);
            }
            if (dtoActivityDate.GroupCountOption.IsSet)
                writer.WriteNumber("group_count", dtoActivityDate.GroupCountOption.Value!.Value);

            if (dtoActivityDate.GroupsOption.IsSet)
            {
                writer.WritePropertyName("groups");
                JsonSerializer.Serialize(writer, dtoActivityDate.Groups, jsonSerializerOptions);
            }
            if (dtoActivityDate.IssuesOption.IsSet)
            {
                writer.WritePropertyName("issues");
                JsonSerializer.Serialize(writer, dtoActivityDate.Issues, jsonSerializerOptions);
            }
            if (dtoActivityDate.IssuesCountOption.IsSet)
                writer.WriteNumber("issues_count", dtoActivityDate.IssuesCountOption.Value!.Value);

            if (dtoActivityDate.PrivateScoreOption.IsSet)
                writer.WriteNumber("private_score", dtoActivityDate.PrivateScoreOption.Value!.Value);

            if (dtoActivityDate.PullRequestCountOption.IsSet)
                writer.WriteNumber("pull_request_count", dtoActivityDate.PullRequestCountOption.Value!.Value);

            if (dtoActivityDate.PullRequestsOption.IsSet)
            {
                writer.WritePropertyName("pull_requests");
                JsonSerializer.Serialize(writer, dtoActivityDate.PullRequests, jsonSerializerOptions);
            }
            if (dtoActivityDate.RepoCountOption.IsSet)
                writer.WriteNumber("repo_count", dtoActivityDate.RepoCountOption.Value!.Value);

            if (dtoActivityDate.ReposOption.IsSet)
            {
                writer.WritePropertyName("repos");
                JsonSerializer.Serialize(writer, dtoActivityDate.Repos, jsonSerializerOptions);
            }
        }
    }
}
