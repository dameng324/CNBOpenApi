// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// WebRepoContribSimply
    /// </summary>
    public partial class WebRepoContribSimply : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebRepoContribSimply" /> class.
        /// </summary>
        /// <param name="meta">meta</param>
        /// <param name="top100Contrib">top100Contrib</param>
        /// <param name="total">total</param>
        [JsonConstructor]
        public WebRepoContribSimply(Option<WebMeta?> meta = default, Option<List<WebUserContributorSimply>?> top100Contrib = default, Option<int?> total = default)
        {
            MetaOption = meta;
            Top100ContribOption = top100Contrib;
            TotalOption = total;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Meta
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebMeta?> MetaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [JsonPropertyName("meta")]
        public WebMeta? Meta { get { return this.MetaOption; } set { this.MetaOption = new(value); } }

        /// <summary>
        /// Used to track the state of Top100Contrib
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebUserContributorSimply>?> Top100ContribOption { get; private set; }

        /// <summary>
        /// Gets or Sets Top100Contrib
        /// </summary>
        [JsonPropertyName("top_100_contrib")]
        public List<WebUserContributorSimply>? Top100Contrib { get { return this.Top100ContribOption; } set { this.Top100ContribOption = new(value); } }

        /// <summary>
        /// Used to track the state of Total
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalOption { get; private set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [JsonPropertyName("total")]
        public int? Total { get { return this.TotalOption; } set { this.TotalOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebRepoContribSimply {\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Top100Contrib: ").Append(Top100Contrib).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebRepoContribSimply" />
    /// </summary>
    public class WebRepoContribSimplyJsonConverter : JsonConverter<WebRepoContribSimply>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebRepoContribSimply" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebRepoContribSimply Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<WebMeta?> meta = default;
            Option<List<WebUserContributorSimply>?> top100Contrib = default;
            Option<int?> total = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "meta":
                            meta = new Option<WebMeta?>(JsonSerializer.Deserialize<WebMeta>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "top_100_contrib":
                            top100Contrib = new Option<List<WebUserContributorSimply>?>(JsonSerializer.Deserialize<List<WebUserContributorSimply>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "total":
                            total = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (meta.IsSet && meta.Value == null)
                throw new ArgumentNullException(nameof(meta), "Property is not nullable for class WebRepoContribSimply.");

            if (top100Contrib.IsSet && top100Contrib.Value == null)
                throw new ArgumentNullException(nameof(top100Contrib), "Property is not nullable for class WebRepoContribSimply.");

            if (total.IsSet && total.Value == null)
                throw new ArgumentNullException(nameof(total), "Property is not nullable for class WebRepoContribSimply.");

            return new WebRepoContribSimply(meta, top100Contrib, total);
        }

        /// <summary>
        /// Serializes a <see cref="WebRepoContribSimply" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webRepoContribSimply"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebRepoContribSimply webRepoContribSimply, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webRepoContribSimply, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebRepoContribSimply" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webRepoContribSimply"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebRepoContribSimply webRepoContribSimply, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webRepoContribSimply.MetaOption.IsSet && webRepoContribSimply.Meta == null)
                throw new ArgumentNullException(nameof(webRepoContribSimply.Meta), "Property is required for class WebRepoContribSimply.");

            if (webRepoContribSimply.Top100ContribOption.IsSet && webRepoContribSimply.Top100Contrib == null)
                throw new ArgumentNullException(nameof(webRepoContribSimply.Top100Contrib), "Property is required for class WebRepoContribSimply.");

            if (webRepoContribSimply.MetaOption.IsSet)
            {
                writer.WritePropertyName("meta");
                JsonSerializer.Serialize(writer, webRepoContribSimply.Meta, jsonSerializerOptions);
            }
            if (webRepoContribSimply.Top100ContribOption.IsSet)
            {
                writer.WritePropertyName("top_100_contrib");
                JsonSerializer.Serialize(writer, webRepoContribSimply.Top100Contrib, jsonSerializerOptions);
            }
            if (webRepoContribSimply.TotalOption.IsSet)
                writer.WriteNumber("total", webRepoContribSimply.TotalOption.Value!.Value);
        }
    }
}
