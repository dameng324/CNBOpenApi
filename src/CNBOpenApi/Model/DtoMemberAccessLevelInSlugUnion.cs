// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CNBOpenApi.Client;

namespace CNBOpenApi.Model
{
    /// <summary>
    /// DtoMemberAccessLevelInSlugUnion
    /// </summary>
    public partial class DtoMemberAccessLevelInSlugUnion : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoMemberAccessLevelInSlugUnion" /> class.
        /// </summary>
        /// <param name="accessLevel">accessLevel</param>
        /// <param name="inherit">inherit</param>
        /// <param name="readPrivilege">readPrivilege</param>
        /// <param name="writePrivilege">writePrivilege</param>
        [JsonConstructor]
        public DtoMemberAccessLevelInSlugUnion(Option<ConstantAccessRole?> accessLevel = default, Option<bool?> inherit = default, Option<bool?> readPrivilege = default, Option<bool?> writePrivilege = default)
        {
            AccessLevelOption = accessLevel;
            InheritOption = inherit;
            ReadPrivilegeOption = readPrivilege;
            WritePrivilegeOption = writePrivilege;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AccessLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConstantAccessRole?> AccessLevelOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccessLevel
        /// </summary>
        [JsonPropertyName("access_level")]
        public ConstantAccessRole? AccessLevel { get { return this.AccessLevelOption; } set { this.AccessLevelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Inherit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> InheritOption { get; private set; }

        /// <summary>
        /// Gets or Sets Inherit
        /// </summary>
        [JsonPropertyName("inherit")]
        public bool? Inherit { get { return this.InheritOption; } set { this.InheritOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReadPrivilege
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ReadPrivilegeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReadPrivilege
        /// </summary>
        [JsonPropertyName("read_privilege")]
        public bool? ReadPrivilege { get { return this.ReadPrivilegeOption; } set { this.ReadPrivilegeOption = new(value); } }

        /// <summary>
        /// Used to track the state of WritePrivilege
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> WritePrivilegeOption { get; private set; }

        /// <summary>
        /// Gets or Sets WritePrivilege
        /// </summary>
        [JsonPropertyName("write_privilege")]
        public bool? WritePrivilege { get { return this.WritePrivilegeOption; } set { this.WritePrivilegeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoMemberAccessLevelInSlugUnion {\n");
            sb.Append("  AccessLevel: ").Append(AccessLevel).Append("\n");
            sb.Append("  Inherit: ").Append(Inherit).Append("\n");
            sb.Append("  ReadPrivilege: ").Append(ReadPrivilege).Append("\n");
            sb.Append("  WritePrivilege: ").Append(WritePrivilege).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoMemberAccessLevelInSlugUnion" />
    /// </summary>
    public class DtoMemberAccessLevelInSlugUnionJsonConverter : JsonConverter<DtoMemberAccessLevelInSlugUnion>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoMemberAccessLevelInSlugUnion" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoMemberAccessLevelInSlugUnion Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ConstantAccessRole?> accessLevel = default;
            Option<bool?> inherit = default;
            Option<bool?> readPrivilege = default;
            Option<bool?> writePrivilege = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "access_level":
                            string? accessLevelRawValue = utf8JsonReader.GetString();
                            if (accessLevelRawValue != null)
                                accessLevel = new Option<ConstantAccessRole?>(ConstantAccessRoleValueConverter.FromStringOrDefault(accessLevelRawValue));
                            break;
                        case "inherit":
                            inherit = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "read_privilege":
                            readPrivilege = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "write_privilege":
                            writePrivilege = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (accessLevel.IsSet && accessLevel.Value == null)
                throw new ArgumentNullException(nameof(accessLevel), "Property is not nullable for class DtoMemberAccessLevelInSlugUnion.");

            if (inherit.IsSet && inherit.Value == null)
                throw new ArgumentNullException(nameof(inherit), "Property is not nullable for class DtoMemberAccessLevelInSlugUnion.");

            if (readPrivilege.IsSet && readPrivilege.Value == null)
                throw new ArgumentNullException(nameof(readPrivilege), "Property is not nullable for class DtoMemberAccessLevelInSlugUnion.");

            if (writePrivilege.IsSet && writePrivilege.Value == null)
                throw new ArgumentNullException(nameof(writePrivilege), "Property is not nullable for class DtoMemberAccessLevelInSlugUnion.");

            return new DtoMemberAccessLevelInSlugUnion(accessLevel, inherit, readPrivilege, writePrivilege);
        }

        /// <summary>
        /// Serializes a <see cref="DtoMemberAccessLevelInSlugUnion" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoMemberAccessLevelInSlugUnion"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoMemberAccessLevelInSlugUnion dtoMemberAccessLevelInSlugUnion, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoMemberAccessLevelInSlugUnion, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoMemberAccessLevelInSlugUnion" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoMemberAccessLevelInSlugUnion"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoMemberAccessLevelInSlugUnion dtoMemberAccessLevelInSlugUnion, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoMemberAccessLevelInSlugUnion.AccessLevelOption.IsSet)
            {
                var accessLevelRawValue = ConstantAccessRoleValueConverter.ToJsonValue(dtoMemberAccessLevelInSlugUnion.AccessLevel!.Value);
                writer.WriteNumber("access_level", accessLevelRawValue);
            }
            if (dtoMemberAccessLevelInSlugUnion.InheritOption.IsSet)
                writer.WriteBoolean("inherit", dtoMemberAccessLevelInSlugUnion.InheritOption.Value!.Value);

            if (dtoMemberAccessLevelInSlugUnion.ReadPrivilegeOption.IsSet)
                writer.WriteBoolean("read_privilege", dtoMemberAccessLevelInSlugUnion.ReadPrivilegeOption.Value!.Value);

            if (dtoMemberAccessLevelInSlugUnion.WritePrivilegeOption.IsSet)
                writer.WriteBoolean("write_privilege", dtoMemberAccessLevelInSlugUnion.WritePrivilegeOption.Value!.Value);
        }
    }
}
