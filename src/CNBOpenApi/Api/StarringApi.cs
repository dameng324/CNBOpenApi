// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CNBOpenApi.Client;
using CNBOpenApi.Model;
using System.Diagnostics.CodeAnalysis;

namespace CNBOpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IStarringApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        StarringApiEvents Events { get; }

        /// <summary>
        /// 获取指定用户的 star 仓库列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">UserName</param>
        /// <param name="search">过滤仓库 (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="orderBy">排序类型，默认last_updated_at (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserStaredReposApiResponse"/>&gt;</returns>
        Task<IGetUserStaredReposApiResponse> GetUserStaredReposAsync(string username, Option<string> search = default, Option<int> page = default, Option<int> pageSize = default, Option<bool> desc = default, Option<string> orderBy = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定用户的 star 仓库列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </remarks>
        /// <param name="username">UserName</param>
        /// <param name="search">过滤仓库 (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="orderBy">排序类型，默认last_updated_at (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserStaredReposApiResponse"/>?&gt;</returns>
        Task<IGetUserStaredReposApiResponse?> GetUserStaredReposOrDefaultAsync(string username, Option<string> search = default, Option<int> page = default, Option<int> pageSize = default, Option<bool> desc = default, Option<string> orderBy = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定仓库的star用户列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-basic-info:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="filterType">我关注的</param>
        /// <param name="page">page</param>
        /// <param name="pageSize">page</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListStarUsersApiResponse"/>&gt;</returns>
        Task<IListStarUsersApiResponse> ListStarUsersAsync(string repo, string filterType, int page, int pageSize, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定仓库的star用户列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-basic-info:r
        /// </remarks>
        /// <param name="repo">slug</param>
        /// <param name="filterType">我关注的</param>
        /// <param name="page">page</param>
        /// <param name="pageSize">page</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListStarUsersApiResponse"/>?&gt;</returns>
        Task<IListStarUsersApiResponse?> ListStarUsersOrDefaultAsync(string repo, string filterType, int page, int pageSize, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetUserStaredReposApiResponse"/>
    /// </summary>
    public interface IGetUserStaredReposApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoRepos4User>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListStarUsersApiResponse"/>
    /// </summary>
    public interface IListStarUsersApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.DtoRepoStarUsers?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class StarringApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserStaredRepos;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserStaredRepos;

        internal void ExecuteOnGetUserStaredRepos(StarringApi.GetUserStaredReposApiResponse apiResponse)
        {
            OnGetUserStaredRepos?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserStaredRepos(Exception exception)
        {
            OnErrorGetUserStaredRepos?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListStarUsers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListStarUsers;

        internal void ExecuteOnListStarUsers(StarringApi.ListStarUsersApiResponse apiResponse)
        {
            OnListStarUsers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListStarUsers(Exception exception)
        {
            OnErrorListStarUsers?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class StarringApi : IStarringApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<StarringApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public StarringApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="StarringApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StarringApi(ILogger<StarringApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, StarringApiEvents starringApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<StarringApi>();
            HttpClient = httpClient;
            Events = starringApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatGetUserStaredRepos(ref string username, ref Option<string> search, ref Option<int> page, ref Option<int> pageSize, ref Option<bool> desc, ref Option<string> orderBy);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="username"></param>
        /// <param name="search"></param>
        /// <param name="orderBy"></param>
        /// <returns></returns>
        private void ValidateGetUserStaredRepos(string username, Option<string> search, Option<string> orderBy)
        {
            if (username == null)
                throw new ArgumentNullException(nameof(username));

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));

            if (orderBy.IsSet && orderBy.Value == null)
                throw new ArgumentNullException(nameof(orderBy));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="username"></param>
        /// <param name="search"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="desc"></param>
        /// <param name="orderBy"></param>
        private void AfterGetUserStaredReposDefaultImplementation(IGetUserStaredReposApiResponse apiResponseLocalVar, string username, Option<string> search, Option<int> page, Option<int> pageSize, Option<bool> desc, Option<string> orderBy)
        {
            bool suppressDefaultLog = false;
            AfterGetUserStaredRepos(ref suppressDefaultLog, apiResponseLocalVar, username, search, page, pageSize, desc, orderBy);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="username"></param>
        /// <param name="search"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="desc"></param>
        /// <param name="orderBy"></param>
        partial void AfterGetUserStaredRepos(ref bool suppressDefaultLog, IGetUserStaredReposApiResponse apiResponseLocalVar, string username, Option<string> search, Option<int> page, Option<int> pageSize, Option<bool> desc, Option<string> orderBy);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="username"></param>
        /// <param name="search"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="desc"></param>
        /// <param name="orderBy"></param>
        private void OnErrorGetUserStaredReposDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string username, Option<string> search, Option<int> page, Option<int> pageSize, Option<bool> desc, Option<string> orderBy)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUserStaredRepos(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, username, search, page, pageSize, desc, orderBy);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="username"></param>
        /// <param name="search"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="desc"></param>
        /// <param name="orderBy"></param>
        partial void OnErrorGetUserStaredRepos(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string username, Option<string> search, Option<int> page, Option<int> pageSize, Option<bool> desc, Option<string> orderBy);

        /// <summary>
        /// 获取指定用户的 star 仓库列表 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </summary>
        /// <param name="username">UserName</param>
        /// <param name="search">过滤仓库 (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="orderBy">排序类型，默认last_updated_at (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserStaredReposApiResponse"/>&gt;</returns>
        public async Task<IGetUserStaredReposApiResponse?> GetUserStaredReposOrDefaultAsync(string username, Option<string> search = default, Option<int> page = default, Option<int> pageSize = default, Option<bool> desc = default, Option<string> orderBy = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserStaredReposAsync(username, search, page, pageSize, desc, orderBy, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定用户的 star 仓库列表 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">UserName</param>
        /// <param name="search">过滤仓库 (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="orderBy">排序类型，默认last_updated_at (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserStaredReposApiResponse"/>&gt;</returns>
        public async Task<IGetUserStaredReposApiResponse> GetUserStaredReposAsync(string username, Option<string> search = default, Option<int> page = default, Option<int> pageSize = default, Option<bool> desc = default, Option<string> orderBy = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetUserStaredRepos(username, search, orderBy);

                FormatGetUserStaredRepos(ref username, ref search, ref page, ref pageSize, ref desc, ref orderBy);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/users/{username}/stared-repos"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/users/{username}/stared-repos");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (desc.IsSet)
                        parseQueryStringLocalVar["desc"] = ClientUtils.ParameterToString(desc.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["order_by"] = ClientUtils.ParameterToString(orderBy.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserStaredReposApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserStaredReposApiResponse>();

                        GetUserStaredReposApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/{username}/stared-repos", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserStaredReposDefaultImplementation(apiResponseLocalVar, username, search, page, pageSize, desc, orderBy);

                        Events.ExecuteOnGetUserStaredRepos(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserStaredReposDefaultImplementation(e, "/users/{username}/stared-repos", uriBuilderLocalVar.Path, username, search, page, pageSize, desc, orderBy);
                Events.ExecuteOnErrorGetUserStaredRepos(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserStaredReposApiResponse"/>
        /// </summary>
        public partial class GetUserStaredReposApiResponse : CNBOpenApi.Client.ApiResponse, IGetUserStaredReposApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserStaredReposApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserStaredReposApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserStaredReposApiResponse(ILogger<GetUserStaredReposApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoRepos4User>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoRepos4User>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoRepos4User>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListStarUsers(ref string repo, ref string filterType, ref int page, ref int pageSize);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="filterType"></param>
        /// <returns></returns>
        private void ValidateListStarUsers(string repo, string filterType)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (filterType == null)
                throw new ArgumentNullException(nameof(filterType));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="filterType"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void AfterListStarUsersDefaultImplementation(IListStarUsersApiResponse apiResponseLocalVar, string repo, string filterType, int page, int pageSize)
        {
            bool suppressDefaultLog = false;
            AfterListStarUsers(ref suppressDefaultLog, apiResponseLocalVar, repo, filterType, page, pageSize);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="filterType"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void AfterListStarUsers(ref bool suppressDefaultLog, IListStarUsersApiResponse apiResponseLocalVar, string repo, string filterType, int page, int pageSize);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="filterType"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void OnErrorListStarUsersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string filterType, int page, int pageSize)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListStarUsers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, filterType, page, pageSize);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="filterType"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void OnErrorListStarUsers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string filterType, int page, int pageSize);

        /// <summary>
        /// 获取指定仓库的star用户列表 访问令牌调用此接口需包含以下权限  repo-basic-info:r
        /// </summary>
        /// <param name="repo">slug</param>
        /// <param name="filterType">我关注的</param>
        /// <param name="page">page</param>
        /// <param name="pageSize">page</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListStarUsersApiResponse"/>&gt;</returns>
        public async Task<IListStarUsersApiResponse?> ListStarUsersOrDefaultAsync(string repo, string filterType, int page, int pageSize, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListStarUsersAsync(repo, filterType, page, pageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定仓库的star用户列表 访问令牌调用此接口需包含以下权限  repo-basic-info:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="filterType">我关注的</param>
        /// <param name="page">page</param>
        /// <param name="pageSize">page</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListStarUsersApiResponse"/>&gt;</returns>
        public async Task<IListStarUsersApiResponse> ListStarUsersAsync(string repo, string filterType, int page, int pageSize, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListStarUsers(repo, filterType);

                FormatListStarUsers(ref repo, ref filterType, ref page, ref pageSize);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/stars"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/stars");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["filter_type"] = ClientUtils.ParameterToString(filterType);
                    parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page);
                    parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListStarUsersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListStarUsersApiResponse>();

                        ListStarUsersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/stars", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListStarUsersDefaultImplementation(apiResponseLocalVar, repo, filterType, page, pageSize);

                        Events.ExecuteOnListStarUsers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListStarUsersDefaultImplementation(e, "/{repo}/-/stars", uriBuilderLocalVar.Path, repo, filterType, page, pageSize);
                Events.ExecuteOnErrorListStarUsers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListStarUsersApiResponse"/>
        /// </summary>
        public partial class ListStarUsersApiResponse : CNBOpenApi.Client.ApiResponse, IListStarUsersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListStarUsersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListStarUsersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListStarUsersApiResponse(ILogger<ListStarUsersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DtoRepoStarUsers? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DtoRepoStarUsers>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.DtoRepoStarUsers? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
