// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CNBOpenApi.Client;
using CNBOpenApi.Model;
using System.Diagnostics.CodeAnalysis;

namespace CNBOpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IContributorsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ContributorsApiEvents Events { get; }

        /// <summary>
        /// 获取指定组织或仓库内, 访问成员在当前层级内的权限信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="includeInherit">是否包含继承的权限 (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMemberAccessLevelOfGroupApiResponse"/>&gt;</returns>
        Task<IGetMemberAccessLevelOfGroupApiResponse> GetMemberAccessLevelOfGroupAsync(string group, Option<bool> includeInherit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织或仓库内, 访问成员在当前层级内的权限信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </remarks>
        /// <param name="group">slug</param>
        /// <param name="includeInherit">是否包含继承的权限 (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMemberAccessLevelOfGroupApiResponse"/>?&gt;</returns>
        Task<IGetMemberAccessLevelOfGroupApiResponse?> GetMemberAccessLevelOfGroupOrDefaultAsync(string group, Option<bool> includeInherit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织或仓库内, 访问成员在当前层级内的权限信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="includeInherit">是否包含继承的权限 (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMemberAccessLevelOfRepoApiResponse"/>&gt;</returns>
        Task<IGetMemberAccessLevelOfRepoApiResponse> GetMemberAccessLevelOfRepoAsync(string repo, Option<bool> includeInherit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织或仓库内, 访问成员在当前层级内的权限信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <param name="repo">slug</param>
        /// <param name="includeInherit">是否包含继承的权限 (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMemberAccessLevelOfRepoApiResponse"/>?&gt;</returns>
        Task<IGetMemberAccessLevelOfRepoApiResponse?> GetMemberAccessLevelOfRepoOrDefaultAsync(string repo, Option<bool> includeInherit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织或仓库内指定成员的权限信息, 结果按组织层级来展示, 包含上层组织的权限继承信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="username">username</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMemberAccessLevelOfGroupApiResponse"/>&gt;</returns>
        Task<IListMemberAccessLevelOfGroupApiResponse> ListMemberAccessLevelOfGroupAsync(string group, string username, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织或仓库内指定成员的权限信息, 结果按组织层级来展示, 包含上层组织的权限继承信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </remarks>
        /// <param name="group">slug</param>
        /// <param name="username">username</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMemberAccessLevelOfGroupApiResponse"/>?&gt;</returns>
        Task<IListMemberAccessLevelOfGroupApiResponse?> ListMemberAccessLevelOfGroupOrDefaultAsync(string group, string username, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织或仓库内指定成员的权限信息, 结果按组织层级来展示, 包含上层组织的权限继承信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMemberAccessLevelOfRepoApiResponse"/>&gt;</returns>
        Task<IListMemberAccessLevelOfRepoApiResponse> ListMemberAccessLevelOfRepoAsync(string repo, string username, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织或仓库内指定成员的权限信息, 结果按组织层级来展示, 包含上层组织的权限继承信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMemberAccessLevelOfRepoApiResponse"/>?&gt;</returns>
        Task<IListMemberAccessLevelOfRepoApiResponse?> ListMemberAccessLevelOfRepoOrDefaultAsync(string repo, string username, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetMemberAccessLevelOfGroupApiResponse"/>
    /// </summary>
    public interface IGetMemberAccessLevelOfGroupApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.DtoMemberAccessLevelInSlugUnion?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetMemberAccessLevelOfRepoApiResponse"/>
    /// </summary>
    public interface IGetMemberAccessLevelOfRepoApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.DtoMemberAccessLevelInSlugUnion?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListMemberAccessLevelOfGroupApiResponse"/>
    /// </summary>
    public interface IListMemberAccessLevelOfGroupApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoMemberAccessLevel>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListMemberAccessLevelOfRepoApiResponse"/>
    /// </summary>
    public interface IListMemberAccessLevelOfRepoApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoMemberAccessLevel>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ContributorsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMemberAccessLevelOfGroup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMemberAccessLevelOfGroup;

        internal void ExecuteOnGetMemberAccessLevelOfGroup(ContributorsApi.GetMemberAccessLevelOfGroupApiResponse apiResponse)
        {
            OnGetMemberAccessLevelOfGroup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMemberAccessLevelOfGroup(Exception exception)
        {
            OnErrorGetMemberAccessLevelOfGroup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMemberAccessLevelOfRepo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMemberAccessLevelOfRepo;

        internal void ExecuteOnGetMemberAccessLevelOfRepo(ContributorsApi.GetMemberAccessLevelOfRepoApiResponse apiResponse)
        {
            OnGetMemberAccessLevelOfRepo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMemberAccessLevelOfRepo(Exception exception)
        {
            OnErrorGetMemberAccessLevelOfRepo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListMemberAccessLevelOfGroup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListMemberAccessLevelOfGroup;

        internal void ExecuteOnListMemberAccessLevelOfGroup(ContributorsApi.ListMemberAccessLevelOfGroupApiResponse apiResponse)
        {
            OnListMemberAccessLevelOfGroup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListMemberAccessLevelOfGroup(Exception exception)
        {
            OnErrorListMemberAccessLevelOfGroup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListMemberAccessLevelOfRepo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListMemberAccessLevelOfRepo;

        internal void ExecuteOnListMemberAccessLevelOfRepo(ContributorsApi.ListMemberAccessLevelOfRepoApiResponse apiResponse)
        {
            OnListMemberAccessLevelOfRepo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListMemberAccessLevelOfRepo(Exception exception)
        {
            OnErrorListMemberAccessLevelOfRepo?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ContributorsApi : IContributorsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ContributorsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ContributorsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContributorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContributorsApi(ILogger<ContributorsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ContributorsApiEvents contributorsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ContributorsApi>();
            HttpClient = httpClient;
            Events = contributorsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatGetMemberAccessLevelOfGroup(ref string group, ref Option<bool> includeInherit);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="group"></param>
        /// <returns></returns>
        private void ValidateGetMemberAccessLevelOfGroup(string group)
        {
            if (group == null)
                throw new ArgumentNullException(nameof(group));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="includeInherit"></param>
        private void AfterGetMemberAccessLevelOfGroupDefaultImplementation(IGetMemberAccessLevelOfGroupApiResponse apiResponseLocalVar, string group, Option<bool> includeInherit)
        {
            bool suppressDefaultLog = false;
            AfterGetMemberAccessLevelOfGroup(ref suppressDefaultLog, apiResponseLocalVar, group, includeInherit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="includeInherit"></param>
        partial void AfterGetMemberAccessLevelOfGroup(ref bool suppressDefaultLog, IGetMemberAccessLevelOfGroupApiResponse apiResponseLocalVar, string group, Option<bool> includeInherit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="includeInherit"></param>
        private void OnErrorGetMemberAccessLevelOfGroupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, Option<bool> includeInherit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetMemberAccessLevelOfGroup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, group, includeInherit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="includeInherit"></param>
        partial void OnErrorGetMemberAccessLevelOfGroup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, Option<bool> includeInherit);

        /// <summary>
        /// 获取指定组织或仓库内, 访问成员在当前层级内的权限信息 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </summary>
        /// <param name="group">slug</param>
        /// <param name="includeInherit">是否包含继承的权限 (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMemberAccessLevelOfGroupApiResponse"/>&gt;</returns>
        public async Task<IGetMemberAccessLevelOfGroupApiResponse?> GetMemberAccessLevelOfGroupOrDefaultAsync(string group, Option<bool> includeInherit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMemberAccessLevelOfGroupAsync(group, includeInherit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定组织或仓库内, 访问成员在当前层级内的权限信息 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="includeInherit">是否包含继承的权限 (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMemberAccessLevelOfGroupApiResponse"/>&gt;</returns>
        public async Task<IGetMemberAccessLevelOfGroupApiResponse> GetMemberAccessLevelOfGroupAsync(string group, Option<bool> includeInherit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetMemberAccessLevelOfGroup(group);

                FormatGetMemberAccessLevelOfGroup(ref group, ref includeInherit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{group}/-/members/access-level"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{group}/-/members/access-level");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bgroup%7D", Uri.EscapeDataString(group.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (includeInherit.IsSet)
                        parseQueryStringLocalVar["include_inherit"] = ClientUtils.ParameterToString(includeInherit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMemberAccessLevelOfGroupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMemberAccessLevelOfGroupApiResponse>();

                        GetMemberAccessLevelOfGroupApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{group}/-/members/access-level", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMemberAccessLevelOfGroupDefaultImplementation(apiResponseLocalVar, group, includeInherit);

                        Events.ExecuteOnGetMemberAccessLevelOfGroup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMemberAccessLevelOfGroupDefaultImplementation(e, "/{group}/-/members/access-level", uriBuilderLocalVar.Path, group, includeInherit);
                Events.ExecuteOnErrorGetMemberAccessLevelOfGroup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMemberAccessLevelOfGroupApiResponse"/>
        /// </summary>
        public partial class GetMemberAccessLevelOfGroupApiResponse : CNBOpenApi.Client.ApiResponse, IGetMemberAccessLevelOfGroupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMemberAccessLevelOfGroupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMemberAccessLevelOfGroupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMemberAccessLevelOfGroupApiResponse(ILogger<GetMemberAccessLevelOfGroupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DtoMemberAccessLevelInSlugUnion? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DtoMemberAccessLevelInSlugUnion>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.DtoMemberAccessLevelInSlugUnion? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetMemberAccessLevelOfRepo(ref string repo, ref Option<bool> includeInherit);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <returns></returns>
        private void ValidateGetMemberAccessLevelOfRepo(string repo)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="includeInherit"></param>
        private void AfterGetMemberAccessLevelOfRepoDefaultImplementation(IGetMemberAccessLevelOfRepoApiResponse apiResponseLocalVar, string repo, Option<bool> includeInherit)
        {
            bool suppressDefaultLog = false;
            AfterGetMemberAccessLevelOfRepo(ref suppressDefaultLog, apiResponseLocalVar, repo, includeInherit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="includeInherit"></param>
        partial void AfterGetMemberAccessLevelOfRepo(ref bool suppressDefaultLog, IGetMemberAccessLevelOfRepoApiResponse apiResponseLocalVar, string repo, Option<bool> includeInherit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="includeInherit"></param>
        private void OnErrorGetMemberAccessLevelOfRepoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<bool> includeInherit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetMemberAccessLevelOfRepo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, includeInherit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="includeInherit"></param>
        partial void OnErrorGetMemberAccessLevelOfRepo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<bool> includeInherit);

        /// <summary>
        /// 获取指定组织或仓库内, 访问成员在当前层级内的权限信息 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <param name="repo">slug</param>
        /// <param name="includeInherit">是否包含继承的权限 (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMemberAccessLevelOfRepoApiResponse"/>&gt;</returns>
        public async Task<IGetMemberAccessLevelOfRepoApiResponse?> GetMemberAccessLevelOfRepoOrDefaultAsync(string repo, Option<bool> includeInherit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMemberAccessLevelOfRepoAsync(repo, includeInherit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定组织或仓库内, 访问成员在当前层级内的权限信息 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="includeInherit">是否包含继承的权限 (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMemberAccessLevelOfRepoApiResponse"/>&gt;</returns>
        public async Task<IGetMemberAccessLevelOfRepoApiResponse> GetMemberAccessLevelOfRepoAsync(string repo, Option<bool> includeInherit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetMemberAccessLevelOfRepo(repo);

                FormatGetMemberAccessLevelOfRepo(ref repo, ref includeInherit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/members/access-level"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/members/access-level");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (includeInherit.IsSet)
                        parseQueryStringLocalVar["include_inherit"] = ClientUtils.ParameterToString(includeInherit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMemberAccessLevelOfRepoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMemberAccessLevelOfRepoApiResponse>();

                        GetMemberAccessLevelOfRepoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/members/access-level", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMemberAccessLevelOfRepoDefaultImplementation(apiResponseLocalVar, repo, includeInherit);

                        Events.ExecuteOnGetMemberAccessLevelOfRepo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMemberAccessLevelOfRepoDefaultImplementation(e, "/{repo}/-/members/access-level", uriBuilderLocalVar.Path, repo, includeInherit);
                Events.ExecuteOnErrorGetMemberAccessLevelOfRepo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMemberAccessLevelOfRepoApiResponse"/>
        /// </summary>
        public partial class GetMemberAccessLevelOfRepoApiResponse : CNBOpenApi.Client.ApiResponse, IGetMemberAccessLevelOfRepoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMemberAccessLevelOfRepoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMemberAccessLevelOfRepoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMemberAccessLevelOfRepoApiResponse(ILogger<GetMemberAccessLevelOfRepoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DtoMemberAccessLevelInSlugUnion? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DtoMemberAccessLevelInSlugUnion>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.DtoMemberAccessLevelInSlugUnion? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListMemberAccessLevelOfGroup(ref string group, ref string username);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="group"></param>
        /// <param name="username"></param>
        /// <returns></returns>
        private void ValidateListMemberAccessLevelOfGroup(string group, string username)
        {
            if (group == null)
                throw new ArgumentNullException(nameof(group));

            if (username == null)
                throw new ArgumentNullException(nameof(username));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="username"></param>
        private void AfterListMemberAccessLevelOfGroupDefaultImplementation(IListMemberAccessLevelOfGroupApiResponse apiResponseLocalVar, string group, string username)
        {
            bool suppressDefaultLog = false;
            AfterListMemberAccessLevelOfGroup(ref suppressDefaultLog, apiResponseLocalVar, group, username);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="username"></param>
        partial void AfterListMemberAccessLevelOfGroup(ref bool suppressDefaultLog, IListMemberAccessLevelOfGroupApiResponse apiResponseLocalVar, string group, string username);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="username"></param>
        private void OnErrorListMemberAccessLevelOfGroupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, string username)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListMemberAccessLevelOfGroup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, group, username);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="username"></param>
        partial void OnErrorListMemberAccessLevelOfGroup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, string username);

        /// <summary>
        /// 获取指定组织或仓库内指定成员的权限信息, 结果按组织层级来展示, 包含上层组织的权限继承信息 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </summary>
        /// <param name="group">slug</param>
        /// <param name="username">username</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMemberAccessLevelOfGroupApiResponse"/>&gt;</returns>
        public async Task<IListMemberAccessLevelOfGroupApiResponse?> ListMemberAccessLevelOfGroupOrDefaultAsync(string group, string username, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListMemberAccessLevelOfGroupAsync(group, username, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定组织或仓库内指定成员的权限信息, 结果按组织层级来展示, 包含上层组织的权限继承信息 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="username">username</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMemberAccessLevelOfGroupApiResponse"/>&gt;</returns>
        public async Task<IListMemberAccessLevelOfGroupApiResponse> ListMemberAccessLevelOfGroupAsync(string group, string username, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListMemberAccessLevelOfGroup(group, username);

                FormatListMemberAccessLevelOfGroup(ref group, ref username);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{group}/-/members/{username}/access-level"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{group}/-/members/{username}/access-level");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bgroup%7D", Uri.EscapeDataString(group.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListMemberAccessLevelOfGroupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListMemberAccessLevelOfGroupApiResponse>();

                        ListMemberAccessLevelOfGroupApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{group}/-/members/{username}/access-level", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListMemberAccessLevelOfGroupDefaultImplementation(apiResponseLocalVar, group, username);

                        Events.ExecuteOnListMemberAccessLevelOfGroup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListMemberAccessLevelOfGroupDefaultImplementation(e, "/{group}/-/members/{username}/access-level", uriBuilderLocalVar.Path, group, username);
                Events.ExecuteOnErrorListMemberAccessLevelOfGroup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListMemberAccessLevelOfGroupApiResponse"/>
        /// </summary>
        public partial class ListMemberAccessLevelOfGroupApiResponse : CNBOpenApi.Client.ApiResponse, IListMemberAccessLevelOfGroupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListMemberAccessLevelOfGroupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListMemberAccessLevelOfGroupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListMemberAccessLevelOfGroupApiResponse(ILogger<ListMemberAccessLevelOfGroupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoMemberAccessLevel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoMemberAccessLevel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoMemberAccessLevel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListMemberAccessLevelOfRepo(ref string repo, ref string username);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        /// <returns></returns>
        private void ValidateListMemberAccessLevelOfRepo(string repo, string username)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (username == null)
                throw new ArgumentNullException(nameof(username));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        private void AfterListMemberAccessLevelOfRepoDefaultImplementation(IListMemberAccessLevelOfRepoApiResponse apiResponseLocalVar, string repo, string username)
        {
            bool suppressDefaultLog = false;
            AfterListMemberAccessLevelOfRepo(ref suppressDefaultLog, apiResponseLocalVar, repo, username);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        partial void AfterListMemberAccessLevelOfRepo(ref bool suppressDefaultLog, IListMemberAccessLevelOfRepoApiResponse apiResponseLocalVar, string repo, string username);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        private void OnErrorListMemberAccessLevelOfRepoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string username)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListMemberAccessLevelOfRepo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, username);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        partial void OnErrorListMemberAccessLevelOfRepo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string username);

        /// <summary>
        /// 获取指定组织或仓库内指定成员的权限信息, 结果按组织层级来展示, 包含上层组织的权限继承信息 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMemberAccessLevelOfRepoApiResponse"/>&gt;</returns>
        public async Task<IListMemberAccessLevelOfRepoApiResponse?> ListMemberAccessLevelOfRepoOrDefaultAsync(string repo, string username, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListMemberAccessLevelOfRepoAsync(repo, username, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定组织或仓库内指定成员的权限信息, 结果按组织层级来展示, 包含上层组织的权限继承信息 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMemberAccessLevelOfRepoApiResponse"/>&gt;</returns>
        public async Task<IListMemberAccessLevelOfRepoApiResponse> ListMemberAccessLevelOfRepoAsync(string repo, string username, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListMemberAccessLevelOfRepo(repo, username);

                FormatListMemberAccessLevelOfRepo(ref repo, ref username);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/members/{username}/access-level"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/members/{username}/access-level");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListMemberAccessLevelOfRepoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListMemberAccessLevelOfRepoApiResponse>();

                        ListMemberAccessLevelOfRepoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/members/{username}/access-level", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListMemberAccessLevelOfRepoDefaultImplementation(apiResponseLocalVar, repo, username);

                        Events.ExecuteOnListMemberAccessLevelOfRepo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListMemberAccessLevelOfRepoDefaultImplementation(e, "/{repo}/-/members/{username}/access-level", uriBuilderLocalVar.Path, repo, username);
                Events.ExecuteOnErrorListMemberAccessLevelOfRepo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListMemberAccessLevelOfRepoApiResponse"/>
        /// </summary>
        public partial class ListMemberAccessLevelOfRepoApiResponse : CNBOpenApi.Client.ApiResponse, IListMemberAccessLevelOfRepoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListMemberAccessLevelOfRepoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListMemberAccessLevelOfRepoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListMemberAccessLevelOfRepoApiResponse(ILogger<ListMemberAccessLevelOfRepoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoMemberAccessLevel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoMemberAccessLevel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoMemberAccessLevel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
