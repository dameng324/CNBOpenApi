// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CNBOpenApi.Client;
using CNBOpenApi.Model;
using System.Diagnostics.CodeAnalysis;

namespace CNBOpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IArtifactoryApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ArtifactoryApiEvents Events { get; }

        /// <summary>
        /// Delete the specific tag under specific package
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-package-delete:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="name">制品名称</param>
        /// <param name="tag">制品标签</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePackageTagApiResponse"/>&gt;</returns>
        Task<IDeletePackageTagApiResponse> DeletePackageTagAsync(string slug, string type, string name, string tag, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete the specific tag under specific package
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-package-delete:rw
        /// </remarks>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="name">制品名称</param>
        /// <param name="tag">制品标签</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePackageTagApiResponse"/>?&gt;</returns>
        Task<IDeletePackageTagApiResponse?> DeletePackageTagOrDefaultAsync(string slug, string type, string name, string tag, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除制品仓库
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-delete:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registry">registry path</param>
        /// <param name="xCnbIdentityTicket">微信用户需要确认身份，第一次调用不传接口会调用失败并返回一个x-cnb-identity-ticket，第二次调用再传返回的值 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteRegistryApiResponse"/>&gt;</returns>
        Task<IDeleteRegistryApiResponse> DeleteRegistryAsync(string registry, Option<string> xCnbIdentityTicket = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除制品仓库
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-delete:rw
        /// </remarks>
        /// <param name="registry">registry path</param>
        /// <param name="xCnbIdentityTicket">微信用户需要确认身份，第一次调用不传接口会调用失败并返回一个x-cnb-identity-ticket，第二次调用再传返回的值 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteRegistryApiResponse"/>?&gt;</returns>
        Task<IDeleteRegistryApiResponse?> DeleteRegistryOrDefaultAsync(string registry, Option<string> xCnbIdentityTicket = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Download registry quota details
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="page">页码，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页数量 (optional, default to 10)</param>
        /// <param name="ordering">排序类型 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadQuotasByProjectNameApiResponse"/>&gt;</returns>
        Task<IDownloadQuotasByProjectNameApiResponse> DownloadQuotasByProjectNameAsync(string slug, string type, Option<int> page = default, Option<int> pageSize = default, Option<string> ordering = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Download registry quota details
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </remarks>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="page">页码，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页数量 (optional, default to 10)</param>
        /// <param name="ordering">排序类型 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadQuotasByProjectNameApiResponse"/>?&gt;</returns>
        Task<IDownloadQuotasByProjectNameApiResponse?> DownloadQuotasByProjectNameOrDefaultAsync(string slug, string type, Option<int> page = default, Option<int> pageSize = default, Option<string> ordering = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the specific package
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="name">制品名称</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPackageApiResponse"/>&gt;</returns>
        Task<IGetPackageApiResponse> GetPackageAsync(string slug, string type, string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the specific package
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </remarks>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="name">制品名称</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPackageApiResponse"/>?&gt;</returns>
        Task<IGetPackageApiResponse?> GetPackageOrDefaultAsync(string slug, string type, string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the specific tag under specific package
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="name">制品名称</param>
        /// <param name="tag">制品标签</param>
        /// <param name="sha256">摘要，容器制品时必须 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPackageTagDetailApiResponse"/>&gt;</returns>
        Task<IGetPackageTagDetailApiResponse> GetPackageTagDetailAsync(string slug, string type, string name, string tag, Option<string> sha256 = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the specific tag under specific package
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </remarks>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="name">制品名称</param>
        /// <param name="tag">制品标签</param>
        /// <param name="sha256">摘要，容器制品时必须 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPackageTagDetailApiResponse"/>?&gt;</returns>
        Task<IGetPackageTagDetailApiResponse?> GetPackageTagDetailOrDefaultAsync(string slug, string type, string name, string tag, Option<string> sha256 = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get quota of specific registry
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetQuotaByProjectNameApiResponse"/>&gt;</returns>
        Task<IGetQuotaByProjectNameApiResponse> GetQuotaByProjectNameAsync(string slug, string type, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get quota of specific registry
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </remarks>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetQuotaByProjectNameApiResponse"/>?&gt;</returns>
        Task<IGetQuotaByProjectNameApiResponse?> GetQuotaByProjectNameOrDefaultAsync(string slug, string type, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get quotas of packages under one registry
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="page">页码，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页数量 (optional, default to 10)</param>
        /// <param name="ordering">排序类型 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetQuotasByProjectNameApiResponse"/>&gt;</returns>
        Task<IGetQuotasByProjectNameApiResponse> GetQuotasByProjectNameAsync(string slug, string type, Option<int> page = default, Option<int> pageSize = default, Option<string> ordering = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get quotas of packages under one registry
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </remarks>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="page">页码，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页数量 (optional, default to 10)</param>
        /// <param name="ordering">排序类型 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetQuotasByProjectNameApiResponse"/>?&gt;</returns>
        Task<IGetQuotasByProjectNameApiResponse?> GetQuotasByProjectNameOrDefaultAsync(string slug, string type, Option<int> page = default, Option<int> pageSize = default, Option<string> ordering = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Head all packages
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="page">页码，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页数量 (optional, default to 10)</param>
        /// <param name="ordering">排序类型 (optional)</param>
        /// <param name="name">制品名搜索关键词 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IHeadPackagesApiResponse"/>&gt;</returns>
        Task<IHeadPackagesApiResponse> HeadPackagesAsync(string slug, string type, Option<int> page = default, Option<int> pageSize = default, Option<string> ordering = default, Option<string> name = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Head all packages
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </remarks>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="page">页码，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页数量 (optional, default to 10)</param>
        /// <param name="ordering">排序类型 (optional)</param>
        /// <param name="name">制品名搜索关键词 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IHeadPackagesApiResponse"/>?&gt;</returns>
        Task<IHeadPackagesApiResponse?> HeadPackagesOrDefaultAsync(string slug, string type, Option<int> page = default, Option<int> pageSize = default, Option<string> ordering = default, Option<string> name = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all tags under specific package
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="pkgname">制品名称</param>
        /// <param name="page">页码，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="ordering">排序类型 (optional)</param>
        /// <param name="name">搜索关键字 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPackageTagsApiResponse"/>&gt;</returns>
        Task<IListPackageTagsApiResponse> ListPackageTagsAsync(string slug, string type, string pkgname, Option<int> page = default, Option<int> pageSize = default, Option<string> ordering = default, Option<string> name = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all tags under specific package
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </remarks>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="pkgname">制品名称</param>
        /// <param name="page">页码，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="ordering">排序类型 (optional)</param>
        /// <param name="name">搜索关键字 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPackageTagsApiResponse"/>?&gt;</returns>
        Task<IListPackageTagsApiResponse?> ListPackageTagsOrDefaultAsync(string slug, string type, string pkgname, Option<int> page = default, Option<int> pageSize = default, Option<string> ordering = default, Option<string> name = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all packages
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="page">页码，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页数量 (optional, default to 10)</param>
        /// <param name="ordering">排序类型 (optional)</param>
        /// <param name="name">制品名搜索关键词 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPackagesApiResponse"/>&gt;</returns>
        Task<IListPackagesApiResponse> ListPackagesAsync(string slug, string type, Option<int> page = default, Option<int> pageSize = default, Option<string> ordering = default, Option<string> name = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all packages
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </remarks>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="page">页码，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页数量 (optional, default to 10)</param>
        /// <param name="ordering">排序类型 (optional)</param>
        /// <param name="name">制品名搜索关键词 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPackagesApiResponse"/>?&gt;</returns>
        Task<IListPackagesApiResponse?> ListPackagesOrDefaultAsync(string slug, string type, Option<int> page = default, Option<int> pageSize = default, Option<string> ordering = default, Option<string> name = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeletePackageTagApiResponse"/>
    /// </summary>
    public interface IDeletePackageTagApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteRegistryApiResponse"/>
    /// </summary>
    public interface IDeleteRegistryApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDownloadQuotasByProjectNameApiResponse"/>
    /// </summary>
    public interface IDownloadQuotasByProjectNameApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoQuotaRsp>?>, IBadRequest<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetPackageApiResponse"/>
    /// </summary>
    public interface IGetPackageApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.DtoPackageDetail?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPackageTagDetailApiResponse"/>
    /// </summary>
    public interface IGetPackageTagDetailApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.DtoTagDetail?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetQuotaByProjectNameApiResponse"/>
    /// </summary>
    public interface IGetQuotaByProjectNameApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.DtoQuotaRsp?>, IBadRequest<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetQuotasByProjectNameApiResponse"/>
    /// </summary>
    public interface IGetQuotasByProjectNameApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoQuotaRsp>?>, IBadRequest<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IHeadPackagesApiResponse"/>
    /// </summary>
    public interface IHeadPackagesApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IListPackageTagsApiResponse"/>
    /// </summary>
    public interface IListPackageTagsApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.DtoTag?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListPackagesApiResponse"/>
    /// </summary>
    public interface IListPackagesApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoPackage>?>, IBadRequest<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ArtifactoryApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletePackageTag;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletePackageTag;

        internal void ExecuteOnDeletePackageTag(ArtifactoryApi.DeletePackageTagApiResponse apiResponse)
        {
            OnDeletePackageTag?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletePackageTag(Exception exception)
        {
            OnErrorDeletePackageTag?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteRegistry;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteRegistry;

        internal void ExecuteOnDeleteRegistry(ArtifactoryApi.DeleteRegistryApiResponse apiResponse)
        {
            OnDeleteRegistry?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteRegistry(Exception exception)
        {
            OnErrorDeleteRegistry?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDownloadQuotasByProjectName;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDownloadQuotasByProjectName;

        internal void ExecuteOnDownloadQuotasByProjectName(ArtifactoryApi.DownloadQuotasByProjectNameApiResponse apiResponse)
        {
            OnDownloadQuotasByProjectName?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDownloadQuotasByProjectName(Exception exception)
        {
            OnErrorDownloadQuotasByProjectName?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPackage;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPackage;

        internal void ExecuteOnGetPackage(ArtifactoryApi.GetPackageApiResponse apiResponse)
        {
            OnGetPackage?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPackage(Exception exception)
        {
            OnErrorGetPackage?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPackageTagDetail;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPackageTagDetail;

        internal void ExecuteOnGetPackageTagDetail(ArtifactoryApi.GetPackageTagDetailApiResponse apiResponse)
        {
            OnGetPackageTagDetail?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPackageTagDetail(Exception exception)
        {
            OnErrorGetPackageTagDetail?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetQuotaByProjectName;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetQuotaByProjectName;

        internal void ExecuteOnGetQuotaByProjectName(ArtifactoryApi.GetQuotaByProjectNameApiResponse apiResponse)
        {
            OnGetQuotaByProjectName?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetQuotaByProjectName(Exception exception)
        {
            OnErrorGetQuotaByProjectName?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetQuotasByProjectName;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetQuotasByProjectName;

        internal void ExecuteOnGetQuotasByProjectName(ArtifactoryApi.GetQuotasByProjectNameApiResponse apiResponse)
        {
            OnGetQuotasByProjectName?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetQuotasByProjectName(Exception exception)
        {
            OnErrorGetQuotasByProjectName?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnHeadPackages;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorHeadPackages;

        internal void ExecuteOnHeadPackages(ArtifactoryApi.HeadPackagesApiResponse apiResponse)
        {
            OnHeadPackages?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorHeadPackages(Exception exception)
        {
            OnErrorHeadPackages?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListPackageTags;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListPackageTags;

        internal void ExecuteOnListPackageTags(ArtifactoryApi.ListPackageTagsApiResponse apiResponse)
        {
            OnListPackageTags?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListPackageTags(Exception exception)
        {
            OnErrorListPackageTags?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListPackages;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListPackages;

        internal void ExecuteOnListPackages(ArtifactoryApi.ListPackagesApiResponse apiResponse)
        {
            OnListPackages?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListPackages(Exception exception)
        {
            OnErrorListPackages?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ArtifactoryApi : IArtifactoryApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ArtifactoryApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ArtifactoryApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArtifactoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ArtifactoryApi(ILogger<ArtifactoryApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ArtifactoryApiEvents artifactoryApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ArtifactoryApi>();
            HttpClient = httpClient;
            Events = artifactoryApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatDeletePackageTag(ref string slug, ref string type, ref string name, ref string tag);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <returns></returns>
        private void ValidateDeletePackageTag(string slug, string type, string name, string tag)
        {
            if (slug == null)
                throw new ArgumentNullException(nameof(slug));

            if (type == null)
                throw new ArgumentNullException(nameof(type));

            if (name == null)
                throw new ArgumentNullException(nameof(name));

            if (tag == null)
                throw new ArgumentNullException(nameof(tag));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        private void AfterDeletePackageTagDefaultImplementation(IDeletePackageTagApiResponse apiResponseLocalVar, string slug, string type, string name, string tag)
        {
            bool suppressDefaultLog = false;
            AfterDeletePackageTag(ref suppressDefaultLog, apiResponseLocalVar, slug, type, name, tag);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        partial void AfterDeletePackageTag(ref bool suppressDefaultLog, IDeletePackageTagApiResponse apiResponseLocalVar, string slug, string type, string name, string tag);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        private void OnErrorDeletePackageTagDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string slug, string type, string name, string tag)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletePackageTag(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, slug, type, name, tag);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        partial void OnErrorDeletePackageTag(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string slug, string type, string name, string tag);

        /// <summary>
        /// Delete the specific tag under specific package 访问令牌调用此接口需包含以下权限  registry-package-delete:rw
        /// </summary>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="name">制品名称</param>
        /// <param name="tag">制品标签</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePackageTagApiResponse"/>&gt;</returns>
        public async Task<IDeletePackageTagApiResponse?> DeletePackageTagOrDefaultAsync(string slug, string type, string name, string tag, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletePackageTagAsync(slug, type, name, tag, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete the specific tag under specific package 访问令牌调用此接口需包含以下权限  registry-package-delete:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="name">制品名称</param>
        /// <param name="tag">制品标签</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePackageTagApiResponse"/>&gt;</returns>
        public async Task<IDeletePackageTagApiResponse> DeletePackageTagAsync(string slug, string type, string name, string tag, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeletePackageTag(slug, type, name, tag);

                FormatDeletePackageTag(ref slug, ref type, ref name, ref tag);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{slug}/-/packages/{type}/{name}/-/tag/{tag}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{slug}/-/packages/{type}/{name}/-/tag/{tag}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bslug%7D", Uri.EscapeDataString(slug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btype%7D", Uri.EscapeDataString(type.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bname%7D", Uri.EscapeDataString(name.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btag%7D", Uri.EscapeDataString(tag.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletePackageTagApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletePackageTagApiResponse>();

                        DeletePackageTagApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{slug}/-/packages/{type}/{name}/-/tag/{tag}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletePackageTagDefaultImplementation(apiResponseLocalVar, slug, type, name, tag);

                        Events.ExecuteOnDeletePackageTag(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletePackageTagDefaultImplementation(e, "/{slug}/-/packages/{type}/{name}/-/tag/{tag}", uriBuilderLocalVar.Path, slug, type, name, tag);
                Events.ExecuteOnErrorDeletePackageTag(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletePackageTagApiResponse"/>
        /// </summary>
        public partial class DeletePackageTagApiResponse : CNBOpenApi.Client.ApiResponse, IDeletePackageTagApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletePackageTagApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletePackageTagApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletePackageTagApiResponse(ILogger<DeletePackageTagApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteRegistry(ref string registry, ref Option<string> xCnbIdentityTicket);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="registry"></param>
        /// <param name="xCnbIdentityTicket"></param>
        /// <returns></returns>
        private void ValidateDeleteRegistry(string registry, Option<string> xCnbIdentityTicket)
        {
            if (registry == null)
                throw new ArgumentNullException(nameof(registry));

            if (xCnbIdentityTicket.IsSet && xCnbIdentityTicket.Value == null)
                throw new ArgumentNullException(nameof(xCnbIdentityTicket));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="registry"></param>
        /// <param name="xCnbIdentityTicket"></param>
        private void AfterDeleteRegistryDefaultImplementation(IDeleteRegistryApiResponse apiResponseLocalVar, string registry, Option<string> xCnbIdentityTicket)
        {
            bool suppressDefaultLog = false;
            AfterDeleteRegistry(ref suppressDefaultLog, apiResponseLocalVar, registry, xCnbIdentityTicket);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="registry"></param>
        /// <param name="xCnbIdentityTicket"></param>
        partial void AfterDeleteRegistry(ref bool suppressDefaultLog, IDeleteRegistryApiResponse apiResponseLocalVar, string registry, Option<string> xCnbIdentityTicket);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="registry"></param>
        /// <param name="xCnbIdentityTicket"></param>
        private void OnErrorDeleteRegistryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string registry, Option<string> xCnbIdentityTicket)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteRegistry(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, registry, xCnbIdentityTicket);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="registry"></param>
        /// <param name="xCnbIdentityTicket"></param>
        partial void OnErrorDeleteRegistry(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string registry, Option<string> xCnbIdentityTicket);

        /// <summary>
        /// 删除制品仓库 访问令牌调用此接口需包含以下权限  registry-delete:rw
        /// </summary>
        /// <param name="registry">registry path</param>
        /// <param name="xCnbIdentityTicket">微信用户需要确认身份，第一次调用不传接口会调用失败并返回一个x-cnb-identity-ticket，第二次调用再传返回的值 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteRegistryApiResponse"/>&gt;</returns>
        public async Task<IDeleteRegistryApiResponse?> DeleteRegistryOrDefaultAsync(string registry, Option<string> xCnbIdentityTicket = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteRegistryAsync(registry, xCnbIdentityTicket, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 删除制品仓库 访问令牌调用此接口需包含以下权限  registry-delete:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registry">registry path</param>
        /// <param name="xCnbIdentityTicket">微信用户需要确认身份，第一次调用不传接口会调用失败并返回一个x-cnb-identity-ticket，第二次调用再传返回的值 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteRegistryApiResponse"/>&gt;</returns>
        public async Task<IDeleteRegistryApiResponse> DeleteRegistryAsync(string registry, Option<string> xCnbIdentityTicket = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteRegistry(registry, xCnbIdentityTicket);

                FormatDeleteRegistry(ref registry, ref xCnbIdentityTicket);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{registry}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{registry}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bregistry%7D", Uri.EscapeDataString(registry.ToString()));

                    if (xCnbIdentityTicket.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("x-cnb-identity-ticket", ClientUtils.ParameterToString(xCnbIdentityTicket.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteRegistryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteRegistryApiResponse>();

                        DeleteRegistryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{registry}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteRegistryDefaultImplementation(apiResponseLocalVar, registry, xCnbIdentityTicket);

                        Events.ExecuteOnDeleteRegistry(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteRegistryDefaultImplementation(e, "/{registry}", uriBuilderLocalVar.Path, registry, xCnbIdentityTicket);
                Events.ExecuteOnErrorDeleteRegistry(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteRegistryApiResponse"/>
        /// </summary>
        public partial class DeleteRegistryApiResponse : CNBOpenApi.Client.ApiResponse, IDeleteRegistryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteRegistryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteRegistryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteRegistryApiResponse(ILogger<DeleteRegistryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDownloadQuotasByProjectName(ref string slug, ref string type, ref Option<int> page, ref Option<int> pageSize, ref Option<string> ordering);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="ordering"></param>
        /// <returns></returns>
        private void ValidateDownloadQuotasByProjectName(string slug, string type, Option<string> ordering)
        {
            if (slug == null)
                throw new ArgumentNullException(nameof(slug));

            if (type == null)
                throw new ArgumentNullException(nameof(type));

            if (ordering.IsSet && ordering.Value == null)
                throw new ArgumentNullException(nameof(ordering));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="ordering"></param>
        private void AfterDownloadQuotasByProjectNameDefaultImplementation(IDownloadQuotasByProjectNameApiResponse apiResponseLocalVar, string slug, string type, Option<int> page, Option<int> pageSize, Option<string> ordering)
        {
            bool suppressDefaultLog = false;
            AfterDownloadQuotasByProjectName(ref suppressDefaultLog, apiResponseLocalVar, slug, type, page, pageSize, ordering);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="ordering"></param>
        partial void AfterDownloadQuotasByProjectName(ref bool suppressDefaultLog, IDownloadQuotasByProjectNameApiResponse apiResponseLocalVar, string slug, string type, Option<int> page, Option<int> pageSize, Option<string> ordering);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="ordering"></param>
        private void OnErrorDownloadQuotasByProjectNameDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string slug, string type, Option<int> page, Option<int> pageSize, Option<string> ordering)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDownloadQuotasByProjectName(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, slug, type, page, pageSize, ordering);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="ordering"></param>
        partial void OnErrorDownloadQuotasByProjectName(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string slug, string type, Option<int> page, Option<int> pageSize, Option<string> ordering);

        /// <summary>
        /// Download registry quota details 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </summary>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="page">页码，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页数量 (optional, default to 10)</param>
        /// <param name="ordering">排序类型 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadQuotasByProjectNameApiResponse"/>&gt;</returns>
        public async Task<IDownloadQuotasByProjectNameApiResponse?> DownloadQuotasByProjectNameOrDefaultAsync(string slug, string type, Option<int> page = default, Option<int> pageSize = default, Option<string> ordering = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DownloadQuotasByProjectNameAsync(slug, type, page, pageSize, ordering, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Download registry quota details 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="page">页码，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页数量 (optional, default to 10)</param>
        /// <param name="ordering">排序类型 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadQuotasByProjectNameApiResponse"/>&gt;</returns>
        public async Task<IDownloadQuotasByProjectNameApiResponse> DownloadQuotasByProjectNameAsync(string slug, string type, Option<int> page = default, Option<int> pageSize = default, Option<string> ordering = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDownloadQuotasByProjectName(slug, type, ordering);

                FormatDownloadQuotasByProjectName(ref slug, ref type, ref page, ref pageSize, ref ordering);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{slug}/-/packages/{type}/-/quotas/download"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{slug}/-/packages/{type}/-/quotas/download");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bslug%7D", Uri.EscapeDataString(slug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btype%7D", Uri.EscapeDataString(type.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (ordering.IsSet)
                        parseQueryStringLocalVar["ordering"] = ClientUtils.ParameterToString(ordering.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json",
                        "application/octet-stream"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DownloadQuotasByProjectNameApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DownloadQuotasByProjectNameApiResponse>();

                        DownloadQuotasByProjectNameApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{slug}/-/packages/{type}/-/quotas/download", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDownloadQuotasByProjectNameDefaultImplementation(apiResponseLocalVar, slug, type, page, pageSize, ordering);

                        Events.ExecuteOnDownloadQuotasByProjectName(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDownloadQuotasByProjectNameDefaultImplementation(e, "/{slug}/-/packages/{type}/-/quotas/download", uriBuilderLocalVar.Path, slug, type, page, pageSize, ordering);
                Events.ExecuteOnErrorDownloadQuotasByProjectName(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DownloadQuotasByProjectNameApiResponse"/>
        /// </summary>
        public partial class DownloadQuotasByProjectNameApiResponse : CNBOpenApi.Client.ApiResponse, IDownloadQuotasByProjectNameApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DownloadQuotasByProjectNameApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DownloadQuotasByProjectNameApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DownloadQuotasByProjectNameApiResponse(ILogger<DownloadQuotasByProjectNameApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoQuotaRsp>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoQuotaRsp>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoQuotaRsp>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPackage(ref string slug, ref string type, ref string name);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        private void ValidateGetPackage(string slug, string type, string name)
        {
            if (slug == null)
                throw new ArgumentNullException(nameof(slug));

            if (type == null)
                throw new ArgumentNullException(nameof(type));

            if (name == null)
                throw new ArgumentNullException(nameof(name));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        private void AfterGetPackageDefaultImplementation(IGetPackageApiResponse apiResponseLocalVar, string slug, string type, string name)
        {
            bool suppressDefaultLog = false;
            AfterGetPackage(ref suppressDefaultLog, apiResponseLocalVar, slug, type, name);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        partial void AfterGetPackage(ref bool suppressDefaultLog, IGetPackageApiResponse apiResponseLocalVar, string slug, string type, string name);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        private void OnErrorGetPackageDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string slug, string type, string name)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPackage(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, slug, type, name);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        partial void OnErrorGetPackage(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string slug, string type, string name);

        /// <summary>
        /// Get the specific package 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </summary>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="name">制品名称</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPackageApiResponse"/>&gt;</returns>
        public async Task<IGetPackageApiResponse?> GetPackageOrDefaultAsync(string slug, string type, string name, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPackageAsync(slug, type, name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the specific package 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="name">制品名称</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPackageApiResponse"/>&gt;</returns>
        public async Task<IGetPackageApiResponse> GetPackageAsync(string slug, string type, string name, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPackage(slug, type, name);

                FormatGetPackage(ref slug, ref type, ref name);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{slug}/-/packages/{type}/{name}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{slug}/-/packages/{type}/{name}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bslug%7D", Uri.EscapeDataString(slug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btype%7D", Uri.EscapeDataString(type.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bname%7D", Uri.EscapeDataString(name.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.cnb.web+json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPackageApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPackageApiResponse>();

                        GetPackageApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{slug}/-/packages/{type}/{name}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPackageDefaultImplementation(apiResponseLocalVar, slug, type, name);

                        Events.ExecuteOnGetPackage(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPackageDefaultImplementation(e, "/{slug}/-/packages/{type}/{name}", uriBuilderLocalVar.Path, slug, type, name);
                Events.ExecuteOnErrorGetPackage(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPackageApiResponse"/>
        /// </summary>
        public partial class GetPackageApiResponse : CNBOpenApi.Client.ApiResponse, IGetPackageApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPackageApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPackageApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPackageApiResponse(ILogger<GetPackageApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DtoPackageDetail? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DtoPackageDetail>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.DtoPackageDetail? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPackageTagDetail(ref string slug, ref string type, ref string name, ref string tag, ref Option<string> sha256);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <param name="sha256"></param>
        /// <returns></returns>
        private void ValidateGetPackageTagDetail(string slug, string type, string name, string tag, Option<string> sha256)
        {
            if (slug == null)
                throw new ArgumentNullException(nameof(slug));

            if (type == null)
                throw new ArgumentNullException(nameof(type));

            if (name == null)
                throw new ArgumentNullException(nameof(name));

            if (tag == null)
                throw new ArgumentNullException(nameof(tag));

            if (sha256.IsSet && sha256.Value == null)
                throw new ArgumentNullException(nameof(sha256));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <param name="sha256"></param>
        private void AfterGetPackageTagDetailDefaultImplementation(IGetPackageTagDetailApiResponse apiResponseLocalVar, string slug, string type, string name, string tag, Option<string> sha256)
        {
            bool suppressDefaultLog = false;
            AfterGetPackageTagDetail(ref suppressDefaultLog, apiResponseLocalVar, slug, type, name, tag, sha256);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <param name="sha256"></param>
        partial void AfterGetPackageTagDetail(ref bool suppressDefaultLog, IGetPackageTagDetailApiResponse apiResponseLocalVar, string slug, string type, string name, string tag, Option<string> sha256);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <param name="sha256"></param>
        private void OnErrorGetPackageTagDetailDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string slug, string type, string name, string tag, Option<string> sha256)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPackageTagDetail(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, slug, type, name, tag, sha256);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <param name="sha256"></param>
        partial void OnErrorGetPackageTagDetail(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string slug, string type, string name, string tag, Option<string> sha256);

        /// <summary>
        /// Get the specific tag under specific package 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </summary>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="name">制品名称</param>
        /// <param name="tag">制品标签</param>
        /// <param name="sha256">摘要，容器制品时必须 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPackageTagDetailApiResponse"/>&gt;</returns>
        public async Task<IGetPackageTagDetailApiResponse?> GetPackageTagDetailOrDefaultAsync(string slug, string type, string name, string tag, Option<string> sha256 = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPackageTagDetailAsync(slug, type, name, tag, sha256, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the specific tag under specific package 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="name">制品名称</param>
        /// <param name="tag">制品标签</param>
        /// <param name="sha256">摘要，容器制品时必须 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPackageTagDetailApiResponse"/>&gt;</returns>
        public async Task<IGetPackageTagDetailApiResponse> GetPackageTagDetailAsync(string slug, string type, string name, string tag, Option<string> sha256 = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPackageTagDetail(slug, type, name, tag, sha256);

                FormatGetPackageTagDetail(ref slug, ref type, ref name, ref tag, ref sha256);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{slug}/-/packages/{type}/{name}/-/tag/{tag}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{slug}/-/packages/{type}/{name}/-/tag/{tag}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bslug%7D", Uri.EscapeDataString(slug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btype%7D", Uri.EscapeDataString(type.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bname%7D", Uri.EscapeDataString(name.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btag%7D", Uri.EscapeDataString(tag.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (sha256.IsSet)
                        parseQueryStringLocalVar["sha256"] = ClientUtils.ParameterToString(sha256.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPackageTagDetailApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPackageTagDetailApiResponse>();

                        GetPackageTagDetailApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{slug}/-/packages/{type}/{name}/-/tag/{tag}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPackageTagDetailDefaultImplementation(apiResponseLocalVar, slug, type, name, tag, sha256);

                        Events.ExecuteOnGetPackageTagDetail(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPackageTagDetailDefaultImplementation(e, "/{slug}/-/packages/{type}/{name}/-/tag/{tag}", uriBuilderLocalVar.Path, slug, type, name, tag, sha256);
                Events.ExecuteOnErrorGetPackageTagDetail(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPackageTagDetailApiResponse"/>
        /// </summary>
        public partial class GetPackageTagDetailApiResponse : CNBOpenApi.Client.ApiResponse, IGetPackageTagDetailApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPackageTagDetailApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPackageTagDetailApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPackageTagDetailApiResponse(ILogger<GetPackageTagDetailApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DtoTagDetail? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DtoTagDetail>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.DtoTagDetail? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetQuotaByProjectName(ref string slug, ref string type);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        private void ValidateGetQuotaByProjectName(string slug, string type)
        {
            if (slug == null)
                throw new ArgumentNullException(nameof(slug));

            if (type == null)
                throw new ArgumentNullException(nameof(type));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        private void AfterGetQuotaByProjectNameDefaultImplementation(IGetQuotaByProjectNameApiResponse apiResponseLocalVar, string slug, string type)
        {
            bool suppressDefaultLog = false;
            AfterGetQuotaByProjectName(ref suppressDefaultLog, apiResponseLocalVar, slug, type);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        partial void AfterGetQuotaByProjectName(ref bool suppressDefaultLog, IGetQuotaByProjectNameApiResponse apiResponseLocalVar, string slug, string type);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        private void OnErrorGetQuotaByProjectNameDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string slug, string type)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetQuotaByProjectName(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, slug, type);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        partial void OnErrorGetQuotaByProjectName(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string slug, string type);

        /// <summary>
        /// Get quota of specific registry 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </summary>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetQuotaByProjectNameApiResponse"/>&gt;</returns>
        public async Task<IGetQuotaByProjectNameApiResponse?> GetQuotaByProjectNameOrDefaultAsync(string slug, string type, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetQuotaByProjectNameAsync(slug, type, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get quota of specific registry 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetQuotaByProjectNameApiResponse"/>&gt;</returns>
        public async Task<IGetQuotaByProjectNameApiResponse> GetQuotaByProjectNameAsync(string slug, string type, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetQuotaByProjectName(slug, type);

                FormatGetQuotaByProjectName(ref slug, ref type);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{slug}/-/packages/{type}/-/quota"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{slug}/-/packages/{type}/-/quota");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bslug%7D", Uri.EscapeDataString(slug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btype%7D", Uri.EscapeDataString(type.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetQuotaByProjectNameApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetQuotaByProjectNameApiResponse>();

                        GetQuotaByProjectNameApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{slug}/-/packages/{type}/-/quota", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetQuotaByProjectNameDefaultImplementation(apiResponseLocalVar, slug, type);

                        Events.ExecuteOnGetQuotaByProjectName(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetQuotaByProjectNameDefaultImplementation(e, "/{slug}/-/packages/{type}/-/quota", uriBuilderLocalVar.Path, slug, type);
                Events.ExecuteOnErrorGetQuotaByProjectName(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetQuotaByProjectNameApiResponse"/>
        /// </summary>
        public partial class GetQuotaByProjectNameApiResponse : CNBOpenApi.Client.ApiResponse, IGetQuotaByProjectNameApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetQuotaByProjectNameApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetQuotaByProjectNameApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetQuotaByProjectNameApiResponse(ILogger<GetQuotaByProjectNameApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DtoQuotaRsp? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DtoQuotaRsp>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.DtoQuotaRsp? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetQuotasByProjectName(ref string slug, ref string type, ref Option<int> page, ref Option<int> pageSize, ref Option<string> ordering);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="ordering"></param>
        /// <returns></returns>
        private void ValidateGetQuotasByProjectName(string slug, string type, Option<string> ordering)
        {
            if (slug == null)
                throw new ArgumentNullException(nameof(slug));

            if (type == null)
                throw new ArgumentNullException(nameof(type));

            if (ordering.IsSet && ordering.Value == null)
                throw new ArgumentNullException(nameof(ordering));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="ordering"></param>
        private void AfterGetQuotasByProjectNameDefaultImplementation(IGetQuotasByProjectNameApiResponse apiResponseLocalVar, string slug, string type, Option<int> page, Option<int> pageSize, Option<string> ordering)
        {
            bool suppressDefaultLog = false;
            AfterGetQuotasByProjectName(ref suppressDefaultLog, apiResponseLocalVar, slug, type, page, pageSize, ordering);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="ordering"></param>
        partial void AfterGetQuotasByProjectName(ref bool suppressDefaultLog, IGetQuotasByProjectNameApiResponse apiResponseLocalVar, string slug, string type, Option<int> page, Option<int> pageSize, Option<string> ordering);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="ordering"></param>
        private void OnErrorGetQuotasByProjectNameDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string slug, string type, Option<int> page, Option<int> pageSize, Option<string> ordering)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetQuotasByProjectName(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, slug, type, page, pageSize, ordering);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="ordering"></param>
        partial void OnErrorGetQuotasByProjectName(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string slug, string type, Option<int> page, Option<int> pageSize, Option<string> ordering);

        /// <summary>
        /// Get quotas of packages under one registry 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </summary>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="page">页码，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页数量 (optional, default to 10)</param>
        /// <param name="ordering">排序类型 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetQuotasByProjectNameApiResponse"/>&gt;</returns>
        public async Task<IGetQuotasByProjectNameApiResponse?> GetQuotasByProjectNameOrDefaultAsync(string slug, string type, Option<int> page = default, Option<int> pageSize = default, Option<string> ordering = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetQuotasByProjectNameAsync(slug, type, page, pageSize, ordering, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get quotas of packages under one registry 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="page">页码，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页数量 (optional, default to 10)</param>
        /// <param name="ordering">排序类型 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetQuotasByProjectNameApiResponse"/>&gt;</returns>
        public async Task<IGetQuotasByProjectNameApiResponse> GetQuotasByProjectNameAsync(string slug, string type, Option<int> page = default, Option<int> pageSize = default, Option<string> ordering = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetQuotasByProjectName(slug, type, ordering);

                FormatGetQuotasByProjectName(ref slug, ref type, ref page, ref pageSize, ref ordering);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{slug}/-/packages/{type}/-/quotas"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{slug}/-/packages/{type}/-/quotas");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bslug%7D", Uri.EscapeDataString(slug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btype%7D", Uri.EscapeDataString(type.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (ordering.IsSet)
                        parseQueryStringLocalVar["ordering"] = ClientUtils.ParameterToString(ordering.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetQuotasByProjectNameApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetQuotasByProjectNameApiResponse>();

                        GetQuotasByProjectNameApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{slug}/-/packages/{type}/-/quotas", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetQuotasByProjectNameDefaultImplementation(apiResponseLocalVar, slug, type, page, pageSize, ordering);

                        Events.ExecuteOnGetQuotasByProjectName(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetQuotasByProjectNameDefaultImplementation(e, "/{slug}/-/packages/{type}/-/quotas", uriBuilderLocalVar.Path, slug, type, page, pageSize, ordering);
                Events.ExecuteOnErrorGetQuotasByProjectName(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetQuotasByProjectNameApiResponse"/>
        /// </summary>
        public partial class GetQuotasByProjectNameApiResponse : CNBOpenApi.Client.ApiResponse, IGetQuotasByProjectNameApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetQuotasByProjectNameApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetQuotasByProjectNameApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetQuotasByProjectNameApiResponse(ILogger<GetQuotasByProjectNameApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoQuotaRsp>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoQuotaRsp>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoQuotaRsp>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatHeadPackages(ref string slug, ref string type, ref Option<int> page, ref Option<int> pageSize, ref Option<string> ordering, ref Option<string> name);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="ordering"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        private void ValidateHeadPackages(string slug, string type, Option<string> ordering, Option<string> name)
        {
            if (slug == null)
                throw new ArgumentNullException(nameof(slug));

            if (type == null)
                throw new ArgumentNullException(nameof(type));

            if (ordering.IsSet && ordering.Value == null)
                throw new ArgumentNullException(nameof(ordering));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="ordering"></param>
        /// <param name="name"></param>
        private void AfterHeadPackagesDefaultImplementation(IHeadPackagesApiResponse apiResponseLocalVar, string slug, string type, Option<int> page, Option<int> pageSize, Option<string> ordering, Option<string> name)
        {
            bool suppressDefaultLog = false;
            AfterHeadPackages(ref suppressDefaultLog, apiResponseLocalVar, slug, type, page, pageSize, ordering, name);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="ordering"></param>
        /// <param name="name"></param>
        partial void AfterHeadPackages(ref bool suppressDefaultLog, IHeadPackagesApiResponse apiResponseLocalVar, string slug, string type, Option<int> page, Option<int> pageSize, Option<string> ordering, Option<string> name);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="ordering"></param>
        /// <param name="name"></param>
        private void OnErrorHeadPackagesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string slug, string type, Option<int> page, Option<int> pageSize, Option<string> ordering, Option<string> name)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorHeadPackages(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, slug, type, page, pageSize, ordering, name);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="ordering"></param>
        /// <param name="name"></param>
        partial void OnErrorHeadPackages(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string slug, string type, Option<int> page, Option<int> pageSize, Option<string> ordering, Option<string> name);

        /// <summary>
        /// Head all packages 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </summary>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="page">页码，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页数量 (optional, default to 10)</param>
        /// <param name="ordering">排序类型 (optional)</param>
        /// <param name="name">制品名搜索关键词 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IHeadPackagesApiResponse"/>&gt;</returns>
        public async Task<IHeadPackagesApiResponse?> HeadPackagesOrDefaultAsync(string slug, string type, Option<int> page = default, Option<int> pageSize = default, Option<string> ordering = default, Option<string> name = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await HeadPackagesAsync(slug, type, page, pageSize, ordering, name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Head all packages 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="page">页码，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页数量 (optional, default to 10)</param>
        /// <param name="ordering">排序类型 (optional)</param>
        /// <param name="name">制品名搜索关键词 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IHeadPackagesApiResponse"/>&gt;</returns>
        public async Task<IHeadPackagesApiResponse> HeadPackagesAsync(string slug, string type, Option<int> page = default, Option<int> pageSize = default, Option<string> ordering = default, Option<string> name = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateHeadPackages(slug, type, ordering, name);

                FormatHeadPackages(ref slug, ref type, ref page, ref pageSize, ref ordering, ref name);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{slug}/-/packages"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{slug}/-/packages");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bslug%7D", Uri.EscapeDataString(slug.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (ordering.IsSet)
                        parseQueryStringLocalVar["ordering"] = ClientUtils.ParameterToString(ordering.Value);

                    if (name.IsSet)
                        parseQueryStringLocalVar["name"] = ClientUtils.ParameterToString(name.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Head;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<HeadPackagesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<HeadPackagesApiResponse>();

                        HeadPackagesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{slug}/-/packages", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterHeadPackagesDefaultImplementation(apiResponseLocalVar, slug, type, page, pageSize, ordering, name);

                        Events.ExecuteOnHeadPackages(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorHeadPackagesDefaultImplementation(e, "/{slug}/-/packages", uriBuilderLocalVar.Path, slug, type, page, pageSize, ordering, name);
                Events.ExecuteOnErrorHeadPackages(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="HeadPackagesApiResponse"/>
        /// </summary>
        public partial class HeadPackagesApiResponse : CNBOpenApi.Client.ApiResponse, IHeadPackagesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<HeadPackagesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="HeadPackagesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public HeadPackagesApiResponse(ILogger<HeadPackagesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListPackageTags(ref string slug, ref string type, ref string pkgname, ref Option<int> page, ref Option<int> pageSize, ref Option<string> ordering, ref Option<string> name);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="pkgname"></param>
        /// <param name="ordering"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        private void ValidateListPackageTags(string slug, string type, string pkgname, Option<string> ordering, Option<string> name)
        {
            if (slug == null)
                throw new ArgumentNullException(nameof(slug));

            if (type == null)
                throw new ArgumentNullException(nameof(type));

            if (pkgname == null)
                throw new ArgumentNullException(nameof(pkgname));

            if (ordering.IsSet && ordering.Value == null)
                throw new ArgumentNullException(nameof(ordering));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="pkgname"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="ordering"></param>
        /// <param name="name"></param>
        private void AfterListPackageTagsDefaultImplementation(IListPackageTagsApiResponse apiResponseLocalVar, string slug, string type, string pkgname, Option<int> page, Option<int> pageSize, Option<string> ordering, Option<string> name)
        {
            bool suppressDefaultLog = false;
            AfterListPackageTags(ref suppressDefaultLog, apiResponseLocalVar, slug, type, pkgname, page, pageSize, ordering, name);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="pkgname"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="ordering"></param>
        /// <param name="name"></param>
        partial void AfterListPackageTags(ref bool suppressDefaultLog, IListPackageTagsApiResponse apiResponseLocalVar, string slug, string type, string pkgname, Option<int> page, Option<int> pageSize, Option<string> ordering, Option<string> name);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="pkgname"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="ordering"></param>
        /// <param name="name"></param>
        private void OnErrorListPackageTagsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string slug, string type, string pkgname, Option<int> page, Option<int> pageSize, Option<string> ordering, Option<string> name)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListPackageTags(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, slug, type, pkgname, page, pageSize, ordering, name);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="pkgname"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="ordering"></param>
        /// <param name="name"></param>
        partial void OnErrorListPackageTags(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string slug, string type, string pkgname, Option<int> page, Option<int> pageSize, Option<string> ordering, Option<string> name);

        /// <summary>
        /// List all tags under specific package 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </summary>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="pkgname">制品名称</param>
        /// <param name="page">页码，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="ordering">排序类型 (optional)</param>
        /// <param name="name">搜索关键字 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPackageTagsApiResponse"/>&gt;</returns>
        public async Task<IListPackageTagsApiResponse?> ListPackageTagsOrDefaultAsync(string slug, string type, string pkgname, Option<int> page = default, Option<int> pageSize = default, Option<string> ordering = default, Option<string> name = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListPackageTagsAsync(slug, type, pkgname, page, pageSize, ordering, name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List all tags under specific package 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="pkgname">制品名称</param>
        /// <param name="page">页码，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="ordering">排序类型 (optional)</param>
        /// <param name="name">搜索关键字 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPackageTagsApiResponse"/>&gt;</returns>
        public async Task<IListPackageTagsApiResponse> ListPackageTagsAsync(string slug, string type, string pkgname, Option<int> page = default, Option<int> pageSize = default, Option<string> ordering = default, Option<string> name = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListPackageTags(slug, type, pkgname, ordering, name);

                FormatListPackageTags(ref slug, ref type, ref pkgname, ref page, ref pageSize, ref ordering, ref name);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{slug}/-/packages/{type}/{pkgname}/-/tags"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{slug}/-/packages/{type}/{pkgname}/-/tags");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bslug%7D", Uri.EscapeDataString(slug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btype%7D", Uri.EscapeDataString(type.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpkgname%7D", Uri.EscapeDataString(pkgname.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (ordering.IsSet)
                        parseQueryStringLocalVar["ordering"] = ClientUtils.ParameterToString(ordering.Value);

                    if (name.IsSet)
                        parseQueryStringLocalVar["name"] = ClientUtils.ParameterToString(name.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListPackageTagsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListPackageTagsApiResponse>();

                        ListPackageTagsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{slug}/-/packages/{type}/{pkgname}/-/tags", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListPackageTagsDefaultImplementation(apiResponseLocalVar, slug, type, pkgname, page, pageSize, ordering, name);

                        Events.ExecuteOnListPackageTags(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListPackageTagsDefaultImplementation(e, "/{slug}/-/packages/{type}/{pkgname}/-/tags", uriBuilderLocalVar.Path, slug, type, pkgname, page, pageSize, ordering, name);
                Events.ExecuteOnErrorListPackageTags(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListPackageTagsApiResponse"/>
        /// </summary>
        public partial class ListPackageTagsApiResponse : CNBOpenApi.Client.ApiResponse, IListPackageTagsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListPackageTagsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListPackageTagsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListPackageTagsApiResponse(ILogger<ListPackageTagsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DtoTag? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DtoTag>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.DtoTag? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListPackages(ref string slug, ref string type, ref Option<int> page, ref Option<int> pageSize, ref Option<string> ordering, ref Option<string> name);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="ordering"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        private void ValidateListPackages(string slug, string type, Option<string> ordering, Option<string> name)
        {
            if (slug == null)
                throw new ArgumentNullException(nameof(slug));

            if (type == null)
                throw new ArgumentNullException(nameof(type));

            if (ordering.IsSet && ordering.Value == null)
                throw new ArgumentNullException(nameof(ordering));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="ordering"></param>
        /// <param name="name"></param>
        private void AfterListPackagesDefaultImplementation(IListPackagesApiResponse apiResponseLocalVar, string slug, string type, Option<int> page, Option<int> pageSize, Option<string> ordering, Option<string> name)
        {
            bool suppressDefaultLog = false;
            AfterListPackages(ref suppressDefaultLog, apiResponseLocalVar, slug, type, page, pageSize, ordering, name);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="ordering"></param>
        /// <param name="name"></param>
        partial void AfterListPackages(ref bool suppressDefaultLog, IListPackagesApiResponse apiResponseLocalVar, string slug, string type, Option<int> page, Option<int> pageSize, Option<string> ordering, Option<string> name);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="ordering"></param>
        /// <param name="name"></param>
        private void OnErrorListPackagesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string slug, string type, Option<int> page, Option<int> pageSize, Option<string> ordering, Option<string> name)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListPackages(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, slug, type, page, pageSize, ordering, name);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="slug"></param>
        /// <param name="type"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="ordering"></param>
        /// <param name="name"></param>
        partial void OnErrorListPackages(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string slug, string type, Option<int> page, Option<int> pageSize, Option<string> ordering, Option<string> name);

        /// <summary>
        /// List all packages 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </summary>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="page">页码，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页数量 (optional, default to 10)</param>
        /// <param name="ordering">排序类型 (optional)</param>
        /// <param name="name">制品名搜索关键词 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPackagesApiResponse"/>&gt;</returns>
        public async Task<IListPackagesApiResponse?> ListPackagesOrDefaultAsync(string slug, string type, Option<int> page = default, Option<int> pageSize = default, Option<string> ordering = default, Option<string> name = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListPackagesAsync(slug, type, page, pageSize, ordering, name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List all packages 访问令牌调用此接口需包含以下权限  registry-package:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">仓库 slug</param>
        /// <param name="type">制品类型</param>
        /// <param name="page">页码，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页数量 (optional, default to 10)</param>
        /// <param name="ordering">排序类型 (optional)</param>
        /// <param name="name">制品名搜索关键词 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPackagesApiResponse"/>&gt;</returns>
        public async Task<IListPackagesApiResponse> ListPackagesAsync(string slug, string type, Option<int> page = default, Option<int> pageSize = default, Option<string> ordering = default, Option<string> name = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListPackages(slug, type, ordering, name);

                FormatListPackages(ref slug, ref type, ref page, ref pageSize, ref ordering, ref name);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{slug}/-/packages"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{slug}/-/packages");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bslug%7D", Uri.EscapeDataString(slug.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (ordering.IsSet)
                        parseQueryStringLocalVar["ordering"] = ClientUtils.ParameterToString(ordering.Value);

                    if (name.IsSet)
                        parseQueryStringLocalVar["name"] = ClientUtils.ParameterToString(name.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListPackagesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListPackagesApiResponse>();

                        ListPackagesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{slug}/-/packages", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListPackagesDefaultImplementation(apiResponseLocalVar, slug, type, page, pageSize, ordering, name);

                        Events.ExecuteOnListPackages(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListPackagesDefaultImplementation(e, "/{slug}/-/packages", uriBuilderLocalVar.Path, slug, type, page, pageSize, ordering, name);
                Events.ExecuteOnErrorListPackages(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListPackagesApiResponse"/>
        /// </summary>
        public partial class ListPackagesApiResponse : CNBOpenApi.Client.ApiResponse, IListPackagesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListPackagesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListPackagesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListPackagesApiResponse(ILogger<ListPackagesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoPackage>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoPackage>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoPackage>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
