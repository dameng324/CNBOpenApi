// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CNBOpenApi.Client;
using CNBOpenApi.Model;
using System.Diagnostics.CodeAnalysis;

namespace CNBOpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IOrganizationsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        OrganizationsApiEvents Events { get; }

        /// <summary>
        /// 创建新组织
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">group information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrganizationApiResponse"/>&gt;</returns>
        Task<ICreateOrganizationApiResponse> CreateOrganizationAsync(DtoCreateGroupReq request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 创建新组织
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </remarks>
        /// <param name="request">group information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrganizationApiResponse"/>?&gt;</returns>
        Task<ICreateOrganizationApiResponse?> CreateOrganizationOrDefaultAsync(DtoCreateGroupReq request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除指定组织
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-delete:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">group path</param>
        /// <param name="xCnbIdentityTicket">微信用户需要确认身份，第一次调用不传接口会调用失败并返回一个x-cnb-identity-ticket，第二次调用再传返回的值 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationApiResponse"/>&gt;</returns>
        Task<IDeleteOrganizationApiResponse> DeleteOrganizationAsync(string group, Option<string> xCnbIdentityTicket = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除指定组织
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-delete:rw
        /// </remarks>
        /// <param name="group">group path</param>
        /// <param name="xCnbIdentityTicket">微信用户需要确认身份，第一次调用不传接口会调用失败并返回一个x-cnb-identity-ticket，第二次调用再传返回的值 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationApiResponse"/>?&gt;</returns>
        Task<IDeleteOrganizationApiResponse?> DeleteOrganizationOrDefaultAsync(string group, Option<string> xCnbIdentityTicket = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-resource:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">group path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGroupApiResponse"/>&gt;</returns>
        Task<IGetGroupApiResponse> GetGroupAsync(string group, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-resource:r
        /// </remarks>
        /// <param name="group">group path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGroupApiResponse"/>?&gt;</returns>
        Task<IGetGroupApiResponse?> GetGroupOrDefaultAsync(string group, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织的配置详情
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">group path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGroupSettingApiResponse"/>&gt;</returns>
        Task<IGetGroupSettingApiResponse> GetGroupSettingAsync(string group, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织的配置详情
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </remarks>
        /// <param name="group">group path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGroupSettingApiResponse"/>?&gt;</returns>
        Task<IGetGroupSettingApiResponse?> GetGroupSettingOrDefaultAsync(string group, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定用户拥有权限的顶层组织列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">UserName</param>
        /// <param name="search">过滤组织 (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="orderBy">排序类型，默认为created_at (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGroupsByUserIDApiResponse"/>&gt;</returns>
        Task<IGetGroupsByUserIDApiResponse> GetGroupsByUserIDAsync(string username, Option<string> search = default, Option<int> page = default, Option<int> pageSize = default, Option<bool> desc = default, Option<string> orderBy = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定用户拥有权限的顶层组织列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </remarks>
        /// <param name="username">UserName</param>
        /// <param name="search">过滤组织 (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="orderBy">排序类型，默认为created_at (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGroupsByUserIDApiResponse"/>?&gt;</returns>
        Task<IGetGroupsByUserIDApiResponse?> GetGroupsByUserIDOrDefaultAsync(string username, Option<string> search = default, Option<int> page = default, Option<int> pageSize = default, Option<bool> desc = default, Option<string> orderBy = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询当前用户在指定组织下拥有指定权限的子组织列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">Group slug</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="access">access level (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListGroupsApiResponse"/>&gt;</returns>
        Task<IListGroupsApiResponse> ListGroupsAsync(string group, Option<int> page = default, Option<int> pageSize = default, Option<int> access = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询当前用户在指定组织下拥有指定权限的子组织列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </remarks>
        /// <param name="group">Group slug</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="access">access level (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListGroupsApiResponse"/>?&gt;</returns>
        Task<IListGroupsApiResponse?> ListGroupsOrDefaultAsync(string group, Option<int> page = default, Option<int> pageSize = default, Option<int> access = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织下的子组织列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-resource:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">Slug</param>
        /// <param name="page">page</param>
        /// <param name="pageSize">page</param>
        /// <param name="search">过滤组织 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSubgroupsApiResponse"/>&gt;</returns>
        Task<IListSubgroupsApiResponse> ListSubgroupsAsync(string group, int page, int pageSize, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织下的子组织列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-resource:r
        /// </remarks>
        /// <param name="group">Slug</param>
        /// <param name="page">page</param>
        /// <param name="pageSize">page</param>
        /// <param name="search">过滤组织 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSubgroupsApiResponse"/>?&gt;</returns>
        Task<IListSubgroupsApiResponse?> ListSubgroupsOrDefaultAsync(string group, int page, int pageSize, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取当前用户拥有权限的顶层组织列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="search">过滤组织 (optional)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListTopGroupsApiResponse"/>&gt;</returns>
        Task<IListTopGroupsApiResponse> ListTopGroupsAsync(Option<int> page = default, Option<int> pageSize = default, Option<string> search = default, Option<string> role = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取当前用户拥有权限的顶层组织列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </remarks>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="search">过滤组织 (optional)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListTopGroupsApiResponse"/>?&gt;</returns>
        Task<IListTopGroupsApiResponse?> ListTopGroupsOrDefaultAsync(Option<int> page = default, Option<int> pageSize = default, Option<string> search = default, Option<string> role = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新组织头像 URL 地址
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="request">group avatar url to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGroupAvatarApiResponse"/>&gt;</returns>
        Task<IUpdateGroupAvatarApiResponse> UpdateGroupAvatarAsync(string group, DtoUpdateGroupAvatarReq request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新组织头像 URL 地址
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </remarks>
        /// <param name="group">slug</param>
        /// <param name="request">group avatar url to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGroupAvatarApiResponse"/>?&gt;</returns>
        Task<IUpdateGroupAvatarApiResponse?> UpdateGroupAvatarOrDefaultAsync(string group, DtoUpdateGroupAvatarReq request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新指定组织的配置, 可更新内容为: 是否对外隐藏组织成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="request">group information to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGroupSettingApiResponse"/>&gt;</returns>
        Task<IUpdateGroupSettingApiResponse> UpdateGroupSettingAsync(string group, DtoGroupSettingReq request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新指定组织的配置, 可更新内容为: 是否对外隐藏组织成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </remarks>
        /// <param name="group">slug</param>
        /// <param name="request">group information to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGroupSettingApiResponse"/>?&gt;</returns>
        Task<IUpdateGroupSettingApiResponse?> UpdateGroupSettingOrDefaultAsync(string group, DtoGroupSettingReq request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新组织信息, 可更新的内容为: 组织描述, 组织展示名称, 组织网站, 组织联系邮箱
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="request">group information to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationApiResponse"/>&gt;</returns>
        Task<IUpdateOrganizationApiResponse> UpdateOrganizationAsync(string group, DtoUpdateGroupReq request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新组织信息, 可更新的内容为: 组织描述, 组织展示名称, 组织网站, 组织联系邮箱
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </remarks>
        /// <param name="group">slug</param>
        /// <param name="request">group information to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationApiResponse"/>?&gt;</returns>
        Task<IUpdateOrganizationApiResponse?> UpdateOrganizationOrDefaultAsync(string group, DtoUpdateGroupReq request, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateOrganizationApiResponse"/>
    /// </summary>
    public interface ICreateOrganizationApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteOrganizationApiResponse"/>
    /// </summary>
    public interface IDeleteOrganizationApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetGroupApiResponse"/>
    /// </summary>
    public interface IGetGroupApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.DtoOrganizationAccess?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetGroupSettingApiResponse"/>
    /// </summary>
    public interface IGetGroupSettingApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.DtoOrganizationSettingWithParent?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetGroupsByUserIDApiResponse"/>
    /// </summary>
    public interface IGetGroupsByUserIDApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.DtoOrganizationUnion?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListGroupsApiResponse"/>
    /// </summary>
    public interface IListGroupsApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoOrganizationAccess>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListSubgroupsApiResponse"/>
    /// </summary>
    public interface IListSubgroupsApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoOrganizationUnion>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListTopGroupsApiResponse"/>
    /// </summary>
    public interface IListTopGroupsApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoOrganizationAccess>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateGroupAvatarApiResponse"/>
    /// </summary>
    public interface IUpdateGroupAvatarApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateGroupSettingApiResponse"/>
    /// </summary>
    public interface IUpdateGroupSettingApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateOrganizationApiResponse"/>
    /// </summary>
    public interface IUpdateOrganizationApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class OrganizationsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateOrganization;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateOrganization;

        internal void ExecuteOnCreateOrganization(OrganizationsApi.CreateOrganizationApiResponse apiResponse)
        {
            OnCreateOrganization?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateOrganization(Exception exception)
        {
            OnErrorCreateOrganization?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteOrganization;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteOrganization;

        internal void ExecuteOnDeleteOrganization(OrganizationsApi.DeleteOrganizationApiResponse apiResponse)
        {
            OnDeleteOrganization?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteOrganization(Exception exception)
        {
            OnErrorDeleteOrganization?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetGroup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetGroup;

        internal void ExecuteOnGetGroup(OrganizationsApi.GetGroupApiResponse apiResponse)
        {
            OnGetGroup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetGroup(Exception exception)
        {
            OnErrorGetGroup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetGroupSetting;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetGroupSetting;

        internal void ExecuteOnGetGroupSetting(OrganizationsApi.GetGroupSettingApiResponse apiResponse)
        {
            OnGetGroupSetting?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetGroupSetting(Exception exception)
        {
            OnErrorGetGroupSetting?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetGroupsByUserID;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetGroupsByUserID;

        internal void ExecuteOnGetGroupsByUserID(OrganizationsApi.GetGroupsByUserIDApiResponse apiResponse)
        {
            OnGetGroupsByUserID?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetGroupsByUserID(Exception exception)
        {
            OnErrorGetGroupsByUserID?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListGroups;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListGroups;

        internal void ExecuteOnListGroups(OrganizationsApi.ListGroupsApiResponse apiResponse)
        {
            OnListGroups?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListGroups(Exception exception)
        {
            OnErrorListGroups?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListSubgroups;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListSubgroups;

        internal void ExecuteOnListSubgroups(OrganizationsApi.ListSubgroupsApiResponse apiResponse)
        {
            OnListSubgroups?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListSubgroups(Exception exception)
        {
            OnErrorListSubgroups?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListTopGroups;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListTopGroups;

        internal void ExecuteOnListTopGroups(OrganizationsApi.ListTopGroupsApiResponse apiResponse)
        {
            OnListTopGroups?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListTopGroups(Exception exception)
        {
            OnErrorListTopGroups?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateGroupAvatar;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateGroupAvatar;

        internal void ExecuteOnUpdateGroupAvatar(OrganizationsApi.UpdateGroupAvatarApiResponse apiResponse)
        {
            OnUpdateGroupAvatar?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateGroupAvatar(Exception exception)
        {
            OnErrorUpdateGroupAvatar?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateGroupSetting;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateGroupSetting;

        internal void ExecuteOnUpdateGroupSetting(OrganizationsApi.UpdateGroupSettingApiResponse apiResponse)
        {
            OnUpdateGroupSetting?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateGroupSetting(Exception exception)
        {
            OnErrorUpdateGroupSetting?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateOrganization;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateOrganization;

        internal void ExecuteOnUpdateOrganization(OrganizationsApi.UpdateOrganizationApiResponse apiResponse)
        {
            OnUpdateOrganization?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateOrganization(Exception exception)
        {
            OnErrorUpdateOrganization?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class OrganizationsApi : IOrganizationsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<OrganizationsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public OrganizationsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationsApi(ILogger<OrganizationsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, OrganizationsApiEvents organizationsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<OrganizationsApi>();
            HttpClient = httpClient;
            Events = organizationsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateOrganization(DtoCreateGroupReq request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateCreateOrganization(DtoCreateGroupReq request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterCreateOrganizationDefaultImplementation(ICreateOrganizationApiResponse apiResponseLocalVar, DtoCreateGroupReq request)
        {
            bool suppressDefaultLog = false;
            AfterCreateOrganization(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterCreateOrganization(ref bool suppressDefaultLog, ICreateOrganizationApiResponse apiResponseLocalVar, DtoCreateGroupReq request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorCreateOrganizationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DtoCreateGroupReq request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateOrganization(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorCreateOrganization(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DtoCreateGroupReq request);

        /// <summary>
        /// 创建新组织 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </summary>
        /// <param name="request">group information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrganizationApiResponse"/>&gt;</returns>
        public async Task<ICreateOrganizationApiResponse?> CreateOrganizationOrDefaultAsync(DtoCreateGroupReq request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateOrganizationAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 创建新组织 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">group information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrganizationApiResponse"/>&gt;</returns>
        public async Task<ICreateOrganizationApiResponse> CreateOrganizationAsync(DtoCreateGroupReq request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateOrganization(request);

                FormatCreateOrganization(request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/groups"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/groups");

                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateOrganizationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateOrganizationApiResponse>();

                        CreateOrganizationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/groups", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateOrganizationDefaultImplementation(apiResponseLocalVar, request);

                        Events.ExecuteOnCreateOrganization(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateOrganizationDefaultImplementation(e, "/groups", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorCreateOrganization(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateOrganizationApiResponse"/>
        /// </summary>
        public partial class CreateOrganizationApiResponse : CNBOpenApi.Client.ApiResponse, ICreateOrganizationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateOrganizationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateOrganizationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateOrganizationApiResponse(ILogger<CreateOrganizationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteOrganization(ref string group, ref Option<string> xCnbIdentityTicket);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="group"></param>
        /// <param name="xCnbIdentityTicket"></param>
        /// <returns></returns>
        private void ValidateDeleteOrganization(string group, Option<string> xCnbIdentityTicket)
        {
            if (group == null)
                throw new ArgumentNullException(nameof(group));

            if (xCnbIdentityTicket.IsSet && xCnbIdentityTicket.Value == null)
                throw new ArgumentNullException(nameof(xCnbIdentityTicket));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="xCnbIdentityTicket"></param>
        private void AfterDeleteOrganizationDefaultImplementation(IDeleteOrganizationApiResponse apiResponseLocalVar, string group, Option<string> xCnbIdentityTicket)
        {
            bool suppressDefaultLog = false;
            AfterDeleteOrganization(ref suppressDefaultLog, apiResponseLocalVar, group, xCnbIdentityTicket);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="xCnbIdentityTicket"></param>
        partial void AfterDeleteOrganization(ref bool suppressDefaultLog, IDeleteOrganizationApiResponse apiResponseLocalVar, string group, Option<string> xCnbIdentityTicket);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="xCnbIdentityTicket"></param>
        private void OnErrorDeleteOrganizationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, Option<string> xCnbIdentityTicket)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteOrganization(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, group, xCnbIdentityTicket);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="xCnbIdentityTicket"></param>
        partial void OnErrorDeleteOrganization(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, Option<string> xCnbIdentityTicket);

        /// <summary>
        /// 删除指定组织 访问令牌调用此接口需包含以下权限  group-delete:rw
        /// </summary>
        /// <param name="group">group path</param>
        /// <param name="xCnbIdentityTicket">微信用户需要确认身份，第一次调用不传接口会调用失败并返回一个x-cnb-identity-ticket，第二次调用再传返回的值 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationApiResponse"/>&gt;</returns>
        public async Task<IDeleteOrganizationApiResponse?> DeleteOrganizationOrDefaultAsync(string group, Option<string> xCnbIdentityTicket = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteOrganizationAsync(group, xCnbIdentityTicket, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 删除指定组织 访问令牌调用此接口需包含以下权限  group-delete:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">group path</param>
        /// <param name="xCnbIdentityTicket">微信用户需要确认身份，第一次调用不传接口会调用失败并返回一个x-cnb-identity-ticket，第二次调用再传返回的值 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationApiResponse"/>&gt;</returns>
        public async Task<IDeleteOrganizationApiResponse> DeleteOrganizationAsync(string group, Option<string> xCnbIdentityTicket = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteOrganization(group, xCnbIdentityTicket);

                FormatDeleteOrganization(ref group, ref xCnbIdentityTicket);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{group}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{group}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bgroup%7D", Uri.EscapeDataString(group.ToString()));

                    if (xCnbIdentityTicket.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("x-cnb-identity-ticket", ClientUtils.ParameterToString(xCnbIdentityTicket.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteOrganizationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteOrganizationApiResponse>();

                        DeleteOrganizationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{group}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteOrganizationDefaultImplementation(apiResponseLocalVar, group, xCnbIdentityTicket);

                        Events.ExecuteOnDeleteOrganization(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteOrganizationDefaultImplementation(e, "/{group}", uriBuilderLocalVar.Path, group, xCnbIdentityTicket);
                Events.ExecuteOnErrorDeleteOrganization(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteOrganizationApiResponse"/>
        /// </summary>
        public partial class DeleteOrganizationApiResponse : CNBOpenApi.Client.ApiResponse, IDeleteOrganizationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteOrganizationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteOrganizationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteOrganizationApiResponse(ILogger<DeleteOrganizationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetGroup(ref string group);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="group"></param>
        /// <returns></returns>
        private void ValidateGetGroup(string group)
        {
            if (group == null)
                throw new ArgumentNullException(nameof(group));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        private void AfterGetGroupDefaultImplementation(IGetGroupApiResponse apiResponseLocalVar, string group)
        {
            bool suppressDefaultLog = false;
            AfterGetGroup(ref suppressDefaultLog, apiResponseLocalVar, group);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        partial void AfterGetGroup(ref bool suppressDefaultLog, IGetGroupApiResponse apiResponseLocalVar, string group);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        private void OnErrorGetGroupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetGroup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, group);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        partial void OnErrorGetGroup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group);

        /// <summary>
        /// 获取指定组织信息 访问令牌调用此接口需包含以下权限  group-resource:r
        /// </summary>
        /// <param name="group">group path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGroupApiResponse"/>&gt;</returns>
        public async Task<IGetGroupApiResponse?> GetGroupOrDefaultAsync(string group, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetGroupAsync(group, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定组织信息 访问令牌调用此接口需包含以下权限  group-resource:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">group path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGroupApiResponse"/>&gt;</returns>
        public async Task<IGetGroupApiResponse> GetGroupAsync(string group, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetGroup(group);

                FormatGetGroup(ref group);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{group}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{group}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bgroup%7D", Uri.EscapeDataString(group.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetGroupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetGroupApiResponse>();

                        GetGroupApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{group}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetGroupDefaultImplementation(apiResponseLocalVar, group);

                        Events.ExecuteOnGetGroup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetGroupDefaultImplementation(e, "/{group}", uriBuilderLocalVar.Path, group);
                Events.ExecuteOnErrorGetGroup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetGroupApiResponse"/>
        /// </summary>
        public partial class GetGroupApiResponse : CNBOpenApi.Client.ApiResponse, IGetGroupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetGroupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetGroupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetGroupApiResponse(ILogger<GetGroupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DtoOrganizationAccess? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DtoOrganizationAccess>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.DtoOrganizationAccess? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetGroupSetting(ref string group);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="group"></param>
        /// <returns></returns>
        private void ValidateGetGroupSetting(string group)
        {
            if (group == null)
                throw new ArgumentNullException(nameof(group));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        private void AfterGetGroupSettingDefaultImplementation(IGetGroupSettingApiResponse apiResponseLocalVar, string group)
        {
            bool suppressDefaultLog = false;
            AfterGetGroupSetting(ref suppressDefaultLog, apiResponseLocalVar, group);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        partial void AfterGetGroupSetting(ref bool suppressDefaultLog, IGetGroupSettingApiResponse apiResponseLocalVar, string group);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        private void OnErrorGetGroupSettingDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetGroupSetting(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, group);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        partial void OnErrorGetGroupSetting(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group);

        /// <summary>
        /// 获取指定组织的配置详情 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </summary>
        /// <param name="group">group path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGroupSettingApiResponse"/>&gt;</returns>
        public async Task<IGetGroupSettingApiResponse?> GetGroupSettingOrDefaultAsync(string group, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetGroupSettingAsync(group, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定组织的配置详情 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">group path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGroupSettingApiResponse"/>&gt;</returns>
        public async Task<IGetGroupSettingApiResponse> GetGroupSettingAsync(string group, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetGroupSetting(group);

                FormatGetGroupSetting(ref group);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{group}/-/settings"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{group}/-/settings");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bgroup%7D", Uri.EscapeDataString(group.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetGroupSettingApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetGroupSettingApiResponse>();

                        GetGroupSettingApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{group}/-/settings", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetGroupSettingDefaultImplementation(apiResponseLocalVar, group);

                        Events.ExecuteOnGetGroupSetting(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetGroupSettingDefaultImplementation(e, "/{group}/-/settings", uriBuilderLocalVar.Path, group);
                Events.ExecuteOnErrorGetGroupSetting(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetGroupSettingApiResponse"/>
        /// </summary>
        public partial class GetGroupSettingApiResponse : CNBOpenApi.Client.ApiResponse, IGetGroupSettingApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetGroupSettingApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetGroupSettingApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetGroupSettingApiResponse(ILogger<GetGroupSettingApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DtoOrganizationSettingWithParent? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DtoOrganizationSettingWithParent>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.DtoOrganizationSettingWithParent? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetGroupsByUserID(ref string username, ref Option<string> search, ref Option<int> page, ref Option<int> pageSize, ref Option<bool> desc, ref Option<string> orderBy);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="username"></param>
        /// <param name="search"></param>
        /// <param name="orderBy"></param>
        /// <returns></returns>
        private void ValidateGetGroupsByUserID(string username, Option<string> search, Option<string> orderBy)
        {
            if (username == null)
                throw new ArgumentNullException(nameof(username));

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));

            if (orderBy.IsSet && orderBy.Value == null)
                throw new ArgumentNullException(nameof(orderBy));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="username"></param>
        /// <param name="search"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="desc"></param>
        /// <param name="orderBy"></param>
        private void AfterGetGroupsByUserIDDefaultImplementation(IGetGroupsByUserIDApiResponse apiResponseLocalVar, string username, Option<string> search, Option<int> page, Option<int> pageSize, Option<bool> desc, Option<string> orderBy)
        {
            bool suppressDefaultLog = false;
            AfterGetGroupsByUserID(ref suppressDefaultLog, apiResponseLocalVar, username, search, page, pageSize, desc, orderBy);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="username"></param>
        /// <param name="search"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="desc"></param>
        /// <param name="orderBy"></param>
        partial void AfterGetGroupsByUserID(ref bool suppressDefaultLog, IGetGroupsByUserIDApiResponse apiResponseLocalVar, string username, Option<string> search, Option<int> page, Option<int> pageSize, Option<bool> desc, Option<string> orderBy);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="username"></param>
        /// <param name="search"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="desc"></param>
        /// <param name="orderBy"></param>
        private void OnErrorGetGroupsByUserIDDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string username, Option<string> search, Option<int> page, Option<int> pageSize, Option<bool> desc, Option<string> orderBy)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetGroupsByUserID(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, username, search, page, pageSize, desc, orderBy);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="username"></param>
        /// <param name="search"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="desc"></param>
        /// <param name="orderBy"></param>
        partial void OnErrorGetGroupsByUserID(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string username, Option<string> search, Option<int> page, Option<int> pageSize, Option<bool> desc, Option<string> orderBy);

        /// <summary>
        /// 获取指定用户拥有权限的顶层组织列表 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </summary>
        /// <param name="username">UserName</param>
        /// <param name="search">过滤组织 (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="orderBy">排序类型，默认为created_at (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGroupsByUserIDApiResponse"/>&gt;</returns>
        public async Task<IGetGroupsByUserIDApiResponse?> GetGroupsByUserIDOrDefaultAsync(string username, Option<string> search = default, Option<int> page = default, Option<int> pageSize = default, Option<bool> desc = default, Option<string> orderBy = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetGroupsByUserIDAsync(username, search, page, pageSize, desc, orderBy, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定用户拥有权限的顶层组织列表 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">UserName</param>
        /// <param name="search">过滤组织 (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="orderBy">排序类型，默认为created_at (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGroupsByUserIDApiResponse"/>&gt;</returns>
        public async Task<IGetGroupsByUserIDApiResponse> GetGroupsByUserIDAsync(string username, Option<string> search = default, Option<int> page = default, Option<int> pageSize = default, Option<bool> desc = default, Option<string> orderBy = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetGroupsByUserID(username, search, orderBy);

                FormatGetGroupsByUserID(ref username, ref search, ref page, ref pageSize, ref desc, ref orderBy);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/users/{username}/groups"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/users/{username}/groups");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (desc.IsSet)
                        parseQueryStringLocalVar["desc"] = ClientUtils.ParameterToString(desc.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["order_by"] = ClientUtils.ParameterToString(orderBy.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetGroupsByUserIDApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetGroupsByUserIDApiResponse>();

                        GetGroupsByUserIDApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/{username}/groups", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetGroupsByUserIDDefaultImplementation(apiResponseLocalVar, username, search, page, pageSize, desc, orderBy);

                        Events.ExecuteOnGetGroupsByUserID(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetGroupsByUserIDDefaultImplementation(e, "/users/{username}/groups", uriBuilderLocalVar.Path, username, search, page, pageSize, desc, orderBy);
                Events.ExecuteOnErrorGetGroupsByUserID(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetGroupsByUserIDApiResponse"/>
        /// </summary>
        public partial class GetGroupsByUserIDApiResponse : CNBOpenApi.Client.ApiResponse, IGetGroupsByUserIDApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetGroupsByUserIDApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetGroupsByUserIDApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetGroupsByUserIDApiResponse(ILogger<GetGroupsByUserIDApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DtoOrganizationUnion? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DtoOrganizationUnion>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.DtoOrganizationUnion? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListGroups(ref string group, ref Option<int> page, ref Option<int> pageSize, ref Option<int> access);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="group"></param>
        /// <returns></returns>
        private void ValidateListGroups(string group)
        {
            if (group == null)
                throw new ArgumentNullException(nameof(group));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="access"></param>
        private void AfterListGroupsDefaultImplementation(IListGroupsApiResponse apiResponseLocalVar, string group, Option<int> page, Option<int> pageSize, Option<int> access)
        {
            bool suppressDefaultLog = false;
            AfterListGroups(ref suppressDefaultLog, apiResponseLocalVar, group, page, pageSize, access);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="access"></param>
        partial void AfterListGroups(ref bool suppressDefaultLog, IListGroupsApiResponse apiResponseLocalVar, string group, Option<int> page, Option<int> pageSize, Option<int> access);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="access"></param>
        private void OnErrorListGroupsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, Option<int> page, Option<int> pageSize, Option<int> access)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListGroups(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, group, page, pageSize, access);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="access"></param>
        partial void OnErrorListGroups(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, Option<int> page, Option<int> pageSize, Option<int> access);

        /// <summary>
        /// 查询当前用户在指定组织下拥有指定权限的子组织列表 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </summary>
        /// <param name="group">Group slug</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="access">access level (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListGroupsApiResponse"/>&gt;</returns>
        public async Task<IListGroupsApiResponse?> ListGroupsOrDefaultAsync(string group, Option<int> page = default, Option<int> pageSize = default, Option<int> access = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListGroupsAsync(group, page, pageSize, access, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 查询当前用户在指定组织下拥有指定权限的子组织列表 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">Group slug</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="access">access level (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListGroupsApiResponse"/>&gt;</returns>
        public async Task<IListGroupsApiResponse> ListGroupsAsync(string group, Option<int> page = default, Option<int> pageSize = default, Option<int> access = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListGroups(group);

                FormatListGroups(ref group, ref page, ref pageSize, ref access);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/user/groups/{group}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/user/groups/{group}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bgroup%7D", Uri.EscapeDataString(group.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (access.IsSet)
                        parseQueryStringLocalVar["access"] = ClientUtils.ParameterToString(access.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListGroupsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListGroupsApiResponse>();

                        ListGroupsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/user/groups/{group}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListGroupsDefaultImplementation(apiResponseLocalVar, group, page, pageSize, access);

                        Events.ExecuteOnListGroups(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListGroupsDefaultImplementation(e, "/user/groups/{group}", uriBuilderLocalVar.Path, group, page, pageSize, access);
                Events.ExecuteOnErrorListGroups(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListGroupsApiResponse"/>
        /// </summary>
        public partial class ListGroupsApiResponse : CNBOpenApi.Client.ApiResponse, IListGroupsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListGroupsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListGroupsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListGroupsApiResponse(ILogger<ListGroupsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoOrganizationAccess>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoOrganizationAccess>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoOrganizationAccess>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListSubgroups(ref string group, ref int page, ref int pageSize, ref Option<string> search);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="group"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        private void ValidateListSubgroups(string group, Option<string> search)
        {
            if (group == null)
                throw new ArgumentNullException(nameof(group));

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="search"></param>
        private void AfterListSubgroupsDefaultImplementation(IListSubgroupsApiResponse apiResponseLocalVar, string group, int page, int pageSize, Option<string> search)
        {
            bool suppressDefaultLog = false;
            AfterListSubgroups(ref suppressDefaultLog, apiResponseLocalVar, group, page, pageSize, search);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="search"></param>
        partial void AfterListSubgroups(ref bool suppressDefaultLog, IListSubgroupsApiResponse apiResponseLocalVar, string group, int page, int pageSize, Option<string> search);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="search"></param>
        private void OnErrorListSubgroupsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, int page, int pageSize, Option<string> search)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListSubgroups(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, group, page, pageSize, search);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="search"></param>
        partial void OnErrorListSubgroups(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, int page, int pageSize, Option<string> search);

        /// <summary>
        /// 获取指定组织下的子组织列表 访问令牌调用此接口需包含以下权限  group-resource:r
        /// </summary>
        /// <param name="group">Slug</param>
        /// <param name="page">page</param>
        /// <param name="pageSize">page</param>
        /// <param name="search">过滤组织 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSubgroupsApiResponse"/>&gt;</returns>
        public async Task<IListSubgroupsApiResponse?> ListSubgroupsOrDefaultAsync(string group, int page, int pageSize, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListSubgroupsAsync(group, page, pageSize, search, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定组织下的子组织列表 访问令牌调用此接口需包含以下权限  group-resource:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">Slug</param>
        /// <param name="page">page</param>
        /// <param name="pageSize">page</param>
        /// <param name="search">过滤组织 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSubgroupsApiResponse"/>&gt;</returns>
        public async Task<IListSubgroupsApiResponse> ListSubgroupsAsync(string group, int page, int pageSize, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListSubgroups(group, search);

                FormatListSubgroups(ref group, ref page, ref pageSize, ref search);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{group}/-/sub-groups"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{group}/-/sub-groups");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bgroup%7D", Uri.EscapeDataString(group.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);
                    parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page);
                    parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListSubgroupsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListSubgroupsApiResponse>();

                        ListSubgroupsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{group}/-/sub-groups", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListSubgroupsDefaultImplementation(apiResponseLocalVar, group, page, pageSize, search);

                        Events.ExecuteOnListSubgroups(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListSubgroupsDefaultImplementation(e, "/{group}/-/sub-groups", uriBuilderLocalVar.Path, group, page, pageSize, search);
                Events.ExecuteOnErrorListSubgroups(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListSubgroupsApiResponse"/>
        /// </summary>
        public partial class ListSubgroupsApiResponse : CNBOpenApi.Client.ApiResponse, IListSubgroupsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListSubgroupsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListSubgroupsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListSubgroupsApiResponse(ILogger<ListSubgroupsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoOrganizationUnion>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoOrganizationUnion>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoOrganizationUnion>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListTopGroups(ref Option<int> page, ref Option<int> pageSize, ref Option<string> search, ref Option<string> role);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="search"></param>
        /// <param name="role"></param>
        /// <returns></returns>
        private void ValidateListTopGroups(Option<string> search, Option<string> role)
        {
            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="search"></param>
        /// <param name="role"></param>
        private void AfterListTopGroupsDefaultImplementation(IListTopGroupsApiResponse apiResponseLocalVar, Option<int> page, Option<int> pageSize, Option<string> search, Option<string> role)
        {
            bool suppressDefaultLog = false;
            AfterListTopGroups(ref suppressDefaultLog, apiResponseLocalVar, page, pageSize, search, role);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="search"></param>
        /// <param name="role"></param>
        partial void AfterListTopGroups(ref bool suppressDefaultLog, IListTopGroupsApiResponse apiResponseLocalVar, Option<int> page, Option<int> pageSize, Option<string> search, Option<string> role);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="search"></param>
        /// <param name="role"></param>
        private void OnErrorListTopGroupsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> pageSize, Option<string> search, Option<string> role)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListTopGroups(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page, pageSize, search, role);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="search"></param>
        /// <param name="role"></param>
        partial void OnErrorListTopGroups(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> pageSize, Option<string> search, Option<string> role);

        /// <summary>
        /// 获取当前用户拥有权限的顶层组织列表 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </summary>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="search">过滤组织 (optional)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListTopGroupsApiResponse"/>&gt;</returns>
        public async Task<IListTopGroupsApiResponse?> ListTopGroupsOrDefaultAsync(Option<int> page = default, Option<int> pageSize = default, Option<string> search = default, Option<string> role = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListTopGroupsAsync(page, pageSize, search, role, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取当前用户拥有权限的顶层组织列表 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="search">过滤组织 (optional)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListTopGroupsApiResponse"/>&gt;</returns>
        public async Task<IListTopGroupsApiResponse> ListTopGroupsAsync(Option<int> page = default, Option<int> pageSize = default, Option<string> search = default, Option<string> role = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListTopGroups(search, role);

                FormatListTopGroups(ref page, ref pageSize, ref search, ref role);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/user/groups"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/user/groups");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    if (role.IsSet)
                        parseQueryStringLocalVar["role"] = ClientUtils.ParameterToString(role.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListTopGroupsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListTopGroupsApiResponse>();

                        ListTopGroupsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/user/groups", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListTopGroupsDefaultImplementation(apiResponseLocalVar, page, pageSize, search, role);

                        Events.ExecuteOnListTopGroups(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListTopGroupsDefaultImplementation(e, "/user/groups", uriBuilderLocalVar.Path, page, pageSize, search, role);
                Events.ExecuteOnErrorListTopGroups(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListTopGroupsApiResponse"/>
        /// </summary>
        public partial class ListTopGroupsApiResponse : CNBOpenApi.Client.ApiResponse, IListTopGroupsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListTopGroupsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListTopGroupsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListTopGroupsApiResponse(ILogger<ListTopGroupsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoOrganizationAccess>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoOrganizationAccess>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoOrganizationAccess>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateGroupAvatar(ref string group, DtoUpdateGroupAvatarReq request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="group"></param>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateUpdateGroupAvatar(string group, DtoUpdateGroupAvatarReq request)
        {
            if (group == null)
                throw new ArgumentNullException(nameof(group));

            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="request"></param>
        private void AfterUpdateGroupAvatarDefaultImplementation(IUpdateGroupAvatarApiResponse apiResponseLocalVar, string group, DtoUpdateGroupAvatarReq request)
        {
            bool suppressDefaultLog = false;
            AfterUpdateGroupAvatar(ref suppressDefaultLog, apiResponseLocalVar, group, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="request"></param>
        partial void AfterUpdateGroupAvatar(ref bool suppressDefaultLog, IUpdateGroupAvatarApiResponse apiResponseLocalVar, string group, DtoUpdateGroupAvatarReq request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="request"></param>
        private void OnErrorUpdateGroupAvatarDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, DtoUpdateGroupAvatarReq request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateGroupAvatar(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, group, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="request"></param>
        partial void OnErrorUpdateGroupAvatar(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, DtoUpdateGroupAvatarReq request);

        /// <summary>
        /// 更新组织头像 URL 地址 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </summary>
        /// <param name="group">slug</param>
        /// <param name="request">group avatar url to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGroupAvatarApiResponse"/>&gt;</returns>
        public async Task<IUpdateGroupAvatarApiResponse?> UpdateGroupAvatarOrDefaultAsync(string group, DtoUpdateGroupAvatarReq request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateGroupAvatarAsync(group, request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 更新组织头像 URL 地址 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="request">group avatar url to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGroupAvatarApiResponse"/>&gt;</returns>
        public async Task<IUpdateGroupAvatarApiResponse> UpdateGroupAvatarAsync(string group, DtoUpdateGroupAvatarReq request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateGroupAvatar(group, request);

                FormatUpdateGroupAvatar(ref group, request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{group}/-/avatar"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{group}/-/avatar");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bgroup%7D", Uri.EscapeDataString(group.ToString()));

                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateGroupAvatarApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateGroupAvatarApiResponse>();

                        UpdateGroupAvatarApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{group}/-/avatar", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateGroupAvatarDefaultImplementation(apiResponseLocalVar, group, request);

                        Events.ExecuteOnUpdateGroupAvatar(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateGroupAvatarDefaultImplementation(e, "/{group}/-/avatar", uriBuilderLocalVar.Path, group, request);
                Events.ExecuteOnErrorUpdateGroupAvatar(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateGroupAvatarApiResponse"/>
        /// </summary>
        public partial class UpdateGroupAvatarApiResponse : CNBOpenApi.Client.ApiResponse, IUpdateGroupAvatarApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateGroupAvatarApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateGroupAvatarApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateGroupAvatarApiResponse(ILogger<UpdateGroupAvatarApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateGroupSetting(ref string group, DtoGroupSettingReq request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="group"></param>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateUpdateGroupSetting(string group, DtoGroupSettingReq request)
        {
            if (group == null)
                throw new ArgumentNullException(nameof(group));

            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="request"></param>
        private void AfterUpdateGroupSettingDefaultImplementation(IUpdateGroupSettingApiResponse apiResponseLocalVar, string group, DtoGroupSettingReq request)
        {
            bool suppressDefaultLog = false;
            AfterUpdateGroupSetting(ref suppressDefaultLog, apiResponseLocalVar, group, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="request"></param>
        partial void AfterUpdateGroupSetting(ref bool suppressDefaultLog, IUpdateGroupSettingApiResponse apiResponseLocalVar, string group, DtoGroupSettingReq request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="request"></param>
        private void OnErrorUpdateGroupSettingDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, DtoGroupSettingReq request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateGroupSetting(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, group, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="request"></param>
        partial void OnErrorUpdateGroupSetting(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, DtoGroupSettingReq request);

        /// <summary>
        /// 更新指定组织的配置, 可更新内容为: 是否对外隐藏组织成员 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </summary>
        /// <param name="group">slug</param>
        /// <param name="request">group information to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGroupSettingApiResponse"/>&gt;</returns>
        public async Task<IUpdateGroupSettingApiResponse?> UpdateGroupSettingOrDefaultAsync(string group, DtoGroupSettingReq request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateGroupSettingAsync(group, request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 更新指定组织的配置, 可更新内容为: 是否对外隐藏组织成员 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="request">group information to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGroupSettingApiResponse"/>&gt;</returns>
        public async Task<IUpdateGroupSettingApiResponse> UpdateGroupSettingAsync(string group, DtoGroupSettingReq request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateGroupSetting(group, request);

                FormatUpdateGroupSetting(ref group, request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{group}/-/settings"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{group}/-/settings");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bgroup%7D", Uri.EscapeDataString(group.ToString()));

                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateGroupSettingApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateGroupSettingApiResponse>();

                        UpdateGroupSettingApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{group}/-/settings", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateGroupSettingDefaultImplementation(apiResponseLocalVar, group, request);

                        Events.ExecuteOnUpdateGroupSetting(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateGroupSettingDefaultImplementation(e, "/{group}/-/settings", uriBuilderLocalVar.Path, group, request);
                Events.ExecuteOnErrorUpdateGroupSetting(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateGroupSettingApiResponse"/>
        /// </summary>
        public partial class UpdateGroupSettingApiResponse : CNBOpenApi.Client.ApiResponse, IUpdateGroupSettingApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateGroupSettingApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateGroupSettingApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateGroupSettingApiResponse(ILogger<UpdateGroupSettingApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateOrganization(ref string group, DtoUpdateGroupReq request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="group"></param>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateUpdateOrganization(string group, DtoUpdateGroupReq request)
        {
            if (group == null)
                throw new ArgumentNullException(nameof(group));

            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="request"></param>
        private void AfterUpdateOrganizationDefaultImplementation(IUpdateOrganizationApiResponse apiResponseLocalVar, string group, DtoUpdateGroupReq request)
        {
            bool suppressDefaultLog = false;
            AfterUpdateOrganization(ref suppressDefaultLog, apiResponseLocalVar, group, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="request"></param>
        partial void AfterUpdateOrganization(ref bool suppressDefaultLog, IUpdateOrganizationApiResponse apiResponseLocalVar, string group, DtoUpdateGroupReq request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="request"></param>
        private void OnErrorUpdateOrganizationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, DtoUpdateGroupReq request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateOrganization(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, group, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="request"></param>
        partial void OnErrorUpdateOrganization(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, DtoUpdateGroupReq request);

        /// <summary>
        /// 更新组织信息, 可更新的内容为: 组织描述, 组织展示名称, 组织网站, 组织联系邮箱 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </summary>
        /// <param name="group">slug</param>
        /// <param name="request">group information to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationApiResponse"/>&gt;</returns>
        public async Task<IUpdateOrganizationApiResponse?> UpdateOrganizationOrDefaultAsync(string group, DtoUpdateGroupReq request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateOrganizationAsync(group, request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 更新组织信息, 可更新的内容为: 组织描述, 组织展示名称, 组织网站, 组织联系邮箱 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="request">group information to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationApiResponse"/>&gt;</returns>
        public async Task<IUpdateOrganizationApiResponse> UpdateOrganizationAsync(string group, DtoUpdateGroupReq request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateOrganization(group, request);

                FormatUpdateOrganization(ref group, request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{group}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{group}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bgroup%7D", Uri.EscapeDataString(group.ToString()));

                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateOrganizationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateOrganizationApiResponse>();

                        UpdateOrganizationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{group}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateOrganizationDefaultImplementation(apiResponseLocalVar, group, request);

                        Events.ExecuteOnUpdateOrganization(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateOrganizationDefaultImplementation(e, "/{group}", uriBuilderLocalVar.Path, group, request);
                Events.ExecuteOnErrorUpdateOrganization(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateOrganizationApiResponse"/>
        /// </summary>
        public partial class UpdateOrganizationApiResponse : CNBOpenApi.Client.ApiResponse, IUpdateOrganizationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateOrganizationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateOrganizationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateOrganizationApiResponse(ILogger<UpdateOrganizationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
