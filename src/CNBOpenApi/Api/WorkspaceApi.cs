// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CNBOpenApi.Client;
using CNBOpenApi.Model;
using System.Diagnostics.CodeAnalysis;

namespace CNBOpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IWorkspaceApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        WorkspaceApiEvents Events { get; }

        /// <summary>
        /// 删除我的云原生开发环境
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">参数</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWorkspaceApiResponse"/>&gt;</returns>
        Task<IDeleteWorkspaceApiResponse> DeleteWorkspaceAsync(DtoWorkspaceDeleteReq request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除我的云原生开发环境
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:rw
        /// </remarks>
        /// <param name="request">参数</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWorkspaceApiResponse"/>?&gt;</returns>
        Task<IDeleteWorkspaceApiResponse?> DeleteWorkspaceOrDefaultAsync(DtoWorkspaceDeleteReq request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 根据流水线sn查询云原生开发访问地址
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-cnb-detail:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">仓库路径</param>
        /// <param name="sn">构建号</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWorkspaceDetailApiResponse"/>&gt;</returns>
        Task<IGetWorkspaceDetailApiResponse> GetWorkspaceDetailAsync(string repo, string sn, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 根据流水线sn查询云原生开发访问地址
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-cnb-detail:r
        /// </remarks>
        /// <param name="repo">仓库路径</param>
        /// <param name="sn">构建号</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWorkspaceDetailApiResponse"/>?&gt;</returns>
        Task<IGetWorkspaceDetailApiResponse?> GetWorkspaceDetailOrDefaultAsync(string repo, string sn, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取我的云原生开发环境列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="branch">分支名，例如：main (optional)</param>
        /// <param name="end">查询结束时间，格式：YYYY-MM-DD HH:mm:ssZZ，例如：2024-12-01 00:00:00+0800 (optional)</param>
        /// <param name="page">分页页码，从 1 开始，默认为 1 (optional)</param>
        /// <param name="pageSize">每页条数，默认为 20，最高 100 (optional)</param>
        /// <param name="slug">仓库路径，例如：groupname/reponame (optional)</param>
        /// <param name="start">查询开始时间，格式：YYYY-MM-DD HH:mm:ssZZ，例如：2024-12-01 00:00:00+0800 (optional)</param>
        /// <param name="status">开发环境状态，running: 开发环境已启动，closed：开发环境已关闭 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListWorkspacesApiResponse"/>&gt;</returns>
        Task<IListWorkspacesApiResponse> ListWorkspacesAsync(Option<string> branch = default, Option<string> end = default, Option<int> page = default, Option<int> pageSize = default, Option<string> slug = default, Option<string> start = default, Option<string> status = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取我的云原生开发环境列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </remarks>
        /// <param name="branch">分支名，例如：main (optional)</param>
        /// <param name="end">查询结束时间，格式：YYYY-MM-DD HH:mm:ssZZ，例如：2024-12-01 00:00:00+0800 (optional)</param>
        /// <param name="page">分页页码，从 1 开始，默认为 1 (optional)</param>
        /// <param name="pageSize">每页条数，默认为 20，最高 100 (optional)</param>
        /// <param name="slug">仓库路径，例如：groupname/reponame (optional)</param>
        /// <param name="start">查询开始时间，格式：YYYY-MM-DD HH:mm:ssZZ，例如：2024-12-01 00:00:00+0800 (optional)</param>
        /// <param name="status">开发环境状态，running: 开发环境已启动，closed：开发环境已关闭 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListWorkspacesApiResponse"/>?&gt;</returns>
        Task<IListWorkspacesApiResponse?> ListWorkspacesOrDefaultAsync(Option<string> branch = default, Option<string> end = default, Option<int> page = default, Option<int> pageSize = default, Option<string> slug = default, Option<string> start = default, Option<string> status = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteWorkspaceApiResponse"/>
    /// </summary>
    public interface IDeleteWorkspaceApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.DtoWorkspaceDeleteResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetWorkspaceDetailApiResponse"/>
    /// </summary>
    public interface IGetWorkspaceDetailApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.DtoWorkspaceDetailResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListWorkspacesApiResponse"/>
    /// </summary>
    public interface IListWorkspacesApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.DtoWorkspaceListResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class WorkspaceApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteWorkspace;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteWorkspace;

        internal void ExecuteOnDeleteWorkspace(WorkspaceApi.DeleteWorkspaceApiResponse apiResponse)
        {
            OnDeleteWorkspace?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteWorkspace(Exception exception)
        {
            OnErrorDeleteWorkspace?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetWorkspaceDetail;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetWorkspaceDetail;

        internal void ExecuteOnGetWorkspaceDetail(WorkspaceApi.GetWorkspaceDetailApiResponse apiResponse)
        {
            OnGetWorkspaceDetail?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetWorkspaceDetail(Exception exception)
        {
            OnErrorGetWorkspaceDetail?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListWorkspaces;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListWorkspaces;

        internal void ExecuteOnListWorkspaces(WorkspaceApi.ListWorkspacesApiResponse apiResponse)
        {
            OnListWorkspaces?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListWorkspaces(Exception exception)
        {
            OnErrorListWorkspaces?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class WorkspaceApi : IWorkspaceApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<WorkspaceApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public WorkspaceApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspaceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkspaceApi(ILogger<WorkspaceApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, WorkspaceApiEvents workspaceApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<WorkspaceApi>();
            HttpClient = httpClient;
            Events = workspaceApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatDeleteWorkspace(DtoWorkspaceDeleteReq request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateDeleteWorkspace(DtoWorkspaceDeleteReq request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterDeleteWorkspaceDefaultImplementation(IDeleteWorkspaceApiResponse apiResponseLocalVar, DtoWorkspaceDeleteReq request)
        {
            bool suppressDefaultLog = false;
            AfterDeleteWorkspace(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterDeleteWorkspace(ref bool suppressDefaultLog, IDeleteWorkspaceApiResponse apiResponseLocalVar, DtoWorkspaceDeleteReq request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorDeleteWorkspaceDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DtoWorkspaceDeleteReq request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteWorkspace(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorDeleteWorkspace(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DtoWorkspaceDeleteReq request);

        /// <summary>
        /// 删除我的云原生开发环境 访问令牌调用此接口需包含以下权限  account-engage:rw
        /// </summary>
        /// <param name="request">参数</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWorkspaceApiResponse"/>&gt;</returns>
        public async Task<IDeleteWorkspaceApiResponse?> DeleteWorkspaceOrDefaultAsync(DtoWorkspaceDeleteReq request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteWorkspaceAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 删除我的云原生开发环境 访问令牌调用此接口需包含以下权限  account-engage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">参数</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWorkspaceApiResponse"/>&gt;</returns>
        public async Task<IDeleteWorkspaceApiResponse> DeleteWorkspaceAsync(DtoWorkspaceDeleteReq request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteWorkspace(request);

                FormatDeleteWorkspace(request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/workspace/delete"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/workspace/delete");

                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteWorkspaceApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteWorkspaceApiResponse>();

                        DeleteWorkspaceApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/workspace/delete", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteWorkspaceDefaultImplementation(apiResponseLocalVar, request);

                        Events.ExecuteOnDeleteWorkspace(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteWorkspaceDefaultImplementation(e, "/workspace/delete", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorDeleteWorkspace(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteWorkspaceApiResponse"/>
        /// </summary>
        public partial class DeleteWorkspaceApiResponse : CNBOpenApi.Client.ApiResponse, IDeleteWorkspaceApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteWorkspaceApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteWorkspaceApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteWorkspaceApiResponse(ILogger<DeleteWorkspaceApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DtoWorkspaceDeleteResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DtoWorkspaceDeleteResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.DtoWorkspaceDeleteResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetWorkspaceDetail(ref string repo, ref string sn);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="sn"></param>
        /// <returns></returns>
        private void ValidateGetWorkspaceDetail(string repo, string sn)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (sn == null)
                throw new ArgumentNullException(nameof(sn));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="sn"></param>
        private void AfterGetWorkspaceDetailDefaultImplementation(IGetWorkspaceDetailApiResponse apiResponseLocalVar, string repo, string sn)
        {
            bool suppressDefaultLog = false;
            AfterGetWorkspaceDetail(ref suppressDefaultLog, apiResponseLocalVar, repo, sn);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="sn"></param>
        partial void AfterGetWorkspaceDetail(ref bool suppressDefaultLog, IGetWorkspaceDetailApiResponse apiResponseLocalVar, string repo, string sn);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="sn"></param>
        private void OnErrorGetWorkspaceDetailDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string sn)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetWorkspaceDetail(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, sn);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="sn"></param>
        partial void OnErrorGetWorkspaceDetail(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string sn);

        /// <summary>
        /// 根据流水线sn查询云原生开发访问地址 访问令牌调用此接口需包含以下权限  repo-cnb-detail:r
        /// </summary>
        /// <param name="repo">仓库路径</param>
        /// <param name="sn">构建号</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWorkspaceDetailApiResponse"/>&gt;</returns>
        public async Task<IGetWorkspaceDetailApiResponse?> GetWorkspaceDetailOrDefaultAsync(string repo, string sn, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetWorkspaceDetailAsync(repo, sn, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 根据流水线sn查询云原生开发访问地址 访问令牌调用此接口需包含以下权限  repo-cnb-detail:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">仓库路径</param>
        /// <param name="sn">构建号</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWorkspaceDetailApiResponse"/>&gt;</returns>
        public async Task<IGetWorkspaceDetailApiResponse> GetWorkspaceDetailAsync(string repo, string sn, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetWorkspaceDetail(repo, sn);

                FormatGetWorkspaceDetail(ref repo, ref sn);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/workspace/detail/{sn}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/workspace/detail/{sn}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsn%7D", Uri.EscapeDataString(sn.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetWorkspaceDetailApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetWorkspaceDetailApiResponse>();

                        GetWorkspaceDetailApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/workspace/detail/{sn}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetWorkspaceDetailDefaultImplementation(apiResponseLocalVar, repo, sn);

                        Events.ExecuteOnGetWorkspaceDetail(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetWorkspaceDetailDefaultImplementation(e, "/{repo}/-/workspace/detail/{sn}", uriBuilderLocalVar.Path, repo, sn);
                Events.ExecuteOnErrorGetWorkspaceDetail(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetWorkspaceDetailApiResponse"/>
        /// </summary>
        public partial class GetWorkspaceDetailApiResponse : CNBOpenApi.Client.ApiResponse, IGetWorkspaceDetailApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetWorkspaceDetailApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetWorkspaceDetailApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetWorkspaceDetailApiResponse(ILogger<GetWorkspaceDetailApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DtoWorkspaceDetailResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DtoWorkspaceDetailResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.DtoWorkspaceDetailResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListWorkspaces(ref Option<string> branch, ref Option<string> end, ref Option<int> page, ref Option<int> pageSize, ref Option<string> slug, ref Option<string> start, ref Option<string> status);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="branch"></param>
        /// <param name="end"></param>
        /// <param name="slug"></param>
        /// <param name="start"></param>
        /// <param name="status"></param>
        /// <returns></returns>
        private void ValidateListWorkspaces(Option<string> branch, Option<string> end, Option<string> slug, Option<string> start, Option<string> status)
        {
            if (branch.IsSet && branch.Value == null)
                throw new ArgumentNullException(nameof(branch));

            if (end.IsSet && end.Value == null)
                throw new ArgumentNullException(nameof(end));

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug));

            if (start.IsSet && start.Value == null)
                throw new ArgumentNullException(nameof(start));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="branch"></param>
        /// <param name="end"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="slug"></param>
        /// <param name="start"></param>
        /// <param name="status"></param>
        private void AfterListWorkspacesDefaultImplementation(IListWorkspacesApiResponse apiResponseLocalVar, Option<string> branch, Option<string> end, Option<int> page, Option<int> pageSize, Option<string> slug, Option<string> start, Option<string> status)
        {
            bool suppressDefaultLog = false;
            AfterListWorkspaces(ref suppressDefaultLog, apiResponseLocalVar, branch, end, page, pageSize, slug, start, status);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="branch"></param>
        /// <param name="end"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="slug"></param>
        /// <param name="start"></param>
        /// <param name="status"></param>
        partial void AfterListWorkspaces(ref bool suppressDefaultLog, IListWorkspacesApiResponse apiResponseLocalVar, Option<string> branch, Option<string> end, Option<int> page, Option<int> pageSize, Option<string> slug, Option<string> start, Option<string> status);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="branch"></param>
        /// <param name="end"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="slug"></param>
        /// <param name="start"></param>
        /// <param name="status"></param>
        private void OnErrorListWorkspacesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> branch, Option<string> end, Option<int> page, Option<int> pageSize, Option<string> slug, Option<string> start, Option<string> status)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListWorkspaces(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, branch, end, page, pageSize, slug, start, status);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="branch"></param>
        /// <param name="end"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="slug"></param>
        /// <param name="start"></param>
        /// <param name="status"></param>
        partial void OnErrorListWorkspaces(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> branch, Option<string> end, Option<int> page, Option<int> pageSize, Option<string> slug, Option<string> start, Option<string> status);

        /// <summary>
        /// 获取我的云原生开发环境列表 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </summary>
        /// <param name="branch">分支名，例如：main (optional)</param>
        /// <param name="end">查询结束时间，格式：YYYY-MM-DD HH:mm:ssZZ，例如：2024-12-01 00:00:00+0800 (optional)</param>
        /// <param name="page">分页页码，从 1 开始，默认为 1 (optional)</param>
        /// <param name="pageSize">每页条数，默认为 20，最高 100 (optional)</param>
        /// <param name="slug">仓库路径，例如：groupname/reponame (optional)</param>
        /// <param name="start">查询开始时间，格式：YYYY-MM-DD HH:mm:ssZZ，例如：2024-12-01 00:00:00+0800 (optional)</param>
        /// <param name="status">开发环境状态，running: 开发环境已启动，closed：开发环境已关闭 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListWorkspacesApiResponse"/>&gt;</returns>
        public async Task<IListWorkspacesApiResponse?> ListWorkspacesOrDefaultAsync(Option<string> branch = default, Option<string> end = default, Option<int> page = default, Option<int> pageSize = default, Option<string> slug = default, Option<string> start = default, Option<string> status = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListWorkspacesAsync(branch, end, page, pageSize, slug, start, status, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取我的云原生开发环境列表 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="branch">分支名，例如：main (optional)</param>
        /// <param name="end">查询结束时间，格式：YYYY-MM-DD HH:mm:ssZZ，例如：2024-12-01 00:00:00+0800 (optional)</param>
        /// <param name="page">分页页码，从 1 开始，默认为 1 (optional)</param>
        /// <param name="pageSize">每页条数，默认为 20，最高 100 (optional)</param>
        /// <param name="slug">仓库路径，例如：groupname/reponame (optional)</param>
        /// <param name="start">查询开始时间，格式：YYYY-MM-DD HH:mm:ssZZ，例如：2024-12-01 00:00:00+0800 (optional)</param>
        /// <param name="status">开发环境状态，running: 开发环境已启动，closed：开发环境已关闭 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListWorkspacesApiResponse"/>&gt;</returns>
        public async Task<IListWorkspacesApiResponse> ListWorkspacesAsync(Option<string> branch = default, Option<string> end = default, Option<int> page = default, Option<int> pageSize = default, Option<string> slug = default, Option<string> start = default, Option<string> status = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListWorkspaces(branch, end, slug, start, status);

                FormatListWorkspaces(ref branch, ref end, ref page, ref pageSize, ref slug, ref start, ref status);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/workspace/list"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/workspace/list");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (branch.IsSet)
                        parseQueryStringLocalVar["branch"] = ClientUtils.ParameterToString(branch.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (slug.IsSet)
                        parseQueryStringLocalVar["slug"] = ClientUtils.ParameterToString(slug.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (status.IsSet)
                        parseQueryStringLocalVar["status"] = ClientUtils.ParameterToString(status.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListWorkspacesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListWorkspacesApiResponse>();

                        ListWorkspacesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/workspace/list", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListWorkspacesDefaultImplementation(apiResponseLocalVar, branch, end, page, pageSize, slug, start, status);

                        Events.ExecuteOnListWorkspaces(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListWorkspacesDefaultImplementation(e, "/workspace/list", uriBuilderLocalVar.Path, branch, end, page, pageSize, slug, start, status);
                Events.ExecuteOnErrorListWorkspaces(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListWorkspacesApiResponse"/>
        /// </summary>
        public partial class ListWorkspacesApiResponse : CNBOpenApi.Client.ApiResponse, IListWorkspacesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListWorkspacesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListWorkspacesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListWorkspacesApiResponse(ILogger<ListWorkspacesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DtoWorkspaceListResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DtoWorkspaceListResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.DtoWorkspaceListResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
