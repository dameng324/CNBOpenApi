// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CNBOpenApi.Client;
using CNBOpenApi.Model;
using System.Diagnostics.CodeAnalysis;

namespace CNBOpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IUsersApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        UsersApiEvents Events { get; }

        /// <summary>
        /// 查询当前用户用户拥有指定权限的所有资源列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceType">资源类型, 默认group (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="search">过滤组织 (optional)</param>
        /// <param name="access">最小仓库权限，默认owner (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAutoCompleteSourceApiResponse"/>&gt;</returns>
        Task<IAutoCompleteSourceApiResponse> AutoCompleteSourceAsync(Option<string> sourceType = default, Option<int> page = default, Option<int> pageSize = default, Option<string> search = default, Option<string> access = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询当前用户用户拥有指定权限的所有资源列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </remarks>
        /// <param name="sourceType">资源类型, 默认group (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="search">过滤组织 (optional)</param>
        /// <param name="access">最小仓库权限，默认owner (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAutoCompleteSourceApiResponse"/>?&gt;</returns>
        Task<IAutoCompleteSourceApiResponse?> AutoCompleteSourceOrDefaultAsync(Option<string> sourceType = default, Option<int> page = default, Option<int> pageSize = default, Option<string> search = default, Option<string> access = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定用户的详情信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-profile:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserInfoApiResponse"/>&gt;</returns>
        Task<IGetUserInfoApiResponse> GetUserInfoAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定用户的详情信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-profile:r
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserInfoApiResponse"/>?&gt;</returns>
        Task<IGetUserInfoApiResponse?> GetUserInfoOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定用户的详情信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-profile:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserInfoByNameApiResponse"/>&gt;</returns>
        Task<IGetUserInfoByNameApiResponse> GetUserInfoByNameAsync(string username, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定用户的详情信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-profile:r
        /// </remarks>
        /// <param name="username">User Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserInfoByNameApiResponse"/>?&gt;</returns>
        Task<IGetUserInfoByNameApiResponse?> GetUserInfoByNameOrDefaultAsync(string username, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新指定用户的详情信息, 可更新内容为: 昵称, 个人签名, 微信公众号名称, 微信公众号二维码链接, 个人网站, 个人地址, 公司名称
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-profile:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">user info</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateUserInfoApiResponse"/>&gt;</returns>
        Task<IUpdateUserInfoApiResponse> UpdateUserInfoAsync(HttpUpdateUserInfoPayload request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新指定用户的详情信息, 可更新内容为: 昵称, 个人签名, 微信公众号名称, 微信公众号二维码链接, 个人网站, 个人地址, 公司名称
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-profile:rw
        /// </remarks>
        /// <param name="request">user info</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateUserInfoApiResponse"/>?&gt;</returns>
        Task<IUpdateUserInfoApiResponse?> UpdateUserInfoOrDefaultAsync(HttpUpdateUserInfoPayload request, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAutoCompleteSourceApiResponse"/>
    /// </summary>
    public interface IAutoCompleteSourceApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<string>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserInfoApiResponse"/>
    /// </summary>
    public interface IGetUserInfoApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.DtoUsersResultForSelf?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserInfoByNameApiResponse"/>
    /// </summary>
    public interface IGetUserInfoByNameApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.DtoUsersResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateUserInfoApiResponse"/>
    /// </summary>
    public interface IUpdateUserInfoApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class UsersApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAutoCompleteSource;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAutoCompleteSource;

        internal void ExecuteOnAutoCompleteSource(UsersApi.AutoCompleteSourceApiResponse apiResponse)
        {
            OnAutoCompleteSource?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAutoCompleteSource(Exception exception)
        {
            OnErrorAutoCompleteSource?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserInfo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserInfo;

        internal void ExecuteOnGetUserInfo(UsersApi.GetUserInfoApiResponse apiResponse)
        {
            OnGetUserInfo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserInfo(Exception exception)
        {
            OnErrorGetUserInfo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserInfoByName;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserInfoByName;

        internal void ExecuteOnGetUserInfoByName(UsersApi.GetUserInfoByNameApiResponse apiResponse)
        {
            OnGetUserInfoByName?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserInfoByName(Exception exception)
        {
            OnErrorGetUserInfoByName?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateUserInfo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateUserInfo;

        internal void ExecuteOnUpdateUserInfo(UsersApi.UpdateUserInfoApiResponse apiResponse)
        {
            OnUpdateUserInfo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateUserInfo(Exception exception)
        {
            OnErrorUpdateUserInfo?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class UsersApi : IUsersApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<UsersApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public UsersApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(ILogger<UsersApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, UsersApiEvents usersApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<UsersApi>();
            HttpClient = httpClient;
            Events = usersApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatAutoCompleteSource(ref Option<string> sourceType, ref Option<int> page, ref Option<int> pageSize, ref Option<string> search, ref Option<string> access);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sourceType"></param>
        /// <param name="search"></param>
        /// <param name="access"></param>
        /// <returns></returns>
        private void ValidateAutoCompleteSource(Option<string> sourceType, Option<string> search, Option<string> access)
        {
            if (sourceType.IsSet && sourceType.Value == null)
                throw new ArgumentNullException(nameof(sourceType));

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));

            if (access.IsSet && access.Value == null)
                throw new ArgumentNullException(nameof(access));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sourceType"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="search"></param>
        /// <param name="access"></param>
        private void AfterAutoCompleteSourceDefaultImplementation(IAutoCompleteSourceApiResponse apiResponseLocalVar, Option<string> sourceType, Option<int> page, Option<int> pageSize, Option<string> search, Option<string> access)
        {
            bool suppressDefaultLog = false;
            AfterAutoCompleteSource(ref suppressDefaultLog, apiResponseLocalVar, sourceType, page, pageSize, search, access);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sourceType"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="search"></param>
        /// <param name="access"></param>
        partial void AfterAutoCompleteSource(ref bool suppressDefaultLog, IAutoCompleteSourceApiResponse apiResponseLocalVar, Option<string> sourceType, Option<int> page, Option<int> pageSize, Option<string> search, Option<string> access);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sourceType"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="search"></param>
        /// <param name="access"></param>
        private void OnErrorAutoCompleteSourceDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> sourceType, Option<int> page, Option<int> pageSize, Option<string> search, Option<string> access)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAutoCompleteSource(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, sourceType, page, pageSize, search, access);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sourceType"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="search"></param>
        /// <param name="access"></param>
        partial void OnErrorAutoCompleteSource(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> sourceType, Option<int> page, Option<int> pageSize, Option<string> search, Option<string> access);

        /// <summary>
        /// 查询当前用户用户拥有指定权限的所有资源列表 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </summary>
        /// <param name="sourceType">资源类型, 默认group (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="search">过滤组织 (optional)</param>
        /// <param name="access">最小仓库权限，默认owner (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAutoCompleteSourceApiResponse"/>&gt;</returns>
        public async Task<IAutoCompleteSourceApiResponse?> AutoCompleteSourceOrDefaultAsync(Option<string> sourceType = default, Option<int> page = default, Option<int> pageSize = default, Option<string> search = default, Option<string> access = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AutoCompleteSourceAsync(sourceType, page, pageSize, search, access, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 查询当前用户用户拥有指定权限的所有资源列表 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceType">资源类型, 默认group (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="search">过滤组织 (optional)</param>
        /// <param name="access">最小仓库权限，默认owner (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAutoCompleteSourceApiResponse"/>&gt;</returns>
        public async Task<IAutoCompleteSourceApiResponse> AutoCompleteSourceAsync(Option<string> sourceType = default, Option<int> page = default, Option<int> pageSize = default, Option<string> search = default, Option<string> access = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAutoCompleteSource(sourceType, search, access);

                FormatAutoCompleteSource(ref sourceType, ref page, ref pageSize, ref search, ref access);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/user/autocomplete_source"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/user/autocomplete_source");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (sourceType.IsSet)
                        parseQueryStringLocalVar["source_type"] = ClientUtils.ParameterToString(sourceType.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    if (access.IsSet)
                        parseQueryStringLocalVar["access"] = ClientUtils.ParameterToString(access.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AutoCompleteSourceApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AutoCompleteSourceApiResponse>();

                        AutoCompleteSourceApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/user/autocomplete_source", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAutoCompleteSourceDefaultImplementation(apiResponseLocalVar, sourceType, page, pageSize, search, access);

                        Events.ExecuteOnAutoCompleteSource(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAutoCompleteSourceDefaultImplementation(e, "/user/autocomplete_source", uriBuilderLocalVar.Path, sourceType, page, pageSize, search, access);
                Events.ExecuteOnErrorAutoCompleteSource(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AutoCompleteSourceApiResponse"/>
        /// </summary>
        public partial class AutoCompleteSourceApiResponse : CNBOpenApi.Client.ApiResponse, IAutoCompleteSourceApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AutoCompleteSourceApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AutoCompleteSourceApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AutoCompleteSourceApiResponse(ILogger<AutoCompleteSourceApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<string>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<string>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<string>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetUserInfoDefaultImplementation(IGetUserInfoApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetUserInfo(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetUserInfo(ref bool suppressDefaultLog, IGetUserInfoApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetUserInfoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUserInfo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetUserInfo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// 获取指定用户的详情信息 访问令牌调用此接口需包含以下权限  account-profile:r
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserInfoApiResponse"/>&gt;</returns>
        public async Task<IGetUserInfoApiResponse?> GetUserInfoOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserInfoAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定用户的详情信息 访问令牌调用此接口需包含以下权限  account-profile:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserInfoApiResponse"/>&gt;</returns>
        public async Task<IGetUserInfoApiResponse> GetUserInfoAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/user"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/user");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserInfoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserInfoApiResponse>();

                        GetUserInfoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/user", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserInfoDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetUserInfo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserInfoDefaultImplementation(e, "/user", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetUserInfo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserInfoApiResponse"/>
        /// </summary>
        public partial class GetUserInfoApiResponse : CNBOpenApi.Client.ApiResponse, IGetUserInfoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserInfoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserInfoApiResponse(ILogger<GetUserInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DtoUsersResultForSelf? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DtoUsersResultForSelf>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.DtoUsersResultForSelf? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetUserInfoByName(ref string username);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="username"></param>
        /// <returns></returns>
        private void ValidateGetUserInfoByName(string username)
        {
            if (username == null)
                throw new ArgumentNullException(nameof(username));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="username"></param>
        private void AfterGetUserInfoByNameDefaultImplementation(IGetUserInfoByNameApiResponse apiResponseLocalVar, string username)
        {
            bool suppressDefaultLog = false;
            AfterGetUserInfoByName(ref suppressDefaultLog, apiResponseLocalVar, username);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="username"></param>
        partial void AfterGetUserInfoByName(ref bool suppressDefaultLog, IGetUserInfoByNameApiResponse apiResponseLocalVar, string username);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="username"></param>
        private void OnErrorGetUserInfoByNameDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string username)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUserInfoByName(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, username);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="username"></param>
        partial void OnErrorGetUserInfoByName(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string username);

        /// <summary>
        /// 获取指定用户的详情信息 访问令牌调用此接口需包含以下权限  account-profile:r
        /// </summary>
        /// <param name="username">User Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserInfoByNameApiResponse"/>&gt;</returns>
        public async Task<IGetUserInfoByNameApiResponse?> GetUserInfoByNameOrDefaultAsync(string username, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserInfoByNameAsync(username, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定用户的详情信息 访问令牌调用此接口需包含以下权限  account-profile:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserInfoByNameApiResponse"/>&gt;</returns>
        public async Task<IGetUserInfoByNameApiResponse> GetUserInfoByNameAsync(string username, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetUserInfoByName(username);

                FormatGetUserInfoByName(ref username);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/users/{username}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/users/{username}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserInfoByNameApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserInfoByNameApiResponse>();

                        GetUserInfoByNameApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/{username}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserInfoByNameDefaultImplementation(apiResponseLocalVar, username);

                        Events.ExecuteOnGetUserInfoByName(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserInfoByNameDefaultImplementation(e, "/users/{username}", uriBuilderLocalVar.Path, username);
                Events.ExecuteOnErrorGetUserInfoByName(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserInfoByNameApiResponse"/>
        /// </summary>
        public partial class GetUserInfoByNameApiResponse : CNBOpenApi.Client.ApiResponse, IGetUserInfoByNameApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserInfoByNameApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserInfoByNameApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserInfoByNameApiResponse(ILogger<GetUserInfoByNameApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DtoUsersResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DtoUsersResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.DtoUsersResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateUserInfo(HttpUpdateUserInfoPayload request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateUpdateUserInfo(HttpUpdateUserInfoPayload request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterUpdateUserInfoDefaultImplementation(IUpdateUserInfoApiResponse apiResponseLocalVar, HttpUpdateUserInfoPayload request)
        {
            bool suppressDefaultLog = false;
            AfterUpdateUserInfo(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterUpdateUserInfo(ref bool suppressDefaultLog, IUpdateUserInfoApiResponse apiResponseLocalVar, HttpUpdateUserInfoPayload request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorUpdateUserInfoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, HttpUpdateUserInfoPayload request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateUserInfo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorUpdateUserInfo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, HttpUpdateUserInfoPayload request);

        /// <summary>
        /// 更新指定用户的详情信息, 可更新内容为: 昵称, 个人签名, 微信公众号名称, 微信公众号二维码链接, 个人网站, 个人地址, 公司名称 访问令牌调用此接口需包含以下权限  account-profile:rw
        /// </summary>
        /// <param name="request">user info</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateUserInfoApiResponse"/>&gt;</returns>
        public async Task<IUpdateUserInfoApiResponse?> UpdateUserInfoOrDefaultAsync(HttpUpdateUserInfoPayload request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateUserInfoAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 更新指定用户的详情信息, 可更新内容为: 昵称, 个人签名, 微信公众号名称, 微信公众号二维码链接, 个人网站, 个人地址, 公司名称 访问令牌调用此接口需包含以下权限  account-profile:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">user info</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateUserInfoApiResponse"/>&gt;</returns>
        public async Task<IUpdateUserInfoApiResponse> UpdateUserInfoAsync(HttpUpdateUserInfoPayload request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateUserInfo(request);

                FormatUpdateUserInfo(request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/user"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/user");

                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateUserInfoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateUserInfoApiResponse>();

                        UpdateUserInfoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/user", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateUserInfoDefaultImplementation(apiResponseLocalVar, request);

                        Events.ExecuteOnUpdateUserInfo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateUserInfoDefaultImplementation(e, "/user", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorUpdateUserInfo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateUserInfoApiResponse"/>
        /// </summary>
        public partial class UpdateUserInfoApiResponse : CNBOpenApi.Client.ApiResponse, IUpdateUserInfoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateUserInfoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateUserInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateUserInfoApiResponse(ILogger<UpdateUserInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
