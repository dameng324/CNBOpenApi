// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CNBOpenApi.Client;
using CNBOpenApi.Model;
using System.Diagnostics.CodeAnalysis;

namespace CNBOpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IIssuesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        IssuesApiEvents Events { get; }

        /// <summary>
        /// 创建一个 Issue
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="postIssueForm">Post Issue Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateIssueApiResponse"/>&gt;</returns>
        Task<ICreateIssueApiResponse> CreateIssueAsync(string repo, ApiPostIssueForm postIssueForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 创建一个 Issue
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="postIssueForm">Post Issue Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateIssueApiResponse"/>?&gt;</returns>
        Task<ICreateIssueApiResponse?> CreateIssueOrDefaultAsync(string repo, ApiPostIssueForm postIssueForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除 Issue 标签
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="name">label name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteIssueLabelApiResponse"/>&gt;</returns>
        Task<IDeleteIssueLabelApiResponse> DeleteIssueLabelAsync(string repo, int number, string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除 Issue 标签
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="name">label name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteIssueLabelApiResponse"/>?&gt;</returns>
        Task<IDeleteIssueLabelApiResponse?> DeleteIssueLabelOrDefaultAsync(string repo, int number, string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 清空 Issue 标签
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteIssueLabelsApiResponse"/>&gt;</returns>
        Task<IDeleteIssueLabelsApiResponse> DeleteIssueLabelsAsync(string repo, int number, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 清空 Issue 标签
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteIssueLabelsApiResponse"/>?&gt;</returns>
        Task<IDeleteIssueLabelsApiResponse?> DeleteIssueLabelsOrDefaultAsync(string repo, int number, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询指定的 Issues
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">issue number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIssueApiResponse"/>&gt;</returns>
        Task<IGetIssueApiResponse> GetIssueAsync(string repo, int number, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询指定的 Issues
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">issue number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIssueApiResponse"/>?&gt;</returns>
        Task<IGetIssueApiResponse?> GetIssueOrDefaultAsync(string repo, int number, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取一个 Issue Comment
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="commentId">comment_id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIssueCommentApiResponse"/>&gt;</returns>
        Task<IGetIssueCommentApiResponse> GetIssueCommentAsync(string repo, int number, int commentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取一个 Issue Comment
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="commentId">comment_id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIssueCommentApiResponse"/>?&gt;</returns>
        Task<IGetIssueCommentApiResponse?> GetIssueCommentOrDefaultAsync(string repo, int number, int commentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询仓库的 Issue 评论列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">issue number</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIssueCommentsApiResponse"/>&gt;</returns>
        Task<IListIssueCommentsApiResponse> ListIssueCommentsAsync(string repo, int number, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询仓库的 Issue 评论列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">issue number</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIssueCommentsApiResponse"/>?&gt;</returns>
        Task<IListIssueCommentsApiResponse?> ListIssueCommentsOrDefaultAsync(string repo, int number, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询 Issue 的标签(label) 列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIssueLabelsApiResponse"/>&gt;</returns>
        Task<IListIssueLabelsApiResponse> ListIssueLabelsAsync(string repo, int number, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询 Issue 的标签(label) 列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIssueLabelsApiResponse"/>?&gt;</returns>
        Task<IListIssueLabelsApiResponse?> ListIssueLabelsOrDefaultAsync(string repo, int number, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询仓库的 Issues
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="state">issue state open or closed (optional)</param>
        /// <param name="keyword">issue search key (optional)</param>
        /// <param name="priority">issue priority example: p0,p1,p2,p3 (optional)</param>
        /// <param name="labels">issue labels example: git,bug,feature (optional)</param>
        /// <param name="authors">issue authors name, example: 张三,李四 (optional)</param>
        /// <param name="assignees">issue assignees name, example: 张三,李四,-; - means assign to nobody (optional)</param>
        /// <param name="updatedTimeBegin">issue filter update time begin  example: 2022-01-31 (optional)</param>
        /// <param name="updatedTimeEnd">issue filter update time end,  example: 2022-01-31 (optional)</param>
        /// <param name="orderBy">issue order, example: created_at, -updated_at, reference_count。‘-’ prefix means descending order (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIssuesApiResponse"/>&gt;</returns>
        Task<IListIssuesApiResponse> ListIssuesAsync(string repo, Option<int> page = default, Option<int> pageSize = default, Option<string> state = default, Option<string> keyword = default, Option<string> priority = default, Option<string> labels = default, Option<string> authors = default, Option<string> assignees = default, Option<string> updatedTimeBegin = default, Option<string> updatedTimeEnd = default, Option<string> orderBy = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询仓库的 Issues
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="state">issue state open or closed (optional)</param>
        /// <param name="keyword">issue search key (optional)</param>
        /// <param name="priority">issue priority example: p0,p1,p2,p3 (optional)</param>
        /// <param name="labels">issue labels example: git,bug,feature (optional)</param>
        /// <param name="authors">issue authors name, example: 张三,李四 (optional)</param>
        /// <param name="assignees">issue assignees name, example: 张三,李四,-; - means assign to nobody (optional)</param>
        /// <param name="updatedTimeBegin">issue filter update time begin  example: 2022-01-31 (optional)</param>
        /// <param name="updatedTimeEnd">issue filter update time end,  example: 2022-01-31 (optional)</param>
        /// <param name="orderBy">issue order, example: created_at, -updated_at, reference_count。‘-’ prefix means descending order (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIssuesApiResponse"/>?&gt;</returns>
        Task<IListIssuesApiResponse?> ListIssuesOrDefaultAsync(string repo, Option<int> page = default, Option<int> pageSize = default, Option<string> state = default, Option<string> keyword = default, Option<string> priority = default, Option<string> labels = default, Option<string> authors = default, Option<string> assignees = default, Option<string> updatedTimeBegin = default, Option<string> updatedTimeEnd = default, Option<string> orderBy = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 修改一个 Issue Comment
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="commentId">comment_id</param>
        /// <param name="patchIssueCommentForm">Patch Issue Comment Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPatchIssueCommentApiResponse"/>&gt;</returns>
        Task<IPatchIssueCommentApiResponse> PatchIssueCommentAsync(string repo, int number, int commentId, ApiPatchIssueCommentForm patchIssueCommentForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 修改一个 Issue Comment
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="commentId">comment_id</param>
        /// <param name="patchIssueCommentForm">Patch Issue Comment Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPatchIssueCommentApiResponse"/>?&gt;</returns>
        Task<IPatchIssueCommentApiResponse?> PatchIssueCommentOrDefaultAsync(string repo, int number, int commentId, ApiPatchIssueCommentForm patchIssueCommentForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 创建一个 Issue Comment
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="postIssueCommentForm">Post Issue Comment Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostIssueCommentApiResponse"/>&gt;</returns>
        Task<IPostIssueCommentApiResponse> PostIssueCommentAsync(string repo, int number, ApiPostIssueCommentForm postIssueCommentForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 创建一个 Issue Comment
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="postIssueCommentForm">Post Issue Comment Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostIssueCommentApiResponse"/>?&gt;</returns>
        Task<IPostIssueCommentApiResponse?> PostIssueCommentOrDefaultAsync(string repo, int number, ApiPostIssueCommentForm postIssueCommentForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 新增 Issue 标签
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="postIssueLabelsForm">Post Issue Labels Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostIssueLabelsApiResponse"/>&gt;</returns>
        Task<IPostIssueLabelsApiResponse> PostIssueLabelsAsync(string repo, int number, ApiPostIssueLabelsForm postIssueLabelsForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 新增 Issue 标签
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="postIssueLabelsForm">Post Issue Labels Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostIssueLabelsApiResponse"/>?&gt;</returns>
        Task<IPostIssueLabelsApiResponse?> PostIssueLabelsOrDefaultAsync(string repo, int number, ApiPostIssueLabelsForm postIssueLabelsForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 设置 Issue 标签
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="putIssueLabelsForm">Put Issue Labels Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutIssueLabelsApiResponse"/>&gt;</returns>
        Task<IPutIssueLabelsApiResponse> PutIssueLabelsAsync(string repo, int number, ApiPutIssueLabelsForm putIssueLabelsForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 设置 Issue 标签
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="putIssueLabelsForm">Put Issue Labels Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutIssueLabelsApiResponse"/>?&gt;</returns>
        Task<IPutIssueLabelsApiResponse?> PutIssueLabelsOrDefaultAsync(string repo, int number, ApiPutIssueLabelsForm putIssueLabelsForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新一个 Issue
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">issue number</param>
        /// <param name="patchIssueForm">Patch Issue Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateIssueApiResponse"/>&gt;</returns>
        Task<IUpdateIssueApiResponse> UpdateIssueAsync(string repo, int number, ApiPatchIssueForm patchIssueForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新一个 Issue
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">issue number</param>
        /// <param name="patchIssueForm">Patch Issue Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateIssueApiResponse"/>?&gt;</returns>
        Task<IUpdateIssueApiResponse?> UpdateIssueOrDefaultAsync(string repo, int number, ApiPatchIssueForm patchIssueForm, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateIssueApiResponse"/>
    /// </summary>
    public interface ICreateIssueApiResponse : CNBOpenApi.Client.IApiResponse, ICreated<CNBOpenApi.Model.ApiIssueDetail?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteIssueLabelApiResponse"/>
    /// </summary>
    public interface IDeleteIssueLabelApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.ApiLabel?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteIssueLabelsApiResponse"/>
    /// </summary>
    public interface IDeleteIssueLabelsApiResponse : CNBOpenApi.Client.IApiResponse, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetIssueApiResponse"/>
    /// </summary>
    public interface IGetIssueApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.ApiIssueDetail?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetIssueCommentApiResponse"/>
    /// </summary>
    public interface IGetIssueCommentApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.ApiIssueComment?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IListIssueCommentsApiResponse"/>
    /// </summary>
    public interface IListIssueCommentsApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<ApiIssueComment>?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IListIssueLabelsApiResponse"/>
    /// </summary>
    public interface IListIssueLabelsApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<ApiLabel>?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IListIssuesApiResponse"/>
    /// </summary>
    public interface IListIssuesApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<ApiIssue>?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPatchIssueCommentApiResponse"/>
    /// </summary>
    public interface IPatchIssueCommentApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.ApiIssueComment?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPostIssueCommentApiResponse"/>
    /// </summary>
    public interface IPostIssueCommentApiResponse : CNBOpenApi.Client.IApiResponse, ICreated<CNBOpenApi.Model.ApiIssueComment?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPostIssueLabelsApiResponse"/>
    /// </summary>
    public interface IPostIssueLabelsApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.ApiLabel?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutIssueLabelsApiResponse"/>
    /// </summary>
    public interface IPutIssueLabelsApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.ApiLabel?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateIssueApiResponse"/>
    /// </summary>
    public interface IUpdateIssueApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.ApiIssueDetail?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class IssuesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateIssue;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateIssue;

        internal void ExecuteOnCreateIssue(IssuesApi.CreateIssueApiResponse apiResponse)
        {
            OnCreateIssue?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateIssue(Exception exception)
        {
            OnErrorCreateIssue?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteIssueLabel;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteIssueLabel;

        internal void ExecuteOnDeleteIssueLabel(IssuesApi.DeleteIssueLabelApiResponse apiResponse)
        {
            OnDeleteIssueLabel?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteIssueLabel(Exception exception)
        {
            OnErrorDeleteIssueLabel?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteIssueLabels;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteIssueLabels;

        internal void ExecuteOnDeleteIssueLabels(IssuesApi.DeleteIssueLabelsApiResponse apiResponse)
        {
            OnDeleteIssueLabels?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteIssueLabels(Exception exception)
        {
            OnErrorDeleteIssueLabels?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetIssue;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetIssue;

        internal void ExecuteOnGetIssue(IssuesApi.GetIssueApiResponse apiResponse)
        {
            OnGetIssue?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetIssue(Exception exception)
        {
            OnErrorGetIssue?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetIssueComment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetIssueComment;

        internal void ExecuteOnGetIssueComment(IssuesApi.GetIssueCommentApiResponse apiResponse)
        {
            OnGetIssueComment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetIssueComment(Exception exception)
        {
            OnErrorGetIssueComment?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListIssueComments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListIssueComments;

        internal void ExecuteOnListIssueComments(IssuesApi.ListIssueCommentsApiResponse apiResponse)
        {
            OnListIssueComments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListIssueComments(Exception exception)
        {
            OnErrorListIssueComments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListIssueLabels;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListIssueLabels;

        internal void ExecuteOnListIssueLabels(IssuesApi.ListIssueLabelsApiResponse apiResponse)
        {
            OnListIssueLabels?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListIssueLabels(Exception exception)
        {
            OnErrorListIssueLabels?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListIssues;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListIssues;

        internal void ExecuteOnListIssues(IssuesApi.ListIssuesApiResponse apiResponse)
        {
            OnListIssues?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListIssues(Exception exception)
        {
            OnErrorListIssues?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPatchIssueComment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPatchIssueComment;

        internal void ExecuteOnPatchIssueComment(IssuesApi.PatchIssueCommentApiResponse apiResponse)
        {
            OnPatchIssueComment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPatchIssueComment(Exception exception)
        {
            OnErrorPatchIssueComment?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostIssueComment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostIssueComment;

        internal void ExecuteOnPostIssueComment(IssuesApi.PostIssueCommentApiResponse apiResponse)
        {
            OnPostIssueComment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostIssueComment(Exception exception)
        {
            OnErrorPostIssueComment?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostIssueLabels;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostIssueLabels;

        internal void ExecuteOnPostIssueLabels(IssuesApi.PostIssueLabelsApiResponse apiResponse)
        {
            OnPostIssueLabels?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostIssueLabels(Exception exception)
        {
            OnErrorPostIssueLabels?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutIssueLabels;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutIssueLabels;

        internal void ExecuteOnPutIssueLabels(IssuesApi.PutIssueLabelsApiResponse apiResponse)
        {
            OnPutIssueLabels?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutIssueLabels(Exception exception)
        {
            OnErrorPutIssueLabels?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateIssue;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateIssue;

        internal void ExecuteOnUpdateIssue(IssuesApi.UpdateIssueApiResponse apiResponse)
        {
            OnUpdateIssue?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateIssue(Exception exception)
        {
            OnErrorUpdateIssue?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class IssuesApi : IIssuesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<IssuesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public IssuesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssuesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IssuesApi(ILogger<IssuesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, IssuesApiEvents issuesApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<IssuesApi>();
            HttpClient = httpClient;
            Events = issuesApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateIssue(ref string repo, ApiPostIssueForm postIssueForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="postIssueForm"></param>
        /// <returns></returns>
        private void ValidateCreateIssue(string repo, ApiPostIssueForm postIssueForm)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (postIssueForm == null)
                throw new ArgumentNullException(nameof(postIssueForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="postIssueForm"></param>
        private void AfterCreateIssueDefaultImplementation(ICreateIssueApiResponse apiResponseLocalVar, string repo, ApiPostIssueForm postIssueForm)
        {
            bool suppressDefaultLog = false;
            AfterCreateIssue(ref suppressDefaultLog, apiResponseLocalVar, repo, postIssueForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="postIssueForm"></param>
        partial void AfterCreateIssue(ref bool suppressDefaultLog, ICreateIssueApiResponse apiResponseLocalVar, string repo, ApiPostIssueForm postIssueForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="postIssueForm"></param>
        private void OnErrorCreateIssueDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, ApiPostIssueForm postIssueForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateIssue(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, postIssueForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="postIssueForm"></param>
        partial void OnErrorCreateIssue(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, ApiPostIssueForm postIssueForm);

        /// <summary>
        /// 创建一个 Issue 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="postIssueForm">Post Issue Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateIssueApiResponse"/>&gt;</returns>
        public async Task<ICreateIssueApiResponse?> CreateIssueOrDefaultAsync(string repo, ApiPostIssueForm postIssueForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateIssueAsync(repo, postIssueForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 创建一个 Issue 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="postIssueForm">Post Issue Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateIssueApiResponse"/>&gt;</returns>
        public async Task<ICreateIssueApiResponse> CreateIssueAsync(string repo, ApiPostIssueForm postIssueForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateIssue(repo, postIssueForm);

                FormatCreateIssue(ref repo, postIssueForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/issues"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/issues");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    httpRequestMessageLocalVar.Content = (postIssueForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postIssueForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateIssueApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateIssueApiResponse>();

                        CreateIssueApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/issues", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateIssueDefaultImplementation(apiResponseLocalVar, repo, postIssueForm);

                        Events.ExecuteOnCreateIssue(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateIssueDefaultImplementation(e, "/{repo}/-/issues", uriBuilderLocalVar.Path, repo, postIssueForm);
                Events.ExecuteOnErrorCreateIssue(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateIssueApiResponse"/>
        /// </summary>
        public partial class CreateIssueApiResponse : CNBOpenApi.Client.ApiResponse, ICreateIssueApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateIssueApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateIssueApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateIssueApiResponse(ILogger<CreateIssueApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.ApiIssueDetail? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.ApiIssueDetail>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out CNBOpenApi.Model.ApiIssueDetail? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteIssueLabel(ref string repo, ref int number, ref string name);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        private void ValidateDeleteIssueLabel(string repo, string name)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (name == null)
                throw new ArgumentNullException(nameof(name));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="name"></param>
        private void AfterDeleteIssueLabelDefaultImplementation(IDeleteIssueLabelApiResponse apiResponseLocalVar, string repo, int number, string name)
        {
            bool suppressDefaultLog = false;
            AfterDeleteIssueLabel(ref suppressDefaultLog, apiResponseLocalVar, repo, number, name);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="name"></param>
        partial void AfterDeleteIssueLabel(ref bool suppressDefaultLog, IDeleteIssueLabelApiResponse apiResponseLocalVar, string repo, int number, string name);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="name"></param>
        private void OnErrorDeleteIssueLabelDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, string name)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteIssueLabel(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number, name);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="name"></param>
        partial void OnErrorDeleteIssueLabel(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, string name);

        /// <summary>
        /// 删除 Issue 标签 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="name">label name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteIssueLabelApiResponse"/>&gt;</returns>
        public async Task<IDeleteIssueLabelApiResponse?> DeleteIssueLabelOrDefaultAsync(string repo, int number, string name, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteIssueLabelAsync(repo, number, name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 删除 Issue 标签 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="name">label name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteIssueLabelApiResponse"/>&gt;</returns>
        public async Task<IDeleteIssueLabelApiResponse> DeleteIssueLabelAsync(string repo, int number, string name, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteIssueLabel(repo, name);

                FormatDeleteIssueLabel(ref repo, ref number, ref name);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/issues/{number}/labels/{name}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/issues/{number}/labels/{name}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bname%7D", Uri.EscapeDataString(name.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteIssueLabelApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteIssueLabelApiResponse>();

                        DeleteIssueLabelApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/issues/{number}/labels/{name}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteIssueLabelDefaultImplementation(apiResponseLocalVar, repo, number, name);

                        Events.ExecuteOnDeleteIssueLabel(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteIssueLabelDefaultImplementation(e, "/{repo}/-/issues/{number}/labels/{name}", uriBuilderLocalVar.Path, repo, number, name);
                Events.ExecuteOnErrorDeleteIssueLabel(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteIssueLabelApiResponse"/>
        /// </summary>
        public partial class DeleteIssueLabelApiResponse : CNBOpenApi.Client.ApiResponse, IDeleteIssueLabelApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteIssueLabelApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteIssueLabelApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteIssueLabelApiResponse(ILogger<DeleteIssueLabelApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.ApiLabel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.ApiLabel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.ApiLabel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteIssueLabels(ref string repo, ref int number);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <returns></returns>
        private void ValidateDeleteIssueLabels(string repo)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        private void AfterDeleteIssueLabelsDefaultImplementation(IDeleteIssueLabelsApiResponse apiResponseLocalVar, string repo, int number)
        {
            bool suppressDefaultLog = false;
            AfterDeleteIssueLabels(ref suppressDefaultLog, apiResponseLocalVar, repo, number);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        partial void AfterDeleteIssueLabels(ref bool suppressDefaultLog, IDeleteIssueLabelsApiResponse apiResponseLocalVar, string repo, int number);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        private void OnErrorDeleteIssueLabelsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteIssueLabels(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        partial void OnErrorDeleteIssueLabels(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number);

        /// <summary>
        /// 清空 Issue 标签 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteIssueLabelsApiResponse"/>&gt;</returns>
        public async Task<IDeleteIssueLabelsApiResponse?> DeleteIssueLabelsOrDefaultAsync(string repo, int number, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteIssueLabelsAsync(repo, number, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 清空 Issue 标签 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteIssueLabelsApiResponse"/>&gt;</returns>
        public async Task<IDeleteIssueLabelsApiResponse> DeleteIssueLabelsAsync(string repo, int number, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteIssueLabels(repo);

                FormatDeleteIssueLabels(ref repo, ref number);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/issues/{number}/labels"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/issues/{number}/labels");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteIssueLabelsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteIssueLabelsApiResponse>();

                        DeleteIssueLabelsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/issues/{number}/labels", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteIssueLabelsDefaultImplementation(apiResponseLocalVar, repo, number);

                        Events.ExecuteOnDeleteIssueLabels(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteIssueLabelsDefaultImplementation(e, "/{repo}/-/issues/{number}/labels", uriBuilderLocalVar.Path, repo, number);
                Events.ExecuteOnErrorDeleteIssueLabels(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteIssueLabelsApiResponse"/>
        /// </summary>
        public partial class DeleteIssueLabelsApiResponse : CNBOpenApi.Client.ApiResponse, IDeleteIssueLabelsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteIssueLabelsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteIssueLabelsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteIssueLabelsApiResponse(ILogger<DeleteIssueLabelsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetIssue(ref string repo, ref int number);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <returns></returns>
        private void ValidateGetIssue(string repo)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        private void AfterGetIssueDefaultImplementation(IGetIssueApiResponse apiResponseLocalVar, string repo, int number)
        {
            bool suppressDefaultLog = false;
            AfterGetIssue(ref suppressDefaultLog, apiResponseLocalVar, repo, number);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        partial void AfterGetIssue(ref bool suppressDefaultLog, IGetIssueApiResponse apiResponseLocalVar, string repo, int number);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        private void OnErrorGetIssueDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetIssue(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        partial void OnErrorGetIssue(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number);

        /// <summary>
        /// 查询指定的 Issues 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">issue number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIssueApiResponse"/>&gt;</returns>
        public async Task<IGetIssueApiResponse?> GetIssueOrDefaultAsync(string repo, int number, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetIssueAsync(repo, number, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 查询指定的 Issues 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">issue number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIssueApiResponse"/>&gt;</returns>
        public async Task<IGetIssueApiResponse> GetIssueAsync(string repo, int number, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetIssue(repo);

                FormatGetIssue(ref repo, ref number);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/issues/{number}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/issues/{number}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetIssueApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetIssueApiResponse>();

                        GetIssueApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/issues/{number}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetIssueDefaultImplementation(apiResponseLocalVar, repo, number);

                        Events.ExecuteOnGetIssue(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetIssueDefaultImplementation(e, "/{repo}/-/issues/{number}", uriBuilderLocalVar.Path, repo, number);
                Events.ExecuteOnErrorGetIssue(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetIssueApiResponse"/>
        /// </summary>
        public partial class GetIssueApiResponse : CNBOpenApi.Client.ApiResponse, IGetIssueApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetIssueApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetIssueApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetIssueApiResponse(ILogger<GetIssueApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.ApiIssueDetail? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.ApiIssueDetail>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.ApiIssueDetail? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetIssueComment(ref string repo, ref int number, ref int commentId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <returns></returns>
        private void ValidateGetIssueComment(string repo)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="commentId"></param>
        private void AfterGetIssueCommentDefaultImplementation(IGetIssueCommentApiResponse apiResponseLocalVar, string repo, int number, int commentId)
        {
            bool suppressDefaultLog = false;
            AfterGetIssueComment(ref suppressDefaultLog, apiResponseLocalVar, repo, number, commentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="commentId"></param>
        partial void AfterGetIssueComment(ref bool suppressDefaultLog, IGetIssueCommentApiResponse apiResponseLocalVar, string repo, int number, int commentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="commentId"></param>
        private void OnErrorGetIssueCommentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, int commentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetIssueComment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number, commentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="commentId"></param>
        partial void OnErrorGetIssueComment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, int commentId);

        /// <summary>
        /// 获取一个 Issue Comment 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="commentId">comment_id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIssueCommentApiResponse"/>&gt;</returns>
        public async Task<IGetIssueCommentApiResponse?> GetIssueCommentOrDefaultAsync(string repo, int number, int commentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetIssueCommentAsync(repo, number, commentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取一个 Issue Comment 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="commentId">comment_id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIssueCommentApiResponse"/>&gt;</returns>
        public async Task<IGetIssueCommentApiResponse> GetIssueCommentAsync(string repo, int number, int commentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetIssueComment(repo);

                FormatGetIssueComment(ref repo, ref number, ref commentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/issues/{number}/comments/{comment_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/issues/{number}/comments/{comment_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcomment_id%7D", Uri.EscapeDataString(commentId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetIssueCommentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetIssueCommentApiResponse>();

                        GetIssueCommentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/issues/{number}/comments/{comment_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetIssueCommentDefaultImplementation(apiResponseLocalVar, repo, number, commentId);

                        Events.ExecuteOnGetIssueComment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetIssueCommentDefaultImplementation(e, "/{repo}/-/issues/{number}/comments/{comment_id}", uriBuilderLocalVar.Path, repo, number, commentId);
                Events.ExecuteOnErrorGetIssueComment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetIssueCommentApiResponse"/>
        /// </summary>
        public partial class GetIssueCommentApiResponse : CNBOpenApi.Client.ApiResponse, IGetIssueCommentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetIssueCommentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetIssueCommentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetIssueCommentApiResponse(ILogger<GetIssueCommentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.ApiIssueComment? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.ApiIssueComment>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.ApiIssueComment? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListIssueComments(ref string repo, ref int number, ref Option<int> page, ref Option<int> pageSize);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <returns></returns>
        private void ValidateListIssueComments(string repo)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void AfterListIssueCommentsDefaultImplementation(IListIssueCommentsApiResponse apiResponseLocalVar, string repo, int number, Option<int> page, Option<int> pageSize)
        {
            bool suppressDefaultLog = false;
            AfterListIssueComments(ref suppressDefaultLog, apiResponseLocalVar, repo, number, page, pageSize);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void AfterListIssueComments(ref bool suppressDefaultLog, IListIssueCommentsApiResponse apiResponseLocalVar, string repo, int number, Option<int> page, Option<int> pageSize);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void OnErrorListIssueCommentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, Option<int> page, Option<int> pageSize)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListIssueComments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number, page, pageSize);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void OnErrorListIssueComments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, Option<int> page, Option<int> pageSize);

        /// <summary>
        /// 查询仓库的 Issue 评论列表 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">issue number</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIssueCommentsApiResponse"/>&gt;</returns>
        public async Task<IListIssueCommentsApiResponse?> ListIssueCommentsOrDefaultAsync(string repo, int number, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListIssueCommentsAsync(repo, number, page, pageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 查询仓库的 Issue 评论列表 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">issue number</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIssueCommentsApiResponse"/>&gt;</returns>
        public async Task<IListIssueCommentsApiResponse> ListIssueCommentsAsync(string repo, int number, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListIssueComments(repo);

                FormatListIssueComments(ref repo, ref number, ref page, ref pageSize);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/issues/{number}/comments"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/issues/{number}/comments");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListIssueCommentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListIssueCommentsApiResponse>();

                        ListIssueCommentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/issues/{number}/comments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListIssueCommentsDefaultImplementation(apiResponseLocalVar, repo, number, page, pageSize);

                        Events.ExecuteOnListIssueComments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListIssueCommentsDefaultImplementation(e, "/{repo}/-/issues/{number}/comments", uriBuilderLocalVar.Path, repo, number, page, pageSize);
                Events.ExecuteOnErrorListIssueComments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListIssueCommentsApiResponse"/>
        /// </summary>
        public partial class ListIssueCommentsApiResponse : CNBOpenApi.Client.ApiResponse, IListIssueCommentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListIssueCommentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListIssueCommentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListIssueCommentsApiResponse(ILogger<ListIssueCommentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ApiIssueComment>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ApiIssueComment>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ApiIssueComment>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListIssueLabels(ref string repo, ref int number, ref Option<int> page, ref Option<int> pageSize);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <returns></returns>
        private void ValidateListIssueLabels(string repo)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void AfterListIssueLabelsDefaultImplementation(IListIssueLabelsApiResponse apiResponseLocalVar, string repo, int number, Option<int> page, Option<int> pageSize)
        {
            bool suppressDefaultLog = false;
            AfterListIssueLabels(ref suppressDefaultLog, apiResponseLocalVar, repo, number, page, pageSize);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void AfterListIssueLabels(ref bool suppressDefaultLog, IListIssueLabelsApiResponse apiResponseLocalVar, string repo, int number, Option<int> page, Option<int> pageSize);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void OnErrorListIssueLabelsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, Option<int> page, Option<int> pageSize)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListIssueLabels(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number, page, pageSize);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void OnErrorListIssueLabels(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, Option<int> page, Option<int> pageSize);

        /// <summary>
        /// 查询 Issue 的标签(label) 列表 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIssueLabelsApiResponse"/>&gt;</returns>
        public async Task<IListIssueLabelsApiResponse?> ListIssueLabelsOrDefaultAsync(string repo, int number, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListIssueLabelsAsync(repo, number, page, pageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 查询 Issue 的标签(label) 列表 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIssueLabelsApiResponse"/>&gt;</returns>
        public async Task<IListIssueLabelsApiResponse> ListIssueLabelsAsync(string repo, int number, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListIssueLabels(repo);

                FormatListIssueLabels(ref repo, ref number, ref page, ref pageSize);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/issues/{number}/labels"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/issues/{number}/labels");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListIssueLabelsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListIssueLabelsApiResponse>();

                        ListIssueLabelsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/issues/{number}/labels", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListIssueLabelsDefaultImplementation(apiResponseLocalVar, repo, number, page, pageSize);

                        Events.ExecuteOnListIssueLabels(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListIssueLabelsDefaultImplementation(e, "/{repo}/-/issues/{number}/labels", uriBuilderLocalVar.Path, repo, number, page, pageSize);
                Events.ExecuteOnErrorListIssueLabels(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListIssueLabelsApiResponse"/>
        /// </summary>
        public partial class ListIssueLabelsApiResponse : CNBOpenApi.Client.ApiResponse, IListIssueLabelsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListIssueLabelsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListIssueLabelsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListIssueLabelsApiResponse(ILogger<ListIssueLabelsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ApiLabel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ApiLabel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ApiLabel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListIssues(ref string repo, ref Option<int> page, ref Option<int> pageSize, ref Option<string> state, ref Option<string> keyword, ref Option<string> priority, ref Option<string> labels, ref Option<string> authors, ref Option<string> assignees, ref Option<string> updatedTimeBegin, ref Option<string> updatedTimeEnd, ref Option<string> orderBy);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="state"></param>
        /// <param name="keyword"></param>
        /// <param name="priority"></param>
        /// <param name="labels"></param>
        /// <param name="authors"></param>
        /// <param name="assignees"></param>
        /// <param name="updatedTimeBegin"></param>
        /// <param name="updatedTimeEnd"></param>
        /// <param name="orderBy"></param>
        /// <returns></returns>
        private void ValidateListIssues(string repo, Option<string> state, Option<string> keyword, Option<string> priority, Option<string> labels, Option<string> authors, Option<string> assignees, Option<string> updatedTimeBegin, Option<string> updatedTimeEnd, Option<string> orderBy)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state));

            if (keyword.IsSet && keyword.Value == null)
                throw new ArgumentNullException(nameof(keyword));

            if (priority.IsSet && priority.Value == null)
                throw new ArgumentNullException(nameof(priority));

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels));

            if (authors.IsSet && authors.Value == null)
                throw new ArgumentNullException(nameof(authors));

            if (assignees.IsSet && assignees.Value == null)
                throw new ArgumentNullException(nameof(assignees));

            if (updatedTimeBegin.IsSet && updatedTimeBegin.Value == null)
                throw new ArgumentNullException(nameof(updatedTimeBegin));

            if (updatedTimeEnd.IsSet && updatedTimeEnd.Value == null)
                throw new ArgumentNullException(nameof(updatedTimeEnd));

            if (orderBy.IsSet && orderBy.Value == null)
                throw new ArgumentNullException(nameof(orderBy));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="state"></param>
        /// <param name="keyword"></param>
        /// <param name="priority"></param>
        /// <param name="labels"></param>
        /// <param name="authors"></param>
        /// <param name="assignees"></param>
        /// <param name="updatedTimeBegin"></param>
        /// <param name="updatedTimeEnd"></param>
        /// <param name="orderBy"></param>
        private void AfterListIssuesDefaultImplementation(IListIssuesApiResponse apiResponseLocalVar, string repo, Option<int> page, Option<int> pageSize, Option<string> state, Option<string> keyword, Option<string> priority, Option<string> labels, Option<string> authors, Option<string> assignees, Option<string> updatedTimeBegin, Option<string> updatedTimeEnd, Option<string> orderBy)
        {
            bool suppressDefaultLog = false;
            AfterListIssues(ref suppressDefaultLog, apiResponseLocalVar, repo, page, pageSize, state, keyword, priority, labels, authors, assignees, updatedTimeBegin, updatedTimeEnd, orderBy);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="state"></param>
        /// <param name="keyword"></param>
        /// <param name="priority"></param>
        /// <param name="labels"></param>
        /// <param name="authors"></param>
        /// <param name="assignees"></param>
        /// <param name="updatedTimeBegin"></param>
        /// <param name="updatedTimeEnd"></param>
        /// <param name="orderBy"></param>
        partial void AfterListIssues(ref bool suppressDefaultLog, IListIssuesApiResponse apiResponseLocalVar, string repo, Option<int> page, Option<int> pageSize, Option<string> state, Option<string> keyword, Option<string> priority, Option<string> labels, Option<string> authors, Option<string> assignees, Option<string> updatedTimeBegin, Option<string> updatedTimeEnd, Option<string> orderBy);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="state"></param>
        /// <param name="keyword"></param>
        /// <param name="priority"></param>
        /// <param name="labels"></param>
        /// <param name="authors"></param>
        /// <param name="assignees"></param>
        /// <param name="updatedTimeBegin"></param>
        /// <param name="updatedTimeEnd"></param>
        /// <param name="orderBy"></param>
        private void OnErrorListIssuesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<int> page, Option<int> pageSize, Option<string> state, Option<string> keyword, Option<string> priority, Option<string> labels, Option<string> authors, Option<string> assignees, Option<string> updatedTimeBegin, Option<string> updatedTimeEnd, Option<string> orderBy)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListIssues(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, page, pageSize, state, keyword, priority, labels, authors, assignees, updatedTimeBegin, updatedTimeEnd, orderBy);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="state"></param>
        /// <param name="keyword"></param>
        /// <param name="priority"></param>
        /// <param name="labels"></param>
        /// <param name="authors"></param>
        /// <param name="assignees"></param>
        /// <param name="updatedTimeBegin"></param>
        /// <param name="updatedTimeEnd"></param>
        /// <param name="orderBy"></param>
        partial void OnErrorListIssues(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<int> page, Option<int> pageSize, Option<string> state, Option<string> keyword, Option<string> priority, Option<string> labels, Option<string> authors, Option<string> assignees, Option<string> updatedTimeBegin, Option<string> updatedTimeEnd, Option<string> orderBy);

        /// <summary>
        /// 查询仓库的 Issues 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="state">issue state open or closed (optional)</param>
        /// <param name="keyword">issue search key (optional)</param>
        /// <param name="priority">issue priority example: p0,p1,p2,p3 (optional)</param>
        /// <param name="labels">issue labels example: git,bug,feature (optional)</param>
        /// <param name="authors">issue authors name, example: 张三,李四 (optional)</param>
        /// <param name="assignees">issue assignees name, example: 张三,李四,-; - means assign to nobody (optional)</param>
        /// <param name="updatedTimeBegin">issue filter update time begin  example: 2022-01-31 (optional)</param>
        /// <param name="updatedTimeEnd">issue filter update time end,  example: 2022-01-31 (optional)</param>
        /// <param name="orderBy">issue order, example: created_at, -updated_at, reference_count。‘-’ prefix means descending order (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIssuesApiResponse"/>&gt;</returns>
        public async Task<IListIssuesApiResponse?> ListIssuesOrDefaultAsync(string repo, Option<int> page = default, Option<int> pageSize = default, Option<string> state = default, Option<string> keyword = default, Option<string> priority = default, Option<string> labels = default, Option<string> authors = default, Option<string> assignees = default, Option<string> updatedTimeBegin = default, Option<string> updatedTimeEnd = default, Option<string> orderBy = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListIssuesAsync(repo, page, pageSize, state, keyword, priority, labels, authors, assignees, updatedTimeBegin, updatedTimeEnd, orderBy, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 查询仓库的 Issues 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="state">issue state open or closed (optional)</param>
        /// <param name="keyword">issue search key (optional)</param>
        /// <param name="priority">issue priority example: p0,p1,p2,p3 (optional)</param>
        /// <param name="labels">issue labels example: git,bug,feature (optional)</param>
        /// <param name="authors">issue authors name, example: 张三,李四 (optional)</param>
        /// <param name="assignees">issue assignees name, example: 张三,李四,-; - means assign to nobody (optional)</param>
        /// <param name="updatedTimeBegin">issue filter update time begin  example: 2022-01-31 (optional)</param>
        /// <param name="updatedTimeEnd">issue filter update time end,  example: 2022-01-31 (optional)</param>
        /// <param name="orderBy">issue order, example: created_at, -updated_at, reference_count。‘-’ prefix means descending order (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIssuesApiResponse"/>&gt;</returns>
        public async Task<IListIssuesApiResponse> ListIssuesAsync(string repo, Option<int> page = default, Option<int> pageSize = default, Option<string> state = default, Option<string> keyword = default, Option<string> priority = default, Option<string> labels = default, Option<string> authors = default, Option<string> assignees = default, Option<string> updatedTimeBegin = default, Option<string> updatedTimeEnd = default, Option<string> orderBy = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListIssues(repo, state, keyword, priority, labels, authors, assignees, updatedTimeBegin, updatedTimeEnd, orderBy);

                FormatListIssues(ref repo, ref page, ref pageSize, ref state, ref keyword, ref priority, ref labels, ref authors, ref assignees, ref updatedTimeBegin, ref updatedTimeEnd, ref orderBy);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/issues"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/issues");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (state.IsSet)
                        parseQueryStringLocalVar["state"] = ClientUtils.ParameterToString(state.Value);

                    if (keyword.IsSet)
                        parseQueryStringLocalVar["keyword"] = ClientUtils.ParameterToString(keyword.Value);

                    if (priority.IsSet)
                        parseQueryStringLocalVar["priority"] = ClientUtils.ParameterToString(priority.Value);

                    if (labels.IsSet)
                        parseQueryStringLocalVar["labels"] = ClientUtils.ParameterToString(labels.Value);

                    if (authors.IsSet)
                        parseQueryStringLocalVar["authors"] = ClientUtils.ParameterToString(authors.Value);

                    if (assignees.IsSet)
                        parseQueryStringLocalVar["assignees"] = ClientUtils.ParameterToString(assignees.Value);

                    if (updatedTimeBegin.IsSet)
                        parseQueryStringLocalVar["updated_time_begin"] = ClientUtils.ParameterToString(updatedTimeBegin.Value);

                    if (updatedTimeEnd.IsSet)
                        parseQueryStringLocalVar["updated_time_end"] = ClientUtils.ParameterToString(updatedTimeEnd.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["order_by"] = ClientUtils.ParameterToString(orderBy.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListIssuesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListIssuesApiResponse>();

                        ListIssuesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/issues", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListIssuesDefaultImplementation(apiResponseLocalVar, repo, page, pageSize, state, keyword, priority, labels, authors, assignees, updatedTimeBegin, updatedTimeEnd, orderBy);

                        Events.ExecuteOnListIssues(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListIssuesDefaultImplementation(e, "/{repo}/-/issues", uriBuilderLocalVar.Path, repo, page, pageSize, state, keyword, priority, labels, authors, assignees, updatedTimeBegin, updatedTimeEnd, orderBy);
                Events.ExecuteOnErrorListIssues(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListIssuesApiResponse"/>
        /// </summary>
        public partial class ListIssuesApiResponse : CNBOpenApi.Client.ApiResponse, IListIssuesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListIssuesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListIssuesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListIssuesApiResponse(ILogger<ListIssuesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ApiIssue>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ApiIssue>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ApiIssue>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPatchIssueComment(ref string repo, ref int number, ref int commentId, ApiPatchIssueCommentForm patchIssueCommentForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="patchIssueCommentForm"></param>
        /// <returns></returns>
        private void ValidatePatchIssueComment(string repo, ApiPatchIssueCommentForm patchIssueCommentForm)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (patchIssueCommentForm == null)
                throw new ArgumentNullException(nameof(patchIssueCommentForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="commentId"></param>
        /// <param name="patchIssueCommentForm"></param>
        private void AfterPatchIssueCommentDefaultImplementation(IPatchIssueCommentApiResponse apiResponseLocalVar, string repo, int number, int commentId, ApiPatchIssueCommentForm patchIssueCommentForm)
        {
            bool suppressDefaultLog = false;
            AfterPatchIssueComment(ref suppressDefaultLog, apiResponseLocalVar, repo, number, commentId, patchIssueCommentForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="commentId"></param>
        /// <param name="patchIssueCommentForm"></param>
        partial void AfterPatchIssueComment(ref bool suppressDefaultLog, IPatchIssueCommentApiResponse apiResponseLocalVar, string repo, int number, int commentId, ApiPatchIssueCommentForm patchIssueCommentForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="commentId"></param>
        /// <param name="patchIssueCommentForm"></param>
        private void OnErrorPatchIssueCommentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, int commentId, ApiPatchIssueCommentForm patchIssueCommentForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPatchIssueComment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number, commentId, patchIssueCommentForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="commentId"></param>
        /// <param name="patchIssueCommentForm"></param>
        partial void OnErrorPatchIssueComment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, int commentId, ApiPatchIssueCommentForm patchIssueCommentForm);

        /// <summary>
        /// 修改一个 Issue Comment 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="commentId">comment_id</param>
        /// <param name="patchIssueCommentForm">Patch Issue Comment Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPatchIssueCommentApiResponse"/>&gt;</returns>
        public async Task<IPatchIssueCommentApiResponse?> PatchIssueCommentOrDefaultAsync(string repo, int number, int commentId, ApiPatchIssueCommentForm patchIssueCommentForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PatchIssueCommentAsync(repo, number, commentId, patchIssueCommentForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 修改一个 Issue Comment 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="commentId">comment_id</param>
        /// <param name="patchIssueCommentForm">Patch Issue Comment Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPatchIssueCommentApiResponse"/>&gt;</returns>
        public async Task<IPatchIssueCommentApiResponse> PatchIssueCommentAsync(string repo, int number, int commentId, ApiPatchIssueCommentForm patchIssueCommentForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePatchIssueComment(repo, patchIssueCommentForm);

                FormatPatchIssueComment(ref repo, ref number, ref commentId, patchIssueCommentForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/issues/{number}/comments/{comment_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/issues/{number}/comments/{comment_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcomment_id%7D", Uri.EscapeDataString(commentId.ToString()));

                    httpRequestMessageLocalVar.Content = (patchIssueCommentForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(patchIssueCommentForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PatchIssueCommentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PatchIssueCommentApiResponse>();

                        PatchIssueCommentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/issues/{number}/comments/{comment_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPatchIssueCommentDefaultImplementation(apiResponseLocalVar, repo, number, commentId, patchIssueCommentForm);

                        Events.ExecuteOnPatchIssueComment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPatchIssueCommentDefaultImplementation(e, "/{repo}/-/issues/{number}/comments/{comment_id}", uriBuilderLocalVar.Path, repo, number, commentId, patchIssueCommentForm);
                Events.ExecuteOnErrorPatchIssueComment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PatchIssueCommentApiResponse"/>
        /// </summary>
        public partial class PatchIssueCommentApiResponse : CNBOpenApi.Client.ApiResponse, IPatchIssueCommentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PatchIssueCommentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PatchIssueCommentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PatchIssueCommentApiResponse(ILogger<PatchIssueCommentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.ApiIssueComment? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.ApiIssueComment>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.ApiIssueComment? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostIssueComment(ref string repo, ref int number, ApiPostIssueCommentForm postIssueCommentForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="postIssueCommentForm"></param>
        /// <returns></returns>
        private void ValidatePostIssueComment(string repo, ApiPostIssueCommentForm postIssueCommentForm)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (postIssueCommentForm == null)
                throw new ArgumentNullException(nameof(postIssueCommentForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="postIssueCommentForm"></param>
        private void AfterPostIssueCommentDefaultImplementation(IPostIssueCommentApiResponse apiResponseLocalVar, string repo, int number, ApiPostIssueCommentForm postIssueCommentForm)
        {
            bool suppressDefaultLog = false;
            AfterPostIssueComment(ref suppressDefaultLog, apiResponseLocalVar, repo, number, postIssueCommentForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="postIssueCommentForm"></param>
        partial void AfterPostIssueComment(ref bool suppressDefaultLog, IPostIssueCommentApiResponse apiResponseLocalVar, string repo, int number, ApiPostIssueCommentForm postIssueCommentForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="postIssueCommentForm"></param>
        private void OnErrorPostIssueCommentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, ApiPostIssueCommentForm postIssueCommentForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostIssueComment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number, postIssueCommentForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="postIssueCommentForm"></param>
        partial void OnErrorPostIssueComment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, ApiPostIssueCommentForm postIssueCommentForm);

        /// <summary>
        /// 创建一个 Issue Comment 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="postIssueCommentForm">Post Issue Comment Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostIssueCommentApiResponse"/>&gt;</returns>
        public async Task<IPostIssueCommentApiResponse?> PostIssueCommentOrDefaultAsync(string repo, int number, ApiPostIssueCommentForm postIssueCommentForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostIssueCommentAsync(repo, number, postIssueCommentForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 创建一个 Issue Comment 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="postIssueCommentForm">Post Issue Comment Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostIssueCommentApiResponse"/>&gt;</returns>
        public async Task<IPostIssueCommentApiResponse> PostIssueCommentAsync(string repo, int number, ApiPostIssueCommentForm postIssueCommentForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostIssueComment(repo, postIssueCommentForm);

                FormatPostIssueComment(ref repo, ref number, postIssueCommentForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/issues/{number}/comments"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/issues/{number}/comments");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));

                    httpRequestMessageLocalVar.Content = (postIssueCommentForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postIssueCommentForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostIssueCommentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostIssueCommentApiResponse>();

                        PostIssueCommentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/issues/{number}/comments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostIssueCommentDefaultImplementation(apiResponseLocalVar, repo, number, postIssueCommentForm);

                        Events.ExecuteOnPostIssueComment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostIssueCommentDefaultImplementation(e, "/{repo}/-/issues/{number}/comments", uriBuilderLocalVar.Path, repo, number, postIssueCommentForm);
                Events.ExecuteOnErrorPostIssueComment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostIssueCommentApiResponse"/>
        /// </summary>
        public partial class PostIssueCommentApiResponse : CNBOpenApi.Client.ApiResponse, IPostIssueCommentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostIssueCommentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostIssueCommentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostIssueCommentApiResponse(ILogger<PostIssueCommentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.ApiIssueComment? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.ApiIssueComment>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out CNBOpenApi.Model.ApiIssueComment? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostIssueLabels(ref string repo, ref int number, ApiPostIssueLabelsForm postIssueLabelsForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="postIssueLabelsForm"></param>
        /// <returns></returns>
        private void ValidatePostIssueLabels(string repo, ApiPostIssueLabelsForm postIssueLabelsForm)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (postIssueLabelsForm == null)
                throw new ArgumentNullException(nameof(postIssueLabelsForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="postIssueLabelsForm"></param>
        private void AfterPostIssueLabelsDefaultImplementation(IPostIssueLabelsApiResponse apiResponseLocalVar, string repo, int number, ApiPostIssueLabelsForm postIssueLabelsForm)
        {
            bool suppressDefaultLog = false;
            AfterPostIssueLabels(ref suppressDefaultLog, apiResponseLocalVar, repo, number, postIssueLabelsForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="postIssueLabelsForm"></param>
        partial void AfterPostIssueLabels(ref bool suppressDefaultLog, IPostIssueLabelsApiResponse apiResponseLocalVar, string repo, int number, ApiPostIssueLabelsForm postIssueLabelsForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="postIssueLabelsForm"></param>
        private void OnErrorPostIssueLabelsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, ApiPostIssueLabelsForm postIssueLabelsForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostIssueLabels(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number, postIssueLabelsForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="postIssueLabelsForm"></param>
        partial void OnErrorPostIssueLabels(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, ApiPostIssueLabelsForm postIssueLabelsForm);

        /// <summary>
        /// 新增 Issue 标签 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="postIssueLabelsForm">Post Issue Labels Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostIssueLabelsApiResponse"/>&gt;</returns>
        public async Task<IPostIssueLabelsApiResponse?> PostIssueLabelsOrDefaultAsync(string repo, int number, ApiPostIssueLabelsForm postIssueLabelsForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostIssueLabelsAsync(repo, number, postIssueLabelsForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 新增 Issue 标签 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="postIssueLabelsForm">Post Issue Labels Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostIssueLabelsApiResponse"/>&gt;</returns>
        public async Task<IPostIssueLabelsApiResponse> PostIssueLabelsAsync(string repo, int number, ApiPostIssueLabelsForm postIssueLabelsForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostIssueLabels(repo, postIssueLabelsForm);

                FormatPostIssueLabels(ref repo, ref number, postIssueLabelsForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/issues/{number}/labels"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/issues/{number}/labels");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));

                    httpRequestMessageLocalVar.Content = (postIssueLabelsForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postIssueLabelsForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostIssueLabelsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostIssueLabelsApiResponse>();

                        PostIssueLabelsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/issues/{number}/labels", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostIssueLabelsDefaultImplementation(apiResponseLocalVar, repo, number, postIssueLabelsForm);

                        Events.ExecuteOnPostIssueLabels(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostIssueLabelsDefaultImplementation(e, "/{repo}/-/issues/{number}/labels", uriBuilderLocalVar.Path, repo, number, postIssueLabelsForm);
                Events.ExecuteOnErrorPostIssueLabels(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostIssueLabelsApiResponse"/>
        /// </summary>
        public partial class PostIssueLabelsApiResponse : CNBOpenApi.Client.ApiResponse, IPostIssueLabelsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostIssueLabelsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostIssueLabelsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostIssueLabelsApiResponse(ILogger<PostIssueLabelsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.ApiLabel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.ApiLabel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.ApiLabel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutIssueLabels(ref string repo, ref int number, ApiPutIssueLabelsForm putIssueLabelsForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="putIssueLabelsForm"></param>
        /// <returns></returns>
        private void ValidatePutIssueLabels(string repo, ApiPutIssueLabelsForm putIssueLabelsForm)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (putIssueLabelsForm == null)
                throw new ArgumentNullException(nameof(putIssueLabelsForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="putIssueLabelsForm"></param>
        private void AfterPutIssueLabelsDefaultImplementation(IPutIssueLabelsApiResponse apiResponseLocalVar, string repo, int number, ApiPutIssueLabelsForm putIssueLabelsForm)
        {
            bool suppressDefaultLog = false;
            AfterPutIssueLabels(ref suppressDefaultLog, apiResponseLocalVar, repo, number, putIssueLabelsForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="putIssueLabelsForm"></param>
        partial void AfterPutIssueLabels(ref bool suppressDefaultLog, IPutIssueLabelsApiResponse apiResponseLocalVar, string repo, int number, ApiPutIssueLabelsForm putIssueLabelsForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="putIssueLabelsForm"></param>
        private void OnErrorPutIssueLabelsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, ApiPutIssueLabelsForm putIssueLabelsForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutIssueLabels(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number, putIssueLabelsForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="putIssueLabelsForm"></param>
        partial void OnErrorPutIssueLabels(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, ApiPutIssueLabelsForm putIssueLabelsForm);

        /// <summary>
        /// 设置 Issue 标签 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="putIssueLabelsForm">Put Issue Labels Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutIssueLabelsApiResponse"/>&gt;</returns>
        public async Task<IPutIssueLabelsApiResponse?> PutIssueLabelsOrDefaultAsync(string repo, int number, ApiPutIssueLabelsForm putIssueLabelsForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutIssueLabelsAsync(repo, number, putIssueLabelsForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 设置 Issue 标签 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="putIssueLabelsForm">Put Issue Labels Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutIssueLabelsApiResponse"/>&gt;</returns>
        public async Task<IPutIssueLabelsApiResponse> PutIssueLabelsAsync(string repo, int number, ApiPutIssueLabelsForm putIssueLabelsForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutIssueLabels(repo, putIssueLabelsForm);

                FormatPutIssueLabels(ref repo, ref number, putIssueLabelsForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/issues/{number}/labels"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/issues/{number}/labels");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));

                    httpRequestMessageLocalVar.Content = (putIssueLabelsForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(putIssueLabelsForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutIssueLabelsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutIssueLabelsApiResponse>();

                        PutIssueLabelsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/issues/{number}/labels", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutIssueLabelsDefaultImplementation(apiResponseLocalVar, repo, number, putIssueLabelsForm);

                        Events.ExecuteOnPutIssueLabels(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutIssueLabelsDefaultImplementation(e, "/{repo}/-/issues/{number}/labels", uriBuilderLocalVar.Path, repo, number, putIssueLabelsForm);
                Events.ExecuteOnErrorPutIssueLabels(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutIssueLabelsApiResponse"/>
        /// </summary>
        public partial class PutIssueLabelsApiResponse : CNBOpenApi.Client.ApiResponse, IPutIssueLabelsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutIssueLabelsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutIssueLabelsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutIssueLabelsApiResponse(ILogger<PutIssueLabelsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.ApiLabel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.ApiLabel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.ApiLabel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateIssue(ref string repo, ref int number, ApiPatchIssueForm patchIssueForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="patchIssueForm"></param>
        /// <returns></returns>
        private void ValidateUpdateIssue(string repo, ApiPatchIssueForm patchIssueForm)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (patchIssueForm == null)
                throw new ArgumentNullException(nameof(patchIssueForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="patchIssueForm"></param>
        private void AfterUpdateIssueDefaultImplementation(IUpdateIssueApiResponse apiResponseLocalVar, string repo, int number, ApiPatchIssueForm patchIssueForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateIssue(ref suppressDefaultLog, apiResponseLocalVar, repo, number, patchIssueForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="patchIssueForm"></param>
        partial void AfterUpdateIssue(ref bool suppressDefaultLog, IUpdateIssueApiResponse apiResponseLocalVar, string repo, int number, ApiPatchIssueForm patchIssueForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="patchIssueForm"></param>
        private void OnErrorUpdateIssueDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, ApiPatchIssueForm patchIssueForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateIssue(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number, patchIssueForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="patchIssueForm"></param>
        partial void OnErrorUpdateIssue(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, ApiPatchIssueForm patchIssueForm);

        /// <summary>
        /// 更新一个 Issue 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">issue number</param>
        /// <param name="patchIssueForm">Patch Issue Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateIssueApiResponse"/>&gt;</returns>
        public async Task<IUpdateIssueApiResponse?> UpdateIssueOrDefaultAsync(string repo, int number, ApiPatchIssueForm patchIssueForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateIssueAsync(repo, number, patchIssueForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 更新一个 Issue 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">issue number</param>
        /// <param name="patchIssueForm">Patch Issue Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateIssueApiResponse"/>&gt;</returns>
        public async Task<IUpdateIssueApiResponse> UpdateIssueAsync(string repo, int number, ApiPatchIssueForm patchIssueForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateIssue(repo, patchIssueForm);

                FormatUpdateIssue(ref repo, ref number, patchIssueForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/issues/{number}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/issues/{number}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));

                    httpRequestMessageLocalVar.Content = (patchIssueForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(patchIssueForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateIssueApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateIssueApiResponse>();

                        UpdateIssueApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/issues/{number}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateIssueDefaultImplementation(apiResponseLocalVar, repo, number, patchIssueForm);

                        Events.ExecuteOnUpdateIssue(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateIssueDefaultImplementation(e, "/{repo}/-/issues/{number}", uriBuilderLocalVar.Path, repo, number, patchIssueForm);
                Events.ExecuteOnErrorUpdateIssue(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateIssueApiResponse"/>
        /// </summary>
        public partial class UpdateIssueApiResponse : CNBOpenApi.Client.ApiResponse, IUpdateIssueApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateIssueApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateIssueApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateIssueApiResponse(ILogger<UpdateIssueApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.ApiIssueDetail? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.ApiIssueDetail>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.ApiIssueDetail? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
