// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CNBOpenApi.Client;
using CNBOpenApi.Model;
using System.Diagnostics.CodeAnalysis;

namespace CNBOpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IPullsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        PullsApiEvents Events { get; }

        /// <summary>
        /// 删除 Pull 标签
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="name">label name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePullLabelApiResponse"/>&gt;</returns>
        Task<IDeletePullLabelApiResponse> DeletePullLabelAsync(string repo, int number, string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除 Pull 标签
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="name">label name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePullLabelApiResponse"/>?&gt;</returns>
        Task<IDeletePullLabelApiResponse?> DeletePullLabelOrDefaultAsync(string repo, int number, string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 清空 Pull 标签
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePullLabelsApiResponse"/>&gt;</returns>
        Task<IDeletePullLabelsApiResponse> DeletePullLabelsAsync(string repo, int number, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 清空 Pull 标签
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePullLabelsApiResponse"/>?&gt;</returns>
        Task<IDeletePullLabelsApiResponse?> DeletePullLabelsOrDefaultAsync(string repo, int number, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// [openapi] 查询指定 Pull
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-pr:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">pull request number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPullApiResponse"/>&gt;</returns>
        Task<IGetPullApiResponse> GetPullAsync(string repo, int number, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// [openapi] 查询指定 Pull
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-pr:r
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">pull request number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPullApiResponse"/>?&gt;</returns>
        Task<IGetPullApiResponse?> GetPullOrDefaultAsync(string repo, int number, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// [openapi] 查询 Pull Comments 列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPullCommentsApiResponse"/>&gt;</returns>
        Task<IListPullCommentsApiResponse> ListPullCommentsAsync(string repo, string number, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// [openapi] 查询 Pull Comments 列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPullCommentsApiResponse"/>?&gt;</returns>
        Task<IListPullCommentsApiResponse?> ListPullCommentsOrDefaultAsync(string repo, string number, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询 Pull 的标签(label) 列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPullLabelsApiResponse"/>&gt;</returns>
        Task<IListPullLabelsApiResponse> ListPullLabelsAsync(string repo, int number, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询 Pull 的标签(label) 列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPullLabelsApiResponse"/>?&gt;</returns>
        Task<IListPullLabelsApiResponse?> ListPullLabelsOrDefaultAsync(string repo, int number, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// [openapi] 查询 Pull 列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-pr:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="state">pull state &#x60;open&#x60;，&#x60;closed&#x60;, &#x60;all&#x60; (optional, default to &quot;open&quot;)</param>
        /// <param name="authors">pull authors name, example: 张三,李四 (optional)</param>
        /// <param name="reviewers">pull reviewers name, example: 张三,李四; - means nobody to review (optional)</param>
        /// <param name="assignees">pull assignees name, example: 张三,李四,-; - means assign to nobody (optional)</param>
        /// <param name="baseRef">pull base ref,  example: refs/heads/master (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPullsApiResponse"/>&gt;</returns>
        Task<IListPullsApiResponse> ListPullsAsync(string repo, Option<int> page = default, Option<int> pageSize = default, Option<string> state = default, Option<string> authors = default, Option<string> reviewers = default, Option<string> assignees = default, Option<string> baseRef = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// [openapi] 查询 Pull 列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-pr:r
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="state">pull state &#x60;open&#x60;，&#x60;closed&#x60;, &#x60;all&#x60; (optional, default to &quot;open&quot;)</param>
        /// <param name="authors">pull authors name, example: 张三,李四 (optional)</param>
        /// <param name="reviewers">pull reviewers name, example: 张三,李四; - means nobody to review (optional)</param>
        /// <param name="assignees">pull assignees name, example: 张三,李四,-; - means assign to nobody (optional)</param>
        /// <param name="baseRef">pull base ref,  example: refs/heads/master (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPullsApiResponse"/>?&gt;</returns>
        Task<IListPullsApiResponse?> ListPullsOrDefaultAsync(string repo, Option<int> page = default, Option<int> pageSize = default, Option<string> state = default, Option<string> authors = default, Option<string> reviewers = default, Option<string> assignees = default, Option<string> baseRef = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// [openapi] 根据numbers查询 Pull 列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-pr:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="n">pull request numbers</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPullsByNumbersApiResponse"/>&gt;</returns>
        Task<IListPullsByNumbersApiResponse> ListPullsByNumbersAsync(string repo, List<string> n, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// [openapi] 根据numbers查询 Pull 列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-pr:r
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="n">pull request numbers</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPullsByNumbersApiResponse"/>?&gt;</returns>
        Task<IListPullsByNumbersApiResponse?> ListPullsByNumbersOrDefaultAsync(string repo, List<string> n, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// [openapi] 合并一个 Pull Request
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-pr:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">Pull Request Number</param>
        /// <param name="mergePullRequestForm">Merge Pull Request Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMergePullApiResponse"/>&gt;</returns>
        Task<IMergePullApiResponse> MergePullAsync(string repo, int number, ApiMergePullRequest mergePullRequestForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// [openapi] 合并一个 Pull Request
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-pr:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">Pull Request Number</param>
        /// <param name="mergePullRequestForm">Merge Pull Request Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMergePullApiResponse"/>?&gt;</returns>
        Task<IMergePullApiResponse?> MergePullOrDefaultAsync(string repo, int number, ApiMergePullRequest mergePullRequestForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// [openapi] 更新一个 Pull Request
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-pr:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">Pull Request Number</param>
        /// <param name="updatePullRequestForm">Update Pull Request Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPatchPullApiResponse"/>&gt;</returns>
        Task<IPatchPullApiResponse> PatchPullAsync(string repo, int number, ApiPatchPullRequest updatePullRequestForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// [openapi] 更新一个 Pull Request
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-pr:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">Pull Request Number</param>
        /// <param name="updatePullRequestForm">Update Pull Request Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPatchPullApiResponse"/>?&gt;</returns>
        Task<IPatchPullApiResponse?> PatchPullOrDefaultAsync(string repo, int number, ApiPatchPullRequest updatePullRequestForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// [openapi] 新增一个 Pull
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-pr:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="postPullForm">Post Pull Request Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPullApiResponse"/>&gt;</returns>
        Task<IPostPullApiResponse> PostPullAsync(string repo, ApiPullCreationForm postPullForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// [openapi] 新增一个 Pull
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-pr:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="postPullForm">Post Pull Request Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPullApiResponse"/>?&gt;</returns>
        Task<IPostPullApiResponse?> PostPullOrDefaultAsync(string repo, ApiPullCreationForm postPullForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// [openapi] 新增一个 Pull Comment
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="postPullCommentForm">Post Pull Request Comment Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPullCommentApiResponse"/>&gt;</returns>
        Task<IPostPullCommentApiResponse> PostPullCommentAsync(string repo, int number, ApiPullCommentCreationForm postPullCommentForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// [openapi] 新增一个 Pull Comment
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="postPullCommentForm">Post Pull Request Comment Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPullCommentApiResponse"/>?&gt;</returns>
        Task<IPostPullCommentApiResponse?> PostPullCommentOrDefaultAsync(string repo, int number, ApiPullCommentCreationForm postPullCommentForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 新增 Pull 标签
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="postPullLabelsForm">Post Pull Labels Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPullLabelsApiResponse"/>&gt;</returns>
        Task<IPostPullLabelsApiResponse> PostPullLabelsAsync(string repo, int number, ApiPostPullLabelsForm postPullLabelsForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 新增 Pull 标签
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="postPullLabelsForm">Post Pull Labels Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPullLabelsApiResponse"/>?&gt;</returns>
        Task<IPostPullLabelsApiResponse?> PostPullLabelsOrDefaultAsync(string repo, int number, ApiPostPullLabelsForm postPullLabelsForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 新增一次 pull request 评审
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="postPullReviewForm">Post Pull Review Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPullReviewApiResponse"/>&gt;</returns>
        Task<IPostPullReviewApiResponse> PostPullReviewAsync(string repo, int number, ApiPullReviewCreationForm postPullReviewForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 新增一次 pull request 评审
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="postPullReviewForm">Post Pull Review Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPullReviewApiResponse"/>?&gt;</returns>
        Task<IPostPullReviewApiResponse?> PostPullReviewOrDefaultAsync(string repo, int number, ApiPullReviewCreationForm postPullReviewForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 设置 Pull 标签
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="putPullLabelsForm">Put Pull Labels Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPullLabelsApiResponse"/>&gt;</returns>
        Task<IPutPullLabelsApiResponse> PutPullLabelsAsync(string repo, int number, ApiPutPullLabelsForm putPullLabelsForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 设置 Pull 标签
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="putPullLabelsForm">Put Pull Labels Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPullLabelsApiResponse"/>?&gt;</returns>
        Task<IPutPullLabelsApiResponse?> PutPullLabelsOrDefaultAsync(string repo, int number, ApiPutPullLabelsForm putPullLabelsForm, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeletePullLabelApiResponse"/>
    /// </summary>
    public interface IDeletePullLabelApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.ApiLabel?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletePullLabelsApiResponse"/>
    /// </summary>
    public interface IDeletePullLabelsApiResponse : CNBOpenApi.Client.IApiResponse, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetPullApiResponse"/>
    /// </summary>
    public interface IGetPullApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.ApiPull?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IListPullCommentsApiResponse"/>
    /// </summary>
    public interface IListPullCommentsApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<ApiPullRequestComment>?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IListPullLabelsApiResponse"/>
    /// </summary>
    public interface IListPullLabelsApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<ApiLabel>?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IListPullsApiResponse"/>
    /// </summary>
    public interface IListPullsApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<ApiPullRequest>?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IListPullsByNumbersApiResponse"/>
    /// </summary>
    public interface IListPullsByNumbersApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<ApiPullRequestInfo>?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IMergePullApiResponse"/>
    /// </summary>
    public interface IMergePullApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.ApiMergePullResponse?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPatchPullApiResponse"/>
    /// </summary>
    public interface IPatchPullApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.ApiPull?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPostPullApiResponse"/>
    /// </summary>
    public interface IPostPullApiResponse : CNBOpenApi.Client.IApiResponse, ICreated<CNBOpenApi.Model.ApiPull?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPostPullCommentApiResponse"/>
    /// </summary>
    public interface IPostPullCommentApiResponse : CNBOpenApi.Client.IApiResponse, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPostPullLabelsApiResponse"/>
    /// </summary>
    public interface IPostPullLabelsApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.ApiLabel?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPostPullReviewApiResponse"/>
    /// </summary>
    public interface IPostPullReviewApiResponse : CNBOpenApi.Client.IApiResponse, IForbidden<CNBOpenApi.Model.DieWebError?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutPullLabelsApiResponse"/>
    /// </summary>
    public interface IPutPullLabelsApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.ApiLabel?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class PullsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletePullLabel;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletePullLabel;

        internal void ExecuteOnDeletePullLabel(PullsApi.DeletePullLabelApiResponse apiResponse)
        {
            OnDeletePullLabel?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletePullLabel(Exception exception)
        {
            OnErrorDeletePullLabel?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletePullLabels;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletePullLabels;

        internal void ExecuteOnDeletePullLabels(PullsApi.DeletePullLabelsApiResponse apiResponse)
        {
            OnDeletePullLabels?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletePullLabels(Exception exception)
        {
            OnErrorDeletePullLabels?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPull;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPull;

        internal void ExecuteOnGetPull(PullsApi.GetPullApiResponse apiResponse)
        {
            OnGetPull?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPull(Exception exception)
        {
            OnErrorGetPull?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListPullComments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListPullComments;

        internal void ExecuteOnListPullComments(PullsApi.ListPullCommentsApiResponse apiResponse)
        {
            OnListPullComments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListPullComments(Exception exception)
        {
            OnErrorListPullComments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListPullLabels;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListPullLabels;

        internal void ExecuteOnListPullLabels(PullsApi.ListPullLabelsApiResponse apiResponse)
        {
            OnListPullLabels?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListPullLabels(Exception exception)
        {
            OnErrorListPullLabels?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListPulls;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListPulls;

        internal void ExecuteOnListPulls(PullsApi.ListPullsApiResponse apiResponse)
        {
            OnListPulls?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListPulls(Exception exception)
        {
            OnErrorListPulls?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListPullsByNumbers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListPullsByNumbers;

        internal void ExecuteOnListPullsByNumbers(PullsApi.ListPullsByNumbersApiResponse apiResponse)
        {
            OnListPullsByNumbers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListPullsByNumbers(Exception exception)
        {
            OnErrorListPullsByNumbers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnMergePull;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorMergePull;

        internal void ExecuteOnMergePull(PullsApi.MergePullApiResponse apiResponse)
        {
            OnMergePull?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorMergePull(Exception exception)
        {
            OnErrorMergePull?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPatchPull;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPatchPull;

        internal void ExecuteOnPatchPull(PullsApi.PatchPullApiResponse apiResponse)
        {
            OnPatchPull?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPatchPull(Exception exception)
        {
            OnErrorPatchPull?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostPull;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostPull;

        internal void ExecuteOnPostPull(PullsApi.PostPullApiResponse apiResponse)
        {
            OnPostPull?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostPull(Exception exception)
        {
            OnErrorPostPull?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostPullComment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostPullComment;

        internal void ExecuteOnPostPullComment(PullsApi.PostPullCommentApiResponse apiResponse)
        {
            OnPostPullComment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostPullComment(Exception exception)
        {
            OnErrorPostPullComment?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostPullLabels;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostPullLabels;

        internal void ExecuteOnPostPullLabels(PullsApi.PostPullLabelsApiResponse apiResponse)
        {
            OnPostPullLabels?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostPullLabels(Exception exception)
        {
            OnErrorPostPullLabels?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostPullReview;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostPullReview;

        internal void ExecuteOnPostPullReview(PullsApi.PostPullReviewApiResponse apiResponse)
        {
            OnPostPullReview?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostPullReview(Exception exception)
        {
            OnErrorPostPullReview?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutPullLabels;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutPullLabels;

        internal void ExecuteOnPutPullLabels(PullsApi.PutPullLabelsApiResponse apiResponse)
        {
            OnPutPullLabels?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutPullLabels(Exception exception)
        {
            OnErrorPutPullLabels?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class PullsApi : IPullsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<PullsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public PullsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PullsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PullsApi(ILogger<PullsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, PullsApiEvents pullsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<PullsApi>();
            HttpClient = httpClient;
            Events = pullsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatDeletePullLabel(ref string repo, ref int number, ref string name);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        private void ValidateDeletePullLabel(string repo, string name)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (name == null)
                throw new ArgumentNullException(nameof(name));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="name"></param>
        private void AfterDeletePullLabelDefaultImplementation(IDeletePullLabelApiResponse apiResponseLocalVar, string repo, int number, string name)
        {
            bool suppressDefaultLog = false;
            AfterDeletePullLabel(ref suppressDefaultLog, apiResponseLocalVar, repo, number, name);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="name"></param>
        partial void AfterDeletePullLabel(ref bool suppressDefaultLog, IDeletePullLabelApiResponse apiResponseLocalVar, string repo, int number, string name);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="name"></param>
        private void OnErrorDeletePullLabelDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, string name)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletePullLabel(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number, name);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="name"></param>
        partial void OnErrorDeletePullLabel(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, string name);

        /// <summary>
        /// 删除 Pull 标签 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="name">label name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePullLabelApiResponse"/>&gt;</returns>
        public async Task<IDeletePullLabelApiResponse?> DeletePullLabelOrDefaultAsync(string repo, int number, string name, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletePullLabelAsync(repo, number, name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 删除 Pull 标签 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="name">label name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePullLabelApiResponse"/>&gt;</returns>
        public async Task<IDeletePullLabelApiResponse> DeletePullLabelAsync(string repo, int number, string name, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeletePullLabel(repo, name);

                FormatDeletePullLabel(ref repo, ref number, ref name);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/pulls/{number}/labels/{name}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/pulls/{number}/labels/{name}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bname%7D", Uri.EscapeDataString(name.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletePullLabelApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletePullLabelApiResponse>();

                        DeletePullLabelApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/pulls/{number}/labels/{name}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletePullLabelDefaultImplementation(apiResponseLocalVar, repo, number, name);

                        Events.ExecuteOnDeletePullLabel(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletePullLabelDefaultImplementation(e, "/{repo}/-/pulls/{number}/labels/{name}", uriBuilderLocalVar.Path, repo, number, name);
                Events.ExecuteOnErrorDeletePullLabel(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletePullLabelApiResponse"/>
        /// </summary>
        public partial class DeletePullLabelApiResponse : CNBOpenApi.Client.ApiResponse, IDeletePullLabelApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletePullLabelApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletePullLabelApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletePullLabelApiResponse(ILogger<DeletePullLabelApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.ApiLabel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.ApiLabel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.ApiLabel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletePullLabels(ref string repo, ref int number);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <returns></returns>
        private void ValidateDeletePullLabels(string repo)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        private void AfterDeletePullLabelsDefaultImplementation(IDeletePullLabelsApiResponse apiResponseLocalVar, string repo, int number)
        {
            bool suppressDefaultLog = false;
            AfterDeletePullLabels(ref suppressDefaultLog, apiResponseLocalVar, repo, number);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        partial void AfterDeletePullLabels(ref bool suppressDefaultLog, IDeletePullLabelsApiResponse apiResponseLocalVar, string repo, int number);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        private void OnErrorDeletePullLabelsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletePullLabels(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        partial void OnErrorDeletePullLabels(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number);

        /// <summary>
        /// 清空 Pull 标签 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePullLabelsApiResponse"/>&gt;</returns>
        public async Task<IDeletePullLabelsApiResponse?> DeletePullLabelsOrDefaultAsync(string repo, int number, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletePullLabelsAsync(repo, number, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 清空 Pull 标签 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePullLabelsApiResponse"/>&gt;</returns>
        public async Task<IDeletePullLabelsApiResponse> DeletePullLabelsAsync(string repo, int number, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeletePullLabels(repo);

                FormatDeletePullLabels(ref repo, ref number);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/pulls/{number}/labels"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/pulls/{number}/labels");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletePullLabelsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletePullLabelsApiResponse>();

                        DeletePullLabelsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/pulls/{number}/labels", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletePullLabelsDefaultImplementation(apiResponseLocalVar, repo, number);

                        Events.ExecuteOnDeletePullLabels(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletePullLabelsDefaultImplementation(e, "/{repo}/-/pulls/{number}/labels", uriBuilderLocalVar.Path, repo, number);
                Events.ExecuteOnErrorDeletePullLabels(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletePullLabelsApiResponse"/>
        /// </summary>
        public partial class DeletePullLabelsApiResponse : CNBOpenApi.Client.ApiResponse, IDeletePullLabelsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletePullLabelsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletePullLabelsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletePullLabelsApiResponse(ILogger<DeletePullLabelsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPull(ref string repo, ref int number);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <returns></returns>
        private void ValidateGetPull(string repo)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        private void AfterGetPullDefaultImplementation(IGetPullApiResponse apiResponseLocalVar, string repo, int number)
        {
            bool suppressDefaultLog = false;
            AfterGetPull(ref suppressDefaultLog, apiResponseLocalVar, repo, number);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        partial void AfterGetPull(ref bool suppressDefaultLog, IGetPullApiResponse apiResponseLocalVar, string repo, int number);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        private void OnErrorGetPullDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPull(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        partial void OnErrorGetPull(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number);

        /// <summary>
        /// [openapi] 查询指定 Pull 访问令牌调用此接口需包含以下权限  repo-pr:r
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">pull request number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPullApiResponse"/>&gt;</returns>
        public async Task<IGetPullApiResponse?> GetPullOrDefaultAsync(string repo, int number, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPullAsync(repo, number, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// [openapi] 查询指定 Pull 访问令牌调用此接口需包含以下权限  repo-pr:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">pull request number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPullApiResponse"/>&gt;</returns>
        public async Task<IGetPullApiResponse> GetPullAsync(string repo, int number, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPull(repo);

                FormatGetPull(ref repo, ref number);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/pulls/{number}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/pulls/{number}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPullApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPullApiResponse>();

                        GetPullApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/pulls/{number}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPullDefaultImplementation(apiResponseLocalVar, repo, number);

                        Events.ExecuteOnGetPull(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPullDefaultImplementation(e, "/{repo}/-/pulls/{number}", uriBuilderLocalVar.Path, repo, number);
                Events.ExecuteOnErrorGetPull(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPullApiResponse"/>
        /// </summary>
        public partial class GetPullApiResponse : CNBOpenApi.Client.ApiResponse, IGetPullApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPullApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPullApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPullApiResponse(ILogger<GetPullApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.ApiPull? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.ApiPull>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.ApiPull? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListPullComments(ref string repo, ref string number, ref Option<int> page, ref Option<int> pageSize);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <returns></returns>
        private void ValidateListPullComments(string repo, string number)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (number == null)
                throw new ArgumentNullException(nameof(number));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void AfterListPullCommentsDefaultImplementation(IListPullCommentsApiResponse apiResponseLocalVar, string repo, string number, Option<int> page, Option<int> pageSize)
        {
            bool suppressDefaultLog = false;
            AfterListPullComments(ref suppressDefaultLog, apiResponseLocalVar, repo, number, page, pageSize);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void AfterListPullComments(ref bool suppressDefaultLog, IListPullCommentsApiResponse apiResponseLocalVar, string repo, string number, Option<int> page, Option<int> pageSize);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void OnErrorListPullCommentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string number, Option<int> page, Option<int> pageSize)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListPullComments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number, page, pageSize);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void OnErrorListPullComments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string number, Option<int> page, Option<int> pageSize);

        /// <summary>
        /// [openapi] 查询 Pull Comments 列表 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPullCommentsApiResponse"/>&gt;</returns>
        public async Task<IListPullCommentsApiResponse?> ListPullCommentsOrDefaultAsync(string repo, string number, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListPullCommentsAsync(repo, number, page, pageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// [openapi] 查询 Pull Comments 列表 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPullCommentsApiResponse"/>&gt;</returns>
        public async Task<IListPullCommentsApiResponse> ListPullCommentsAsync(string repo, string number, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListPullComments(repo, number);

                FormatListPullComments(ref repo, ref number, ref page, ref pageSize);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/pulls/{number}/comments"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/pulls/{number}/comments");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListPullCommentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListPullCommentsApiResponse>();

                        ListPullCommentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/pulls/{number}/comments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListPullCommentsDefaultImplementation(apiResponseLocalVar, repo, number, page, pageSize);

                        Events.ExecuteOnListPullComments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListPullCommentsDefaultImplementation(e, "/{repo}/-/pulls/{number}/comments", uriBuilderLocalVar.Path, repo, number, page, pageSize);
                Events.ExecuteOnErrorListPullComments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListPullCommentsApiResponse"/>
        /// </summary>
        public partial class ListPullCommentsApiResponse : CNBOpenApi.Client.ApiResponse, IListPullCommentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListPullCommentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListPullCommentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListPullCommentsApiResponse(ILogger<ListPullCommentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ApiPullRequestComment>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ApiPullRequestComment>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ApiPullRequestComment>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListPullLabels(ref string repo, ref int number, ref Option<int> page, ref Option<int> pageSize);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <returns></returns>
        private void ValidateListPullLabels(string repo)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void AfterListPullLabelsDefaultImplementation(IListPullLabelsApiResponse apiResponseLocalVar, string repo, int number, Option<int> page, Option<int> pageSize)
        {
            bool suppressDefaultLog = false;
            AfterListPullLabels(ref suppressDefaultLog, apiResponseLocalVar, repo, number, page, pageSize);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void AfterListPullLabels(ref bool suppressDefaultLog, IListPullLabelsApiResponse apiResponseLocalVar, string repo, int number, Option<int> page, Option<int> pageSize);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void OnErrorListPullLabelsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, Option<int> page, Option<int> pageSize)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListPullLabels(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number, page, pageSize);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void OnErrorListPullLabels(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, Option<int> page, Option<int> pageSize);

        /// <summary>
        /// 查询 Pull 的标签(label) 列表 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPullLabelsApiResponse"/>&gt;</returns>
        public async Task<IListPullLabelsApiResponse?> ListPullLabelsOrDefaultAsync(string repo, int number, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListPullLabelsAsync(repo, number, page, pageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 查询 Pull 的标签(label) 列表 访问令牌调用此接口需包含以下权限  repo-notes:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPullLabelsApiResponse"/>&gt;</returns>
        public async Task<IListPullLabelsApiResponse> ListPullLabelsAsync(string repo, int number, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListPullLabels(repo);

                FormatListPullLabels(ref repo, ref number, ref page, ref pageSize);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/pulls/{number}/labels"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/pulls/{number}/labels");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListPullLabelsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListPullLabelsApiResponse>();

                        ListPullLabelsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/pulls/{number}/labels", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListPullLabelsDefaultImplementation(apiResponseLocalVar, repo, number, page, pageSize);

                        Events.ExecuteOnListPullLabels(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListPullLabelsDefaultImplementation(e, "/{repo}/-/pulls/{number}/labels", uriBuilderLocalVar.Path, repo, number, page, pageSize);
                Events.ExecuteOnErrorListPullLabels(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListPullLabelsApiResponse"/>
        /// </summary>
        public partial class ListPullLabelsApiResponse : CNBOpenApi.Client.ApiResponse, IListPullLabelsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListPullLabelsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListPullLabelsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListPullLabelsApiResponse(ILogger<ListPullLabelsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ApiLabel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ApiLabel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ApiLabel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListPulls(ref string repo, ref Option<int> page, ref Option<int> pageSize, ref Option<string> state, ref Option<string> authors, ref Option<string> reviewers, ref Option<string> assignees, ref Option<string> baseRef);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="state"></param>
        /// <param name="authors"></param>
        /// <param name="reviewers"></param>
        /// <param name="assignees"></param>
        /// <param name="baseRef"></param>
        /// <returns></returns>
        private void ValidateListPulls(string repo, Option<string> state, Option<string> authors, Option<string> reviewers, Option<string> assignees, Option<string> baseRef)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state));

            if (authors.IsSet && authors.Value == null)
                throw new ArgumentNullException(nameof(authors));

            if (reviewers.IsSet && reviewers.Value == null)
                throw new ArgumentNullException(nameof(reviewers));

            if (assignees.IsSet && assignees.Value == null)
                throw new ArgumentNullException(nameof(assignees));

            if (baseRef.IsSet && baseRef.Value == null)
                throw new ArgumentNullException(nameof(baseRef));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="state"></param>
        /// <param name="authors"></param>
        /// <param name="reviewers"></param>
        /// <param name="assignees"></param>
        /// <param name="baseRef"></param>
        private void AfterListPullsDefaultImplementation(IListPullsApiResponse apiResponseLocalVar, string repo, Option<int> page, Option<int> pageSize, Option<string> state, Option<string> authors, Option<string> reviewers, Option<string> assignees, Option<string> baseRef)
        {
            bool suppressDefaultLog = false;
            AfterListPulls(ref suppressDefaultLog, apiResponseLocalVar, repo, page, pageSize, state, authors, reviewers, assignees, baseRef);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="state"></param>
        /// <param name="authors"></param>
        /// <param name="reviewers"></param>
        /// <param name="assignees"></param>
        /// <param name="baseRef"></param>
        partial void AfterListPulls(ref bool suppressDefaultLog, IListPullsApiResponse apiResponseLocalVar, string repo, Option<int> page, Option<int> pageSize, Option<string> state, Option<string> authors, Option<string> reviewers, Option<string> assignees, Option<string> baseRef);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="state"></param>
        /// <param name="authors"></param>
        /// <param name="reviewers"></param>
        /// <param name="assignees"></param>
        /// <param name="baseRef"></param>
        private void OnErrorListPullsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<int> page, Option<int> pageSize, Option<string> state, Option<string> authors, Option<string> reviewers, Option<string> assignees, Option<string> baseRef)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListPulls(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, page, pageSize, state, authors, reviewers, assignees, baseRef);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="state"></param>
        /// <param name="authors"></param>
        /// <param name="reviewers"></param>
        /// <param name="assignees"></param>
        /// <param name="baseRef"></param>
        partial void OnErrorListPulls(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<int> page, Option<int> pageSize, Option<string> state, Option<string> authors, Option<string> reviewers, Option<string> assignees, Option<string> baseRef);

        /// <summary>
        /// [openapi] 查询 Pull 列表 访问令牌调用此接口需包含以下权限  repo-pr:r
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="state">pull state &#x60;open&#x60;，&#x60;closed&#x60;, &#x60;all&#x60; (optional, default to &quot;open&quot;)</param>
        /// <param name="authors">pull authors name, example: 张三,李四 (optional)</param>
        /// <param name="reviewers">pull reviewers name, example: 张三,李四; - means nobody to review (optional)</param>
        /// <param name="assignees">pull assignees name, example: 张三,李四,-; - means assign to nobody (optional)</param>
        /// <param name="baseRef">pull base ref,  example: refs/heads/master (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPullsApiResponse"/>&gt;</returns>
        public async Task<IListPullsApiResponse?> ListPullsOrDefaultAsync(string repo, Option<int> page = default, Option<int> pageSize = default, Option<string> state = default, Option<string> authors = default, Option<string> reviewers = default, Option<string> assignees = default, Option<string> baseRef = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListPullsAsync(repo, page, pageSize, state, authors, reviewers, assignees, baseRef, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// [openapi] 查询 Pull 列表 访问令牌调用此接口需包含以下权限  repo-pr:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="page">pagination page number (optional, default to 1)</param>
        /// <param name="pageSize">pagination page size (optional, default to 30)</param>
        /// <param name="state">pull state &#x60;open&#x60;，&#x60;closed&#x60;, &#x60;all&#x60; (optional, default to &quot;open&quot;)</param>
        /// <param name="authors">pull authors name, example: 张三,李四 (optional)</param>
        /// <param name="reviewers">pull reviewers name, example: 张三,李四; - means nobody to review (optional)</param>
        /// <param name="assignees">pull assignees name, example: 张三,李四,-; - means assign to nobody (optional)</param>
        /// <param name="baseRef">pull base ref,  example: refs/heads/master (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPullsApiResponse"/>&gt;</returns>
        public async Task<IListPullsApiResponse> ListPullsAsync(string repo, Option<int> page = default, Option<int> pageSize = default, Option<string> state = default, Option<string> authors = default, Option<string> reviewers = default, Option<string> assignees = default, Option<string> baseRef = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListPulls(repo, state, authors, reviewers, assignees, baseRef);

                FormatListPulls(ref repo, ref page, ref pageSize, ref state, ref authors, ref reviewers, ref assignees, ref baseRef);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/pulls"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/pulls");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (state.IsSet)
                        parseQueryStringLocalVar["state"] = ClientUtils.ParameterToString(state.Value);

                    if (authors.IsSet)
                        parseQueryStringLocalVar["authors"] = ClientUtils.ParameterToString(authors.Value);

                    if (reviewers.IsSet)
                        parseQueryStringLocalVar["reviewers"] = ClientUtils.ParameterToString(reviewers.Value);

                    if (assignees.IsSet)
                        parseQueryStringLocalVar["assignees"] = ClientUtils.ParameterToString(assignees.Value);

                    if (baseRef.IsSet)
                        parseQueryStringLocalVar["base_ref"] = ClientUtils.ParameterToString(baseRef.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListPullsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListPullsApiResponse>();

                        ListPullsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/pulls", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListPullsDefaultImplementation(apiResponseLocalVar, repo, page, pageSize, state, authors, reviewers, assignees, baseRef);

                        Events.ExecuteOnListPulls(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListPullsDefaultImplementation(e, "/{repo}/-/pulls", uriBuilderLocalVar.Path, repo, page, pageSize, state, authors, reviewers, assignees, baseRef);
                Events.ExecuteOnErrorListPulls(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListPullsApiResponse"/>
        /// </summary>
        public partial class ListPullsApiResponse : CNBOpenApi.Client.ApiResponse, IListPullsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListPullsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListPullsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListPullsApiResponse(ILogger<ListPullsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ApiPullRequest>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ApiPullRequest>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ApiPullRequest>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListPullsByNumbers(ref string repo, List<string> n);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="n"></param>
        /// <returns></returns>
        private void ValidateListPullsByNumbers(string repo, List<string> n)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (n == null)
                throw new ArgumentNullException(nameof(n));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="n"></param>
        private void AfterListPullsByNumbersDefaultImplementation(IListPullsByNumbersApiResponse apiResponseLocalVar, string repo, List<string> n)
        {
            bool suppressDefaultLog = false;
            AfterListPullsByNumbers(ref suppressDefaultLog, apiResponseLocalVar, repo, n);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="n"></param>
        partial void AfterListPullsByNumbers(ref bool suppressDefaultLog, IListPullsByNumbersApiResponse apiResponseLocalVar, string repo, List<string> n);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="n"></param>
        private void OnErrorListPullsByNumbersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, List<string> n)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListPullsByNumbers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, n);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="n"></param>
        partial void OnErrorListPullsByNumbers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, List<string> n);

        /// <summary>
        /// [openapi] 根据numbers查询 Pull 列表 访问令牌调用此接口需包含以下权限  repo-pr:r
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="n">pull request numbers</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPullsByNumbersApiResponse"/>&gt;</returns>
        public async Task<IListPullsByNumbersApiResponse?> ListPullsByNumbersOrDefaultAsync(string repo, List<string> n, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListPullsByNumbersAsync(repo, n, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// [openapi] 根据numbers查询 Pull 列表 访问令牌调用此接口需包含以下权限  repo-pr:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="n">pull request numbers</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListPullsByNumbersApiResponse"/>&gt;</returns>
        public async Task<IListPullsByNumbersApiResponse> ListPullsByNumbersAsync(string repo, List<string> n, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListPullsByNumbers(repo, n);

                FormatListPullsByNumbers(ref repo, n);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/pull-in-batch"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/pull-in-batch");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["n"] = ClientUtils.ParameterToString(n);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListPullsByNumbersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListPullsByNumbersApiResponse>();

                        ListPullsByNumbersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/pull-in-batch", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListPullsByNumbersDefaultImplementation(apiResponseLocalVar, repo, n);

                        Events.ExecuteOnListPullsByNumbers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListPullsByNumbersDefaultImplementation(e, "/{repo}/-/pull-in-batch", uriBuilderLocalVar.Path, repo, n);
                Events.ExecuteOnErrorListPullsByNumbers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListPullsByNumbersApiResponse"/>
        /// </summary>
        public partial class ListPullsByNumbersApiResponse : CNBOpenApi.Client.ApiResponse, IListPullsByNumbersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListPullsByNumbersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListPullsByNumbersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListPullsByNumbersApiResponse(ILogger<ListPullsByNumbersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ApiPullRequestInfo>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ApiPullRequestInfo>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ApiPullRequestInfo>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatMergePull(ref string repo, ref int number, ApiMergePullRequest mergePullRequestForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="mergePullRequestForm"></param>
        /// <returns></returns>
        private void ValidateMergePull(string repo, ApiMergePullRequest mergePullRequestForm)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (mergePullRequestForm == null)
                throw new ArgumentNullException(nameof(mergePullRequestForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="mergePullRequestForm"></param>
        private void AfterMergePullDefaultImplementation(IMergePullApiResponse apiResponseLocalVar, string repo, int number, ApiMergePullRequest mergePullRequestForm)
        {
            bool suppressDefaultLog = false;
            AfterMergePull(ref suppressDefaultLog, apiResponseLocalVar, repo, number, mergePullRequestForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="mergePullRequestForm"></param>
        partial void AfterMergePull(ref bool suppressDefaultLog, IMergePullApiResponse apiResponseLocalVar, string repo, int number, ApiMergePullRequest mergePullRequestForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="mergePullRequestForm"></param>
        private void OnErrorMergePullDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, ApiMergePullRequest mergePullRequestForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorMergePull(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number, mergePullRequestForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="mergePullRequestForm"></param>
        partial void OnErrorMergePull(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, ApiMergePullRequest mergePullRequestForm);

        /// <summary>
        /// [openapi] 合并一个 Pull Request 访问令牌调用此接口需包含以下权限  repo-pr:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">Pull Request Number</param>
        /// <param name="mergePullRequestForm">Merge Pull Request Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMergePullApiResponse"/>&gt;</returns>
        public async Task<IMergePullApiResponse?> MergePullOrDefaultAsync(string repo, int number, ApiMergePullRequest mergePullRequestForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await MergePullAsync(repo, number, mergePullRequestForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// [openapi] 合并一个 Pull Request 访问令牌调用此接口需包含以下权限  repo-pr:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">Pull Request Number</param>
        /// <param name="mergePullRequestForm">Merge Pull Request Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMergePullApiResponse"/>&gt;</returns>
        public async Task<IMergePullApiResponse> MergePullAsync(string repo, int number, ApiMergePullRequest mergePullRequestForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateMergePull(repo, mergePullRequestForm);

                FormatMergePull(ref repo, ref number, mergePullRequestForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/pulls/{number}/merge"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/pulls/{number}/merge");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));

                    httpRequestMessageLocalVar.Content = (mergePullRequestForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(mergePullRequestForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<MergePullApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<MergePullApiResponse>();

                        MergePullApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/pulls/{number}/merge", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterMergePullDefaultImplementation(apiResponseLocalVar, repo, number, mergePullRequestForm);

                        Events.ExecuteOnMergePull(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorMergePullDefaultImplementation(e, "/{repo}/-/pulls/{number}/merge", uriBuilderLocalVar.Path, repo, number, mergePullRequestForm);
                Events.ExecuteOnErrorMergePull(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="MergePullApiResponse"/>
        /// </summary>
        public partial class MergePullApiResponse : CNBOpenApi.Client.ApiResponse, IMergePullApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<MergePullApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="MergePullApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public MergePullApiResponse(ILogger<MergePullApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.ApiMergePullResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.ApiMergePullResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.ApiMergePullResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPatchPull(ref string repo, ref int number, ApiPatchPullRequest updatePullRequestForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="updatePullRequestForm"></param>
        /// <returns></returns>
        private void ValidatePatchPull(string repo, ApiPatchPullRequest updatePullRequestForm)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (updatePullRequestForm == null)
                throw new ArgumentNullException(nameof(updatePullRequestForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="updatePullRequestForm"></param>
        private void AfterPatchPullDefaultImplementation(IPatchPullApiResponse apiResponseLocalVar, string repo, int number, ApiPatchPullRequest updatePullRequestForm)
        {
            bool suppressDefaultLog = false;
            AfterPatchPull(ref suppressDefaultLog, apiResponseLocalVar, repo, number, updatePullRequestForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="updatePullRequestForm"></param>
        partial void AfterPatchPull(ref bool suppressDefaultLog, IPatchPullApiResponse apiResponseLocalVar, string repo, int number, ApiPatchPullRequest updatePullRequestForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="updatePullRequestForm"></param>
        private void OnErrorPatchPullDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, ApiPatchPullRequest updatePullRequestForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPatchPull(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number, updatePullRequestForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="updatePullRequestForm"></param>
        partial void OnErrorPatchPull(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, ApiPatchPullRequest updatePullRequestForm);

        /// <summary>
        /// [openapi] 更新一个 Pull Request 访问令牌调用此接口需包含以下权限  repo-pr:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">Pull Request Number</param>
        /// <param name="updatePullRequestForm">Update Pull Request Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPatchPullApiResponse"/>&gt;</returns>
        public async Task<IPatchPullApiResponse?> PatchPullOrDefaultAsync(string repo, int number, ApiPatchPullRequest updatePullRequestForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PatchPullAsync(repo, number, updatePullRequestForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// [openapi] 更新一个 Pull Request 访问令牌调用此接口需包含以下权限  repo-pr:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">Pull Request Number</param>
        /// <param name="updatePullRequestForm">Update Pull Request Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPatchPullApiResponse"/>&gt;</returns>
        public async Task<IPatchPullApiResponse> PatchPullAsync(string repo, int number, ApiPatchPullRequest updatePullRequestForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePatchPull(repo, updatePullRequestForm);

                FormatPatchPull(ref repo, ref number, updatePullRequestForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/pulls/{number}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/pulls/{number}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));

                    httpRequestMessageLocalVar.Content = (updatePullRequestForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updatePullRequestForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PatchPullApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PatchPullApiResponse>();

                        PatchPullApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/pulls/{number}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPatchPullDefaultImplementation(apiResponseLocalVar, repo, number, updatePullRequestForm);

                        Events.ExecuteOnPatchPull(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPatchPullDefaultImplementation(e, "/{repo}/-/pulls/{number}", uriBuilderLocalVar.Path, repo, number, updatePullRequestForm);
                Events.ExecuteOnErrorPatchPull(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PatchPullApiResponse"/>
        /// </summary>
        public partial class PatchPullApiResponse : CNBOpenApi.Client.ApiResponse, IPatchPullApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PatchPullApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PatchPullApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PatchPullApiResponse(ILogger<PatchPullApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.ApiPull? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.ApiPull>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.ApiPull? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostPull(ref string repo, ApiPullCreationForm postPullForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="postPullForm"></param>
        /// <returns></returns>
        private void ValidatePostPull(string repo, ApiPullCreationForm postPullForm)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (postPullForm == null)
                throw new ArgumentNullException(nameof(postPullForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="postPullForm"></param>
        private void AfterPostPullDefaultImplementation(IPostPullApiResponse apiResponseLocalVar, string repo, ApiPullCreationForm postPullForm)
        {
            bool suppressDefaultLog = false;
            AfterPostPull(ref suppressDefaultLog, apiResponseLocalVar, repo, postPullForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="postPullForm"></param>
        partial void AfterPostPull(ref bool suppressDefaultLog, IPostPullApiResponse apiResponseLocalVar, string repo, ApiPullCreationForm postPullForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="postPullForm"></param>
        private void OnErrorPostPullDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, ApiPullCreationForm postPullForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostPull(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, postPullForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="postPullForm"></param>
        partial void OnErrorPostPull(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, ApiPullCreationForm postPullForm);

        /// <summary>
        /// [openapi] 新增一个 Pull 访问令牌调用此接口需包含以下权限  repo-pr:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="postPullForm">Post Pull Request Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPullApiResponse"/>&gt;</returns>
        public async Task<IPostPullApiResponse?> PostPullOrDefaultAsync(string repo, ApiPullCreationForm postPullForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostPullAsync(repo, postPullForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// [openapi] 新增一个 Pull 访问令牌调用此接口需包含以下权限  repo-pr:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="postPullForm">Post Pull Request Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPullApiResponse"/>&gt;</returns>
        public async Task<IPostPullApiResponse> PostPullAsync(string repo, ApiPullCreationForm postPullForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostPull(repo, postPullForm);

                FormatPostPull(ref repo, postPullForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/pulls"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/pulls");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    httpRequestMessageLocalVar.Content = (postPullForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postPullForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostPullApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostPullApiResponse>();

                        PostPullApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/pulls", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostPullDefaultImplementation(apiResponseLocalVar, repo, postPullForm);

                        Events.ExecuteOnPostPull(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostPullDefaultImplementation(e, "/{repo}/-/pulls", uriBuilderLocalVar.Path, repo, postPullForm);
                Events.ExecuteOnErrorPostPull(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostPullApiResponse"/>
        /// </summary>
        public partial class PostPullApiResponse : CNBOpenApi.Client.ApiResponse, IPostPullApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostPullApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostPullApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostPullApiResponse(ILogger<PostPullApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.ApiPull? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.ApiPull>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out CNBOpenApi.Model.ApiPull? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostPullComment(ref string repo, ref int number, ApiPullCommentCreationForm postPullCommentForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="postPullCommentForm"></param>
        /// <returns></returns>
        private void ValidatePostPullComment(string repo, ApiPullCommentCreationForm postPullCommentForm)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (postPullCommentForm == null)
                throw new ArgumentNullException(nameof(postPullCommentForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="postPullCommentForm"></param>
        private void AfterPostPullCommentDefaultImplementation(IPostPullCommentApiResponse apiResponseLocalVar, string repo, int number, ApiPullCommentCreationForm postPullCommentForm)
        {
            bool suppressDefaultLog = false;
            AfterPostPullComment(ref suppressDefaultLog, apiResponseLocalVar, repo, number, postPullCommentForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="postPullCommentForm"></param>
        partial void AfterPostPullComment(ref bool suppressDefaultLog, IPostPullCommentApiResponse apiResponseLocalVar, string repo, int number, ApiPullCommentCreationForm postPullCommentForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="postPullCommentForm"></param>
        private void OnErrorPostPullCommentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, ApiPullCommentCreationForm postPullCommentForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostPullComment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number, postPullCommentForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="postPullCommentForm"></param>
        partial void OnErrorPostPullComment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, ApiPullCommentCreationForm postPullCommentForm);

        /// <summary>
        /// [openapi] 新增一个 Pull Comment 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="postPullCommentForm">Post Pull Request Comment Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPullCommentApiResponse"/>&gt;</returns>
        public async Task<IPostPullCommentApiResponse?> PostPullCommentOrDefaultAsync(string repo, int number, ApiPullCommentCreationForm postPullCommentForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostPullCommentAsync(repo, number, postPullCommentForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// [openapi] 新增一个 Pull Comment 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="postPullCommentForm">Post Pull Request Comment Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPullCommentApiResponse"/>&gt;</returns>
        public async Task<IPostPullCommentApiResponse> PostPullCommentAsync(string repo, int number, ApiPullCommentCreationForm postPullCommentForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostPullComment(repo, postPullCommentForm);

                FormatPostPullComment(ref repo, ref number, postPullCommentForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/pulls/{number}/comments"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/pulls/{number}/comments");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));

                    httpRequestMessageLocalVar.Content = (postPullCommentForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postPullCommentForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostPullCommentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostPullCommentApiResponse>();

                        PostPullCommentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/pulls/{number}/comments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostPullCommentDefaultImplementation(apiResponseLocalVar, repo, number, postPullCommentForm);

                        Events.ExecuteOnPostPullComment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostPullCommentDefaultImplementation(e, "/{repo}/-/pulls/{number}/comments", uriBuilderLocalVar.Path, repo, number, postPullCommentForm);
                Events.ExecuteOnErrorPostPullComment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostPullCommentApiResponse"/>
        /// </summary>
        public partial class PostPullCommentApiResponse : CNBOpenApi.Client.ApiResponse, IPostPullCommentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostPullCommentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostPullCommentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostPullCommentApiResponse(ILogger<PostPullCommentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostPullLabels(ref string repo, ref int number, ApiPostPullLabelsForm postPullLabelsForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="postPullLabelsForm"></param>
        /// <returns></returns>
        private void ValidatePostPullLabels(string repo, ApiPostPullLabelsForm postPullLabelsForm)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (postPullLabelsForm == null)
                throw new ArgumentNullException(nameof(postPullLabelsForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="postPullLabelsForm"></param>
        private void AfterPostPullLabelsDefaultImplementation(IPostPullLabelsApiResponse apiResponseLocalVar, string repo, int number, ApiPostPullLabelsForm postPullLabelsForm)
        {
            bool suppressDefaultLog = false;
            AfterPostPullLabels(ref suppressDefaultLog, apiResponseLocalVar, repo, number, postPullLabelsForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="postPullLabelsForm"></param>
        partial void AfterPostPullLabels(ref bool suppressDefaultLog, IPostPullLabelsApiResponse apiResponseLocalVar, string repo, int number, ApiPostPullLabelsForm postPullLabelsForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="postPullLabelsForm"></param>
        private void OnErrorPostPullLabelsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, ApiPostPullLabelsForm postPullLabelsForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostPullLabels(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number, postPullLabelsForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="postPullLabelsForm"></param>
        partial void OnErrorPostPullLabels(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, ApiPostPullLabelsForm postPullLabelsForm);

        /// <summary>
        /// 新增 Pull 标签 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="postPullLabelsForm">Post Pull Labels Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPullLabelsApiResponse"/>&gt;</returns>
        public async Task<IPostPullLabelsApiResponse?> PostPullLabelsOrDefaultAsync(string repo, int number, ApiPostPullLabelsForm postPullLabelsForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostPullLabelsAsync(repo, number, postPullLabelsForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 新增 Pull 标签 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="postPullLabelsForm">Post Pull Labels Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPullLabelsApiResponse"/>&gt;</returns>
        public async Task<IPostPullLabelsApiResponse> PostPullLabelsAsync(string repo, int number, ApiPostPullLabelsForm postPullLabelsForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostPullLabels(repo, postPullLabelsForm);

                FormatPostPullLabels(ref repo, ref number, postPullLabelsForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/pulls/{number}/labels"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/pulls/{number}/labels");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));

                    httpRequestMessageLocalVar.Content = (postPullLabelsForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postPullLabelsForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostPullLabelsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostPullLabelsApiResponse>();

                        PostPullLabelsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/pulls/{number}/labels", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostPullLabelsDefaultImplementation(apiResponseLocalVar, repo, number, postPullLabelsForm);

                        Events.ExecuteOnPostPullLabels(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostPullLabelsDefaultImplementation(e, "/{repo}/-/pulls/{number}/labels", uriBuilderLocalVar.Path, repo, number, postPullLabelsForm);
                Events.ExecuteOnErrorPostPullLabels(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostPullLabelsApiResponse"/>
        /// </summary>
        public partial class PostPullLabelsApiResponse : CNBOpenApi.Client.ApiResponse, IPostPullLabelsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostPullLabelsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostPullLabelsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostPullLabelsApiResponse(ILogger<PostPullLabelsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.ApiLabel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.ApiLabel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.ApiLabel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostPullReview(ref string repo, ref int number, ApiPullReviewCreationForm postPullReviewForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="postPullReviewForm"></param>
        /// <returns></returns>
        private void ValidatePostPullReview(string repo, ApiPullReviewCreationForm postPullReviewForm)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (postPullReviewForm == null)
                throw new ArgumentNullException(nameof(postPullReviewForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="postPullReviewForm"></param>
        private void AfterPostPullReviewDefaultImplementation(IPostPullReviewApiResponse apiResponseLocalVar, string repo, int number, ApiPullReviewCreationForm postPullReviewForm)
        {
            bool suppressDefaultLog = false;
            AfterPostPullReview(ref suppressDefaultLog, apiResponseLocalVar, repo, number, postPullReviewForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="postPullReviewForm"></param>
        partial void AfterPostPullReview(ref bool suppressDefaultLog, IPostPullReviewApiResponse apiResponseLocalVar, string repo, int number, ApiPullReviewCreationForm postPullReviewForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="postPullReviewForm"></param>
        private void OnErrorPostPullReviewDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, ApiPullReviewCreationForm postPullReviewForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostPullReview(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number, postPullReviewForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="postPullReviewForm"></param>
        partial void OnErrorPostPullReview(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, ApiPullReviewCreationForm postPullReviewForm);

        /// <summary>
        /// 新增一次 pull request 评审 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="postPullReviewForm">Post Pull Review Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPullReviewApiResponse"/>&gt;</returns>
        public async Task<IPostPullReviewApiResponse?> PostPullReviewOrDefaultAsync(string repo, int number, ApiPullReviewCreationForm postPullReviewForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostPullReviewAsync(repo, number, postPullReviewForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 新增一次 pull request 评审 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="postPullReviewForm">Post Pull Review Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPullReviewApiResponse"/>&gt;</returns>
        public async Task<IPostPullReviewApiResponse> PostPullReviewAsync(string repo, int number, ApiPullReviewCreationForm postPullReviewForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostPullReview(repo, postPullReviewForm);

                FormatPostPullReview(ref repo, ref number, postPullReviewForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/pulls/{number}/reviews"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/pulls/{number}/reviews");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));

                    httpRequestMessageLocalVar.Content = (postPullReviewForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postPullReviewForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostPullReviewApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostPullReviewApiResponse>();

                        PostPullReviewApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/pulls/{number}/reviews", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostPullReviewDefaultImplementation(apiResponseLocalVar, repo, number, postPullReviewForm);

                        Events.ExecuteOnPostPullReview(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostPullReviewDefaultImplementation(e, "/{repo}/-/pulls/{number}/reviews", uriBuilderLocalVar.Path, repo, number, postPullReviewForm);
                Events.ExecuteOnErrorPostPullReview(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostPullReviewApiResponse"/>
        /// </summary>
        public partial class PostPullReviewApiResponse : CNBOpenApi.Client.ApiResponse, IPostPullReviewApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostPullReviewApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostPullReviewApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostPullReviewApiResponse(ILogger<PostPullReviewApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutPullLabels(ref string repo, ref int number, ApiPutPullLabelsForm putPullLabelsForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="putPullLabelsForm"></param>
        /// <returns></returns>
        private void ValidatePutPullLabels(string repo, ApiPutPullLabelsForm putPullLabelsForm)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (putPullLabelsForm == null)
                throw new ArgumentNullException(nameof(putPullLabelsForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="putPullLabelsForm"></param>
        private void AfterPutPullLabelsDefaultImplementation(IPutPullLabelsApiResponse apiResponseLocalVar, string repo, int number, ApiPutPullLabelsForm putPullLabelsForm)
        {
            bool suppressDefaultLog = false;
            AfterPutPullLabels(ref suppressDefaultLog, apiResponseLocalVar, repo, number, putPullLabelsForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="putPullLabelsForm"></param>
        partial void AfterPutPullLabels(ref bool suppressDefaultLog, IPutPullLabelsApiResponse apiResponseLocalVar, string repo, int number, ApiPutPullLabelsForm putPullLabelsForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="putPullLabelsForm"></param>
        private void OnErrorPutPullLabelsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, ApiPutPullLabelsForm putPullLabelsForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutPullLabels(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, number, putPullLabelsForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="number"></param>
        /// <param name="putPullLabelsForm"></param>
        partial void OnErrorPutPullLabels(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int number, ApiPutPullLabelsForm putPullLabelsForm);

        /// <summary>
        /// 设置 Pull 标签 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="putPullLabelsForm">Put Pull Labels Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPullLabelsApiResponse"/>&gt;</returns>
        public async Task<IPutPullLabelsApiResponse?> PutPullLabelsOrDefaultAsync(string repo, int number, ApiPutPullLabelsForm putPullLabelsForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutPullLabelsAsync(repo, number, putPullLabelsForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 设置 Pull 标签 访问令牌调用此接口需包含以下权限  repo-notes:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="number">number</param>
        /// <param name="putPullLabelsForm">Put Pull Labels Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPullLabelsApiResponse"/>&gt;</returns>
        public async Task<IPutPullLabelsApiResponse> PutPullLabelsAsync(string repo, int number, ApiPutPullLabelsForm putPullLabelsForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutPullLabels(repo, putPullLabelsForm);

                FormatPutPullLabels(ref repo, ref number, putPullLabelsForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/pulls/{number}/labels"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/pulls/{number}/labels");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnumber%7D", Uri.EscapeDataString(number.ToString()));

                    httpRequestMessageLocalVar.Content = (putPullLabelsForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(putPullLabelsForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutPullLabelsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutPullLabelsApiResponse>();

                        PutPullLabelsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/pulls/{number}/labels", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutPullLabelsDefaultImplementation(apiResponseLocalVar, repo, number, putPullLabelsForm);

                        Events.ExecuteOnPutPullLabels(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutPullLabelsDefaultImplementation(e, "/{repo}/-/pulls/{number}/labels", uriBuilderLocalVar.Path, repo, number, putPullLabelsForm);
                Events.ExecuteOnErrorPutPullLabels(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutPullLabelsApiResponse"/>
        /// </summary>
        public partial class PutPullLabelsApiResponse : CNBOpenApi.Client.ApiResponse, IPutPullLabelsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutPullLabelsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutPullLabelsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutPullLabelsApiResponse(ILogger<PutPullLabelsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.ApiLabel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.ApiLabel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.ApiLabel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
