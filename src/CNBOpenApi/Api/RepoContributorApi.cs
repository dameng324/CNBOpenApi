// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CNBOpenApi.Client;
using CNBOpenApi.Model;
using System.Diagnostics.CodeAnalysis;

namespace CNBOpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IRepoContributorApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        RepoContributorApiEvents Events { get; }

        /// <summary>
        /// 查询仓库贡献者前 100 名的详细趋势数据
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-code:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="limit">limit, 0~100 (optional, default to 14)</param>
        /// <param name="excludeExternalUsers">exclude_external_users, true|false (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRepoContributorTrendApiResponse"/>&gt;</returns>
        Task<IGetRepoContributorTrendApiResponse> GetRepoContributorTrendAsync(string repo, Option<int> limit = default, Option<bool> excludeExternalUsers = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询仓库贡献者前 100 名的详细趋势数据
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-code:r
        /// </remarks>
        /// <param name="repo">slug</param>
        /// <param name="limit">limit, 0~100 (optional, default to 14)</param>
        /// <param name="excludeExternalUsers">exclude_external_users, true|false (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRepoContributorTrendApiResponse"/>?&gt;</returns>
        Task<IGetRepoContributorTrendApiResponse?> GetRepoContributorTrendOrDefaultAsync(string repo, Option<int> limit = default, Option<bool> excludeExternalUsers = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetRepoContributorTrendApiResponse"/>
    /// </summary>
    public interface IGetRepoContributorTrendApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.WebRepoContribTrend?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class RepoContributorApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetRepoContributorTrend;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetRepoContributorTrend;

        internal void ExecuteOnGetRepoContributorTrend(RepoContributorApi.GetRepoContributorTrendApiResponse apiResponse)
        {
            OnGetRepoContributorTrend?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetRepoContributorTrend(Exception exception)
        {
            OnErrorGetRepoContributorTrend?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class RepoContributorApi : IRepoContributorApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<RepoContributorApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public RepoContributorApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="RepoContributorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RepoContributorApi(ILogger<RepoContributorApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, RepoContributorApiEvents repoContributorApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<RepoContributorApi>();
            HttpClient = httpClient;
            Events = repoContributorApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatGetRepoContributorTrend(ref string repo, ref Option<int> limit, ref Option<bool> excludeExternalUsers);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <returns></returns>
        private void ValidateGetRepoContributorTrend(string repo)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="limit"></param>
        /// <param name="excludeExternalUsers"></param>
        private void AfterGetRepoContributorTrendDefaultImplementation(IGetRepoContributorTrendApiResponse apiResponseLocalVar, string repo, Option<int> limit, Option<bool> excludeExternalUsers)
        {
            bool suppressDefaultLog = false;
            AfterGetRepoContributorTrend(ref suppressDefaultLog, apiResponseLocalVar, repo, limit, excludeExternalUsers);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="limit"></param>
        /// <param name="excludeExternalUsers"></param>
        partial void AfterGetRepoContributorTrend(ref bool suppressDefaultLog, IGetRepoContributorTrendApiResponse apiResponseLocalVar, string repo, Option<int> limit, Option<bool> excludeExternalUsers);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="limit"></param>
        /// <param name="excludeExternalUsers"></param>
        private void OnErrorGetRepoContributorTrendDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<int> limit, Option<bool> excludeExternalUsers)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetRepoContributorTrend(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, limit, excludeExternalUsers);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="limit"></param>
        /// <param name="excludeExternalUsers"></param>
        partial void OnErrorGetRepoContributorTrend(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<int> limit, Option<bool> excludeExternalUsers);

        /// <summary>
        /// 查询仓库贡献者前 100 名的详细趋势数据 访问令牌调用此接口需包含以下权限  repo-code:r
        /// </summary>
        /// <param name="repo">slug</param>
        /// <param name="limit">limit, 0~100 (optional, default to 14)</param>
        /// <param name="excludeExternalUsers">exclude_external_users, true|false (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRepoContributorTrendApiResponse"/>&gt;</returns>
        public async Task<IGetRepoContributorTrendApiResponse?> GetRepoContributorTrendOrDefaultAsync(string repo, Option<int> limit = default, Option<bool> excludeExternalUsers = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetRepoContributorTrendAsync(repo, limit, excludeExternalUsers, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 查询仓库贡献者前 100 名的详细趋势数据 访问令牌调用此接口需包含以下权限  repo-code:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="limit">limit, 0~100 (optional, default to 14)</param>
        /// <param name="excludeExternalUsers">exclude_external_users, true|false (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRepoContributorTrendApiResponse"/>&gt;</returns>
        public async Task<IGetRepoContributorTrendApiResponse> GetRepoContributorTrendAsync(string repo, Option<int> limit = default, Option<bool> excludeExternalUsers = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetRepoContributorTrend(repo);

                FormatGetRepoContributorTrend(ref repo, ref limit, ref excludeExternalUsers);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/contributor/trend"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/contributor/trend");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (excludeExternalUsers.IsSet)
                        parseQueryStringLocalVar["exclude_external_users"] = ClientUtils.ParameterToString(excludeExternalUsers.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetRepoContributorTrendApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetRepoContributorTrendApiResponse>();

                        GetRepoContributorTrendApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/contributor/trend", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetRepoContributorTrendDefaultImplementation(apiResponseLocalVar, repo, limit, excludeExternalUsers);

                        Events.ExecuteOnGetRepoContributorTrend(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetRepoContributorTrendDefaultImplementation(e, "/{repo}/-/contributor/trend", uriBuilderLocalVar.Path, repo, limit, excludeExternalUsers);
                Events.ExecuteOnErrorGetRepoContributorTrend(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetRepoContributorTrendApiResponse"/>
        /// </summary>
        public partial class GetRepoContributorTrendApiResponse : CNBOpenApi.Client.ApiResponse, IGetRepoContributorTrendApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetRepoContributorTrendApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetRepoContributorTrendApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetRepoContributorTrendApiResponse(ILogger<GetRepoContributorTrendApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.WebRepoContribTrend? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.WebRepoContribTrend>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.WebRepoContribTrend? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
