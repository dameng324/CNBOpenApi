// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CNBOpenApi.Client;
using System.Diagnostics.CodeAnalysis;

namespace CNBOpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IMissionsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        MissionsApiEvents Events { get; }

        /// <summary>
        /// 删除指定任务集
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  mission-delete:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mission">mission path</param>
        /// <param name="xCnbIdentityTicket">微信用户需要确认身份，第一次调用不传接口会调用失败并返回一个x-cnb-identity-ticket，第二次调用再传返回的值 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMissionApiResponse"/>&gt;</returns>
        Task<IDeleteMissionApiResponse> DeleteMissionAsync(string mission, Option<string> xCnbIdentityTicket = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除指定任务集
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  mission-delete:rw
        /// </remarks>
        /// <param name="mission">mission path</param>
        /// <param name="xCnbIdentityTicket">微信用户需要确认身份，第一次调用不传接口会调用失败并返回一个x-cnb-identity-ticket，第二次调用再传返回的值 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMissionApiResponse"/>?&gt;</returns>
        Task<IDeleteMissionApiResponse?> DeleteMissionOrDefaultAsync(string mission, Option<string> xCnbIdentityTicket = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteMissionApiResponse"/>
    /// </summary>
    public interface IDeleteMissionApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class MissionsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteMission;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteMission;

        internal void ExecuteOnDeleteMission(MissionsApi.DeleteMissionApiResponse apiResponse)
        {
            OnDeleteMission?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteMission(Exception exception)
        {
            OnErrorDeleteMission?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class MissionsApi : IMissionsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<MissionsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public MissionsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="MissionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MissionsApi(ILogger<MissionsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, MissionsApiEvents missionsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<MissionsApi>();
            HttpClient = httpClient;
            Events = missionsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatDeleteMission(ref string mission, ref Option<string> xCnbIdentityTicket);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="mission"></param>
        /// <param name="xCnbIdentityTicket"></param>
        /// <returns></returns>
        private void ValidateDeleteMission(string mission, Option<string> xCnbIdentityTicket)
        {
            if (mission == null)
                throw new ArgumentNullException(nameof(mission));

            if (xCnbIdentityTicket.IsSet && xCnbIdentityTicket.Value == null)
                throw new ArgumentNullException(nameof(xCnbIdentityTicket));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="mission"></param>
        /// <param name="xCnbIdentityTicket"></param>
        private void AfterDeleteMissionDefaultImplementation(IDeleteMissionApiResponse apiResponseLocalVar, string mission, Option<string> xCnbIdentityTicket)
        {
            bool suppressDefaultLog = false;
            AfterDeleteMission(ref suppressDefaultLog, apiResponseLocalVar, mission, xCnbIdentityTicket);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="mission"></param>
        /// <param name="xCnbIdentityTicket"></param>
        partial void AfterDeleteMission(ref bool suppressDefaultLog, IDeleteMissionApiResponse apiResponseLocalVar, string mission, Option<string> xCnbIdentityTicket);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="mission"></param>
        /// <param name="xCnbIdentityTicket"></param>
        private void OnErrorDeleteMissionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string mission, Option<string> xCnbIdentityTicket)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteMission(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, mission, xCnbIdentityTicket);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="mission"></param>
        /// <param name="xCnbIdentityTicket"></param>
        partial void OnErrorDeleteMission(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string mission, Option<string> xCnbIdentityTicket);

        /// <summary>
        /// 删除指定任务集 访问令牌调用此接口需包含以下权限  mission-delete:rw
        /// </summary>
        /// <param name="mission">mission path</param>
        /// <param name="xCnbIdentityTicket">微信用户需要确认身份，第一次调用不传接口会调用失败并返回一个x-cnb-identity-ticket，第二次调用再传返回的值 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMissionApiResponse"/>&gt;</returns>
        public async Task<IDeleteMissionApiResponse?> DeleteMissionOrDefaultAsync(string mission, Option<string> xCnbIdentityTicket = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteMissionAsync(mission, xCnbIdentityTicket, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 删除指定任务集 访问令牌调用此接口需包含以下权限  mission-delete:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mission">mission path</param>
        /// <param name="xCnbIdentityTicket">微信用户需要确认身份，第一次调用不传接口会调用失败并返回一个x-cnb-identity-ticket，第二次调用再传返回的值 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMissionApiResponse"/>&gt;</returns>
        public async Task<IDeleteMissionApiResponse> DeleteMissionAsync(string mission, Option<string> xCnbIdentityTicket = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteMission(mission, xCnbIdentityTicket);

                FormatDeleteMission(ref mission, ref xCnbIdentityTicket);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{mission}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{mission}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bmission%7D", Uri.EscapeDataString(mission.ToString()));

                    if (xCnbIdentityTicket.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("x-cnb-identity-ticket", ClientUtils.ParameterToString(xCnbIdentityTicket.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteMissionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteMissionApiResponse>();

                        DeleteMissionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{mission}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteMissionDefaultImplementation(apiResponseLocalVar, mission, xCnbIdentityTicket);

                        Events.ExecuteOnDeleteMission(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteMissionDefaultImplementation(e, "/{mission}", uriBuilderLocalVar.Path, mission, xCnbIdentityTicket);
                Events.ExecuteOnErrorDeleteMission(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteMissionApiResponse"/>
        /// </summary>
        public partial class DeleteMissionApiResponse : CNBOpenApi.Client.ApiResponse, IDeleteMissionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteMissionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteMissionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteMissionApiResponse(ILogger<DeleteMissionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
