// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CNBOpenApi.Client;
using CNBOpenApi.Model;
using System.Diagnostics.CodeAnalysis;

namespace CNBOpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IBuildApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        BuildApiEvents Events { get; }

        /// <summary>
        /// 查询流水线构建列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-cnb-trigger:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">仓库路径</param>
        /// <param name="createTime">开始时间，格式：YYYY-MM-DD，例如：2024-12-01 (optional)</param>
        /// <param name="endTime">结束时间，格式：YYYY-MM-DD，例如：2024-12-01 (optional)</param>
        /// <param name="varEvent">事件名，例如：push (optional)</param>
        /// <param name="page">页数，从 1 开始 (optional)</param>
        /// <param name="pagesize">每页数量，最大 100 条，默认 20 条 (optional)</param>
        /// <param name="sha">commit id，例如：2221d4535ec0c921bcd0858627c5025a871dd2b5 (optional)</param>
        /// <param name="sn">构建号，例如：cnb-1qa-1i3f5ecau (optional)</param>
        /// <param name="sourceRef">源分支名，例如：dev (optional)</param>
        /// <param name="status">构建状态，pending: 构建中、success：成功、error: 失败、cancel: 取消 (optional)</param>
        /// <param name="targetRef">目标分支名，例如：main (optional)</param>
        /// <param name="userId">用户 id (optional)</param>
        /// <param name="userName">用户名 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBuildLogsApiResponse"/>&gt;</returns>
        Task<IGetBuildLogsApiResponse> GetBuildLogsAsync(string repo, Option<string> createTime = default, Option<string> endTime = default, Option<string> varEvent = default, Option<int> page = default, Option<int> pagesize = default, Option<string> sha = default, Option<string> sn = default, Option<string> sourceRef = default, Option<string> status = default, Option<string> targetRef = default, Option<string> userId = default, Option<string> userName = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询流水线构建列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-cnb-trigger:r
        /// </remarks>
        /// <param name="repo">仓库路径</param>
        /// <param name="createTime">开始时间，格式：YYYY-MM-DD，例如：2024-12-01 (optional)</param>
        /// <param name="endTime">结束时间，格式：YYYY-MM-DD，例如：2024-12-01 (optional)</param>
        /// <param name="varEvent">事件名，例如：push (optional)</param>
        /// <param name="page">页数，从 1 开始 (optional)</param>
        /// <param name="pagesize">每页数量，最大 100 条，默认 20 条 (optional)</param>
        /// <param name="sha">commit id，例如：2221d4535ec0c921bcd0858627c5025a871dd2b5 (optional)</param>
        /// <param name="sn">构建号，例如：cnb-1qa-1i3f5ecau (optional)</param>
        /// <param name="sourceRef">源分支名，例如：dev (optional)</param>
        /// <param name="status">构建状态，pending: 构建中、success：成功、error: 失败、cancel: 取消 (optional)</param>
        /// <param name="targetRef">目标分支名，例如：main (optional)</param>
        /// <param name="userId">用户 id (optional)</param>
        /// <param name="userName">用户名 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBuildLogsApiResponse"/>?&gt;</returns>
        Task<IGetBuildLogsApiResponse?> GetBuildLogsOrDefaultAsync(string repo, Option<string> createTime = default, Option<string> endTime = default, Option<string> varEvent = default, Option<int> page = default, Option<int> pagesize = default, Option<string> sha = default, Option<string> sn = default, Option<string> sourceRef = default, Option<string> status = default, Option<string> targetRef = default, Option<string> userId = default, Option<string> userName = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询流水线构建状态
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-cnb-trigger:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">仓库路径</param>
        /// <param name="sn">构建号</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBuildStatusApiResponse"/>&gt;</returns>
        Task<IGetBuildStatusApiResponse> GetBuildStatusAsync(string repo, string sn, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询流水线构建状态
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-cnb-trigger:r
        /// </remarks>
        /// <param name="repo">仓库路径</param>
        /// <param name="sn">构建号</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBuildStatusApiResponse"/>?&gt;</returns>
        Task<IGetBuildStatusApiResponse?> GetBuildStatusOrDefaultAsync(string repo, string sn, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 开始一个构建
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-cnb-trigger:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="request">构建参数</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStartBuildApiResponse"/>&gt;</returns>
        Task<IStartBuildApiResponse> StartBuildAsync(string repo, DtoStartBuildReq request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 开始一个构建
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-cnb-trigger:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="request">构建参数</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStartBuildApiResponse"/>?&gt;</returns>
        Task<IStartBuildApiResponse?> StartBuildOrDefaultAsync(string repo, DtoStartBuildReq request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 停止一个构建
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-cnb-trigger:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="sn">构建号</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStopBuildApiResponse"/>&gt;</returns>
        Task<IStopBuildApiResponse> StopBuildAsync(string repo, string sn, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 停止一个构建
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-cnb-trigger:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="sn">构建号</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStopBuildApiResponse"/>?&gt;</returns>
        Task<IStopBuildApiResponse?> StopBuildOrDefaultAsync(string repo, string sn, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetBuildLogsApiResponse"/>
    /// </summary>
    public interface IGetBuildLogsApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.DtoBuildLogsResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetBuildStatusApiResponse"/>
    /// </summary>
    public interface IGetBuildStatusApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.DtoBuildStatusResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IStartBuildApiResponse"/>
    /// </summary>
    public interface IStartBuildApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoBuildResult>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IStopBuildApiResponse"/>
    /// </summary>
    public interface IStopBuildApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoBuildResult>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class BuildApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetBuildLogs;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetBuildLogs;

        internal void ExecuteOnGetBuildLogs(BuildApi.GetBuildLogsApiResponse apiResponse)
        {
            OnGetBuildLogs?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetBuildLogs(Exception exception)
        {
            OnErrorGetBuildLogs?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetBuildStatus;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetBuildStatus;

        internal void ExecuteOnGetBuildStatus(BuildApi.GetBuildStatusApiResponse apiResponse)
        {
            OnGetBuildStatus?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetBuildStatus(Exception exception)
        {
            OnErrorGetBuildStatus?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnStartBuild;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorStartBuild;

        internal void ExecuteOnStartBuild(BuildApi.StartBuildApiResponse apiResponse)
        {
            OnStartBuild?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorStartBuild(Exception exception)
        {
            OnErrorStartBuild?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnStopBuild;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorStopBuild;

        internal void ExecuteOnStopBuild(BuildApi.StopBuildApiResponse apiResponse)
        {
            OnStopBuild?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorStopBuild(Exception exception)
        {
            OnErrorStopBuild?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class BuildApi : IBuildApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<BuildApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public BuildApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BuildApi(ILogger<BuildApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, BuildApiEvents buildApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<BuildApi>();
            HttpClient = httpClient;
            Events = buildApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatGetBuildLogs(ref string repo, ref Option<string> createTime, ref Option<string> endTime, ref Option<string> varEvent, ref Option<int> page, ref Option<int> pagesize, ref Option<string> sha, ref Option<string> sn, ref Option<string> sourceRef, ref Option<string> status, ref Option<string> targetRef, ref Option<string> userId, ref Option<string> userName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="createTime"></param>
        /// <param name="endTime"></param>
        /// <param name="varEvent"></param>
        /// <param name="sha"></param>
        /// <param name="sn"></param>
        /// <param name="sourceRef"></param>
        /// <param name="status"></param>
        /// <param name="targetRef"></param>
        /// <param name="userId"></param>
        /// <param name="userName"></param>
        /// <returns></returns>
        private void ValidateGetBuildLogs(string repo, Option<string> createTime, Option<string> endTime, Option<string> varEvent, Option<string> sha, Option<string> sn, Option<string> sourceRef, Option<string> status, Option<string> targetRef, Option<string> userId, Option<string> userName)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (createTime.IsSet && createTime.Value == null)
                throw new ArgumentNullException(nameof(createTime));

            if (endTime.IsSet && endTime.Value == null)
                throw new ArgumentNullException(nameof(endTime));

            if (varEvent.IsSet && varEvent.Value == null)
                throw new ArgumentNullException(nameof(varEvent));

            if (sha.IsSet && sha.Value == null)
                throw new ArgumentNullException(nameof(sha));

            if (sn.IsSet && sn.Value == null)
                throw new ArgumentNullException(nameof(sn));

            if (sourceRef.IsSet && sourceRef.Value == null)
                throw new ArgumentNullException(nameof(sourceRef));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status));

            if (targetRef.IsSet && targetRef.Value == null)
                throw new ArgumentNullException(nameof(targetRef));

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId));

            if (userName.IsSet && userName.Value == null)
                throw new ArgumentNullException(nameof(userName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="createTime"></param>
        /// <param name="endTime"></param>
        /// <param name="varEvent"></param>
        /// <param name="page"></param>
        /// <param name="pagesize"></param>
        /// <param name="sha"></param>
        /// <param name="sn"></param>
        /// <param name="sourceRef"></param>
        /// <param name="status"></param>
        /// <param name="targetRef"></param>
        /// <param name="userId"></param>
        /// <param name="userName"></param>
        private void AfterGetBuildLogsDefaultImplementation(IGetBuildLogsApiResponse apiResponseLocalVar, string repo, Option<string> createTime, Option<string> endTime, Option<string> varEvent, Option<int> page, Option<int> pagesize, Option<string> sha, Option<string> sn, Option<string> sourceRef, Option<string> status, Option<string> targetRef, Option<string> userId, Option<string> userName)
        {
            bool suppressDefaultLog = false;
            AfterGetBuildLogs(ref suppressDefaultLog, apiResponseLocalVar, repo, createTime, endTime, varEvent, page, pagesize, sha, sn, sourceRef, status, targetRef, userId, userName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="createTime"></param>
        /// <param name="endTime"></param>
        /// <param name="varEvent"></param>
        /// <param name="page"></param>
        /// <param name="pagesize"></param>
        /// <param name="sha"></param>
        /// <param name="sn"></param>
        /// <param name="sourceRef"></param>
        /// <param name="status"></param>
        /// <param name="targetRef"></param>
        /// <param name="userId"></param>
        /// <param name="userName"></param>
        partial void AfterGetBuildLogs(ref bool suppressDefaultLog, IGetBuildLogsApiResponse apiResponseLocalVar, string repo, Option<string> createTime, Option<string> endTime, Option<string> varEvent, Option<int> page, Option<int> pagesize, Option<string> sha, Option<string> sn, Option<string> sourceRef, Option<string> status, Option<string> targetRef, Option<string> userId, Option<string> userName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="createTime"></param>
        /// <param name="endTime"></param>
        /// <param name="varEvent"></param>
        /// <param name="page"></param>
        /// <param name="pagesize"></param>
        /// <param name="sha"></param>
        /// <param name="sn"></param>
        /// <param name="sourceRef"></param>
        /// <param name="status"></param>
        /// <param name="targetRef"></param>
        /// <param name="userId"></param>
        /// <param name="userName"></param>
        private void OnErrorGetBuildLogsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<string> createTime, Option<string> endTime, Option<string> varEvent, Option<int> page, Option<int> pagesize, Option<string> sha, Option<string> sn, Option<string> sourceRef, Option<string> status, Option<string> targetRef, Option<string> userId, Option<string> userName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetBuildLogs(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, createTime, endTime, varEvent, page, pagesize, sha, sn, sourceRef, status, targetRef, userId, userName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="createTime"></param>
        /// <param name="endTime"></param>
        /// <param name="varEvent"></param>
        /// <param name="page"></param>
        /// <param name="pagesize"></param>
        /// <param name="sha"></param>
        /// <param name="sn"></param>
        /// <param name="sourceRef"></param>
        /// <param name="status"></param>
        /// <param name="targetRef"></param>
        /// <param name="userId"></param>
        /// <param name="userName"></param>
        partial void OnErrorGetBuildLogs(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<string> createTime, Option<string> endTime, Option<string> varEvent, Option<int> page, Option<int> pagesize, Option<string> sha, Option<string> sn, Option<string> sourceRef, Option<string> status, Option<string> targetRef, Option<string> userId, Option<string> userName);

        /// <summary>
        /// 查询流水线构建列表 访问令牌调用此接口需包含以下权限  repo-cnb-trigger:r
        /// </summary>
        /// <param name="repo">仓库路径</param>
        /// <param name="createTime">开始时间，格式：YYYY-MM-DD，例如：2024-12-01 (optional)</param>
        /// <param name="endTime">结束时间，格式：YYYY-MM-DD，例如：2024-12-01 (optional)</param>
        /// <param name="varEvent">事件名，例如：push (optional)</param>
        /// <param name="page">页数，从 1 开始 (optional)</param>
        /// <param name="pagesize">每页数量，最大 100 条，默认 20 条 (optional)</param>
        /// <param name="sha">commit id，例如：2221d4535ec0c921bcd0858627c5025a871dd2b5 (optional)</param>
        /// <param name="sn">构建号，例如：cnb-1qa-1i3f5ecau (optional)</param>
        /// <param name="sourceRef">源分支名，例如：dev (optional)</param>
        /// <param name="status">构建状态，pending: 构建中、success：成功、error: 失败、cancel: 取消 (optional)</param>
        /// <param name="targetRef">目标分支名，例如：main (optional)</param>
        /// <param name="userId">用户 id (optional)</param>
        /// <param name="userName">用户名 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBuildLogsApiResponse"/>&gt;</returns>
        public async Task<IGetBuildLogsApiResponse?> GetBuildLogsOrDefaultAsync(string repo, Option<string> createTime = default, Option<string> endTime = default, Option<string> varEvent = default, Option<int> page = default, Option<int> pagesize = default, Option<string> sha = default, Option<string> sn = default, Option<string> sourceRef = default, Option<string> status = default, Option<string> targetRef = default, Option<string> userId = default, Option<string> userName = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetBuildLogsAsync(repo, createTime, endTime, varEvent, page, pagesize, sha, sn, sourceRef, status, targetRef, userId, userName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 查询流水线构建列表 访问令牌调用此接口需包含以下权限  repo-cnb-trigger:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">仓库路径</param>
        /// <param name="createTime">开始时间，格式：YYYY-MM-DD，例如：2024-12-01 (optional)</param>
        /// <param name="endTime">结束时间，格式：YYYY-MM-DD，例如：2024-12-01 (optional)</param>
        /// <param name="varEvent">事件名，例如：push (optional)</param>
        /// <param name="page">页数，从 1 开始 (optional)</param>
        /// <param name="pagesize">每页数量，最大 100 条，默认 20 条 (optional)</param>
        /// <param name="sha">commit id，例如：2221d4535ec0c921bcd0858627c5025a871dd2b5 (optional)</param>
        /// <param name="sn">构建号，例如：cnb-1qa-1i3f5ecau (optional)</param>
        /// <param name="sourceRef">源分支名，例如：dev (optional)</param>
        /// <param name="status">构建状态，pending: 构建中、success：成功、error: 失败、cancel: 取消 (optional)</param>
        /// <param name="targetRef">目标分支名，例如：main (optional)</param>
        /// <param name="userId">用户 id (optional)</param>
        /// <param name="userName">用户名 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBuildLogsApiResponse"/>&gt;</returns>
        public async Task<IGetBuildLogsApiResponse> GetBuildLogsAsync(string repo, Option<string> createTime = default, Option<string> endTime = default, Option<string> varEvent = default, Option<int> page = default, Option<int> pagesize = default, Option<string> sha = default, Option<string> sn = default, Option<string> sourceRef = default, Option<string> status = default, Option<string> targetRef = default, Option<string> userId = default, Option<string> userName = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetBuildLogs(repo, createTime, endTime, varEvent, sha, sn, sourceRef, status, targetRef, userId, userName);

                FormatGetBuildLogs(ref repo, ref createTime, ref endTime, ref varEvent, ref page, ref pagesize, ref sha, ref sn, ref sourceRef, ref status, ref targetRef, ref userId, ref userName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/build/logs"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/build/logs");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (createTime.IsSet)
                        parseQueryStringLocalVar["createTime"] = ClientUtils.ParameterToString(createTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["endTime"] = ClientUtils.ParameterToString(endTime.Value);

                    if (varEvent.IsSet)
                        parseQueryStringLocalVar["event"] = ClientUtils.ParameterToString(varEvent.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pagesize.IsSet)
                        parseQueryStringLocalVar["pagesize"] = ClientUtils.ParameterToString(pagesize.Value);

                    if (sha.IsSet)
                        parseQueryStringLocalVar["sha"] = ClientUtils.ParameterToString(sha.Value);

                    if (sn.IsSet)
                        parseQueryStringLocalVar["sn"] = ClientUtils.ParameterToString(sn.Value);

                    if (sourceRef.IsSet)
                        parseQueryStringLocalVar["sourceRef"] = ClientUtils.ParameterToString(sourceRef.Value);

                    if (status.IsSet)
                        parseQueryStringLocalVar["status"] = ClientUtils.ParameterToString(status.Value);

                    if (targetRef.IsSet)
                        parseQueryStringLocalVar["targetRef"] = ClientUtils.ParameterToString(targetRef.Value);

                    if (userId.IsSet)
                        parseQueryStringLocalVar["userId"] = ClientUtils.ParameterToString(userId.Value);

                    if (userName.IsSet)
                        parseQueryStringLocalVar["userName"] = ClientUtils.ParameterToString(userName.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetBuildLogsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetBuildLogsApiResponse>();

                        GetBuildLogsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/build/logs", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetBuildLogsDefaultImplementation(apiResponseLocalVar, repo, createTime, endTime, varEvent, page, pagesize, sha, sn, sourceRef, status, targetRef, userId, userName);

                        Events.ExecuteOnGetBuildLogs(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetBuildLogsDefaultImplementation(e, "/{repo}/-/build/logs", uriBuilderLocalVar.Path, repo, createTime, endTime, varEvent, page, pagesize, sha, sn, sourceRef, status, targetRef, userId, userName);
                Events.ExecuteOnErrorGetBuildLogs(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetBuildLogsApiResponse"/>
        /// </summary>
        public partial class GetBuildLogsApiResponse : CNBOpenApi.Client.ApiResponse, IGetBuildLogsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetBuildLogsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetBuildLogsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetBuildLogsApiResponse(ILogger<GetBuildLogsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DtoBuildLogsResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DtoBuildLogsResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.DtoBuildLogsResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetBuildStatus(ref string repo, ref string sn);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="sn"></param>
        /// <returns></returns>
        private void ValidateGetBuildStatus(string repo, string sn)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (sn == null)
                throw new ArgumentNullException(nameof(sn));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="sn"></param>
        private void AfterGetBuildStatusDefaultImplementation(IGetBuildStatusApiResponse apiResponseLocalVar, string repo, string sn)
        {
            bool suppressDefaultLog = false;
            AfterGetBuildStatus(ref suppressDefaultLog, apiResponseLocalVar, repo, sn);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="sn"></param>
        partial void AfterGetBuildStatus(ref bool suppressDefaultLog, IGetBuildStatusApiResponse apiResponseLocalVar, string repo, string sn);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="sn"></param>
        private void OnErrorGetBuildStatusDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string sn)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetBuildStatus(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, sn);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="sn"></param>
        partial void OnErrorGetBuildStatus(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string sn);

        /// <summary>
        /// 查询流水线构建状态 访问令牌调用此接口需包含以下权限  repo-cnb-trigger:r
        /// </summary>
        /// <param name="repo">仓库路径</param>
        /// <param name="sn">构建号</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBuildStatusApiResponse"/>&gt;</returns>
        public async Task<IGetBuildStatusApiResponse?> GetBuildStatusOrDefaultAsync(string repo, string sn, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetBuildStatusAsync(repo, sn, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 查询流水线构建状态 访问令牌调用此接口需包含以下权限  repo-cnb-trigger:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">仓库路径</param>
        /// <param name="sn">构建号</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBuildStatusApiResponse"/>&gt;</returns>
        public async Task<IGetBuildStatusApiResponse> GetBuildStatusAsync(string repo, string sn, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetBuildStatus(repo, sn);

                FormatGetBuildStatus(ref repo, ref sn);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/build/status/{sn}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/build/status/{sn}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsn%7D", Uri.EscapeDataString(sn.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetBuildStatusApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetBuildStatusApiResponse>();

                        GetBuildStatusApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/build/status/{sn}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetBuildStatusDefaultImplementation(apiResponseLocalVar, repo, sn);

                        Events.ExecuteOnGetBuildStatus(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetBuildStatusDefaultImplementation(e, "/{repo}/-/build/status/{sn}", uriBuilderLocalVar.Path, repo, sn);
                Events.ExecuteOnErrorGetBuildStatus(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetBuildStatusApiResponse"/>
        /// </summary>
        public partial class GetBuildStatusApiResponse : CNBOpenApi.Client.ApiResponse, IGetBuildStatusApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetBuildStatusApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetBuildStatusApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetBuildStatusApiResponse(ILogger<GetBuildStatusApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DtoBuildStatusResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DtoBuildStatusResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.DtoBuildStatusResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatStartBuild(ref string repo, DtoStartBuildReq request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateStartBuild(string repo, DtoStartBuildReq request)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="request"></param>
        private void AfterStartBuildDefaultImplementation(IStartBuildApiResponse apiResponseLocalVar, string repo, DtoStartBuildReq request)
        {
            bool suppressDefaultLog = false;
            AfterStartBuild(ref suppressDefaultLog, apiResponseLocalVar, repo, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="request"></param>
        partial void AfterStartBuild(ref bool suppressDefaultLog, IStartBuildApiResponse apiResponseLocalVar, string repo, DtoStartBuildReq request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="request"></param>
        private void OnErrorStartBuildDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, DtoStartBuildReq request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorStartBuild(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="request"></param>
        partial void OnErrorStartBuild(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, DtoStartBuildReq request);

        /// <summary>
        /// 开始一个构建 访问令牌调用此接口需包含以下权限  repo-cnb-trigger:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="request">构建参数</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStartBuildApiResponse"/>&gt;</returns>
        public async Task<IStartBuildApiResponse?> StartBuildOrDefaultAsync(string repo, DtoStartBuildReq request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StartBuildAsync(repo, request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 开始一个构建 访问令牌调用此接口需包含以下权限  repo-cnb-trigger:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="request">构建参数</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStartBuildApiResponse"/>&gt;</returns>
        public async Task<IStartBuildApiResponse> StartBuildAsync(string repo, DtoStartBuildReq request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateStartBuild(repo, request);

                FormatStartBuild(ref repo, request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/build/start"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/build/start");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<StartBuildApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StartBuildApiResponse>();

                        StartBuildApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/build/start", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterStartBuildDefaultImplementation(apiResponseLocalVar, repo, request);

                        Events.ExecuteOnStartBuild(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStartBuildDefaultImplementation(e, "/{repo}/-/build/start", uriBuilderLocalVar.Path, repo, request);
                Events.ExecuteOnErrorStartBuild(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="StartBuildApiResponse"/>
        /// </summary>
        public partial class StartBuildApiResponse : CNBOpenApi.Client.ApiResponse, IStartBuildApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StartBuildApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="StartBuildApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StartBuildApiResponse(ILogger<StartBuildApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoBuildResult>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoBuildResult>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoBuildResult>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatStopBuild(ref string repo, ref string sn);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="sn"></param>
        /// <returns></returns>
        private void ValidateStopBuild(string repo, string sn)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (sn == null)
                throw new ArgumentNullException(nameof(sn));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="sn"></param>
        private void AfterStopBuildDefaultImplementation(IStopBuildApiResponse apiResponseLocalVar, string repo, string sn)
        {
            bool suppressDefaultLog = false;
            AfterStopBuild(ref suppressDefaultLog, apiResponseLocalVar, repo, sn);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="sn"></param>
        partial void AfterStopBuild(ref bool suppressDefaultLog, IStopBuildApiResponse apiResponseLocalVar, string repo, string sn);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="sn"></param>
        private void OnErrorStopBuildDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string sn)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorStopBuild(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, sn);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="sn"></param>
        partial void OnErrorStopBuild(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string sn);

        /// <summary>
        /// 停止一个构建 访问令牌调用此接口需包含以下权限  repo-cnb-trigger:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="sn">构建号</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStopBuildApiResponse"/>&gt;</returns>
        public async Task<IStopBuildApiResponse?> StopBuildOrDefaultAsync(string repo, string sn, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StopBuildAsync(repo, sn, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 停止一个构建 访问令牌调用此接口需包含以下权限  repo-cnb-trigger:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="sn">构建号</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStopBuildApiResponse"/>&gt;</returns>
        public async Task<IStopBuildApiResponse> StopBuildAsync(string repo, string sn, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateStopBuild(repo, sn);

                FormatStopBuild(ref repo, ref sn);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/build/stop/{sn}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/build/stop/{sn}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsn%7D", Uri.EscapeDataString(sn.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<StopBuildApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StopBuildApiResponse>();

                        StopBuildApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/build/stop/{sn}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterStopBuildDefaultImplementation(apiResponseLocalVar, repo, sn);

                        Events.ExecuteOnStopBuild(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStopBuildDefaultImplementation(e, "/{repo}/-/build/stop/{sn}", uriBuilderLocalVar.Path, repo, sn);
                Events.ExecuteOnErrorStopBuild(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="StopBuildApiResponse"/>
        /// </summary>
        public partial class StopBuildApiResponse : CNBOpenApi.Client.ApiResponse, IStopBuildApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StopBuildApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="StopBuildApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StopBuildApiResponse(ILogger<StopBuildApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoBuildResult>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoBuildResult>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoBuildResult>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
