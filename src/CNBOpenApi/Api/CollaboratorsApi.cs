// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CNBOpenApi.Client;
using CNBOpenApi.Model;
using System.Diagnostics.CodeAnalysis;

namespace CNBOpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ICollaboratorsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        CollaboratorsApiEvents Events { get; }

        /// <summary>
        /// 添加成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMembersOfGroupApiResponse"/>&gt;</returns>
        Task<IAddMembersOfGroupApiResponse> AddMembersOfGroupAsync(string group, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 添加成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </remarks>
        /// <param name="group">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMembersOfGroupApiResponse"/>?&gt;</returns>
        Task<IAddMembersOfGroupApiResponse?> AddMembersOfGroupOrDefaultAsync(string group, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 添加成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  mission-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mission">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMembersOfMissionApiResponse"/>&gt;</returns>
        Task<IAddMembersOfMissionApiResponse> AddMembersOfMissionAsync(string mission, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 添加成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  mission-manage:rw
        /// </remarks>
        /// <param name="mission">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMembersOfMissionApiResponse"/>?&gt;</returns>
        Task<IAddMembersOfMissionApiResponse?> AddMembersOfMissionOrDefaultAsync(string mission, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 添加成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registry">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMembersOfRegistryApiResponse"/>&gt;</returns>
        Task<IAddMembersOfRegistryApiResponse> AddMembersOfRegistryAsync(string registry, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 添加成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  registry-manage:rw
        /// </remarks>
        /// <param name="registry">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMembersOfRegistryApiResponse"/>?&gt;</returns>
        Task<IAddMembersOfRegistryApiResponse?> AddMembersOfRegistryOrDefaultAsync(string registry, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 添加成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMembersOfRepoApiResponse"/>&gt;</returns>
        Task<IAddMembersOfRepoApiResponse> AddMembersOfRepoAsync(string repo, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 添加成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMembersOfRepoApiResponse"/>?&gt;</returns>
        Task<IAddMembersOfRepoApiResponse?> AddMembersOfRepoOrDefaultAsync(string repo, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除指定组织或仓库的直接成员, 包含两种场景: 1. 作为直接成员的用户自己退出 2. 由管理者移除指定的直接成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="username">username</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMembersOfGroupApiResponse"/>&gt;</returns>
        Task<IDeleteMembersOfGroupApiResponse> DeleteMembersOfGroupAsync(string group, string username, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除指定组织或仓库的直接成员, 包含两种场景: 1. 作为直接成员的用户自己退出 2. 由管理者移除指定的直接成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </remarks>
        /// <param name="group">slug</param>
        /// <param name="username">username</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMembersOfGroupApiResponse"/>?&gt;</returns>
        Task<IDeleteMembersOfGroupApiResponse?> DeleteMembersOfGroupOrDefaultAsync(string group, string username, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除指定组织或仓库的直接成员, 包含两种场景: 1. 作为直接成员的用户自己退出 2. 由管理者移除指定的直接成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMembersOfRepoApiResponse"/>&gt;</returns>
        Task<IDeleteMembersOfRepoApiResponse> DeleteMembersOfRepoAsync(string repo, string username, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除指定组织或仓库的直接成员, 包含两种场景: 1. 作为直接成员的用户自己退出 2. 由管理者移除指定的直接成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMembersOfRepoApiResponse"/>?&gt;</returns>
        Task<IDeleteMembersOfRepoApiResponse?> DeleteMembersOfRepoOrDefaultAsync(string repo, string username, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除指定仓库的外部贡献者, 包含两种场景: 1. 作为外部贡献者的用户自己退出仓库 2. 由仓库管理者移除指定的外部贡献者
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOutsideCollaboratorsApiResponse"/>&gt;</returns>
        Task<IDeleteOutsideCollaboratorsApiResponse> DeleteOutsideCollaboratorsAsync(string repo, string username, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除指定仓库的外部贡献者, 包含两种场景: 1. 作为外部贡献者的用户自己退出仓库 2. 由仓库管理者移除指定的外部贡献者
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOutsideCollaboratorsApiResponse"/>?&gt;</returns>
        Task<IDeleteOutsideCollaboratorsApiResponse?> DeleteOutsideCollaboratorsOrDefaultAsync(string repo, string username, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定仓库内的有效成员列表，包含继承成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="names">精准匹配用户名,多个用户名用逗号间隔 (optional)</param>
        /// <param name="orderBy">排序类型，默认created_at (optional)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAllMembersApiResponse"/>&gt;</returns>
        Task<IListAllMembersApiResponse> ListAllMembersAsync(string repo, Option<int> page = default, Option<int> pageSize = default, Option<string> role = default, Option<string> search = default, Option<string> names = default, Option<string> orderBy = default, Option<bool> desc = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定仓库内的有效成员列表，包含继承成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <param name="repo">slug</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="names">精准匹配用户名,多个用户名用逗号间隔 (optional)</param>
        /// <param name="orderBy">排序类型，默认created_at (optional)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAllMembersApiResponse"/>?&gt;</returns>
        Task<IListAllMembersApiResponse?> ListAllMembersOrDefaultAsync(string repo, Option<int> page = default, Option<int> pageSize = default, Option<string> role = default, Option<string> search = default, Option<string> names = default, Option<string> orderBy = default, Option<bool> desc = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织或仓库内的继承成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListInheritMembersOfGroupApiResponse"/>&gt;</returns>
        Task<IListInheritMembersOfGroupApiResponse> ListInheritMembersOfGroupAsync(string group, Option<string> search = default, Option<string> role = default, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织或仓库内的继承成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </remarks>
        /// <param name="group">slug</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListInheritMembersOfGroupApiResponse"/>?&gt;</returns>
        Task<IListInheritMembersOfGroupApiResponse?> ListInheritMembersOfGroupOrDefaultAsync(string group, Option<string> search = default, Option<string> role = default, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织或仓库内的继承成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListInheritMembersOfRepoApiResponse"/>&gt;</returns>
        Task<IListInheritMembersOfRepoApiResponse> ListInheritMembersOfRepoAsync(string repo, Option<string> search = default, Option<string> role = default, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织或仓库内的继承成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <param name="repo">slug</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListInheritMembersOfRepoApiResponse"/>?&gt;</returns>
        Task<IListInheritMembersOfRepoApiResponse?> ListInheritMembersOfRepoOrDefaultAsync(string repo, Option<string> search = default, Option<string> role = default, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织或仓库内的所有直接成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMembersOfGroupApiResponse"/>&gt;</returns>
        Task<IListMembersOfGroupApiResponse> ListMembersOfGroupAsync(string group, Option<int> page = default, Option<int> pageSize = default, Option<string> role = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织或仓库内的所有直接成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </remarks>
        /// <param name="group">slug</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMembersOfGroupApiResponse"/>?&gt;</returns>
        Task<IListMembersOfGroupApiResponse?> ListMembersOfGroupOrDefaultAsync(string group, Option<int> page = default, Option<int> pageSize = default, Option<string> role = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织或仓库内的所有直接成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMembersOfRepoApiResponse"/>&gt;</returns>
        Task<IListMembersOfRepoApiResponse> ListMembersOfRepoAsync(string repo, Option<int> page = default, Option<int> pageSize = default, Option<string> role = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织或仓库内的所有直接成员
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <param name="repo">slug</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMembersOfRepoApiResponse"/>?&gt;</returns>
        Task<IListMembersOfRepoApiResponse?> ListMembersOfRepoOrDefaultAsync(string repo, Option<int> page = default, Option<int> pageSize = default, Option<string> role = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定仓库内的外部贡献者
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListOutsideCollaboratorsApiResponse"/>&gt;</returns>
        Task<IListOutsideCollaboratorsApiResponse> ListOutsideCollaboratorsAsync(string repo, Option<int> page = default, Option<int> pageSize = default, Option<string> role = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定仓库内的外部贡献者
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <param name="repo">slug</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListOutsideCollaboratorsApiResponse"/>?&gt;</returns>
        Task<IListOutsideCollaboratorsApiResponse?> ListOutsideCollaboratorsOrDefaultAsync(string repo, Option<int> page = default, Option<int> pageSize = default, Option<string> role = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取 top 贡献用户
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-base-info:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="top">top几，不要超过10 (optional, default to 5)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITopContributorsApiResponse"/>&gt;</returns>
        Task<ITopContributorsApiResponse> TopContributorsAsync(string repo, Option<int> top = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取 top 贡献用户
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-base-info:r
        /// </remarks>
        /// <param name="repo">slug</param>
        /// <param name="top">top几，不要超过10 (optional, default to 5)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITopContributorsApiResponse"/>?&gt;</returns>
        Task<ITopContributorsApiResponse?> TopContributorsOrDefaultAsync(string repo, Option<int> top = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新指定组织或仓库内的直接成员权限信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateMembersOfGroupApiResponse"/>&gt;</returns>
        Task<IUpdateMembersOfGroupApiResponse> UpdateMembersOfGroupAsync(string group, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新指定组织或仓库内的直接成员权限信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </remarks>
        /// <param name="group">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateMembersOfGroupApiResponse"/>?&gt;</returns>
        Task<IUpdateMembersOfGroupApiResponse?> UpdateMembersOfGroupOrDefaultAsync(string group, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新指定组织或仓库内的直接成员权限信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateMembersOfRepoApiResponse"/>&gt;</returns>
        Task<IUpdateMembersOfRepoApiResponse> UpdateMembersOfRepoAsync(string repo, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新指定组织或仓库内的直接成员权限信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateMembersOfRepoApiResponse"/>?&gt;</returns>
        Task<IUpdateMembersOfRepoApiResponse?> UpdateMembersOfRepoOrDefaultAsync(string repo, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新指定仓库的外部贡献者权限信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="role">用户权限</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOutsideCollaboratorsApiResponse"/>&gt;</returns>
        Task<IUpdateOutsideCollaboratorsApiResponse> UpdateOutsideCollaboratorsAsync(string repo, string username, string role, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新指定仓库的外部贡献者权限信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="role">用户权限</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOutsideCollaboratorsApiResponse"/>?&gt;</returns>
        Task<IUpdateOutsideCollaboratorsApiResponse?> UpdateOutsideCollaboratorsOrDefaultAsync(string repo, string username, string role, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddMembersOfGroupApiResponse"/>
    /// </summary>
    public interface IAddMembersOfGroupApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IAddMembersOfMissionApiResponse"/>
    /// </summary>
    public interface IAddMembersOfMissionApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IAddMembersOfRegistryApiResponse"/>
    /// </summary>
    public interface IAddMembersOfRegistryApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IAddMembersOfRepoApiResponse"/>
    /// </summary>
    public interface IAddMembersOfRepoApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteMembersOfGroupApiResponse"/>
    /// </summary>
    public interface IDeleteMembersOfGroupApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteMembersOfRepoApiResponse"/>
    /// </summary>
    public interface IDeleteMembersOfRepoApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteOutsideCollaboratorsApiResponse"/>
    /// </summary>
    public interface IDeleteOutsideCollaboratorsApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListAllMembersApiResponse"/>
    /// </summary>
    public interface IListAllMembersApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoUsersWithAccessLevelInSlug>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListInheritMembersOfGroupApiResponse"/>
    /// </summary>
    public interface IListInheritMembersOfGroupApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoListInheritMembers>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListInheritMembersOfRepoApiResponse"/>
    /// </summary>
    public interface IListInheritMembersOfRepoApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoListInheritMembers>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListMembersOfGroupApiResponse"/>
    /// </summary>
    public interface IListMembersOfGroupApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoUsersWithAccessLevelInSlug>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListMembersOfRepoApiResponse"/>
    /// </summary>
    public interface IListMembersOfRepoApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoUsersWithAccessLevelInSlug>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListOutsideCollaboratorsApiResponse"/>
    /// </summary>
    public interface IListOutsideCollaboratorsApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoOutsideCollaboratorInRepo>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITopContributorsApiResponse"/>
    /// </summary>
    public interface ITopContributorsApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoUsersResult>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateMembersOfGroupApiResponse"/>
    /// </summary>
    public interface IUpdateMembersOfGroupApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateMembersOfRepoApiResponse"/>
    /// </summary>
    public interface IUpdateMembersOfRepoApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateOutsideCollaboratorsApiResponse"/>
    /// </summary>
    public interface IUpdateOutsideCollaboratorsApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class CollaboratorsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddMembersOfGroup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddMembersOfGroup;

        internal void ExecuteOnAddMembersOfGroup(CollaboratorsApi.AddMembersOfGroupApiResponse apiResponse)
        {
            OnAddMembersOfGroup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddMembersOfGroup(Exception exception)
        {
            OnErrorAddMembersOfGroup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddMembersOfMission;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddMembersOfMission;

        internal void ExecuteOnAddMembersOfMission(CollaboratorsApi.AddMembersOfMissionApiResponse apiResponse)
        {
            OnAddMembersOfMission?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddMembersOfMission(Exception exception)
        {
            OnErrorAddMembersOfMission?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddMembersOfRegistry;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddMembersOfRegistry;

        internal void ExecuteOnAddMembersOfRegistry(CollaboratorsApi.AddMembersOfRegistryApiResponse apiResponse)
        {
            OnAddMembersOfRegistry?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddMembersOfRegistry(Exception exception)
        {
            OnErrorAddMembersOfRegistry?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddMembersOfRepo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddMembersOfRepo;

        internal void ExecuteOnAddMembersOfRepo(CollaboratorsApi.AddMembersOfRepoApiResponse apiResponse)
        {
            OnAddMembersOfRepo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddMembersOfRepo(Exception exception)
        {
            OnErrorAddMembersOfRepo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteMembersOfGroup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteMembersOfGroup;

        internal void ExecuteOnDeleteMembersOfGroup(CollaboratorsApi.DeleteMembersOfGroupApiResponse apiResponse)
        {
            OnDeleteMembersOfGroup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteMembersOfGroup(Exception exception)
        {
            OnErrorDeleteMembersOfGroup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteMembersOfRepo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteMembersOfRepo;

        internal void ExecuteOnDeleteMembersOfRepo(CollaboratorsApi.DeleteMembersOfRepoApiResponse apiResponse)
        {
            OnDeleteMembersOfRepo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteMembersOfRepo(Exception exception)
        {
            OnErrorDeleteMembersOfRepo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteOutsideCollaborators;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteOutsideCollaborators;

        internal void ExecuteOnDeleteOutsideCollaborators(CollaboratorsApi.DeleteOutsideCollaboratorsApiResponse apiResponse)
        {
            OnDeleteOutsideCollaborators?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteOutsideCollaborators(Exception exception)
        {
            OnErrorDeleteOutsideCollaborators?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListAllMembers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListAllMembers;

        internal void ExecuteOnListAllMembers(CollaboratorsApi.ListAllMembersApiResponse apiResponse)
        {
            OnListAllMembers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListAllMembers(Exception exception)
        {
            OnErrorListAllMembers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListInheritMembersOfGroup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListInheritMembersOfGroup;

        internal void ExecuteOnListInheritMembersOfGroup(CollaboratorsApi.ListInheritMembersOfGroupApiResponse apiResponse)
        {
            OnListInheritMembersOfGroup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListInheritMembersOfGroup(Exception exception)
        {
            OnErrorListInheritMembersOfGroup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListInheritMembersOfRepo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListInheritMembersOfRepo;

        internal void ExecuteOnListInheritMembersOfRepo(CollaboratorsApi.ListInheritMembersOfRepoApiResponse apiResponse)
        {
            OnListInheritMembersOfRepo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListInheritMembersOfRepo(Exception exception)
        {
            OnErrorListInheritMembersOfRepo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListMembersOfGroup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListMembersOfGroup;

        internal void ExecuteOnListMembersOfGroup(CollaboratorsApi.ListMembersOfGroupApiResponse apiResponse)
        {
            OnListMembersOfGroup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListMembersOfGroup(Exception exception)
        {
            OnErrorListMembersOfGroup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListMembersOfRepo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListMembersOfRepo;

        internal void ExecuteOnListMembersOfRepo(CollaboratorsApi.ListMembersOfRepoApiResponse apiResponse)
        {
            OnListMembersOfRepo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListMembersOfRepo(Exception exception)
        {
            OnErrorListMembersOfRepo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListOutsideCollaborators;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListOutsideCollaborators;

        internal void ExecuteOnListOutsideCollaborators(CollaboratorsApi.ListOutsideCollaboratorsApiResponse apiResponse)
        {
            OnListOutsideCollaborators?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListOutsideCollaborators(Exception exception)
        {
            OnErrorListOutsideCollaborators?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTopContributors;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTopContributors;

        internal void ExecuteOnTopContributors(CollaboratorsApi.TopContributorsApiResponse apiResponse)
        {
            OnTopContributors?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTopContributors(Exception exception)
        {
            OnErrorTopContributors?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateMembersOfGroup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateMembersOfGroup;

        internal void ExecuteOnUpdateMembersOfGroup(CollaboratorsApi.UpdateMembersOfGroupApiResponse apiResponse)
        {
            OnUpdateMembersOfGroup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateMembersOfGroup(Exception exception)
        {
            OnErrorUpdateMembersOfGroup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateMembersOfRepo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateMembersOfRepo;

        internal void ExecuteOnUpdateMembersOfRepo(CollaboratorsApi.UpdateMembersOfRepoApiResponse apiResponse)
        {
            OnUpdateMembersOfRepo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateMembersOfRepo(Exception exception)
        {
            OnErrorUpdateMembersOfRepo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateOutsideCollaborators;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateOutsideCollaborators;

        internal void ExecuteOnUpdateOutsideCollaborators(CollaboratorsApi.UpdateOutsideCollaboratorsApiResponse apiResponse)
        {
            OnUpdateOutsideCollaborators?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateOutsideCollaborators(Exception exception)
        {
            OnErrorUpdateOutsideCollaborators?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class CollaboratorsApi : ICollaboratorsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CollaboratorsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public CollaboratorsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollaboratorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollaboratorsApi(ILogger<CollaboratorsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, CollaboratorsApiEvents collaboratorsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<CollaboratorsApi>();
            HttpClient = httpClient;
            Events = collaboratorsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatAddMembersOfGroup(ref string group, ref string username, DtoUpdateMembersRequest request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="group"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateAddMembersOfGroup(string group, string username, DtoUpdateMembersRequest request)
        {
            if (group == null)
                throw new ArgumentNullException(nameof(group));

            if (username == null)
                throw new ArgumentNullException(nameof(username));

            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        private void AfterAddMembersOfGroupDefaultImplementation(IAddMembersOfGroupApiResponse apiResponseLocalVar, string group, string username, DtoUpdateMembersRequest request)
        {
            bool suppressDefaultLog = false;
            AfterAddMembersOfGroup(ref suppressDefaultLog, apiResponseLocalVar, group, username, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        partial void AfterAddMembersOfGroup(ref bool suppressDefaultLog, IAddMembersOfGroupApiResponse apiResponseLocalVar, string group, string username, DtoUpdateMembersRequest request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        private void OnErrorAddMembersOfGroupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, string username, DtoUpdateMembersRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddMembersOfGroup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, group, username, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        partial void OnErrorAddMembersOfGroup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, string username, DtoUpdateMembersRequest request);

        /// <summary>
        /// 添加成员 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </summary>
        /// <param name="group">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMembersOfGroupApiResponse"/>&gt;</returns>
        public async Task<IAddMembersOfGroupApiResponse?> AddMembersOfGroupOrDefaultAsync(string group, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddMembersOfGroupAsync(group, username, request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 添加成员 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMembersOfGroupApiResponse"/>&gt;</returns>
        public async Task<IAddMembersOfGroupApiResponse> AddMembersOfGroupAsync(string group, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddMembersOfGroup(group, username, request);

                FormatAddMembersOfGroup(ref group, ref username, request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{group}/-/members/{username}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{group}/-/members/{username}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bgroup%7D", Uri.EscapeDataString(group.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddMembersOfGroupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddMembersOfGroupApiResponse>();

                        AddMembersOfGroupApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{group}/-/members/{username}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddMembersOfGroupDefaultImplementation(apiResponseLocalVar, group, username, request);

                        Events.ExecuteOnAddMembersOfGroup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddMembersOfGroupDefaultImplementation(e, "/{group}/-/members/{username}", uriBuilderLocalVar.Path, group, username, request);
                Events.ExecuteOnErrorAddMembersOfGroup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddMembersOfGroupApiResponse"/>
        /// </summary>
        public partial class AddMembersOfGroupApiResponse : CNBOpenApi.Client.ApiResponse, IAddMembersOfGroupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddMembersOfGroupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddMembersOfGroupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddMembersOfGroupApiResponse(ILogger<AddMembersOfGroupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddMembersOfMission(ref string mission, ref string username, DtoUpdateMembersRequest request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="mission"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateAddMembersOfMission(string mission, string username, DtoUpdateMembersRequest request)
        {
            if (mission == null)
                throw new ArgumentNullException(nameof(mission));

            if (username == null)
                throw new ArgumentNullException(nameof(username));

            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="mission"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        private void AfterAddMembersOfMissionDefaultImplementation(IAddMembersOfMissionApiResponse apiResponseLocalVar, string mission, string username, DtoUpdateMembersRequest request)
        {
            bool suppressDefaultLog = false;
            AfterAddMembersOfMission(ref suppressDefaultLog, apiResponseLocalVar, mission, username, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="mission"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        partial void AfterAddMembersOfMission(ref bool suppressDefaultLog, IAddMembersOfMissionApiResponse apiResponseLocalVar, string mission, string username, DtoUpdateMembersRequest request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="mission"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        private void OnErrorAddMembersOfMissionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string mission, string username, DtoUpdateMembersRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddMembersOfMission(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, mission, username, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="mission"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        partial void OnErrorAddMembersOfMission(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string mission, string username, DtoUpdateMembersRequest request);

        /// <summary>
        /// 添加成员 访问令牌调用此接口需包含以下权限  mission-manage:rw
        /// </summary>
        /// <param name="mission">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMembersOfMissionApiResponse"/>&gt;</returns>
        public async Task<IAddMembersOfMissionApiResponse?> AddMembersOfMissionOrDefaultAsync(string mission, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddMembersOfMissionAsync(mission, username, request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 添加成员 访问令牌调用此接口需包含以下权限  mission-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mission">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMembersOfMissionApiResponse"/>&gt;</returns>
        public async Task<IAddMembersOfMissionApiResponse> AddMembersOfMissionAsync(string mission, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddMembersOfMission(mission, username, request);

                FormatAddMembersOfMission(ref mission, ref username, request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{mission}/-/members/{username}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{mission}/-/members/{username}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bmission%7D", Uri.EscapeDataString(mission.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddMembersOfMissionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddMembersOfMissionApiResponse>();

                        AddMembersOfMissionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{mission}/-/members/{username}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddMembersOfMissionDefaultImplementation(apiResponseLocalVar, mission, username, request);

                        Events.ExecuteOnAddMembersOfMission(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddMembersOfMissionDefaultImplementation(e, "/{mission}/-/members/{username}", uriBuilderLocalVar.Path, mission, username, request);
                Events.ExecuteOnErrorAddMembersOfMission(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddMembersOfMissionApiResponse"/>
        /// </summary>
        public partial class AddMembersOfMissionApiResponse : CNBOpenApi.Client.ApiResponse, IAddMembersOfMissionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddMembersOfMissionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddMembersOfMissionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddMembersOfMissionApiResponse(ILogger<AddMembersOfMissionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddMembersOfRegistry(ref string registry, ref string username, DtoUpdateMembersRequest request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="registry"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateAddMembersOfRegistry(string registry, string username, DtoUpdateMembersRequest request)
        {
            if (registry == null)
                throw new ArgumentNullException(nameof(registry));

            if (username == null)
                throw new ArgumentNullException(nameof(username));

            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="registry"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        private void AfterAddMembersOfRegistryDefaultImplementation(IAddMembersOfRegistryApiResponse apiResponseLocalVar, string registry, string username, DtoUpdateMembersRequest request)
        {
            bool suppressDefaultLog = false;
            AfterAddMembersOfRegistry(ref suppressDefaultLog, apiResponseLocalVar, registry, username, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="registry"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        partial void AfterAddMembersOfRegistry(ref bool suppressDefaultLog, IAddMembersOfRegistryApiResponse apiResponseLocalVar, string registry, string username, DtoUpdateMembersRequest request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="registry"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        private void OnErrorAddMembersOfRegistryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string registry, string username, DtoUpdateMembersRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddMembersOfRegistry(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, registry, username, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="registry"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        partial void OnErrorAddMembersOfRegistry(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string registry, string username, DtoUpdateMembersRequest request);

        /// <summary>
        /// 添加成员 访问令牌调用此接口需包含以下权限  registry-manage:rw
        /// </summary>
        /// <param name="registry">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMembersOfRegistryApiResponse"/>&gt;</returns>
        public async Task<IAddMembersOfRegistryApiResponse?> AddMembersOfRegistryOrDefaultAsync(string registry, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddMembersOfRegistryAsync(registry, username, request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 添加成员 访问令牌调用此接口需包含以下权限  registry-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registry">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMembersOfRegistryApiResponse"/>&gt;</returns>
        public async Task<IAddMembersOfRegistryApiResponse> AddMembersOfRegistryAsync(string registry, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddMembersOfRegistry(registry, username, request);

                FormatAddMembersOfRegistry(ref registry, ref username, request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{registry}/-/members/{username}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{registry}/-/members/{username}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bregistry%7D", Uri.EscapeDataString(registry.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddMembersOfRegistryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddMembersOfRegistryApiResponse>();

                        AddMembersOfRegistryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{registry}/-/members/{username}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddMembersOfRegistryDefaultImplementation(apiResponseLocalVar, registry, username, request);

                        Events.ExecuteOnAddMembersOfRegistry(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddMembersOfRegistryDefaultImplementation(e, "/{registry}/-/members/{username}", uriBuilderLocalVar.Path, registry, username, request);
                Events.ExecuteOnErrorAddMembersOfRegistry(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddMembersOfRegistryApiResponse"/>
        /// </summary>
        public partial class AddMembersOfRegistryApiResponse : CNBOpenApi.Client.ApiResponse, IAddMembersOfRegistryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddMembersOfRegistryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddMembersOfRegistryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddMembersOfRegistryApiResponse(ILogger<AddMembersOfRegistryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddMembersOfRepo(ref string repo, ref string username, DtoUpdateMembersRequest request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateAddMembersOfRepo(string repo, string username, DtoUpdateMembersRequest request)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (username == null)
                throw new ArgumentNullException(nameof(username));

            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        private void AfterAddMembersOfRepoDefaultImplementation(IAddMembersOfRepoApiResponse apiResponseLocalVar, string repo, string username, DtoUpdateMembersRequest request)
        {
            bool suppressDefaultLog = false;
            AfterAddMembersOfRepo(ref suppressDefaultLog, apiResponseLocalVar, repo, username, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        partial void AfterAddMembersOfRepo(ref bool suppressDefaultLog, IAddMembersOfRepoApiResponse apiResponseLocalVar, string repo, string username, DtoUpdateMembersRequest request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        private void OnErrorAddMembersOfRepoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string username, DtoUpdateMembersRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddMembersOfRepo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, username, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        partial void OnErrorAddMembersOfRepo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string username, DtoUpdateMembersRequest request);

        /// <summary>
        /// 添加成员 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMembersOfRepoApiResponse"/>&gt;</returns>
        public async Task<IAddMembersOfRepoApiResponse?> AddMembersOfRepoOrDefaultAsync(string repo, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddMembersOfRepoAsync(repo, username, request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 添加成员 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMembersOfRepoApiResponse"/>&gt;</returns>
        public async Task<IAddMembersOfRepoApiResponse> AddMembersOfRepoAsync(string repo, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddMembersOfRepo(repo, username, request);

                FormatAddMembersOfRepo(ref repo, ref username, request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/members/{username}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/members/{username}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddMembersOfRepoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddMembersOfRepoApiResponse>();

                        AddMembersOfRepoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/members/{username}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddMembersOfRepoDefaultImplementation(apiResponseLocalVar, repo, username, request);

                        Events.ExecuteOnAddMembersOfRepo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddMembersOfRepoDefaultImplementation(e, "/{repo}/-/members/{username}", uriBuilderLocalVar.Path, repo, username, request);
                Events.ExecuteOnErrorAddMembersOfRepo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddMembersOfRepoApiResponse"/>
        /// </summary>
        public partial class AddMembersOfRepoApiResponse : CNBOpenApi.Client.ApiResponse, IAddMembersOfRepoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddMembersOfRepoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddMembersOfRepoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddMembersOfRepoApiResponse(ILogger<AddMembersOfRepoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteMembersOfGroup(ref string group, ref string username);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="group"></param>
        /// <param name="username"></param>
        /// <returns></returns>
        private void ValidateDeleteMembersOfGroup(string group, string username)
        {
            if (group == null)
                throw new ArgumentNullException(nameof(group));

            if (username == null)
                throw new ArgumentNullException(nameof(username));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="username"></param>
        private void AfterDeleteMembersOfGroupDefaultImplementation(IDeleteMembersOfGroupApiResponse apiResponseLocalVar, string group, string username)
        {
            bool suppressDefaultLog = false;
            AfterDeleteMembersOfGroup(ref suppressDefaultLog, apiResponseLocalVar, group, username);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="username"></param>
        partial void AfterDeleteMembersOfGroup(ref bool suppressDefaultLog, IDeleteMembersOfGroupApiResponse apiResponseLocalVar, string group, string username);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="username"></param>
        private void OnErrorDeleteMembersOfGroupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, string username)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteMembersOfGroup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, group, username);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="username"></param>
        partial void OnErrorDeleteMembersOfGroup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, string username);

        /// <summary>
        /// 删除指定组织或仓库的直接成员, 包含两种场景: 1. 作为直接成员的用户自己退出 2. 由管理者移除指定的直接成员 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </summary>
        /// <param name="group">slug</param>
        /// <param name="username">username</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMembersOfGroupApiResponse"/>&gt;</returns>
        public async Task<IDeleteMembersOfGroupApiResponse?> DeleteMembersOfGroupOrDefaultAsync(string group, string username, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteMembersOfGroupAsync(group, username, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 删除指定组织或仓库的直接成员, 包含两种场景: 1. 作为直接成员的用户自己退出 2. 由管理者移除指定的直接成员 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="username">username</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMembersOfGroupApiResponse"/>&gt;</returns>
        public async Task<IDeleteMembersOfGroupApiResponse> DeleteMembersOfGroupAsync(string group, string username, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteMembersOfGroup(group, username);

                FormatDeleteMembersOfGroup(ref group, ref username);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{group}/-/members/{username}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{group}/-/members/{username}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bgroup%7D", Uri.EscapeDataString(group.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteMembersOfGroupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteMembersOfGroupApiResponse>();

                        DeleteMembersOfGroupApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{group}/-/members/{username}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteMembersOfGroupDefaultImplementation(apiResponseLocalVar, group, username);

                        Events.ExecuteOnDeleteMembersOfGroup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteMembersOfGroupDefaultImplementation(e, "/{group}/-/members/{username}", uriBuilderLocalVar.Path, group, username);
                Events.ExecuteOnErrorDeleteMembersOfGroup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteMembersOfGroupApiResponse"/>
        /// </summary>
        public partial class DeleteMembersOfGroupApiResponse : CNBOpenApi.Client.ApiResponse, IDeleteMembersOfGroupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteMembersOfGroupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteMembersOfGroupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteMembersOfGroupApiResponse(ILogger<DeleteMembersOfGroupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteMembersOfRepo(ref string repo, ref string username);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        /// <returns></returns>
        private void ValidateDeleteMembersOfRepo(string repo, string username)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (username == null)
                throw new ArgumentNullException(nameof(username));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        private void AfterDeleteMembersOfRepoDefaultImplementation(IDeleteMembersOfRepoApiResponse apiResponseLocalVar, string repo, string username)
        {
            bool suppressDefaultLog = false;
            AfterDeleteMembersOfRepo(ref suppressDefaultLog, apiResponseLocalVar, repo, username);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        partial void AfterDeleteMembersOfRepo(ref bool suppressDefaultLog, IDeleteMembersOfRepoApiResponse apiResponseLocalVar, string repo, string username);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        private void OnErrorDeleteMembersOfRepoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string username)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteMembersOfRepo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, username);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        partial void OnErrorDeleteMembersOfRepo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string username);

        /// <summary>
        /// 删除指定组织或仓库的直接成员, 包含两种场景: 1. 作为直接成员的用户自己退出 2. 由管理者移除指定的直接成员 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMembersOfRepoApiResponse"/>&gt;</returns>
        public async Task<IDeleteMembersOfRepoApiResponse?> DeleteMembersOfRepoOrDefaultAsync(string repo, string username, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteMembersOfRepoAsync(repo, username, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 删除指定组织或仓库的直接成员, 包含两种场景: 1. 作为直接成员的用户自己退出 2. 由管理者移除指定的直接成员 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMembersOfRepoApiResponse"/>&gt;</returns>
        public async Task<IDeleteMembersOfRepoApiResponse> DeleteMembersOfRepoAsync(string repo, string username, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteMembersOfRepo(repo, username);

                FormatDeleteMembersOfRepo(ref repo, ref username);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/members/{username}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/members/{username}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteMembersOfRepoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteMembersOfRepoApiResponse>();

                        DeleteMembersOfRepoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/members/{username}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteMembersOfRepoDefaultImplementation(apiResponseLocalVar, repo, username);

                        Events.ExecuteOnDeleteMembersOfRepo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteMembersOfRepoDefaultImplementation(e, "/{repo}/-/members/{username}", uriBuilderLocalVar.Path, repo, username);
                Events.ExecuteOnErrorDeleteMembersOfRepo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteMembersOfRepoApiResponse"/>
        /// </summary>
        public partial class DeleteMembersOfRepoApiResponse : CNBOpenApi.Client.ApiResponse, IDeleteMembersOfRepoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteMembersOfRepoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteMembersOfRepoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteMembersOfRepoApiResponse(ILogger<DeleteMembersOfRepoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteOutsideCollaborators(ref string repo, ref string username);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        /// <returns></returns>
        private void ValidateDeleteOutsideCollaborators(string repo, string username)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (username == null)
                throw new ArgumentNullException(nameof(username));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        private void AfterDeleteOutsideCollaboratorsDefaultImplementation(IDeleteOutsideCollaboratorsApiResponse apiResponseLocalVar, string repo, string username)
        {
            bool suppressDefaultLog = false;
            AfterDeleteOutsideCollaborators(ref suppressDefaultLog, apiResponseLocalVar, repo, username);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        partial void AfterDeleteOutsideCollaborators(ref bool suppressDefaultLog, IDeleteOutsideCollaboratorsApiResponse apiResponseLocalVar, string repo, string username);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        private void OnErrorDeleteOutsideCollaboratorsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string username)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteOutsideCollaborators(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, username);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        partial void OnErrorDeleteOutsideCollaborators(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string username);

        /// <summary>
        /// 删除指定仓库的外部贡献者, 包含两种场景: 1. 作为外部贡献者的用户自己退出仓库 2. 由仓库管理者移除指定的外部贡献者 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOutsideCollaboratorsApiResponse"/>&gt;</returns>
        public async Task<IDeleteOutsideCollaboratorsApiResponse?> DeleteOutsideCollaboratorsOrDefaultAsync(string repo, string username, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteOutsideCollaboratorsAsync(repo, username, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 删除指定仓库的外部贡献者, 包含两种场景: 1. 作为外部贡献者的用户自己退出仓库 2. 由仓库管理者移除指定的外部贡献者 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOutsideCollaboratorsApiResponse"/>&gt;</returns>
        public async Task<IDeleteOutsideCollaboratorsApiResponse> DeleteOutsideCollaboratorsAsync(string repo, string username, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteOutsideCollaborators(repo, username);

                FormatDeleteOutsideCollaborators(ref repo, ref username);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/outside-collaborators/{username}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/outside-collaborators/{username}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteOutsideCollaboratorsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteOutsideCollaboratorsApiResponse>();

                        DeleteOutsideCollaboratorsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/outside-collaborators/{username}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteOutsideCollaboratorsDefaultImplementation(apiResponseLocalVar, repo, username);

                        Events.ExecuteOnDeleteOutsideCollaborators(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteOutsideCollaboratorsDefaultImplementation(e, "/{repo}/-/outside-collaborators/{username}", uriBuilderLocalVar.Path, repo, username);
                Events.ExecuteOnErrorDeleteOutsideCollaborators(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteOutsideCollaboratorsApiResponse"/>
        /// </summary>
        public partial class DeleteOutsideCollaboratorsApiResponse : CNBOpenApi.Client.ApiResponse, IDeleteOutsideCollaboratorsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteOutsideCollaboratorsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteOutsideCollaboratorsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteOutsideCollaboratorsApiResponse(ILogger<DeleteOutsideCollaboratorsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListAllMembers(ref string repo, ref Option<int> page, ref Option<int> pageSize, ref Option<string> role, ref Option<string> search, ref Option<string> names, ref Option<string> orderBy, ref Option<bool> desc);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="role"></param>
        /// <param name="search"></param>
        /// <param name="names"></param>
        /// <param name="orderBy"></param>
        /// <returns></returns>
        private void ValidateListAllMembers(string repo, Option<string> role, Option<string> search, Option<string> names, Option<string> orderBy)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role));

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));

            if (names.IsSet && names.Value == null)
                throw new ArgumentNullException(nameof(names));

            if (orderBy.IsSet && orderBy.Value == null)
                throw new ArgumentNullException(nameof(orderBy));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="role"></param>
        /// <param name="search"></param>
        /// <param name="names"></param>
        /// <param name="orderBy"></param>
        /// <param name="desc"></param>
        private void AfterListAllMembersDefaultImplementation(IListAllMembersApiResponse apiResponseLocalVar, string repo, Option<int> page, Option<int> pageSize, Option<string> role, Option<string> search, Option<string> names, Option<string> orderBy, Option<bool> desc)
        {
            bool suppressDefaultLog = false;
            AfterListAllMembers(ref suppressDefaultLog, apiResponseLocalVar, repo, page, pageSize, role, search, names, orderBy, desc);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="role"></param>
        /// <param name="search"></param>
        /// <param name="names"></param>
        /// <param name="orderBy"></param>
        /// <param name="desc"></param>
        partial void AfterListAllMembers(ref bool suppressDefaultLog, IListAllMembersApiResponse apiResponseLocalVar, string repo, Option<int> page, Option<int> pageSize, Option<string> role, Option<string> search, Option<string> names, Option<string> orderBy, Option<bool> desc);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="role"></param>
        /// <param name="search"></param>
        /// <param name="names"></param>
        /// <param name="orderBy"></param>
        /// <param name="desc"></param>
        private void OnErrorListAllMembersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<int> page, Option<int> pageSize, Option<string> role, Option<string> search, Option<string> names, Option<string> orderBy, Option<bool> desc)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListAllMembers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, page, pageSize, role, search, names, orderBy, desc);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="role"></param>
        /// <param name="search"></param>
        /// <param name="names"></param>
        /// <param name="orderBy"></param>
        /// <param name="desc"></param>
        partial void OnErrorListAllMembers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<int> page, Option<int> pageSize, Option<string> role, Option<string> search, Option<string> names, Option<string> orderBy, Option<bool> desc);

        /// <summary>
        /// 获取指定仓库内的有效成员列表，包含继承成员 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <param name="repo">slug</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="names">精准匹配用户名,多个用户名用逗号间隔 (optional)</param>
        /// <param name="orderBy">排序类型，默认created_at (optional)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAllMembersApiResponse"/>&gt;</returns>
        public async Task<IListAllMembersApiResponse?> ListAllMembersOrDefaultAsync(string repo, Option<int> page = default, Option<int> pageSize = default, Option<string> role = default, Option<string> search = default, Option<string> names = default, Option<string> orderBy = default, Option<bool> desc = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListAllMembersAsync(repo, page, pageSize, role, search, names, orderBy, desc, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定仓库内的有效成员列表，包含继承成员 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="names">精准匹配用户名,多个用户名用逗号间隔 (optional)</param>
        /// <param name="orderBy">排序类型，默认created_at (optional)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAllMembersApiResponse"/>&gt;</returns>
        public async Task<IListAllMembersApiResponse> ListAllMembersAsync(string repo, Option<int> page = default, Option<int> pageSize = default, Option<string> role = default, Option<string> search = default, Option<string> names = default, Option<string> orderBy = default, Option<bool> desc = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListAllMembers(repo, role, search, names, orderBy);

                FormatListAllMembers(ref repo, ref page, ref pageSize, ref role, ref search, ref names, ref orderBy, ref desc);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/list-members"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/list-members");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (role.IsSet)
                        parseQueryStringLocalVar["role"] = ClientUtils.ParameterToString(role.Value);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    if (names.IsSet)
                        parseQueryStringLocalVar["names"] = ClientUtils.ParameterToString(names.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["order_by"] = ClientUtils.ParameterToString(orderBy.Value);

                    if (desc.IsSet)
                        parseQueryStringLocalVar["desc"] = ClientUtils.ParameterToString(desc.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListAllMembersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListAllMembersApiResponse>();

                        ListAllMembersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/list-members", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListAllMembersDefaultImplementation(apiResponseLocalVar, repo, page, pageSize, role, search, names, orderBy, desc);

                        Events.ExecuteOnListAllMembers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListAllMembersDefaultImplementation(e, "/{repo}/-/list-members", uriBuilderLocalVar.Path, repo, page, pageSize, role, search, names, orderBy, desc);
                Events.ExecuteOnErrorListAllMembers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListAllMembersApiResponse"/>
        /// </summary>
        public partial class ListAllMembersApiResponse : CNBOpenApi.Client.ApiResponse, IListAllMembersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListAllMembersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListAllMembersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListAllMembersApiResponse(ILogger<ListAllMembersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoUsersWithAccessLevelInSlug>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoUsersWithAccessLevelInSlug>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoUsersWithAccessLevelInSlug>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListInheritMembersOfGroup(ref string group, ref Option<string> search, ref Option<string> role, ref Option<int> page, ref Option<int> pageSize);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="group"></param>
        /// <param name="search"></param>
        /// <param name="role"></param>
        /// <returns></returns>
        private void ValidateListInheritMembersOfGroup(string group, Option<string> search, Option<string> role)
        {
            if (group == null)
                throw new ArgumentNullException(nameof(group));

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="search"></param>
        /// <param name="role"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void AfterListInheritMembersOfGroupDefaultImplementation(IListInheritMembersOfGroupApiResponse apiResponseLocalVar, string group, Option<string> search, Option<string> role, Option<int> page, Option<int> pageSize)
        {
            bool suppressDefaultLog = false;
            AfterListInheritMembersOfGroup(ref suppressDefaultLog, apiResponseLocalVar, group, search, role, page, pageSize);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="search"></param>
        /// <param name="role"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void AfterListInheritMembersOfGroup(ref bool suppressDefaultLog, IListInheritMembersOfGroupApiResponse apiResponseLocalVar, string group, Option<string> search, Option<string> role, Option<int> page, Option<int> pageSize);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="search"></param>
        /// <param name="role"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void OnErrorListInheritMembersOfGroupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, Option<string> search, Option<string> role, Option<int> page, Option<int> pageSize)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListInheritMembersOfGroup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, group, search, role, page, pageSize);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="search"></param>
        /// <param name="role"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void OnErrorListInheritMembersOfGroup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, Option<string> search, Option<string> role, Option<int> page, Option<int> pageSize);

        /// <summary>
        /// 获取指定组织或仓库内的继承成员 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </summary>
        /// <param name="group">slug</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListInheritMembersOfGroupApiResponse"/>&gt;</returns>
        public async Task<IListInheritMembersOfGroupApiResponse?> ListInheritMembersOfGroupOrDefaultAsync(string group, Option<string> search = default, Option<string> role = default, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListInheritMembersOfGroupAsync(group, search, role, page, pageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定组织或仓库内的继承成员 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListInheritMembersOfGroupApiResponse"/>&gt;</returns>
        public async Task<IListInheritMembersOfGroupApiResponse> ListInheritMembersOfGroupAsync(string group, Option<string> search = default, Option<string> role = default, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListInheritMembersOfGroup(group, search, role);

                FormatListInheritMembersOfGroup(ref group, ref search, ref role, ref page, ref pageSize);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{group}/-/inherit-members"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{group}/-/inherit-members");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bgroup%7D", Uri.EscapeDataString(group.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    if (role.IsSet)
                        parseQueryStringLocalVar["role"] = ClientUtils.ParameterToString(role.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListInheritMembersOfGroupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListInheritMembersOfGroupApiResponse>();

                        ListInheritMembersOfGroupApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{group}/-/inherit-members", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListInheritMembersOfGroupDefaultImplementation(apiResponseLocalVar, group, search, role, page, pageSize);

                        Events.ExecuteOnListInheritMembersOfGroup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListInheritMembersOfGroupDefaultImplementation(e, "/{group}/-/inherit-members", uriBuilderLocalVar.Path, group, search, role, page, pageSize);
                Events.ExecuteOnErrorListInheritMembersOfGroup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListInheritMembersOfGroupApiResponse"/>
        /// </summary>
        public partial class ListInheritMembersOfGroupApiResponse : CNBOpenApi.Client.ApiResponse, IListInheritMembersOfGroupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListInheritMembersOfGroupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListInheritMembersOfGroupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListInheritMembersOfGroupApiResponse(ILogger<ListInheritMembersOfGroupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoListInheritMembers>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoListInheritMembers>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoListInheritMembers>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListInheritMembersOfRepo(ref string repo, ref Option<string> search, ref Option<string> role, ref Option<int> page, ref Option<int> pageSize);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="search"></param>
        /// <param name="role"></param>
        /// <returns></returns>
        private void ValidateListInheritMembersOfRepo(string repo, Option<string> search, Option<string> role)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="search"></param>
        /// <param name="role"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void AfterListInheritMembersOfRepoDefaultImplementation(IListInheritMembersOfRepoApiResponse apiResponseLocalVar, string repo, Option<string> search, Option<string> role, Option<int> page, Option<int> pageSize)
        {
            bool suppressDefaultLog = false;
            AfterListInheritMembersOfRepo(ref suppressDefaultLog, apiResponseLocalVar, repo, search, role, page, pageSize);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="search"></param>
        /// <param name="role"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void AfterListInheritMembersOfRepo(ref bool suppressDefaultLog, IListInheritMembersOfRepoApiResponse apiResponseLocalVar, string repo, Option<string> search, Option<string> role, Option<int> page, Option<int> pageSize);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="search"></param>
        /// <param name="role"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void OnErrorListInheritMembersOfRepoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<string> search, Option<string> role, Option<int> page, Option<int> pageSize)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListInheritMembersOfRepo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, search, role, page, pageSize);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="search"></param>
        /// <param name="role"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void OnErrorListInheritMembersOfRepo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<string> search, Option<string> role, Option<int> page, Option<int> pageSize);

        /// <summary>
        /// 获取指定组织或仓库内的继承成员 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <param name="repo">slug</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListInheritMembersOfRepoApiResponse"/>&gt;</returns>
        public async Task<IListInheritMembersOfRepoApiResponse?> ListInheritMembersOfRepoOrDefaultAsync(string repo, Option<string> search = default, Option<string> role = default, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListInheritMembersOfRepoAsync(repo, search, role, page, pageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定组织或仓库内的继承成员 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListInheritMembersOfRepoApiResponse"/>&gt;</returns>
        public async Task<IListInheritMembersOfRepoApiResponse> ListInheritMembersOfRepoAsync(string repo, Option<string> search = default, Option<string> role = default, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListInheritMembersOfRepo(repo, search, role);

                FormatListInheritMembersOfRepo(ref repo, ref search, ref role, ref page, ref pageSize);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/inherit-members"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/inherit-members");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    if (role.IsSet)
                        parseQueryStringLocalVar["role"] = ClientUtils.ParameterToString(role.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListInheritMembersOfRepoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListInheritMembersOfRepoApiResponse>();

                        ListInheritMembersOfRepoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/inherit-members", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListInheritMembersOfRepoDefaultImplementation(apiResponseLocalVar, repo, search, role, page, pageSize);

                        Events.ExecuteOnListInheritMembersOfRepo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListInheritMembersOfRepoDefaultImplementation(e, "/{repo}/-/inherit-members", uriBuilderLocalVar.Path, repo, search, role, page, pageSize);
                Events.ExecuteOnErrorListInheritMembersOfRepo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListInheritMembersOfRepoApiResponse"/>
        /// </summary>
        public partial class ListInheritMembersOfRepoApiResponse : CNBOpenApi.Client.ApiResponse, IListInheritMembersOfRepoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListInheritMembersOfRepoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListInheritMembersOfRepoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListInheritMembersOfRepoApiResponse(ILogger<ListInheritMembersOfRepoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoListInheritMembers>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoListInheritMembers>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoListInheritMembers>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListMembersOfGroup(ref string group, ref Option<int> page, ref Option<int> pageSize, ref Option<string> role, ref Option<string> search);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="group"></param>
        /// <param name="role"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        private void ValidateListMembersOfGroup(string group, Option<string> role, Option<string> search)
        {
            if (group == null)
                throw new ArgumentNullException(nameof(group));

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role));

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="role"></param>
        /// <param name="search"></param>
        private void AfterListMembersOfGroupDefaultImplementation(IListMembersOfGroupApiResponse apiResponseLocalVar, string group, Option<int> page, Option<int> pageSize, Option<string> role, Option<string> search)
        {
            bool suppressDefaultLog = false;
            AfterListMembersOfGroup(ref suppressDefaultLog, apiResponseLocalVar, group, page, pageSize, role, search);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="role"></param>
        /// <param name="search"></param>
        partial void AfterListMembersOfGroup(ref bool suppressDefaultLog, IListMembersOfGroupApiResponse apiResponseLocalVar, string group, Option<int> page, Option<int> pageSize, Option<string> role, Option<string> search);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="role"></param>
        /// <param name="search"></param>
        private void OnErrorListMembersOfGroupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, Option<int> page, Option<int> pageSize, Option<string> role, Option<string> search)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListMembersOfGroup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, group, page, pageSize, role, search);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="role"></param>
        /// <param name="search"></param>
        partial void OnErrorListMembersOfGroup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, Option<int> page, Option<int> pageSize, Option<string> role, Option<string> search);

        /// <summary>
        /// 获取指定组织或仓库内的所有直接成员 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </summary>
        /// <param name="group">slug</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMembersOfGroupApiResponse"/>&gt;</returns>
        public async Task<IListMembersOfGroupApiResponse?> ListMembersOfGroupOrDefaultAsync(string group, Option<int> page = default, Option<int> pageSize = default, Option<string> role = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListMembersOfGroupAsync(group, page, pageSize, role, search, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定组织或仓库内的所有直接成员 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMembersOfGroupApiResponse"/>&gt;</returns>
        public async Task<IListMembersOfGroupApiResponse> ListMembersOfGroupAsync(string group, Option<int> page = default, Option<int> pageSize = default, Option<string> role = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListMembersOfGroup(group, role, search);

                FormatListMembersOfGroup(ref group, ref page, ref pageSize, ref role, ref search);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{group}/-/members"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{group}/-/members");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bgroup%7D", Uri.EscapeDataString(group.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (role.IsSet)
                        parseQueryStringLocalVar["role"] = ClientUtils.ParameterToString(role.Value);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListMembersOfGroupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListMembersOfGroupApiResponse>();

                        ListMembersOfGroupApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{group}/-/members", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListMembersOfGroupDefaultImplementation(apiResponseLocalVar, group, page, pageSize, role, search);

                        Events.ExecuteOnListMembersOfGroup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListMembersOfGroupDefaultImplementation(e, "/{group}/-/members", uriBuilderLocalVar.Path, group, page, pageSize, role, search);
                Events.ExecuteOnErrorListMembersOfGroup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListMembersOfGroupApiResponse"/>
        /// </summary>
        public partial class ListMembersOfGroupApiResponse : CNBOpenApi.Client.ApiResponse, IListMembersOfGroupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListMembersOfGroupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListMembersOfGroupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListMembersOfGroupApiResponse(ILogger<ListMembersOfGroupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoUsersWithAccessLevelInSlug>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoUsersWithAccessLevelInSlug>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoUsersWithAccessLevelInSlug>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListMembersOfRepo(ref string repo, ref Option<int> page, ref Option<int> pageSize, ref Option<string> role, ref Option<string> search);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="role"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        private void ValidateListMembersOfRepo(string repo, Option<string> role, Option<string> search)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role));

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="role"></param>
        /// <param name="search"></param>
        private void AfterListMembersOfRepoDefaultImplementation(IListMembersOfRepoApiResponse apiResponseLocalVar, string repo, Option<int> page, Option<int> pageSize, Option<string> role, Option<string> search)
        {
            bool suppressDefaultLog = false;
            AfterListMembersOfRepo(ref suppressDefaultLog, apiResponseLocalVar, repo, page, pageSize, role, search);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="role"></param>
        /// <param name="search"></param>
        partial void AfterListMembersOfRepo(ref bool suppressDefaultLog, IListMembersOfRepoApiResponse apiResponseLocalVar, string repo, Option<int> page, Option<int> pageSize, Option<string> role, Option<string> search);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="role"></param>
        /// <param name="search"></param>
        private void OnErrorListMembersOfRepoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<int> page, Option<int> pageSize, Option<string> role, Option<string> search)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListMembersOfRepo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, page, pageSize, role, search);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="role"></param>
        /// <param name="search"></param>
        partial void OnErrorListMembersOfRepo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<int> page, Option<int> pageSize, Option<string> role, Option<string> search);

        /// <summary>
        /// 获取指定组织或仓库内的所有直接成员 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <param name="repo">slug</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMembersOfRepoApiResponse"/>&gt;</returns>
        public async Task<IListMembersOfRepoApiResponse?> ListMembersOfRepoOrDefaultAsync(string repo, Option<int> page = default, Option<int> pageSize = default, Option<string> role = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListMembersOfRepoAsync(repo, page, pageSize, role, search, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定组织或仓库内的所有直接成员 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMembersOfRepoApiResponse"/>&gt;</returns>
        public async Task<IListMembersOfRepoApiResponse> ListMembersOfRepoAsync(string repo, Option<int> page = default, Option<int> pageSize = default, Option<string> role = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListMembersOfRepo(repo, role, search);

                FormatListMembersOfRepo(ref repo, ref page, ref pageSize, ref role, ref search);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/members"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/members");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (role.IsSet)
                        parseQueryStringLocalVar["role"] = ClientUtils.ParameterToString(role.Value);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListMembersOfRepoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListMembersOfRepoApiResponse>();

                        ListMembersOfRepoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/members", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListMembersOfRepoDefaultImplementation(apiResponseLocalVar, repo, page, pageSize, role, search);

                        Events.ExecuteOnListMembersOfRepo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListMembersOfRepoDefaultImplementation(e, "/{repo}/-/members", uriBuilderLocalVar.Path, repo, page, pageSize, role, search);
                Events.ExecuteOnErrorListMembersOfRepo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListMembersOfRepoApiResponse"/>
        /// </summary>
        public partial class ListMembersOfRepoApiResponse : CNBOpenApi.Client.ApiResponse, IListMembersOfRepoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListMembersOfRepoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListMembersOfRepoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListMembersOfRepoApiResponse(ILogger<ListMembersOfRepoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoUsersWithAccessLevelInSlug>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoUsersWithAccessLevelInSlug>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoUsersWithAccessLevelInSlug>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListOutsideCollaborators(ref string repo, ref Option<int> page, ref Option<int> pageSize, ref Option<string> role, ref Option<string> search);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="role"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        private void ValidateListOutsideCollaborators(string repo, Option<string> role, Option<string> search)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role));

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="role"></param>
        /// <param name="search"></param>
        private void AfterListOutsideCollaboratorsDefaultImplementation(IListOutsideCollaboratorsApiResponse apiResponseLocalVar, string repo, Option<int> page, Option<int> pageSize, Option<string> role, Option<string> search)
        {
            bool suppressDefaultLog = false;
            AfterListOutsideCollaborators(ref suppressDefaultLog, apiResponseLocalVar, repo, page, pageSize, role, search);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="role"></param>
        /// <param name="search"></param>
        partial void AfterListOutsideCollaborators(ref bool suppressDefaultLog, IListOutsideCollaboratorsApiResponse apiResponseLocalVar, string repo, Option<int> page, Option<int> pageSize, Option<string> role, Option<string> search);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="role"></param>
        /// <param name="search"></param>
        private void OnErrorListOutsideCollaboratorsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<int> page, Option<int> pageSize, Option<string> role, Option<string> search)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListOutsideCollaborators(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, page, pageSize, role, search);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="role"></param>
        /// <param name="search"></param>
        partial void OnErrorListOutsideCollaborators(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<int> page, Option<int> pageSize, Option<string> role, Option<string> search);

        /// <summary>
        /// 获取指定仓库内的外部贡献者 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <param name="repo">slug</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListOutsideCollaboratorsApiResponse"/>&gt;</returns>
        public async Task<IListOutsideCollaboratorsApiResponse?> ListOutsideCollaboratorsOrDefaultAsync(string repo, Option<int> page = default, Option<int> pageSize = default, Option<string> role = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListOutsideCollaboratorsAsync(repo, page, pageSize, role, search, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定仓库内的外部贡献者 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="role">筛选角色 (optional)</param>
        /// <param name="search">过滤成员 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListOutsideCollaboratorsApiResponse"/>&gt;</returns>
        public async Task<IListOutsideCollaboratorsApiResponse> ListOutsideCollaboratorsAsync(string repo, Option<int> page = default, Option<int> pageSize = default, Option<string> role = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListOutsideCollaborators(repo, role, search);

                FormatListOutsideCollaborators(ref repo, ref page, ref pageSize, ref role, ref search);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/outside-collaborators"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/outside-collaborators");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (role.IsSet)
                        parseQueryStringLocalVar["role"] = ClientUtils.ParameterToString(role.Value);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListOutsideCollaboratorsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListOutsideCollaboratorsApiResponse>();

                        ListOutsideCollaboratorsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/outside-collaborators", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListOutsideCollaboratorsDefaultImplementation(apiResponseLocalVar, repo, page, pageSize, role, search);

                        Events.ExecuteOnListOutsideCollaborators(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListOutsideCollaboratorsDefaultImplementation(e, "/{repo}/-/outside-collaborators", uriBuilderLocalVar.Path, repo, page, pageSize, role, search);
                Events.ExecuteOnErrorListOutsideCollaborators(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListOutsideCollaboratorsApiResponse"/>
        /// </summary>
        public partial class ListOutsideCollaboratorsApiResponse : CNBOpenApi.Client.ApiResponse, IListOutsideCollaboratorsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListOutsideCollaboratorsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListOutsideCollaboratorsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListOutsideCollaboratorsApiResponse(ILogger<ListOutsideCollaboratorsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoOutsideCollaboratorInRepo>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoOutsideCollaboratorInRepo>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoOutsideCollaboratorInRepo>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTopContributors(ref string repo, ref Option<int> top);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <returns></returns>
        private void ValidateTopContributors(string repo)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="top"></param>
        private void AfterTopContributorsDefaultImplementation(ITopContributorsApiResponse apiResponseLocalVar, string repo, Option<int> top)
        {
            bool suppressDefaultLog = false;
            AfterTopContributors(ref suppressDefaultLog, apiResponseLocalVar, repo, top);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="top"></param>
        partial void AfterTopContributors(ref bool suppressDefaultLog, ITopContributorsApiResponse apiResponseLocalVar, string repo, Option<int> top);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="top"></param>
        private void OnErrorTopContributorsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<int> top)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTopContributors(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, top);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="top"></param>
        partial void OnErrorTopContributors(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<int> top);

        /// <summary>
        /// 获取 top 贡献用户 访问令牌调用此接口需包含以下权限  repo-base-info:r
        /// </summary>
        /// <param name="repo">slug</param>
        /// <param name="top">top几，不要超过10 (optional, default to 5)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITopContributorsApiResponse"/>&gt;</returns>
        public async Task<ITopContributorsApiResponse?> TopContributorsOrDefaultAsync(string repo, Option<int> top = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TopContributorsAsync(repo, top, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取 top 贡献用户 访问令牌调用此接口需包含以下权限  repo-base-info:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="top">top几，不要超过10 (optional, default to 5)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITopContributorsApiResponse"/>&gt;</returns>
        public async Task<ITopContributorsApiResponse> TopContributorsAsync(string repo, Option<int> top = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTopContributors(repo);

                FormatTopContributors(ref repo, ref top);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/top-activity-users"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/top-activity-users");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (top.IsSet)
                        parseQueryStringLocalVar["top"] = ClientUtils.ParameterToString(top.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TopContributorsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TopContributorsApiResponse>();

                        TopContributorsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/top-activity-users", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTopContributorsDefaultImplementation(apiResponseLocalVar, repo, top);

                        Events.ExecuteOnTopContributors(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTopContributorsDefaultImplementation(e, "/{repo}/-/top-activity-users", uriBuilderLocalVar.Path, repo, top);
                Events.ExecuteOnErrorTopContributors(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TopContributorsApiResponse"/>
        /// </summary>
        public partial class TopContributorsApiResponse : CNBOpenApi.Client.ApiResponse, ITopContributorsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TopContributorsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TopContributorsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TopContributorsApiResponse(ILogger<TopContributorsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoUsersResult>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoUsersResult>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoUsersResult>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateMembersOfGroup(ref string group, ref string username, DtoUpdateMembersRequest request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="group"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateUpdateMembersOfGroup(string group, string username, DtoUpdateMembersRequest request)
        {
            if (group == null)
                throw new ArgumentNullException(nameof(group));

            if (username == null)
                throw new ArgumentNullException(nameof(username));

            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        private void AfterUpdateMembersOfGroupDefaultImplementation(IUpdateMembersOfGroupApiResponse apiResponseLocalVar, string group, string username, DtoUpdateMembersRequest request)
        {
            bool suppressDefaultLog = false;
            AfterUpdateMembersOfGroup(ref suppressDefaultLog, apiResponseLocalVar, group, username, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        partial void AfterUpdateMembersOfGroup(ref bool suppressDefaultLog, IUpdateMembersOfGroupApiResponse apiResponseLocalVar, string group, string username, DtoUpdateMembersRequest request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        private void OnErrorUpdateMembersOfGroupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, string username, DtoUpdateMembersRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateMembersOfGroup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, group, username, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        partial void OnErrorUpdateMembersOfGroup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, string username, DtoUpdateMembersRequest request);

        /// <summary>
        /// 更新指定组织或仓库内的直接成员权限信息 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </summary>
        /// <param name="group">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateMembersOfGroupApiResponse"/>&gt;</returns>
        public async Task<IUpdateMembersOfGroupApiResponse?> UpdateMembersOfGroupOrDefaultAsync(string group, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateMembersOfGroupAsync(group, username, request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 更新指定组织或仓库内的直接成员权限信息 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateMembersOfGroupApiResponse"/>&gt;</returns>
        public async Task<IUpdateMembersOfGroupApiResponse> UpdateMembersOfGroupAsync(string group, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateMembersOfGroup(group, username, request);

                FormatUpdateMembersOfGroup(ref group, ref username, request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{group}/-/members/{username}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{group}/-/members/{username}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bgroup%7D", Uri.EscapeDataString(group.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateMembersOfGroupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateMembersOfGroupApiResponse>();

                        UpdateMembersOfGroupApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{group}/-/members/{username}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateMembersOfGroupDefaultImplementation(apiResponseLocalVar, group, username, request);

                        Events.ExecuteOnUpdateMembersOfGroup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateMembersOfGroupDefaultImplementation(e, "/{group}/-/members/{username}", uriBuilderLocalVar.Path, group, username, request);
                Events.ExecuteOnErrorUpdateMembersOfGroup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateMembersOfGroupApiResponse"/>
        /// </summary>
        public partial class UpdateMembersOfGroupApiResponse : CNBOpenApi.Client.ApiResponse, IUpdateMembersOfGroupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateMembersOfGroupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateMembersOfGroupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateMembersOfGroupApiResponse(ILogger<UpdateMembersOfGroupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateMembersOfRepo(ref string repo, ref string username, DtoUpdateMembersRequest request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateUpdateMembersOfRepo(string repo, string username, DtoUpdateMembersRequest request)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (username == null)
                throw new ArgumentNullException(nameof(username));

            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        private void AfterUpdateMembersOfRepoDefaultImplementation(IUpdateMembersOfRepoApiResponse apiResponseLocalVar, string repo, string username, DtoUpdateMembersRequest request)
        {
            bool suppressDefaultLog = false;
            AfterUpdateMembersOfRepo(ref suppressDefaultLog, apiResponseLocalVar, repo, username, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        partial void AfterUpdateMembersOfRepo(ref bool suppressDefaultLog, IUpdateMembersOfRepoApiResponse apiResponseLocalVar, string repo, string username, DtoUpdateMembersRequest request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        private void OnErrorUpdateMembersOfRepoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string username, DtoUpdateMembersRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateMembersOfRepo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, username, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        /// <param name="request"></param>
        partial void OnErrorUpdateMembersOfRepo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string username, DtoUpdateMembersRequest request);

        /// <summary>
        /// 更新指定组织或仓库内的直接成员权限信息 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateMembersOfRepoApiResponse"/>&gt;</returns>
        public async Task<IUpdateMembersOfRepoApiResponse?> UpdateMembersOfRepoOrDefaultAsync(string repo, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateMembersOfRepoAsync(repo, username, request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 更新指定组织或仓库内的直接成员权限信息 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="request">member information</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateMembersOfRepoApiResponse"/>&gt;</returns>
        public async Task<IUpdateMembersOfRepoApiResponse> UpdateMembersOfRepoAsync(string repo, string username, DtoUpdateMembersRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateMembersOfRepo(repo, username, request);

                FormatUpdateMembersOfRepo(ref repo, ref username, request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/members/{username}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/members/{username}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateMembersOfRepoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateMembersOfRepoApiResponse>();

                        UpdateMembersOfRepoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/members/{username}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateMembersOfRepoDefaultImplementation(apiResponseLocalVar, repo, username, request);

                        Events.ExecuteOnUpdateMembersOfRepo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateMembersOfRepoDefaultImplementation(e, "/{repo}/-/members/{username}", uriBuilderLocalVar.Path, repo, username, request);
                Events.ExecuteOnErrorUpdateMembersOfRepo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateMembersOfRepoApiResponse"/>
        /// </summary>
        public partial class UpdateMembersOfRepoApiResponse : CNBOpenApi.Client.ApiResponse, IUpdateMembersOfRepoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateMembersOfRepoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateMembersOfRepoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateMembersOfRepoApiResponse(ILogger<UpdateMembersOfRepoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateOutsideCollaborators(ref string repo, ref string username, ref string role);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        /// <returns></returns>
        private void ValidateUpdateOutsideCollaborators(string repo, string username, string role)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (username == null)
                throw new ArgumentNullException(nameof(username));

            if (role == null)
                throw new ArgumentNullException(nameof(role));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        private void AfterUpdateOutsideCollaboratorsDefaultImplementation(IUpdateOutsideCollaboratorsApiResponse apiResponseLocalVar, string repo, string username, string role)
        {
            bool suppressDefaultLog = false;
            AfterUpdateOutsideCollaborators(ref suppressDefaultLog, apiResponseLocalVar, repo, username, role);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        partial void AfterUpdateOutsideCollaborators(ref bool suppressDefaultLog, IUpdateOutsideCollaboratorsApiResponse apiResponseLocalVar, string repo, string username, string role);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        private void OnErrorUpdateOutsideCollaboratorsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string username, string role)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateOutsideCollaborators(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, username, role);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        partial void OnErrorUpdateOutsideCollaborators(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string username, string role);

        /// <summary>
        /// 更新指定仓库的外部贡献者权限信息 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="role">用户权限</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOutsideCollaboratorsApiResponse"/>&gt;</returns>
        public async Task<IUpdateOutsideCollaboratorsApiResponse?> UpdateOutsideCollaboratorsOrDefaultAsync(string repo, string username, string role, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateOutsideCollaboratorsAsync(repo, username, role, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 更新指定仓库的外部贡献者权限信息 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="username">username</param>
        /// <param name="role">用户权限</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOutsideCollaboratorsApiResponse"/>&gt;</returns>
        public async Task<IUpdateOutsideCollaboratorsApiResponse> UpdateOutsideCollaboratorsAsync(string repo, string username, string role, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateOutsideCollaborators(repo, username, role);

                FormatUpdateOutsideCollaborators(ref repo, ref username, ref role);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/outside-collaborators/{username}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/outside-collaborators/{username}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["role"] = ClientUtils.ParameterToString(role);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateOutsideCollaboratorsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateOutsideCollaboratorsApiResponse>();

                        UpdateOutsideCollaboratorsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/outside-collaborators/{username}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateOutsideCollaboratorsDefaultImplementation(apiResponseLocalVar, repo, username, role);

                        Events.ExecuteOnUpdateOutsideCollaborators(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateOutsideCollaboratorsDefaultImplementation(e, "/{repo}/-/outside-collaborators/{username}", uriBuilderLocalVar.Path, repo, username, role);
                Events.ExecuteOnErrorUpdateOutsideCollaborators(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateOutsideCollaboratorsApiResponse"/>
        /// </summary>
        public partial class UpdateOutsideCollaboratorsApiResponse : CNBOpenApi.Client.ApiResponse, IUpdateOutsideCollaboratorsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateOutsideCollaboratorsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateOutsideCollaboratorsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateOutsideCollaboratorsApiResponse(ILogger<UpdateOutsideCollaboratorsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
