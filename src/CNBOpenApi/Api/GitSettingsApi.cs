// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CNBOpenApi.Client;
using CNBOpenApi.Model;
using System.Diagnostics.CodeAnalysis;

namespace CNBOpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IGitSettingsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        GitSettingsApiEvents Events { get; }

        /// <summary>
        /// 删除仓库保护分支规则(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="id">Branch Protection id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteBranchProtectionApiResponse"/>&gt;</returns>
        Task<IDeleteBranchProtectionApiResponse> DeleteBranchProtectionAsync(string repo, string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除仓库保护分支规则(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="id">Branch Protection id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteBranchProtectionApiResponse"/>?&gt;</returns>
        Task<IDeleteBranchProtectionApiResponse?> DeleteBranchProtectionOrDefaultAsync(string repo, string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询仓库保护分支规则(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="id">branch protection id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBranchProtectionApiResponse"/>&gt;</returns>
        Task<IGetBranchProtectionApiResponse> GetBranchProtectionAsync(string repo, string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询仓库保护分支规则(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="id">branch protection id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBranchProtectionApiResponse"/>?&gt;</returns>
        Task<IGetBranchProtectionApiResponse?> GetBranchProtectionOrDefaultAsync(string repo, string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询仓库云原生构建设置(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineSettingsApiResponse"/>&gt;</returns>
        Task<IGetPipelineSettingsApiResponse> GetPipelineSettingsAsync(string repo, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询仓库云原生构建设置(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineSettingsApiResponse"/>?&gt;</returns>
        Task<IGetPipelineSettingsApiResponse?> GetPipelineSettingsOrDefaultAsync(string repo, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询仓库合并请求设置(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPullRequestSettingsApiResponse"/>&gt;</returns>
        Task<IGetPullRequestSettingsApiResponse> GetPullRequestSettingsAsync(string repo, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询仓库合并请求设置(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPullRequestSettingsApiResponse"/>?&gt;</returns>
        Task<IGetPullRequestSettingsApiResponse?> GetPullRequestSettingsOrDefaultAsync(string repo, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询仓库推送设置(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPushLimitSettingsApiResponse"/>&gt;</returns>
        Task<IGetPushLimitSettingsApiResponse> GetPushLimitSettingsAsync(string repo, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询仓库推送设置(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPushLimitSettingsApiResponse"/>?&gt;</returns>
        Task<IGetPushLimitSettingsApiResponse?> GetPushLimitSettingsOrDefaultAsync(string repo, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询仓库保护分支规则列表(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListBranchProtectionsApiResponse"/>&gt;</returns>
        Task<IListBranchProtectionsApiResponse> ListBranchProtectionsAsync(string repo, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询仓库保护分支规则列表(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListBranchProtectionsApiResponse"/>?&gt;</returns>
        Task<IListBranchProtectionsApiResponse?> ListBranchProtectionsOrDefaultAsync(string repo, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新仓库保护分支规则(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="id">Branch Protection id</param>
        /// <param name="branchProtectionForm">Branch Protection Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPatchBranchProtectionApiResponse"/>&gt;</returns>
        Task<IPatchBranchProtectionApiResponse> PatchBranchProtectionAsync(string repo, string id, ApiBranchProtection branchProtectionForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新仓库保护分支规则(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="id">Branch Protection id</param>
        /// <param name="branchProtectionForm">Branch Protection Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPatchBranchProtectionApiResponse"/>?&gt;</returns>
        Task<IPatchBranchProtectionApiResponse?> PatchBranchProtectionOrDefaultAsync(string repo, string id, ApiBranchProtection branchProtectionForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 新增仓库保护分支规则(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="branchProtectionForm">Branch Protection Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostBranchProtectionApiResponse"/>&gt;</returns>
        Task<IPostBranchProtectionApiResponse> PostBranchProtectionAsync(string repo, ApiBranchProtection branchProtectionForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 新增仓库保护分支规则(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="branchProtectionForm">Branch Protection Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostBranchProtectionApiResponse"/>?&gt;</returns>
        Task<IPostBranchProtectionApiResponse?> PostBranchProtectionOrDefaultAsync(string repo, ApiBranchProtection branchProtectionForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新仓库云原生构建设置(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="pipelineForm">Cloud Native Build Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPipelineSettingsApiResponse"/>&gt;</returns>
        Task<IPutPipelineSettingsApiResponse> PutPipelineSettingsAsync(string repo, WebPipelineSettings pipelineForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新仓库云原生构建设置(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="pipelineForm">Cloud Native Build Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPipelineSettingsApiResponse"/>?&gt;</returns>
        Task<IPutPipelineSettingsApiResponse?> PutPipelineSettingsOrDefaultAsync(string repo, WebPipelineSettings pipelineForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 设置仓库推送设置(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="pullRequestForm">Pull Request Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPullRequestSettingsApiResponse"/>&gt;</returns>
        Task<IPutPullRequestSettingsApiResponse> PutPullRequestSettingsAsync(string repo, ApiPullRequestSettings pullRequestForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 设置仓库推送设置(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="pullRequestForm">Pull Request Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPullRequestSettingsApiResponse"/>?&gt;</returns>
        Task<IPutPullRequestSettingsApiResponse?> PutPullRequestSettingsOrDefaultAsync(string repo, ApiPullRequestSettings pullRequestForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 设置仓库推送设置(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="pushLimitForm">Push Limit Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPushLimitSettingsApiResponse"/>&gt;</returns>
        Task<IPutPushLimitSettingsApiResponse> PutPushLimitSettingsAsync(string repo, ApiPushLimitSettings pushLimitForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 设置仓库推送设置(openapi)
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <param name="repo">repo</param>
        /// <param name="pushLimitForm">Push Limit Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPushLimitSettingsApiResponse"/>?&gt;</returns>
        Task<IPutPushLimitSettingsApiResponse?> PutPushLimitSettingsOrDefaultAsync(string repo, ApiPushLimitSettings pushLimitForm, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteBranchProtectionApiResponse"/>
    /// </summary>
    public interface IDeleteBranchProtectionApiResponse : CNBOpenApi.Client.IApiResponse, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetBranchProtectionApiResponse"/>
    /// </summary>
    public interface IGetBranchProtectionApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.ApiBranchProtection?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelineSettingsApiResponse"/>
    /// </summary>
    public interface IGetPipelineSettingsApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.ApiPipelineSettings?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetPullRequestSettingsApiResponse"/>
    /// </summary>
    public interface IGetPullRequestSettingsApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.ApiPullRequestSettings?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetPushLimitSettingsApiResponse"/>
    /// </summary>
    public interface IGetPushLimitSettingsApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.ApiPushLimitSettings?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IListBranchProtectionsApiResponse"/>
    /// </summary>
    public interface IListBranchProtectionsApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<ApiBranchProtection>?>, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPatchBranchProtectionApiResponse"/>
    /// </summary>
    public interface IPatchBranchProtectionApiResponse : CNBOpenApi.Client.IApiResponse, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPostBranchProtectionApiResponse"/>
    /// </summary>
    public interface IPostBranchProtectionApiResponse : CNBOpenApi.Client.IApiResponse, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutPipelineSettingsApiResponse"/>
    /// </summary>
    public interface IPutPipelineSettingsApiResponse : CNBOpenApi.Client.IApiResponse, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutPullRequestSettingsApiResponse"/>
    /// </summary>
    public interface IPutPullRequestSettingsApiResponse : CNBOpenApi.Client.IApiResponse, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutPushLimitSettingsApiResponse"/>
    /// </summary>
    public interface IPutPushLimitSettingsApiResponse : CNBOpenApi.Client.IApiResponse, INotFound<CNBOpenApi.Model.DieWebError?>, IInternalServerError<CNBOpenApi.Model.DieWebError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class GitSettingsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteBranchProtection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteBranchProtection;

        internal void ExecuteOnDeleteBranchProtection(GitSettingsApi.DeleteBranchProtectionApiResponse apiResponse)
        {
            OnDeleteBranchProtection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteBranchProtection(Exception exception)
        {
            OnErrorDeleteBranchProtection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetBranchProtection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetBranchProtection;

        internal void ExecuteOnGetBranchProtection(GitSettingsApi.GetBranchProtectionApiResponse apiResponse)
        {
            OnGetBranchProtection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetBranchProtection(Exception exception)
        {
            OnErrorGetBranchProtection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelineSettings;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelineSettings;

        internal void ExecuteOnGetPipelineSettings(GitSettingsApi.GetPipelineSettingsApiResponse apiResponse)
        {
            OnGetPipelineSettings?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelineSettings(Exception exception)
        {
            OnErrorGetPipelineSettings?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPullRequestSettings;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPullRequestSettings;

        internal void ExecuteOnGetPullRequestSettings(GitSettingsApi.GetPullRequestSettingsApiResponse apiResponse)
        {
            OnGetPullRequestSettings?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPullRequestSettings(Exception exception)
        {
            OnErrorGetPullRequestSettings?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPushLimitSettings;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPushLimitSettings;

        internal void ExecuteOnGetPushLimitSettings(GitSettingsApi.GetPushLimitSettingsApiResponse apiResponse)
        {
            OnGetPushLimitSettings?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPushLimitSettings(Exception exception)
        {
            OnErrorGetPushLimitSettings?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListBranchProtections;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListBranchProtections;

        internal void ExecuteOnListBranchProtections(GitSettingsApi.ListBranchProtectionsApiResponse apiResponse)
        {
            OnListBranchProtections?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListBranchProtections(Exception exception)
        {
            OnErrorListBranchProtections?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPatchBranchProtection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPatchBranchProtection;

        internal void ExecuteOnPatchBranchProtection(GitSettingsApi.PatchBranchProtectionApiResponse apiResponse)
        {
            OnPatchBranchProtection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPatchBranchProtection(Exception exception)
        {
            OnErrorPatchBranchProtection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostBranchProtection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostBranchProtection;

        internal void ExecuteOnPostBranchProtection(GitSettingsApi.PostBranchProtectionApiResponse apiResponse)
        {
            OnPostBranchProtection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostBranchProtection(Exception exception)
        {
            OnErrorPostBranchProtection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutPipelineSettings;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutPipelineSettings;

        internal void ExecuteOnPutPipelineSettings(GitSettingsApi.PutPipelineSettingsApiResponse apiResponse)
        {
            OnPutPipelineSettings?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutPipelineSettings(Exception exception)
        {
            OnErrorPutPipelineSettings?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutPullRequestSettings;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutPullRequestSettings;

        internal void ExecuteOnPutPullRequestSettings(GitSettingsApi.PutPullRequestSettingsApiResponse apiResponse)
        {
            OnPutPullRequestSettings?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutPullRequestSettings(Exception exception)
        {
            OnErrorPutPullRequestSettings?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutPushLimitSettings;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutPushLimitSettings;

        internal void ExecuteOnPutPushLimitSettings(GitSettingsApi.PutPushLimitSettingsApiResponse apiResponse)
        {
            OnPutPushLimitSettings?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutPushLimitSettings(Exception exception)
        {
            OnErrorPutPushLimitSettings?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class GitSettingsApi : IGitSettingsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<GitSettingsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public GitSettingsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="GitSettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GitSettingsApi(ILogger<GitSettingsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, GitSettingsApiEvents gitSettingsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<GitSettingsApi>();
            HttpClient = httpClient;
            Events = gitSettingsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatDeleteBranchProtection(ref string repo, ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateDeleteBranchProtection(string repo, string id)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="id"></param>
        private void AfterDeleteBranchProtectionDefaultImplementation(IDeleteBranchProtectionApiResponse apiResponseLocalVar, string repo, string id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteBranchProtection(ref suppressDefaultLog, apiResponseLocalVar, repo, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="id"></param>
        partial void AfterDeleteBranchProtection(ref bool suppressDefaultLog, IDeleteBranchProtectionApiResponse apiResponseLocalVar, string repo, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteBranchProtectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteBranchProtection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteBranchProtection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string id);

        /// <summary>
        /// 删除仓库保护分支规则(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="id">Branch Protection id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteBranchProtectionApiResponse"/>&gt;</returns>
        public async Task<IDeleteBranchProtectionApiResponse?> DeleteBranchProtectionOrDefaultAsync(string repo, string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteBranchProtectionAsync(repo, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 删除仓库保护分支规则(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="id">Branch Protection id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteBranchProtectionApiResponse"/>&gt;</returns>
        public async Task<IDeleteBranchProtectionApiResponse> DeleteBranchProtectionAsync(string repo, string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteBranchProtection(repo, id);

                FormatDeleteBranchProtection(ref repo, ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/settings/branch-protections/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/settings/branch-protections/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteBranchProtectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteBranchProtectionApiResponse>();

                        DeleteBranchProtectionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/settings/branch-protections/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteBranchProtectionDefaultImplementation(apiResponseLocalVar, repo, id);

                        Events.ExecuteOnDeleteBranchProtection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteBranchProtectionDefaultImplementation(e, "/{repo}/-/settings/branch-protections/{id}", uriBuilderLocalVar.Path, repo, id);
                Events.ExecuteOnErrorDeleteBranchProtection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteBranchProtectionApiResponse"/>
        /// </summary>
        public partial class DeleteBranchProtectionApiResponse : CNBOpenApi.Client.ApiResponse, IDeleteBranchProtectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteBranchProtectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteBranchProtectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteBranchProtectionApiResponse(ILogger<DeleteBranchProtectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetBranchProtection(ref string repo, ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetBranchProtection(string repo, string id)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="id"></param>
        private void AfterGetBranchProtectionDefaultImplementation(IGetBranchProtectionApiResponse apiResponseLocalVar, string repo, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetBranchProtection(ref suppressDefaultLog, apiResponseLocalVar, repo, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="id"></param>
        partial void AfterGetBranchProtection(ref bool suppressDefaultLog, IGetBranchProtectionApiResponse apiResponseLocalVar, string repo, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="id"></param>
        private void OnErrorGetBranchProtectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetBranchProtection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="id"></param>
        partial void OnErrorGetBranchProtection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string id);

        /// <summary>
        /// 查询仓库保护分支规则(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="id">branch protection id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBranchProtectionApiResponse"/>&gt;</returns>
        public async Task<IGetBranchProtectionApiResponse?> GetBranchProtectionOrDefaultAsync(string repo, string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetBranchProtectionAsync(repo, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 查询仓库保护分支规则(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="id">branch protection id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBranchProtectionApiResponse"/>&gt;</returns>
        public async Task<IGetBranchProtectionApiResponse> GetBranchProtectionAsync(string repo, string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetBranchProtection(repo, id);

                FormatGetBranchProtection(ref repo, ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/settings/branch-protections/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/settings/branch-protections/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetBranchProtectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetBranchProtectionApiResponse>();

                        GetBranchProtectionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/settings/branch-protections/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetBranchProtectionDefaultImplementation(apiResponseLocalVar, repo, id);

                        Events.ExecuteOnGetBranchProtection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetBranchProtectionDefaultImplementation(e, "/{repo}/-/settings/branch-protections/{id}", uriBuilderLocalVar.Path, repo, id);
                Events.ExecuteOnErrorGetBranchProtection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetBranchProtectionApiResponse"/>
        /// </summary>
        public partial class GetBranchProtectionApiResponse : CNBOpenApi.Client.ApiResponse, IGetBranchProtectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetBranchProtectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetBranchProtectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetBranchProtectionApiResponse(ILogger<GetBranchProtectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.ApiBranchProtection? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.ApiBranchProtection>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.ApiBranchProtection? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipelineSettings(ref string repo);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <returns></returns>
        private void ValidateGetPipelineSettings(string repo)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        private void AfterGetPipelineSettingsDefaultImplementation(IGetPipelineSettingsApiResponse apiResponseLocalVar, string repo)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelineSettings(ref suppressDefaultLog, apiResponseLocalVar, repo);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        partial void AfterGetPipelineSettings(ref bool suppressDefaultLog, IGetPipelineSettingsApiResponse apiResponseLocalVar, string repo);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        private void OnErrorGetPipelineSettingsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelineSettings(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        partial void OnErrorGetPipelineSettings(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo);

        /// <summary>
        /// 查询仓库云原生构建设置(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineSettingsApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineSettingsApiResponse?> GetPipelineSettingsOrDefaultAsync(string repo, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelineSettingsAsync(repo, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 查询仓库云原生构建设置(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineSettingsApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineSettingsApiResponse> GetPipelineSettingsAsync(string repo, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPipelineSettings(repo);

                FormatGetPipelineSettings(ref repo);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/settings/cloud-native-build"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/settings/cloud-native-build");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelineSettingsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelineSettingsApiResponse>();

                        GetPipelineSettingsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/settings/cloud-native-build", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelineSettingsDefaultImplementation(apiResponseLocalVar, repo);

                        Events.ExecuteOnGetPipelineSettings(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelineSettingsDefaultImplementation(e, "/{repo}/-/settings/cloud-native-build", uriBuilderLocalVar.Path, repo);
                Events.ExecuteOnErrorGetPipelineSettings(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelineSettingsApiResponse"/>
        /// </summary>
        public partial class GetPipelineSettingsApiResponse : CNBOpenApi.Client.ApiResponse, IGetPipelineSettingsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelineSettingsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelineSettingsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelineSettingsApiResponse(ILogger<GetPipelineSettingsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.ApiPipelineSettings? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.ApiPipelineSettings>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.ApiPipelineSettings? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPullRequestSettings(ref string repo);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <returns></returns>
        private void ValidateGetPullRequestSettings(string repo)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        private void AfterGetPullRequestSettingsDefaultImplementation(IGetPullRequestSettingsApiResponse apiResponseLocalVar, string repo)
        {
            bool suppressDefaultLog = false;
            AfterGetPullRequestSettings(ref suppressDefaultLog, apiResponseLocalVar, repo);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        partial void AfterGetPullRequestSettings(ref bool suppressDefaultLog, IGetPullRequestSettingsApiResponse apiResponseLocalVar, string repo);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        private void OnErrorGetPullRequestSettingsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPullRequestSettings(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        partial void OnErrorGetPullRequestSettings(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo);

        /// <summary>
        /// 查询仓库合并请求设置(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPullRequestSettingsApiResponse"/>&gt;</returns>
        public async Task<IGetPullRequestSettingsApiResponse?> GetPullRequestSettingsOrDefaultAsync(string repo, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPullRequestSettingsAsync(repo, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 查询仓库合并请求设置(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPullRequestSettingsApiResponse"/>&gt;</returns>
        public async Task<IGetPullRequestSettingsApiResponse> GetPullRequestSettingsAsync(string repo, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPullRequestSettings(repo);

                FormatGetPullRequestSettings(ref repo);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/settings/pull-request"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/settings/pull-request");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPullRequestSettingsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPullRequestSettingsApiResponse>();

                        GetPullRequestSettingsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/settings/pull-request", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPullRequestSettingsDefaultImplementation(apiResponseLocalVar, repo);

                        Events.ExecuteOnGetPullRequestSettings(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPullRequestSettingsDefaultImplementation(e, "/{repo}/-/settings/pull-request", uriBuilderLocalVar.Path, repo);
                Events.ExecuteOnErrorGetPullRequestSettings(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPullRequestSettingsApiResponse"/>
        /// </summary>
        public partial class GetPullRequestSettingsApiResponse : CNBOpenApi.Client.ApiResponse, IGetPullRequestSettingsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPullRequestSettingsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPullRequestSettingsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPullRequestSettingsApiResponse(ILogger<GetPullRequestSettingsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.ApiPullRequestSettings? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.ApiPullRequestSettings>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.ApiPullRequestSettings? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPushLimitSettings(ref string repo);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <returns></returns>
        private void ValidateGetPushLimitSettings(string repo)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        private void AfterGetPushLimitSettingsDefaultImplementation(IGetPushLimitSettingsApiResponse apiResponseLocalVar, string repo)
        {
            bool suppressDefaultLog = false;
            AfterGetPushLimitSettings(ref suppressDefaultLog, apiResponseLocalVar, repo);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        partial void AfterGetPushLimitSettings(ref bool suppressDefaultLog, IGetPushLimitSettingsApiResponse apiResponseLocalVar, string repo);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        private void OnErrorGetPushLimitSettingsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPushLimitSettings(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        partial void OnErrorGetPushLimitSettings(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo);

        /// <summary>
        /// 查询仓库推送设置(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPushLimitSettingsApiResponse"/>&gt;</returns>
        public async Task<IGetPushLimitSettingsApiResponse?> GetPushLimitSettingsOrDefaultAsync(string repo, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPushLimitSettingsAsync(repo, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 查询仓库推送设置(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPushLimitSettingsApiResponse"/>&gt;</returns>
        public async Task<IGetPushLimitSettingsApiResponse> GetPushLimitSettingsAsync(string repo, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPushLimitSettings(repo);

                FormatGetPushLimitSettings(ref repo);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/settings/push-limit"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/settings/push-limit");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPushLimitSettingsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPushLimitSettingsApiResponse>();

                        GetPushLimitSettingsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/settings/push-limit", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPushLimitSettingsDefaultImplementation(apiResponseLocalVar, repo);

                        Events.ExecuteOnGetPushLimitSettings(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPushLimitSettingsDefaultImplementation(e, "/{repo}/-/settings/push-limit", uriBuilderLocalVar.Path, repo);
                Events.ExecuteOnErrorGetPushLimitSettings(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPushLimitSettingsApiResponse"/>
        /// </summary>
        public partial class GetPushLimitSettingsApiResponse : CNBOpenApi.Client.ApiResponse, IGetPushLimitSettingsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPushLimitSettingsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPushLimitSettingsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPushLimitSettingsApiResponse(ILogger<GetPushLimitSettingsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.ApiPushLimitSettings? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.ApiPushLimitSettings>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.ApiPushLimitSettings? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListBranchProtections(ref string repo);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <returns></returns>
        private void ValidateListBranchProtections(string repo)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        private void AfterListBranchProtectionsDefaultImplementation(IListBranchProtectionsApiResponse apiResponseLocalVar, string repo)
        {
            bool suppressDefaultLog = false;
            AfterListBranchProtections(ref suppressDefaultLog, apiResponseLocalVar, repo);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        partial void AfterListBranchProtections(ref bool suppressDefaultLog, IListBranchProtectionsApiResponse apiResponseLocalVar, string repo);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        private void OnErrorListBranchProtectionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListBranchProtections(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        partial void OnErrorListBranchProtections(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo);

        /// <summary>
        /// 查询仓库保护分支规则列表(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListBranchProtectionsApiResponse"/>&gt;</returns>
        public async Task<IListBranchProtectionsApiResponse?> ListBranchProtectionsOrDefaultAsync(string repo, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListBranchProtectionsAsync(repo, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 查询仓库保护分支规则列表(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListBranchProtectionsApiResponse"/>&gt;</returns>
        public async Task<IListBranchProtectionsApiResponse> ListBranchProtectionsAsync(string repo, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListBranchProtections(repo);

                FormatListBranchProtections(ref repo);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/settings/branch-protections"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/settings/branch-protections");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListBranchProtectionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListBranchProtectionsApiResponse>();

                        ListBranchProtectionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/settings/branch-protections", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListBranchProtectionsDefaultImplementation(apiResponseLocalVar, repo);

                        Events.ExecuteOnListBranchProtections(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListBranchProtectionsDefaultImplementation(e, "/{repo}/-/settings/branch-protections", uriBuilderLocalVar.Path, repo);
                Events.ExecuteOnErrorListBranchProtections(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListBranchProtectionsApiResponse"/>
        /// </summary>
        public partial class ListBranchProtectionsApiResponse : CNBOpenApi.Client.ApiResponse, IListBranchProtectionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListBranchProtectionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListBranchProtectionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListBranchProtectionsApiResponse(ILogger<ListBranchProtectionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ApiBranchProtection>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ApiBranchProtection>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ApiBranchProtection>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPatchBranchProtection(ref string repo, ref string id, ApiBranchProtection branchProtectionForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="id"></param>
        /// <param name="branchProtectionForm"></param>
        /// <returns></returns>
        private void ValidatePatchBranchProtection(string repo, string id, ApiBranchProtection branchProtectionForm)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (branchProtectionForm == null)
                throw new ArgumentNullException(nameof(branchProtectionForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="id"></param>
        /// <param name="branchProtectionForm"></param>
        private void AfterPatchBranchProtectionDefaultImplementation(IPatchBranchProtectionApiResponse apiResponseLocalVar, string repo, string id, ApiBranchProtection branchProtectionForm)
        {
            bool suppressDefaultLog = false;
            AfterPatchBranchProtection(ref suppressDefaultLog, apiResponseLocalVar, repo, id, branchProtectionForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="id"></param>
        /// <param name="branchProtectionForm"></param>
        partial void AfterPatchBranchProtection(ref bool suppressDefaultLog, IPatchBranchProtectionApiResponse apiResponseLocalVar, string repo, string id, ApiBranchProtection branchProtectionForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="id"></param>
        /// <param name="branchProtectionForm"></param>
        private void OnErrorPatchBranchProtectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string id, ApiBranchProtection branchProtectionForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPatchBranchProtection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, id, branchProtectionForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="id"></param>
        /// <param name="branchProtectionForm"></param>
        partial void OnErrorPatchBranchProtection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, string id, ApiBranchProtection branchProtectionForm);

        /// <summary>
        /// 更新仓库保护分支规则(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="id">Branch Protection id</param>
        /// <param name="branchProtectionForm">Branch Protection Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPatchBranchProtectionApiResponse"/>&gt;</returns>
        public async Task<IPatchBranchProtectionApiResponse?> PatchBranchProtectionOrDefaultAsync(string repo, string id, ApiBranchProtection branchProtectionForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PatchBranchProtectionAsync(repo, id, branchProtectionForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 更新仓库保护分支规则(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="id">Branch Protection id</param>
        /// <param name="branchProtectionForm">Branch Protection Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPatchBranchProtectionApiResponse"/>&gt;</returns>
        public async Task<IPatchBranchProtectionApiResponse> PatchBranchProtectionAsync(string repo, string id, ApiBranchProtection branchProtectionForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePatchBranchProtection(repo, id, branchProtectionForm);

                FormatPatchBranchProtection(ref repo, ref id, branchProtectionForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/settings/branch-protections/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/settings/branch-protections/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (branchProtectionForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(branchProtectionForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PatchBranchProtectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PatchBranchProtectionApiResponse>();

                        PatchBranchProtectionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/settings/branch-protections/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPatchBranchProtectionDefaultImplementation(apiResponseLocalVar, repo, id, branchProtectionForm);

                        Events.ExecuteOnPatchBranchProtection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPatchBranchProtectionDefaultImplementation(e, "/{repo}/-/settings/branch-protections/{id}", uriBuilderLocalVar.Path, repo, id, branchProtectionForm);
                Events.ExecuteOnErrorPatchBranchProtection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PatchBranchProtectionApiResponse"/>
        /// </summary>
        public partial class PatchBranchProtectionApiResponse : CNBOpenApi.Client.ApiResponse, IPatchBranchProtectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PatchBranchProtectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PatchBranchProtectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PatchBranchProtectionApiResponse(ILogger<PatchBranchProtectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostBranchProtection(ref string repo, ApiBranchProtection branchProtectionForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="branchProtectionForm"></param>
        /// <returns></returns>
        private void ValidatePostBranchProtection(string repo, ApiBranchProtection branchProtectionForm)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (branchProtectionForm == null)
                throw new ArgumentNullException(nameof(branchProtectionForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="branchProtectionForm"></param>
        private void AfterPostBranchProtectionDefaultImplementation(IPostBranchProtectionApiResponse apiResponseLocalVar, string repo, ApiBranchProtection branchProtectionForm)
        {
            bool suppressDefaultLog = false;
            AfterPostBranchProtection(ref suppressDefaultLog, apiResponseLocalVar, repo, branchProtectionForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="branchProtectionForm"></param>
        partial void AfterPostBranchProtection(ref bool suppressDefaultLog, IPostBranchProtectionApiResponse apiResponseLocalVar, string repo, ApiBranchProtection branchProtectionForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="branchProtectionForm"></param>
        private void OnErrorPostBranchProtectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, ApiBranchProtection branchProtectionForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostBranchProtection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, branchProtectionForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="branchProtectionForm"></param>
        partial void OnErrorPostBranchProtection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, ApiBranchProtection branchProtectionForm);

        /// <summary>
        /// 新增仓库保护分支规则(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="branchProtectionForm">Branch Protection Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostBranchProtectionApiResponse"/>&gt;</returns>
        public async Task<IPostBranchProtectionApiResponse?> PostBranchProtectionOrDefaultAsync(string repo, ApiBranchProtection branchProtectionForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostBranchProtectionAsync(repo, branchProtectionForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 新增仓库保护分支规则(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="branchProtectionForm">Branch Protection Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostBranchProtectionApiResponse"/>&gt;</returns>
        public async Task<IPostBranchProtectionApiResponse> PostBranchProtectionAsync(string repo, ApiBranchProtection branchProtectionForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostBranchProtection(repo, branchProtectionForm);

                FormatPostBranchProtection(ref repo, branchProtectionForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/settings/branch-protections"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/settings/branch-protections");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    httpRequestMessageLocalVar.Content = (branchProtectionForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(branchProtectionForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostBranchProtectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostBranchProtectionApiResponse>();

                        PostBranchProtectionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/settings/branch-protections", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostBranchProtectionDefaultImplementation(apiResponseLocalVar, repo, branchProtectionForm);

                        Events.ExecuteOnPostBranchProtection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostBranchProtectionDefaultImplementation(e, "/{repo}/-/settings/branch-protections", uriBuilderLocalVar.Path, repo, branchProtectionForm);
                Events.ExecuteOnErrorPostBranchProtection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostBranchProtectionApiResponse"/>
        /// </summary>
        public partial class PostBranchProtectionApiResponse : CNBOpenApi.Client.ApiResponse, IPostBranchProtectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostBranchProtectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostBranchProtectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostBranchProtectionApiResponse(ILogger<PostBranchProtectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutPipelineSettings(ref string repo, WebPipelineSettings pipelineForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="pipelineForm"></param>
        /// <returns></returns>
        private void ValidatePutPipelineSettings(string repo, WebPipelineSettings pipelineForm)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (pipelineForm == null)
                throw new ArgumentNullException(nameof(pipelineForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="pipelineForm"></param>
        private void AfterPutPipelineSettingsDefaultImplementation(IPutPipelineSettingsApiResponse apiResponseLocalVar, string repo, WebPipelineSettings pipelineForm)
        {
            bool suppressDefaultLog = false;
            AfterPutPipelineSettings(ref suppressDefaultLog, apiResponseLocalVar, repo, pipelineForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="pipelineForm"></param>
        partial void AfterPutPipelineSettings(ref bool suppressDefaultLog, IPutPipelineSettingsApiResponse apiResponseLocalVar, string repo, WebPipelineSettings pipelineForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="pipelineForm"></param>
        private void OnErrorPutPipelineSettingsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, WebPipelineSettings pipelineForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutPipelineSettings(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, pipelineForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="pipelineForm"></param>
        partial void OnErrorPutPipelineSettings(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, WebPipelineSettings pipelineForm);

        /// <summary>
        /// 更新仓库云原生构建设置(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="pipelineForm">Cloud Native Build Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPipelineSettingsApiResponse"/>&gt;</returns>
        public async Task<IPutPipelineSettingsApiResponse?> PutPipelineSettingsOrDefaultAsync(string repo, WebPipelineSettings pipelineForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutPipelineSettingsAsync(repo, pipelineForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 更新仓库云原生构建设置(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="pipelineForm">Cloud Native Build Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPipelineSettingsApiResponse"/>&gt;</returns>
        public async Task<IPutPipelineSettingsApiResponse> PutPipelineSettingsAsync(string repo, WebPipelineSettings pipelineForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutPipelineSettings(repo, pipelineForm);

                FormatPutPipelineSettings(ref repo, pipelineForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/settings/cloud-native-build"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/settings/cloud-native-build");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    httpRequestMessageLocalVar.Content = (pipelineForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(pipelineForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutPipelineSettingsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutPipelineSettingsApiResponse>();

                        PutPipelineSettingsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/settings/cloud-native-build", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutPipelineSettingsDefaultImplementation(apiResponseLocalVar, repo, pipelineForm);

                        Events.ExecuteOnPutPipelineSettings(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutPipelineSettingsDefaultImplementation(e, "/{repo}/-/settings/cloud-native-build", uriBuilderLocalVar.Path, repo, pipelineForm);
                Events.ExecuteOnErrorPutPipelineSettings(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutPipelineSettingsApiResponse"/>
        /// </summary>
        public partial class PutPipelineSettingsApiResponse : CNBOpenApi.Client.ApiResponse, IPutPipelineSettingsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutPipelineSettingsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutPipelineSettingsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutPipelineSettingsApiResponse(ILogger<PutPipelineSettingsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutPullRequestSettings(ref string repo, ApiPullRequestSettings pullRequestForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="pullRequestForm"></param>
        /// <returns></returns>
        private void ValidatePutPullRequestSettings(string repo, ApiPullRequestSettings pullRequestForm)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (pullRequestForm == null)
                throw new ArgumentNullException(nameof(pullRequestForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="pullRequestForm"></param>
        private void AfterPutPullRequestSettingsDefaultImplementation(IPutPullRequestSettingsApiResponse apiResponseLocalVar, string repo, ApiPullRequestSettings pullRequestForm)
        {
            bool suppressDefaultLog = false;
            AfterPutPullRequestSettings(ref suppressDefaultLog, apiResponseLocalVar, repo, pullRequestForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="pullRequestForm"></param>
        partial void AfterPutPullRequestSettings(ref bool suppressDefaultLog, IPutPullRequestSettingsApiResponse apiResponseLocalVar, string repo, ApiPullRequestSettings pullRequestForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="pullRequestForm"></param>
        private void OnErrorPutPullRequestSettingsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, ApiPullRequestSettings pullRequestForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutPullRequestSettings(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, pullRequestForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="pullRequestForm"></param>
        partial void OnErrorPutPullRequestSettings(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, ApiPullRequestSettings pullRequestForm);

        /// <summary>
        /// 设置仓库推送设置(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="pullRequestForm">Pull Request Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPullRequestSettingsApiResponse"/>&gt;</returns>
        public async Task<IPutPullRequestSettingsApiResponse?> PutPullRequestSettingsOrDefaultAsync(string repo, ApiPullRequestSettings pullRequestForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutPullRequestSettingsAsync(repo, pullRequestForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 设置仓库推送设置(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="pullRequestForm">Pull Request Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPullRequestSettingsApiResponse"/>&gt;</returns>
        public async Task<IPutPullRequestSettingsApiResponse> PutPullRequestSettingsAsync(string repo, ApiPullRequestSettings pullRequestForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutPullRequestSettings(repo, pullRequestForm);

                FormatPutPullRequestSettings(ref repo, pullRequestForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/settings/pull-request"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/settings/pull-request");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    httpRequestMessageLocalVar.Content = (pullRequestForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(pullRequestForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutPullRequestSettingsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutPullRequestSettingsApiResponse>();

                        PutPullRequestSettingsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/settings/pull-request", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutPullRequestSettingsDefaultImplementation(apiResponseLocalVar, repo, pullRequestForm);

                        Events.ExecuteOnPutPullRequestSettings(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutPullRequestSettingsDefaultImplementation(e, "/{repo}/-/settings/pull-request", uriBuilderLocalVar.Path, repo, pullRequestForm);
                Events.ExecuteOnErrorPutPullRequestSettings(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutPullRequestSettingsApiResponse"/>
        /// </summary>
        public partial class PutPullRequestSettingsApiResponse : CNBOpenApi.Client.ApiResponse, IPutPullRequestSettingsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutPullRequestSettingsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutPullRequestSettingsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutPullRequestSettingsApiResponse(ILogger<PutPullRequestSettingsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutPushLimitSettings(ref string repo, ApiPushLimitSettings pushLimitForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="pushLimitForm"></param>
        /// <returns></returns>
        private void ValidatePutPushLimitSettings(string repo, ApiPushLimitSettings pushLimitForm)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (pushLimitForm == null)
                throw new ArgumentNullException(nameof(pushLimitForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="pushLimitForm"></param>
        private void AfterPutPushLimitSettingsDefaultImplementation(IPutPushLimitSettingsApiResponse apiResponseLocalVar, string repo, ApiPushLimitSettings pushLimitForm)
        {
            bool suppressDefaultLog = false;
            AfterPutPushLimitSettings(ref suppressDefaultLog, apiResponseLocalVar, repo, pushLimitForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="pushLimitForm"></param>
        partial void AfterPutPushLimitSettings(ref bool suppressDefaultLog, IPutPushLimitSettingsApiResponse apiResponseLocalVar, string repo, ApiPushLimitSettings pushLimitForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="pushLimitForm"></param>
        private void OnErrorPutPushLimitSettingsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, ApiPushLimitSettings pushLimitForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutPushLimitSettings(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, pushLimitForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="pushLimitForm"></param>
        partial void OnErrorPutPushLimitSettings(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, ApiPushLimitSettings pushLimitForm);

        /// <summary>
        /// 设置仓库推送设置(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <param name="repo">repo</param>
        /// <param name="pushLimitForm">Push Limit Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPushLimitSettingsApiResponse"/>&gt;</returns>
        public async Task<IPutPushLimitSettingsApiResponse?> PutPushLimitSettingsOrDefaultAsync(string repo, ApiPushLimitSettings pushLimitForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutPushLimitSettingsAsync(repo, pushLimitForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 设置仓库推送设置(openapi) 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo</param>
        /// <param name="pushLimitForm">Push Limit Form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPushLimitSettingsApiResponse"/>&gt;</returns>
        public async Task<IPutPushLimitSettingsApiResponse> PutPushLimitSettingsAsync(string repo, ApiPushLimitSettings pushLimitForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutPushLimitSettings(repo, pushLimitForm);

                FormatPutPushLimitSettings(ref repo, pushLimitForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/settings/push-limit"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/settings/push-limit");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    httpRequestMessageLocalVar.Content = (pushLimitForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(pushLimitForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.cnb.api+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutPushLimitSettingsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutPushLimitSettingsApiResponse>();

                        PutPushLimitSettingsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/settings/push-limit", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutPushLimitSettingsDefaultImplementation(apiResponseLocalVar, repo, pushLimitForm);

                        Events.ExecuteOnPutPushLimitSettings(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutPushLimitSettingsDefaultImplementation(e, "/{repo}/-/settings/push-limit", uriBuilderLocalVar.Path, repo, pushLimitForm);
                Events.ExecuteOnErrorPutPushLimitSettings(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutPushLimitSettingsApiResponse"/>
        /// </summary>
        public partial class PutPushLimitSettingsApiResponse : CNBOpenApi.Client.ApiResponse, IPutPushLimitSettingsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutPushLimitSettingsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutPushLimitSettingsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutPushLimitSettingsApiResponse(ILogger<PutPushLimitSettingsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DieWebError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DieWebError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out CNBOpenApi.Model.DieWebError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
