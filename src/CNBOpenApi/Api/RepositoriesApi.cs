// <auto-generated>
/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CNBOpenApi.Client;
using CNBOpenApi.Model;
using System.Diagnostics.CodeAnalysis;

namespace CNBOpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IRepositoriesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        RepositoriesApiEvents Events { get; }

        /// <summary>
        /// fork 仓库
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-resource:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="request">target</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAForkApiResponse"/>&gt;</returns>
        Task<ICreateAForkApiResponse> CreateAForkAsync(string repo, DtoForkReq request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// fork 仓库
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-resource:rw
        /// </remarks>
        /// <param name="repo">slug</param>
        /// <param name="request">target</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAForkApiResponse"/>?&gt;</returns>
        Task<ICreateAForkApiResponse?> CreateAForkOrDefaultAsync(string repo, DtoForkReq request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 创建仓库
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-resource:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">repo information</param>
        /// <param name="group">Group slug</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateRepoApiResponse"/>&gt;</returns>
        Task<ICreateRepoApiResponse> CreateRepoAsync(DtoCreateRepoReq request, string group, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 创建仓库
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-resource:rw
        /// </remarks>
        /// <param name="request">repo information</param>
        /// <param name="group">Group slug</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateRepoApiResponse"/>?&gt;</returns>
        Task<ICreateRepoApiResponse?> CreateRepoOrDefaultAsync(DtoCreateRepoReq request, string group, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除指定仓库
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-delete:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo path</param>
        /// <param name="xCnbIdentityTicket">微信用户需要确认身份，第一次调用不传接口会调用失败并返回一个x-cnb-identity-ticket，第二次调用再传返回的值 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteRepoApiResponse"/>&gt;</returns>
        Task<IDeleteRepoApiResponse> DeleteRepoAsync(string repo, Option<string> xCnbIdentityTicket = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除指定仓库
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-delete:rw
        /// </remarks>
        /// <param name="repo">repo path</param>
        /// <param name="xCnbIdentityTicket">微信用户需要确认身份，第一次调用不传接口会调用失败并返回一个x-cnb-identity-ticket，第二次调用再传返回的值 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteRepoApiResponse"/>?&gt;</returns>
        Task<IDeleteRepoApiResponse?> DeleteRepoOrDefaultAsync(string repo, Option<string> xCnbIdentityTicket = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询组织下访问用户有权限查看到仓库
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-resource:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">组织 slug</param>
        /// <param name="page">页码 (optional, default to 1)</param>
        /// <param name="pageSize">每页数量 (optional, default to 10)</param>
        /// <param name="filterType">仓库类型 (optional)</param>
        /// <param name="orderBy">排序类型，默认last_updated_at (optional)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="descendant">查全部/查询直接属于当前组织的仓库/查询子组织的仓库 (optional)</param>
        /// <param name="search">搜索关键字 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGroupSubReposApiResponse"/>&gt;</returns>
        Task<IGetGroupSubReposApiResponse> GetGroupSubReposAsync(string group, Option<int> page = default, Option<int> pageSize = default, Option<string> filterType = default, Option<string> orderBy = default, Option<bool> desc = default, Option<string> descendant = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询组织下访问用户有权限查看到仓库
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-resource:r
        /// </remarks>
        /// <param name="group">组织 slug</param>
        /// <param name="page">页码 (optional, default to 1)</param>
        /// <param name="pageSize">每页数量 (optional, default to 10)</param>
        /// <param name="filterType">仓库类型 (optional)</param>
        /// <param name="orderBy">排序类型，默认last_updated_at (optional)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="descendant">查全部/查询直接属于当前组织的仓库/查询子组织的仓库 (optional)</param>
        /// <param name="search">搜索关键字 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGroupSubReposApiResponse"/>?&gt;</returns>
        Task<IGetGroupSubReposApiResponse?> GetGroupSubReposOrDefaultAsync(string group, Option<int> page = default, Option<int> pageSize = default, Option<string> filterType = default, Option<string> orderBy = default, Option<bool> desc = default, Option<string> descendant = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织的仓库墙列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPinnedRepoByGroupApiResponse"/>&gt;</returns>
        Task<IGetPinnedRepoByGroupApiResponse> GetPinnedRepoByGroupAsync(string group, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定组织的仓库墙列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </remarks>
        /// <param name="group">slug</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPinnedRepoByGroupApiResponse"/>?&gt;</returns>
        Task<IGetPinnedRepoByGroupApiResponse?> GetPinnedRepoByGroupOrDefaultAsync(string group, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定用户的用户仓库墙
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPinnedRepoByIDApiResponse"/>&gt;</returns>
        Task<IGetPinnedRepoByIDApiResponse> GetPinnedRepoByIDAsync(string username, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定用户的用户仓库墙
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </remarks>
        /// <param name="username">User Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPinnedRepoByIDApiResponse"/>?&gt;</returns>
        Task<IGetPinnedRepoByIDApiResponse?> GetPinnedRepoByIDOrDefaultAsync(string username, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定仓库信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-basic-info:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRepoApiResponse"/>&gt;</returns>
        Task<IGetRepoApiResponse> GetRepoAsync(string repo, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定仓库信息
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-basic-info:r
        /// </remarks>
        /// <param name="repo">repo path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRepoApiResponse"/>?&gt;</returns>
        Task<IGetRepoApiResponse?> GetRepoOrDefaultAsync(string repo, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取当前用户拥有指定权限及其以上权限的仓库
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="search">过滤仓库 (optional)</param>
        /// <param name="filterType">仓库类型 (optional)</param>
        /// <param name="role">最小仓库权限，默认owner (optional)</param>
        /// <param name="orderBy">排序类型，默认last_updated_at (optional)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReposApiResponse"/>&gt;</returns>
        Task<IGetReposApiResponse> GetReposAsync(Option<int> page = default, Option<int> pageSize = default, Option<string> search = default, Option<string> filterType = default, Option<string> role = default, Option<string> orderBy = default, Option<bool> desc = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取当前用户拥有指定权限及其以上权限的仓库
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </remarks>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="search">过滤仓库 (optional)</param>
        /// <param name="filterType">仓库类型 (optional)</param>
        /// <param name="role">最小仓库权限，默认owner (optional)</param>
        /// <param name="orderBy">排序类型，默认last_updated_at (optional)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReposApiResponse"/>?&gt;</returns>
        Task<IGetReposApiResponse?> GetReposOrDefaultAsync(Option<int> page = default, Option<int> pageSize = default, Option<string> search = default, Option<string> filterType = default, Option<string> role = default, Option<string> orderBy = default, Option<bool> desc = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定用户有指定以上权限并且客人态可见的仓库
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">UserName</param>
        /// <param name="search">过滤仓库 (optional)</param>
        /// <param name="role">最小仓库权限，默认owner (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="orderBy">排序类型，默认last_updated_at (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReposByUserNameApiResponse"/>&gt;</returns>
        Task<IGetReposByUserNameApiResponse> GetReposByUserNameAsync(string username, Option<string> search = default, Option<string> role = default, Option<int> page = default, Option<int> pageSize = default, Option<bool> desc = default, Option<string> orderBy = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定用户有指定以上权限并且客人态可见的仓库
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </remarks>
        /// <param name="username">UserName</param>
        /// <param name="search">过滤仓库 (optional)</param>
        /// <param name="role">最小仓库权限，默认owner (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="orderBy">排序类型，默认last_updated_at (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReposByUserNameApiResponse"/>?&gt;</returns>
        Task<IGetReposByUserNameApiResponse?> GetReposByUserNameOrDefaultAsync(string username, Option<string> search = default, Option<string> role = default, Option<int> page = default, Option<int> pageSize = default, Option<bool> desc = default, Option<string> orderBy = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取当前用户 star 的仓库列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="search">过滤仓库 (optional)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="orderBy">排序类型，默认last_updated_at (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserAllStaredReposApiResponse"/>&gt;</returns>
        Task<IGetUserAllStaredReposApiResponse> GetUserAllStaredReposAsync(Option<int> page = default, Option<int> pageSize = default, Option<string> search = default, Option<bool> desc = default, Option<string> orderBy = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取当前用户 star 的仓库列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </remarks>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="search">过滤仓库 (optional)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="orderBy">排序类型，默认last_updated_at (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserAllStaredReposApiResponse"/>?&gt;</returns>
        Task<IGetUserAllStaredReposApiResponse?> GetUserAllStaredReposOrDefaultAsync(Option<int> page = default, Option<int> pageSize = default, Option<string> search = default, Option<bool> desc = default, Option<string> orderBy = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定仓库的 fork 列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-base-info:r
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="page">page</param>
        /// <param name="pageSize">page</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListForksReposApiResponse"/>&gt;</returns>
        Task<IListForksReposApiResponse> ListForksReposAsync(string repo, int page, int pageSize, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定仓库的 fork 列表
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-base-info:r
        /// </remarks>
        /// <param name="repo">slug</param>
        /// <param name="page">page</param>
        /// <param name="pageSize">page</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListForksReposApiResponse"/>?&gt;</returns>
        Task<IListForksReposApiResponse?> ListForksReposOrDefaultAsync(string repo, int page, int pageSize, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新指定组织仓库墙
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="request">repo path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetPinnedRepoByGroupApiResponse"/>&gt;</returns>
        Task<ISetPinnedRepoByGroupApiResponse> SetPinnedRepoByGroupAsync(string group, List<string> request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新指定组织仓库墙
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </remarks>
        /// <param name="group">slug</param>
        /// <param name="request">repo path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetPinnedRepoByGroupApiResponse"/>?&gt;</returns>
        Task<ISetPinnedRepoByGroupApiResponse?> SetPinnedRepoByGroupOrDefaultAsync(string group, List<string> request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新仓库信息, 可更新的内容为: 仓库简介, 仓库站点, 仓库主题, 开源许可证
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">仓库路径</param>
        /// <param name="request">仓库信息</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRepoApiResponse"/>&gt;</returns>
        Task<IUpdateRepoApiResponse> UpdateRepoAsync(string repo, DtoRepoPatch request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新仓库信息, 可更新的内容为: 仓库简介, 仓库站点, 仓库主题, 开源许可证
        /// </summary>
        /// <remarks>
        /// 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </remarks>
        /// <param name="repo">仓库路径</param>
        /// <param name="request">仓库信息</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRepoApiResponse"/>?&gt;</returns>
        Task<IUpdateRepoApiResponse?> UpdateRepoOrDefaultAsync(string repo, DtoRepoPatch request, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateAForkApiResponse"/>
    /// </summary>
    public interface ICreateAForkApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ICreateRepoApiResponse"/>
    /// </summary>
    public interface ICreateRepoApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteRepoApiResponse"/>
    /// </summary>
    public interface IDeleteRepoApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetGroupSubReposApiResponse"/>
    /// </summary>
    public interface IGetGroupSubReposApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoRepos4UserBase>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPinnedRepoByGroupApiResponse"/>
    /// </summary>
    public interface IGetPinnedRepoByGroupApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoRepos4UserBase>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPinnedRepoByIDApiResponse"/>
    /// </summary>
    public interface IGetPinnedRepoByIDApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoRepos4User>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetRepoApiResponse"/>
    /// </summary>
    public interface IGetRepoApiResponse : CNBOpenApi.Client.IApiResponse, IOk<CNBOpenApi.Model.DtoRepos4User?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetReposApiResponse"/>
    /// </summary>
    public interface IGetReposApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoRepos4User>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetReposByUserNameApiResponse"/>
    /// </summary>
    public interface IGetReposByUserNameApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoRepos4User>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserAllStaredReposApiResponse"/>
    /// </summary>
    public interface IGetUserAllStaredReposApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoRepos4UserBase>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListForksReposApiResponse"/>
    /// </summary>
    public interface IListForksReposApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoForks>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ISetPinnedRepoByGroupApiResponse"/>
    /// </summary>
    public interface ISetPinnedRepoByGroupApiResponse : CNBOpenApi.Client.IApiResponse, IOk<List<DtoRepos4UserBase>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateRepoApiResponse"/>
    /// </summary>
    public interface IUpdateRepoApiResponse : CNBOpenApi.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class RepositoriesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateAFork;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateAFork;

        internal void ExecuteOnCreateAFork(RepositoriesApi.CreateAForkApiResponse apiResponse)
        {
            OnCreateAFork?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateAFork(Exception exception)
        {
            OnErrorCreateAFork?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateRepo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateRepo;

        internal void ExecuteOnCreateRepo(RepositoriesApi.CreateRepoApiResponse apiResponse)
        {
            OnCreateRepo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateRepo(Exception exception)
        {
            OnErrorCreateRepo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteRepo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteRepo;

        internal void ExecuteOnDeleteRepo(RepositoriesApi.DeleteRepoApiResponse apiResponse)
        {
            OnDeleteRepo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteRepo(Exception exception)
        {
            OnErrorDeleteRepo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetGroupSubRepos;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetGroupSubRepos;

        internal void ExecuteOnGetGroupSubRepos(RepositoriesApi.GetGroupSubReposApiResponse apiResponse)
        {
            OnGetGroupSubRepos?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetGroupSubRepos(Exception exception)
        {
            OnErrorGetGroupSubRepos?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPinnedRepoByGroup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPinnedRepoByGroup;

        internal void ExecuteOnGetPinnedRepoByGroup(RepositoriesApi.GetPinnedRepoByGroupApiResponse apiResponse)
        {
            OnGetPinnedRepoByGroup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPinnedRepoByGroup(Exception exception)
        {
            OnErrorGetPinnedRepoByGroup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPinnedRepoByID;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPinnedRepoByID;

        internal void ExecuteOnGetPinnedRepoByID(RepositoriesApi.GetPinnedRepoByIDApiResponse apiResponse)
        {
            OnGetPinnedRepoByID?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPinnedRepoByID(Exception exception)
        {
            OnErrorGetPinnedRepoByID?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetRepo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetRepo;

        internal void ExecuteOnGetRepo(RepositoriesApi.GetRepoApiResponse apiResponse)
        {
            OnGetRepo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetRepo(Exception exception)
        {
            OnErrorGetRepo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetRepos;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetRepos;

        internal void ExecuteOnGetRepos(RepositoriesApi.GetReposApiResponse apiResponse)
        {
            OnGetRepos?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetRepos(Exception exception)
        {
            OnErrorGetRepos?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetReposByUserName;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetReposByUserName;

        internal void ExecuteOnGetReposByUserName(RepositoriesApi.GetReposByUserNameApiResponse apiResponse)
        {
            OnGetReposByUserName?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetReposByUserName(Exception exception)
        {
            OnErrorGetReposByUserName?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserAllStaredRepos;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserAllStaredRepos;

        internal void ExecuteOnGetUserAllStaredRepos(RepositoriesApi.GetUserAllStaredReposApiResponse apiResponse)
        {
            OnGetUserAllStaredRepos?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserAllStaredRepos(Exception exception)
        {
            OnErrorGetUserAllStaredRepos?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListForksRepos;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListForksRepos;

        internal void ExecuteOnListForksRepos(RepositoriesApi.ListForksReposApiResponse apiResponse)
        {
            OnListForksRepos?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListForksRepos(Exception exception)
        {
            OnErrorListForksRepos?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSetPinnedRepoByGroup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSetPinnedRepoByGroup;

        internal void ExecuteOnSetPinnedRepoByGroup(RepositoriesApi.SetPinnedRepoByGroupApiResponse apiResponse)
        {
            OnSetPinnedRepoByGroup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSetPinnedRepoByGroup(Exception exception)
        {
            OnErrorSetPinnedRepoByGroup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateRepo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateRepo;

        internal void ExecuteOnUpdateRepo(RepositoriesApi.UpdateRepoApiResponse apiResponse)
        {
            OnUpdateRepo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateRepo(Exception exception)
        {
            OnErrorUpdateRepo?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class RepositoriesApi : IRepositoriesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<RepositoriesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public RepositoriesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="RepositoriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RepositoriesApi(ILogger<RepositoriesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, RepositoriesApiEvents repositoriesApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<RepositoriesApi>();
            HttpClient = httpClient;
            Events = repositoriesApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateAFork(ref string repo, DtoForkReq request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateCreateAFork(string repo, DtoForkReq request)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="request"></param>
        private void AfterCreateAForkDefaultImplementation(ICreateAForkApiResponse apiResponseLocalVar, string repo, DtoForkReq request)
        {
            bool suppressDefaultLog = false;
            AfterCreateAFork(ref suppressDefaultLog, apiResponseLocalVar, repo, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="request"></param>
        partial void AfterCreateAFork(ref bool suppressDefaultLog, ICreateAForkApiResponse apiResponseLocalVar, string repo, DtoForkReq request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="request"></param>
        private void OnErrorCreateAForkDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, DtoForkReq request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateAFork(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="request"></param>
        partial void OnErrorCreateAFork(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, DtoForkReq request);

        /// <summary>
        /// fork 仓库 访问令牌调用此接口需包含以下权限  group-resource:rw
        /// </summary>
        /// <param name="repo">slug</param>
        /// <param name="request">target</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAForkApiResponse"/>&gt;</returns>
        public async Task<ICreateAForkApiResponse?> CreateAForkOrDefaultAsync(string repo, DtoForkReq request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateAForkAsync(repo, request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// fork 仓库 访问令牌调用此接口需包含以下权限  group-resource:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="request">target</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAForkApiResponse"/>&gt;</returns>
        public async Task<ICreateAForkApiResponse> CreateAForkAsync(string repo, DtoForkReq request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateAFork(repo, request);

                FormatCreateAFork(ref repo, request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/forks"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/forks");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateAForkApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateAForkApiResponse>();

                        CreateAForkApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/forks", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateAForkDefaultImplementation(apiResponseLocalVar, repo, request);

                        Events.ExecuteOnCreateAFork(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateAForkDefaultImplementation(e, "/{repo}/-/forks", uriBuilderLocalVar.Path, repo, request);
                Events.ExecuteOnErrorCreateAFork(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateAForkApiResponse"/>
        /// </summary>
        public partial class CreateAForkApiResponse : CNBOpenApi.Client.ApiResponse, ICreateAForkApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateAForkApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateAForkApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateAForkApiResponse(ILogger<CreateAForkApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateRepo(DtoCreateRepoReq request, ref string group);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <param name="group"></param>
        /// <returns></returns>
        private void ValidateCreateRepo(DtoCreateRepoReq request, string group)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));

            if (group == null)
                throw new ArgumentNullException(nameof(group));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        /// <param name="group"></param>
        private void AfterCreateRepoDefaultImplementation(ICreateRepoApiResponse apiResponseLocalVar, DtoCreateRepoReq request, string group)
        {
            bool suppressDefaultLog = false;
            AfterCreateRepo(ref suppressDefaultLog, apiResponseLocalVar, request, group);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        /// <param name="group"></param>
        partial void AfterCreateRepo(ref bool suppressDefaultLog, ICreateRepoApiResponse apiResponseLocalVar, DtoCreateRepoReq request, string group);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        /// <param name="group"></param>
        private void OnErrorCreateRepoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DtoCreateRepoReq request, string group)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateRepo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request, group);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        /// <param name="group"></param>
        partial void OnErrorCreateRepo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DtoCreateRepoReq request, string group);

        /// <summary>
        /// 创建仓库 访问令牌调用此接口需包含以下权限  group-resource:rw
        /// </summary>
        /// <param name="request">repo information</param>
        /// <param name="group">Group slug</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateRepoApiResponse"/>&gt;</returns>
        public async Task<ICreateRepoApiResponse?> CreateRepoOrDefaultAsync(DtoCreateRepoReq request, string group, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateRepoAsync(request, group, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 创建仓库 访问令牌调用此接口需包含以下权限  group-resource:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">repo information</param>
        /// <param name="group">Group slug</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateRepoApiResponse"/>&gt;</returns>
        public async Task<ICreateRepoApiResponse> CreateRepoAsync(DtoCreateRepoReq request, string group, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateRepo(request, group);

                FormatCreateRepo(request, ref group);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{group}/-/repos"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{group}/-/repos");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bgroup%7D", Uri.EscapeDataString(group.ToString()));

                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateRepoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateRepoApiResponse>();

                        CreateRepoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{group}/-/repos", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateRepoDefaultImplementation(apiResponseLocalVar, request, group);

                        Events.ExecuteOnCreateRepo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateRepoDefaultImplementation(e, "/{group}/-/repos", uriBuilderLocalVar.Path, request, group);
                Events.ExecuteOnErrorCreateRepo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateRepoApiResponse"/>
        /// </summary>
        public partial class CreateRepoApiResponse : CNBOpenApi.Client.ApiResponse, ICreateRepoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateRepoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateRepoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateRepoApiResponse(ILogger<CreateRepoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteRepo(ref string repo, ref Option<string> xCnbIdentityTicket);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="xCnbIdentityTicket"></param>
        /// <returns></returns>
        private void ValidateDeleteRepo(string repo, Option<string> xCnbIdentityTicket)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (xCnbIdentityTicket.IsSet && xCnbIdentityTicket.Value == null)
                throw new ArgumentNullException(nameof(xCnbIdentityTicket));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="xCnbIdentityTicket"></param>
        private void AfterDeleteRepoDefaultImplementation(IDeleteRepoApiResponse apiResponseLocalVar, string repo, Option<string> xCnbIdentityTicket)
        {
            bool suppressDefaultLog = false;
            AfterDeleteRepo(ref suppressDefaultLog, apiResponseLocalVar, repo, xCnbIdentityTicket);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="xCnbIdentityTicket"></param>
        partial void AfterDeleteRepo(ref bool suppressDefaultLog, IDeleteRepoApiResponse apiResponseLocalVar, string repo, Option<string> xCnbIdentityTicket);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="xCnbIdentityTicket"></param>
        private void OnErrorDeleteRepoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<string> xCnbIdentityTicket)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteRepo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, xCnbIdentityTicket);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="xCnbIdentityTicket"></param>
        partial void OnErrorDeleteRepo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, Option<string> xCnbIdentityTicket);

        /// <summary>
        /// 删除指定仓库 访问令牌调用此接口需包含以下权限  repo-delete:rw
        /// </summary>
        /// <param name="repo">repo path</param>
        /// <param name="xCnbIdentityTicket">微信用户需要确认身份，第一次调用不传接口会调用失败并返回一个x-cnb-identity-ticket，第二次调用再传返回的值 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteRepoApiResponse"/>&gt;</returns>
        public async Task<IDeleteRepoApiResponse?> DeleteRepoOrDefaultAsync(string repo, Option<string> xCnbIdentityTicket = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteRepoAsync(repo, xCnbIdentityTicket, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 删除指定仓库 访问令牌调用此接口需包含以下权限  repo-delete:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo path</param>
        /// <param name="xCnbIdentityTicket">微信用户需要确认身份，第一次调用不传接口会调用失败并返回一个x-cnb-identity-ticket，第二次调用再传返回的值 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteRepoApiResponse"/>&gt;</returns>
        public async Task<IDeleteRepoApiResponse> DeleteRepoAsync(string repo, Option<string> xCnbIdentityTicket = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteRepo(repo, xCnbIdentityTicket);

                FormatDeleteRepo(ref repo, ref xCnbIdentityTicket);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    if (xCnbIdentityTicket.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("x-cnb-identity-ticket", ClientUtils.ParameterToString(xCnbIdentityTicket.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteRepoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteRepoApiResponse>();

                        DeleteRepoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteRepoDefaultImplementation(apiResponseLocalVar, repo, xCnbIdentityTicket);

                        Events.ExecuteOnDeleteRepo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteRepoDefaultImplementation(e, "/{repo}", uriBuilderLocalVar.Path, repo, xCnbIdentityTicket);
                Events.ExecuteOnErrorDeleteRepo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteRepoApiResponse"/>
        /// </summary>
        public partial class DeleteRepoApiResponse : CNBOpenApi.Client.ApiResponse, IDeleteRepoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteRepoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteRepoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteRepoApiResponse(ILogger<DeleteRepoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetGroupSubRepos(ref string group, ref Option<int> page, ref Option<int> pageSize, ref Option<string> filterType, ref Option<string> orderBy, ref Option<bool> desc, ref Option<string> descendant, ref Option<string> search);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="group"></param>
        /// <param name="filterType"></param>
        /// <param name="orderBy"></param>
        /// <param name="descendant"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        private void ValidateGetGroupSubRepos(string group, Option<string> filterType, Option<string> orderBy, Option<string> descendant, Option<string> search)
        {
            if (group == null)
                throw new ArgumentNullException(nameof(group));

            if (filterType.IsSet && filterType.Value == null)
                throw new ArgumentNullException(nameof(filterType));

            if (orderBy.IsSet && orderBy.Value == null)
                throw new ArgumentNullException(nameof(orderBy));

            if (descendant.IsSet && descendant.Value == null)
                throw new ArgumentNullException(nameof(descendant));

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filterType"></param>
        /// <param name="orderBy"></param>
        /// <param name="desc"></param>
        /// <param name="descendant"></param>
        /// <param name="search"></param>
        private void AfterGetGroupSubReposDefaultImplementation(IGetGroupSubReposApiResponse apiResponseLocalVar, string group, Option<int> page, Option<int> pageSize, Option<string> filterType, Option<string> orderBy, Option<bool> desc, Option<string> descendant, Option<string> search)
        {
            bool suppressDefaultLog = false;
            AfterGetGroupSubRepos(ref suppressDefaultLog, apiResponseLocalVar, group, page, pageSize, filterType, orderBy, desc, descendant, search);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filterType"></param>
        /// <param name="orderBy"></param>
        /// <param name="desc"></param>
        /// <param name="descendant"></param>
        /// <param name="search"></param>
        partial void AfterGetGroupSubRepos(ref bool suppressDefaultLog, IGetGroupSubReposApiResponse apiResponseLocalVar, string group, Option<int> page, Option<int> pageSize, Option<string> filterType, Option<string> orderBy, Option<bool> desc, Option<string> descendant, Option<string> search);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filterType"></param>
        /// <param name="orderBy"></param>
        /// <param name="desc"></param>
        /// <param name="descendant"></param>
        /// <param name="search"></param>
        private void OnErrorGetGroupSubReposDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, Option<int> page, Option<int> pageSize, Option<string> filterType, Option<string> orderBy, Option<bool> desc, Option<string> descendant, Option<string> search)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetGroupSubRepos(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, group, page, pageSize, filterType, orderBy, desc, descendant, search);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filterType"></param>
        /// <param name="orderBy"></param>
        /// <param name="desc"></param>
        /// <param name="descendant"></param>
        /// <param name="search"></param>
        partial void OnErrorGetGroupSubRepos(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, Option<int> page, Option<int> pageSize, Option<string> filterType, Option<string> orderBy, Option<bool> desc, Option<string> descendant, Option<string> search);

        /// <summary>
        /// 查询组织下访问用户有权限查看到仓库 访问令牌调用此接口需包含以下权限  group-resource:r
        /// </summary>
        /// <param name="group">组织 slug</param>
        /// <param name="page">页码 (optional, default to 1)</param>
        /// <param name="pageSize">每页数量 (optional, default to 10)</param>
        /// <param name="filterType">仓库类型 (optional)</param>
        /// <param name="orderBy">排序类型，默认last_updated_at (optional)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="descendant">查全部/查询直接属于当前组织的仓库/查询子组织的仓库 (optional)</param>
        /// <param name="search">搜索关键字 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGroupSubReposApiResponse"/>&gt;</returns>
        public async Task<IGetGroupSubReposApiResponse?> GetGroupSubReposOrDefaultAsync(string group, Option<int> page = default, Option<int> pageSize = default, Option<string> filterType = default, Option<string> orderBy = default, Option<bool> desc = default, Option<string> descendant = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetGroupSubReposAsync(group, page, pageSize, filterType, orderBy, desc, descendant, search, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 查询组织下访问用户有权限查看到仓库 访问令牌调用此接口需包含以下权限  group-resource:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">组织 slug</param>
        /// <param name="page">页码 (optional, default to 1)</param>
        /// <param name="pageSize">每页数量 (optional, default to 10)</param>
        /// <param name="filterType">仓库类型 (optional)</param>
        /// <param name="orderBy">排序类型，默认last_updated_at (optional)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="descendant">查全部/查询直接属于当前组织的仓库/查询子组织的仓库 (optional)</param>
        /// <param name="search">搜索关键字 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGroupSubReposApiResponse"/>&gt;</returns>
        public async Task<IGetGroupSubReposApiResponse> GetGroupSubReposAsync(string group, Option<int> page = default, Option<int> pageSize = default, Option<string> filterType = default, Option<string> orderBy = default, Option<bool> desc = default, Option<string> descendant = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetGroupSubRepos(group, filterType, orderBy, descendant, search);

                FormatGetGroupSubRepos(ref group, ref page, ref pageSize, ref filterType, ref orderBy, ref desc, ref descendant, ref search);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{group}/-/repos"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{group}/-/repos");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bgroup%7D", Uri.EscapeDataString(group.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (filterType.IsSet)
                        parseQueryStringLocalVar["filter_type"] = ClientUtils.ParameterToString(filterType.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["order_by"] = ClientUtils.ParameterToString(orderBy.Value);

                    if (desc.IsSet)
                        parseQueryStringLocalVar["desc"] = ClientUtils.ParameterToString(desc.Value);

                    if (descendant.IsSet)
                        parseQueryStringLocalVar["descendant"] = ClientUtils.ParameterToString(descendant.Value);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetGroupSubReposApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetGroupSubReposApiResponse>();

                        GetGroupSubReposApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{group}/-/repos", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetGroupSubReposDefaultImplementation(apiResponseLocalVar, group, page, pageSize, filterType, orderBy, desc, descendant, search);

                        Events.ExecuteOnGetGroupSubRepos(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetGroupSubReposDefaultImplementation(e, "/{group}/-/repos", uriBuilderLocalVar.Path, group, page, pageSize, filterType, orderBy, desc, descendant, search);
                Events.ExecuteOnErrorGetGroupSubRepos(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetGroupSubReposApiResponse"/>
        /// </summary>
        public partial class GetGroupSubReposApiResponse : CNBOpenApi.Client.ApiResponse, IGetGroupSubReposApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetGroupSubReposApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetGroupSubReposApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetGroupSubReposApiResponse(ILogger<GetGroupSubReposApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoRepos4UserBase>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoRepos4UserBase>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoRepos4UserBase>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPinnedRepoByGroup(ref string group);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="group"></param>
        /// <returns></returns>
        private void ValidateGetPinnedRepoByGroup(string group)
        {
            if (group == null)
                throw new ArgumentNullException(nameof(group));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        private void AfterGetPinnedRepoByGroupDefaultImplementation(IGetPinnedRepoByGroupApiResponse apiResponseLocalVar, string group)
        {
            bool suppressDefaultLog = false;
            AfterGetPinnedRepoByGroup(ref suppressDefaultLog, apiResponseLocalVar, group);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        partial void AfterGetPinnedRepoByGroup(ref bool suppressDefaultLog, IGetPinnedRepoByGroupApiResponse apiResponseLocalVar, string group);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        private void OnErrorGetPinnedRepoByGroupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPinnedRepoByGroup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, group);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        partial void OnErrorGetPinnedRepoByGroup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group);

        /// <summary>
        /// 获取指定组织的仓库墙列表 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </summary>
        /// <param name="group">slug</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPinnedRepoByGroupApiResponse"/>&gt;</returns>
        public async Task<IGetPinnedRepoByGroupApiResponse?> GetPinnedRepoByGroupOrDefaultAsync(string group, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPinnedRepoByGroupAsync(group, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定组织的仓库墙列表 访问令牌调用此接口需包含以下权限  group-manage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPinnedRepoByGroupApiResponse"/>&gt;</returns>
        public async Task<IGetPinnedRepoByGroupApiResponse> GetPinnedRepoByGroupAsync(string group, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPinnedRepoByGroup(group);

                FormatGetPinnedRepoByGroup(ref group);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{group}/-/pinned-repos"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{group}/-/pinned-repos");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bgroup%7D", Uri.EscapeDataString(group.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPinnedRepoByGroupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPinnedRepoByGroupApiResponse>();

                        GetPinnedRepoByGroupApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{group}/-/pinned-repos", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPinnedRepoByGroupDefaultImplementation(apiResponseLocalVar, group);

                        Events.ExecuteOnGetPinnedRepoByGroup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPinnedRepoByGroupDefaultImplementation(e, "/{group}/-/pinned-repos", uriBuilderLocalVar.Path, group);
                Events.ExecuteOnErrorGetPinnedRepoByGroup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPinnedRepoByGroupApiResponse"/>
        /// </summary>
        public partial class GetPinnedRepoByGroupApiResponse : CNBOpenApi.Client.ApiResponse, IGetPinnedRepoByGroupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPinnedRepoByGroupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPinnedRepoByGroupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPinnedRepoByGroupApiResponse(ILogger<GetPinnedRepoByGroupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoRepos4UserBase>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoRepos4UserBase>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoRepos4UserBase>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPinnedRepoByID(ref string username);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="username"></param>
        /// <returns></returns>
        private void ValidateGetPinnedRepoByID(string username)
        {
            if (username == null)
                throw new ArgumentNullException(nameof(username));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="username"></param>
        private void AfterGetPinnedRepoByIDDefaultImplementation(IGetPinnedRepoByIDApiResponse apiResponseLocalVar, string username)
        {
            bool suppressDefaultLog = false;
            AfterGetPinnedRepoByID(ref suppressDefaultLog, apiResponseLocalVar, username);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="username"></param>
        partial void AfterGetPinnedRepoByID(ref bool suppressDefaultLog, IGetPinnedRepoByIDApiResponse apiResponseLocalVar, string username);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="username"></param>
        private void OnErrorGetPinnedRepoByIDDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string username)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPinnedRepoByID(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, username);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="username"></param>
        partial void OnErrorGetPinnedRepoByID(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string username);

        /// <summary>
        /// 获取指定用户的用户仓库墙 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </summary>
        /// <param name="username">User Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPinnedRepoByIDApiResponse"/>&gt;</returns>
        public async Task<IGetPinnedRepoByIDApiResponse?> GetPinnedRepoByIDOrDefaultAsync(string username, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPinnedRepoByIDAsync(username, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定用户的用户仓库墙 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPinnedRepoByIDApiResponse"/>&gt;</returns>
        public async Task<IGetPinnedRepoByIDApiResponse> GetPinnedRepoByIDAsync(string username, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPinnedRepoByID(username);

                FormatGetPinnedRepoByID(ref username);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/users/{username}/pinned-repos"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/users/{username}/pinned-repos");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPinnedRepoByIDApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPinnedRepoByIDApiResponse>();

                        GetPinnedRepoByIDApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/{username}/pinned-repos", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPinnedRepoByIDDefaultImplementation(apiResponseLocalVar, username);

                        Events.ExecuteOnGetPinnedRepoByID(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPinnedRepoByIDDefaultImplementation(e, "/users/{username}/pinned-repos", uriBuilderLocalVar.Path, username);
                Events.ExecuteOnErrorGetPinnedRepoByID(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPinnedRepoByIDApiResponse"/>
        /// </summary>
        public partial class GetPinnedRepoByIDApiResponse : CNBOpenApi.Client.ApiResponse, IGetPinnedRepoByIDApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPinnedRepoByIDApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPinnedRepoByIDApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPinnedRepoByIDApiResponse(ILogger<GetPinnedRepoByIDApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoRepos4User>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoRepos4User>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoRepos4User>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetRepo(ref string repo);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <returns></returns>
        private void ValidateGetRepo(string repo)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        private void AfterGetRepoDefaultImplementation(IGetRepoApiResponse apiResponseLocalVar, string repo)
        {
            bool suppressDefaultLog = false;
            AfterGetRepo(ref suppressDefaultLog, apiResponseLocalVar, repo);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        partial void AfterGetRepo(ref bool suppressDefaultLog, IGetRepoApiResponse apiResponseLocalVar, string repo);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        private void OnErrorGetRepoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetRepo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        partial void OnErrorGetRepo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo);

        /// <summary>
        /// 获取指定仓库信息 访问令牌调用此接口需包含以下权限  repo-basic-info:r
        /// </summary>
        /// <param name="repo">repo path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRepoApiResponse"/>&gt;</returns>
        public async Task<IGetRepoApiResponse?> GetRepoOrDefaultAsync(string repo, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetRepoAsync(repo, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定仓库信息 访问令牌调用此接口需包含以下权限  repo-basic-info:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">repo path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRepoApiResponse"/>&gt;</returns>
        public async Task<IGetRepoApiResponse> GetRepoAsync(string repo, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetRepo(repo);

                FormatGetRepo(ref repo);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetRepoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetRepoApiResponse>();

                        GetRepoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetRepoDefaultImplementation(apiResponseLocalVar, repo);

                        Events.ExecuteOnGetRepo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetRepoDefaultImplementation(e, "/{repo}", uriBuilderLocalVar.Path, repo);
                Events.ExecuteOnErrorGetRepo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetRepoApiResponse"/>
        /// </summary>
        public partial class GetRepoApiResponse : CNBOpenApi.Client.ApiResponse, IGetRepoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetRepoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetRepoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetRepoApiResponse(ILogger<GetRepoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CNBOpenApi.Model.DtoRepos4User? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CNBOpenApi.Model.DtoRepos4User>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CNBOpenApi.Model.DtoRepos4User? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetRepos(ref Option<int> page, ref Option<int> pageSize, ref Option<string> search, ref Option<string> filterType, ref Option<string> role, ref Option<string> orderBy, ref Option<bool> desc);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="search"></param>
        /// <param name="filterType"></param>
        /// <param name="role"></param>
        /// <param name="orderBy"></param>
        /// <returns></returns>
        private void ValidateGetRepos(Option<string> search, Option<string> filterType, Option<string> role, Option<string> orderBy)
        {
            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));

            if (filterType.IsSet && filterType.Value == null)
                throw new ArgumentNullException(nameof(filterType));

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role));

            if (orderBy.IsSet && orderBy.Value == null)
                throw new ArgumentNullException(nameof(orderBy));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="search"></param>
        /// <param name="filterType"></param>
        /// <param name="role"></param>
        /// <param name="orderBy"></param>
        /// <param name="desc"></param>
        private void AfterGetReposDefaultImplementation(IGetReposApiResponse apiResponseLocalVar, Option<int> page, Option<int> pageSize, Option<string> search, Option<string> filterType, Option<string> role, Option<string> orderBy, Option<bool> desc)
        {
            bool suppressDefaultLog = false;
            AfterGetRepos(ref suppressDefaultLog, apiResponseLocalVar, page, pageSize, search, filterType, role, orderBy, desc);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="search"></param>
        /// <param name="filterType"></param>
        /// <param name="role"></param>
        /// <param name="orderBy"></param>
        /// <param name="desc"></param>
        partial void AfterGetRepos(ref bool suppressDefaultLog, IGetReposApiResponse apiResponseLocalVar, Option<int> page, Option<int> pageSize, Option<string> search, Option<string> filterType, Option<string> role, Option<string> orderBy, Option<bool> desc);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="search"></param>
        /// <param name="filterType"></param>
        /// <param name="role"></param>
        /// <param name="orderBy"></param>
        /// <param name="desc"></param>
        private void OnErrorGetReposDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> pageSize, Option<string> search, Option<string> filterType, Option<string> role, Option<string> orderBy, Option<bool> desc)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetRepos(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page, pageSize, search, filterType, role, orderBy, desc);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="search"></param>
        /// <param name="filterType"></param>
        /// <param name="role"></param>
        /// <param name="orderBy"></param>
        /// <param name="desc"></param>
        partial void OnErrorGetRepos(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> pageSize, Option<string> search, Option<string> filterType, Option<string> role, Option<string> orderBy, Option<bool> desc);

        /// <summary>
        /// 获取当前用户拥有指定权限及其以上权限的仓库 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </summary>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="search">过滤仓库 (optional)</param>
        /// <param name="filterType">仓库类型 (optional)</param>
        /// <param name="role">最小仓库权限，默认owner (optional)</param>
        /// <param name="orderBy">排序类型，默认last_updated_at (optional)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReposApiResponse"/>&gt;</returns>
        public async Task<IGetReposApiResponse?> GetReposOrDefaultAsync(Option<int> page = default, Option<int> pageSize = default, Option<string> search = default, Option<string> filterType = default, Option<string> role = default, Option<string> orderBy = default, Option<bool> desc = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetReposAsync(page, pageSize, search, filterType, role, orderBy, desc, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取当前用户拥有指定权限及其以上权限的仓库 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="search">过滤仓库 (optional)</param>
        /// <param name="filterType">仓库类型 (optional)</param>
        /// <param name="role">最小仓库权限，默认owner (optional)</param>
        /// <param name="orderBy">排序类型，默认last_updated_at (optional)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReposApiResponse"/>&gt;</returns>
        public async Task<IGetReposApiResponse> GetReposAsync(Option<int> page = default, Option<int> pageSize = default, Option<string> search = default, Option<string> filterType = default, Option<string> role = default, Option<string> orderBy = default, Option<bool> desc = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetRepos(search, filterType, role, orderBy);

                FormatGetRepos(ref page, ref pageSize, ref search, ref filterType, ref role, ref orderBy, ref desc);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/user/repos"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/user/repos");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    if (filterType.IsSet)
                        parseQueryStringLocalVar["filter_type"] = ClientUtils.ParameterToString(filterType.Value);

                    if (role.IsSet)
                        parseQueryStringLocalVar["role"] = ClientUtils.ParameterToString(role.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["order_by"] = ClientUtils.ParameterToString(orderBy.Value);

                    if (desc.IsSet)
                        parseQueryStringLocalVar["desc"] = ClientUtils.ParameterToString(desc.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetReposApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetReposApiResponse>();

                        GetReposApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/user/repos", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetReposDefaultImplementation(apiResponseLocalVar, page, pageSize, search, filterType, role, orderBy, desc);

                        Events.ExecuteOnGetRepos(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetReposDefaultImplementation(e, "/user/repos", uriBuilderLocalVar.Path, page, pageSize, search, filterType, role, orderBy, desc);
                Events.ExecuteOnErrorGetRepos(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetReposApiResponse"/>
        /// </summary>
        public partial class GetReposApiResponse : CNBOpenApi.Client.ApiResponse, IGetReposApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetReposApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetReposApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetReposApiResponse(ILogger<GetReposApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoRepos4User>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoRepos4User>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoRepos4User>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetReposByUserName(ref string username, ref Option<string> search, ref Option<string> role, ref Option<int> page, ref Option<int> pageSize, ref Option<bool> desc, ref Option<string> orderBy);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="username"></param>
        /// <param name="search"></param>
        /// <param name="role"></param>
        /// <param name="orderBy"></param>
        /// <returns></returns>
        private void ValidateGetReposByUserName(string username, Option<string> search, Option<string> role, Option<string> orderBy)
        {
            if (username == null)
                throw new ArgumentNullException(nameof(username));

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role));

            if (orderBy.IsSet && orderBy.Value == null)
                throw new ArgumentNullException(nameof(orderBy));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="username"></param>
        /// <param name="search"></param>
        /// <param name="role"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="desc"></param>
        /// <param name="orderBy"></param>
        private void AfterGetReposByUserNameDefaultImplementation(IGetReposByUserNameApiResponse apiResponseLocalVar, string username, Option<string> search, Option<string> role, Option<int> page, Option<int> pageSize, Option<bool> desc, Option<string> orderBy)
        {
            bool suppressDefaultLog = false;
            AfterGetReposByUserName(ref suppressDefaultLog, apiResponseLocalVar, username, search, role, page, pageSize, desc, orderBy);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="username"></param>
        /// <param name="search"></param>
        /// <param name="role"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="desc"></param>
        /// <param name="orderBy"></param>
        partial void AfterGetReposByUserName(ref bool suppressDefaultLog, IGetReposByUserNameApiResponse apiResponseLocalVar, string username, Option<string> search, Option<string> role, Option<int> page, Option<int> pageSize, Option<bool> desc, Option<string> orderBy);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="username"></param>
        /// <param name="search"></param>
        /// <param name="role"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="desc"></param>
        /// <param name="orderBy"></param>
        private void OnErrorGetReposByUserNameDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string username, Option<string> search, Option<string> role, Option<int> page, Option<int> pageSize, Option<bool> desc, Option<string> orderBy)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetReposByUserName(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, username, search, role, page, pageSize, desc, orderBy);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="username"></param>
        /// <param name="search"></param>
        /// <param name="role"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="desc"></param>
        /// <param name="orderBy"></param>
        partial void OnErrorGetReposByUserName(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string username, Option<string> search, Option<string> role, Option<int> page, Option<int> pageSize, Option<bool> desc, Option<string> orderBy);

        /// <summary>
        /// 获取指定用户有指定以上权限并且客人态可见的仓库 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </summary>
        /// <param name="username">UserName</param>
        /// <param name="search">过滤仓库 (optional)</param>
        /// <param name="role">最小仓库权限，默认owner (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="orderBy">排序类型，默认last_updated_at (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReposByUserNameApiResponse"/>&gt;</returns>
        public async Task<IGetReposByUserNameApiResponse?> GetReposByUserNameOrDefaultAsync(string username, Option<string> search = default, Option<string> role = default, Option<int> page = default, Option<int> pageSize = default, Option<bool> desc = default, Option<string> orderBy = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetReposByUserNameAsync(username, search, role, page, pageSize, desc, orderBy, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定用户有指定以上权限并且客人态可见的仓库 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">UserName</param>
        /// <param name="search">过滤仓库 (optional)</param>
        /// <param name="role">最小仓库权限，默认owner (optional)</param>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="orderBy">排序类型，默认last_updated_at (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReposByUserNameApiResponse"/>&gt;</returns>
        public async Task<IGetReposByUserNameApiResponse> GetReposByUserNameAsync(string username, Option<string> search = default, Option<string> role = default, Option<int> page = default, Option<int> pageSize = default, Option<bool> desc = default, Option<string> orderBy = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetReposByUserName(username, search, role, orderBy);

                FormatGetReposByUserName(ref username, ref search, ref role, ref page, ref pageSize, ref desc, ref orderBy);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/users/{username}/repos"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/users/{username}/repos");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    if (role.IsSet)
                        parseQueryStringLocalVar["role"] = ClientUtils.ParameterToString(role.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (desc.IsSet)
                        parseQueryStringLocalVar["desc"] = ClientUtils.ParameterToString(desc.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["order_by"] = ClientUtils.ParameterToString(orderBy.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetReposByUserNameApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetReposByUserNameApiResponse>();

                        GetReposByUserNameApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/{username}/repos", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetReposByUserNameDefaultImplementation(apiResponseLocalVar, username, search, role, page, pageSize, desc, orderBy);

                        Events.ExecuteOnGetReposByUserName(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetReposByUserNameDefaultImplementation(e, "/users/{username}/repos", uriBuilderLocalVar.Path, username, search, role, page, pageSize, desc, orderBy);
                Events.ExecuteOnErrorGetReposByUserName(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetReposByUserNameApiResponse"/>
        /// </summary>
        public partial class GetReposByUserNameApiResponse : CNBOpenApi.Client.ApiResponse, IGetReposByUserNameApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetReposByUserNameApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetReposByUserNameApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetReposByUserNameApiResponse(ILogger<GetReposByUserNameApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoRepos4User>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoRepos4User>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoRepos4User>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetUserAllStaredRepos(ref Option<int> page, ref Option<int> pageSize, ref Option<string> search, ref Option<bool> desc, ref Option<string> orderBy);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="search"></param>
        /// <param name="orderBy"></param>
        /// <returns></returns>
        private void ValidateGetUserAllStaredRepos(Option<string> search, Option<string> orderBy)
        {
            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));

            if (orderBy.IsSet && orderBy.Value == null)
                throw new ArgumentNullException(nameof(orderBy));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="search"></param>
        /// <param name="desc"></param>
        /// <param name="orderBy"></param>
        private void AfterGetUserAllStaredReposDefaultImplementation(IGetUserAllStaredReposApiResponse apiResponseLocalVar, Option<int> page, Option<int> pageSize, Option<string> search, Option<bool> desc, Option<string> orderBy)
        {
            bool suppressDefaultLog = false;
            AfterGetUserAllStaredRepos(ref suppressDefaultLog, apiResponseLocalVar, page, pageSize, search, desc, orderBy);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="search"></param>
        /// <param name="desc"></param>
        /// <param name="orderBy"></param>
        partial void AfterGetUserAllStaredRepos(ref bool suppressDefaultLog, IGetUserAllStaredReposApiResponse apiResponseLocalVar, Option<int> page, Option<int> pageSize, Option<string> search, Option<bool> desc, Option<string> orderBy);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="search"></param>
        /// <param name="desc"></param>
        /// <param name="orderBy"></param>
        private void OnErrorGetUserAllStaredReposDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> pageSize, Option<string> search, Option<bool> desc, Option<string> orderBy)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUserAllStaredRepos(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page, pageSize, search, desc, orderBy);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="search"></param>
        /// <param name="desc"></param>
        /// <param name="orderBy"></param>
        partial void OnErrorGetUserAllStaredRepos(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> pageSize, Option<string> search, Option<bool> desc, Option<string> orderBy);

        /// <summary>
        /// 获取当前用户 star 的仓库列表 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </summary>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="search">过滤仓库 (optional)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="orderBy">排序类型，默认last_updated_at (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserAllStaredReposApiResponse"/>&gt;</returns>
        public async Task<IGetUserAllStaredReposApiResponse?> GetUserAllStaredReposOrDefaultAsync(Option<int> page = default, Option<int> pageSize = default, Option<string> search = default, Option<bool> desc = default, Option<string> orderBy = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserAllStaredReposAsync(page, pageSize, search, desc, orderBy, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取当前用户 star 的仓库列表 访问令牌调用此接口需包含以下权限  account-engage:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">第几页，从1开始 (optional, default to 1)</param>
        /// <param name="pageSize">每页多少条数据 (optional, default to 10)</param>
        /// <param name="search">过滤仓库 (optional)</param>
        /// <param name="desc">排序顺序 (optional, default to false)</param>
        /// <param name="orderBy">排序类型，默认last_updated_at (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserAllStaredReposApiResponse"/>&gt;</returns>
        public async Task<IGetUserAllStaredReposApiResponse> GetUserAllStaredReposAsync(Option<int> page = default, Option<int> pageSize = default, Option<string> search = default, Option<bool> desc = default, Option<string> orderBy = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetUserAllStaredRepos(search, orderBy);

                FormatGetUserAllStaredRepos(ref page, ref pageSize, ref search, ref desc, ref orderBy);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/user/stared-repos"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/user/stared-repos");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    if (desc.IsSet)
                        parseQueryStringLocalVar["desc"] = ClientUtils.ParameterToString(desc.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["order_by"] = ClientUtils.ParameterToString(orderBy.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserAllStaredReposApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserAllStaredReposApiResponse>();

                        GetUserAllStaredReposApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/user/stared-repos", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserAllStaredReposDefaultImplementation(apiResponseLocalVar, page, pageSize, search, desc, orderBy);

                        Events.ExecuteOnGetUserAllStaredRepos(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserAllStaredReposDefaultImplementation(e, "/user/stared-repos", uriBuilderLocalVar.Path, page, pageSize, search, desc, orderBy);
                Events.ExecuteOnErrorGetUserAllStaredRepos(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserAllStaredReposApiResponse"/>
        /// </summary>
        public partial class GetUserAllStaredReposApiResponse : CNBOpenApi.Client.ApiResponse, IGetUserAllStaredReposApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserAllStaredReposApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserAllStaredReposApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserAllStaredReposApiResponse(ILogger<GetUserAllStaredReposApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoRepos4UserBase>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoRepos4UserBase>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoRepos4UserBase>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListForksRepos(ref string repo, ref int page, ref int pageSize);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <returns></returns>
        private void ValidateListForksRepos(string repo)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void AfterListForksReposDefaultImplementation(IListForksReposApiResponse apiResponseLocalVar, string repo, int page, int pageSize)
        {
            bool suppressDefaultLog = false;
            AfterListForksRepos(ref suppressDefaultLog, apiResponseLocalVar, repo, page, pageSize);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void AfterListForksRepos(ref bool suppressDefaultLog, IListForksReposApiResponse apiResponseLocalVar, string repo, int page, int pageSize);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void OnErrorListForksReposDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int page, int pageSize)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListForksRepos(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, page, pageSize);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void OnErrorListForksRepos(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, int page, int pageSize);

        /// <summary>
        /// 获取指定仓库的 fork 列表 访问令牌调用此接口需包含以下权限  repo-base-info:r
        /// </summary>
        /// <param name="repo">slug</param>
        /// <param name="page">page</param>
        /// <param name="pageSize">page</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListForksReposApiResponse"/>&gt;</returns>
        public async Task<IListForksReposApiResponse?> ListForksReposOrDefaultAsync(string repo, int page, int pageSize, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListForksReposAsync(repo, page, pageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定仓库的 fork 列表 访问令牌调用此接口需包含以下权限  repo-base-info:r
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">slug</param>
        /// <param name="page">page</param>
        /// <param name="pageSize">page</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListForksReposApiResponse"/>&gt;</returns>
        public async Task<IListForksReposApiResponse> ListForksReposAsync(string repo, int page, int pageSize, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListForksRepos(repo);

                FormatListForksRepos(ref repo, ref page, ref pageSize);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}/-/forks"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}/-/forks");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page);
                    parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListForksReposApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListForksReposApiResponse>();

                        ListForksReposApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}/-/forks", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListForksReposDefaultImplementation(apiResponseLocalVar, repo, page, pageSize);

                        Events.ExecuteOnListForksRepos(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListForksReposDefaultImplementation(e, "/{repo}/-/forks", uriBuilderLocalVar.Path, repo, page, pageSize);
                Events.ExecuteOnErrorListForksRepos(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListForksReposApiResponse"/>
        /// </summary>
        public partial class ListForksReposApiResponse : CNBOpenApi.Client.ApiResponse, IListForksReposApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListForksReposApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListForksReposApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListForksReposApiResponse(ILogger<ListForksReposApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoForks>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoForks>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoForks>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSetPinnedRepoByGroup(ref string group, List<string> request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="group"></param>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateSetPinnedRepoByGroup(string group, List<string> request)
        {
            if (group == null)
                throw new ArgumentNullException(nameof(group));

            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="request"></param>
        private void AfterSetPinnedRepoByGroupDefaultImplementation(ISetPinnedRepoByGroupApiResponse apiResponseLocalVar, string group, List<string> request)
        {
            bool suppressDefaultLog = false;
            AfterSetPinnedRepoByGroup(ref suppressDefaultLog, apiResponseLocalVar, group, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="request"></param>
        partial void AfterSetPinnedRepoByGroup(ref bool suppressDefaultLog, ISetPinnedRepoByGroupApiResponse apiResponseLocalVar, string group, List<string> request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="request"></param>
        private void OnErrorSetPinnedRepoByGroupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, List<string> request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSetPinnedRepoByGroup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, group, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="group"></param>
        /// <param name="request"></param>
        partial void OnErrorSetPinnedRepoByGroup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string group, List<string> request);

        /// <summary>
        /// 更新指定组织仓库墙 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </summary>
        /// <param name="group">slug</param>
        /// <param name="request">repo path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetPinnedRepoByGroupApiResponse"/>&gt;</returns>
        public async Task<ISetPinnedRepoByGroupApiResponse?> SetPinnedRepoByGroupOrDefaultAsync(string group, List<string> request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SetPinnedRepoByGroupAsync(group, request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 更新指定组织仓库墙 访问令牌调用此接口需包含以下权限  group-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">slug</param>
        /// <param name="request">repo path</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetPinnedRepoByGroupApiResponse"/>&gt;</returns>
        public async Task<ISetPinnedRepoByGroupApiResponse> SetPinnedRepoByGroupAsync(string group, List<string> request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSetPinnedRepoByGroup(group, request);

                FormatSetPinnedRepoByGroup(ref group, request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{group}/-/pinned-repos"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{group}/-/pinned-repos");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bgroup%7D", Uri.EscapeDataString(group.ToString()));

                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.cnb.api+json",
                        "application/vnd.cnb.web+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SetPinnedRepoByGroupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SetPinnedRepoByGroupApiResponse>();

                        SetPinnedRepoByGroupApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{group}/-/pinned-repos", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSetPinnedRepoByGroupDefaultImplementation(apiResponseLocalVar, group, request);

                        Events.ExecuteOnSetPinnedRepoByGroup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSetPinnedRepoByGroupDefaultImplementation(e, "/{group}/-/pinned-repos", uriBuilderLocalVar.Path, group, request);
                Events.ExecuteOnErrorSetPinnedRepoByGroup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SetPinnedRepoByGroupApiResponse"/>
        /// </summary>
        public partial class SetPinnedRepoByGroupApiResponse : CNBOpenApi.Client.ApiResponse, ISetPinnedRepoByGroupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SetPinnedRepoByGroupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SetPinnedRepoByGroupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SetPinnedRepoByGroupApiResponse(ILogger<SetPinnedRepoByGroupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DtoRepos4UserBase>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DtoRepos4UserBase>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DtoRepos4UserBase>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateRepo(ref string repo, DtoRepoPatch request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="repo"></param>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateUpdateRepo(string repo, DtoRepoPatch request)
        {
            if (repo == null)
                throw new ArgumentNullException(nameof(repo));

            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="request"></param>
        private void AfterUpdateRepoDefaultImplementation(IUpdateRepoApiResponse apiResponseLocalVar, string repo, DtoRepoPatch request)
        {
            bool suppressDefaultLog = false;
            AfterUpdateRepo(ref suppressDefaultLog, apiResponseLocalVar, repo, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="request"></param>
        partial void AfterUpdateRepo(ref bool suppressDefaultLog, IUpdateRepoApiResponse apiResponseLocalVar, string repo, DtoRepoPatch request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="request"></param>
        private void OnErrorUpdateRepoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, DtoRepoPatch request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateRepo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, repo, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="repo"></param>
        /// <param name="request"></param>
        partial void OnErrorUpdateRepo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string repo, DtoRepoPatch request);

        /// <summary>
        /// 更新仓库信息, 可更新的内容为: 仓库简介, 仓库站点, 仓库主题, 开源许可证 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <param name="repo">仓库路径</param>
        /// <param name="request">仓库信息</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRepoApiResponse"/>&gt;</returns>
        public async Task<IUpdateRepoApiResponse?> UpdateRepoOrDefaultAsync(string repo, DtoRepoPatch request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateRepoAsync(repo, request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 更新仓库信息, 可更新的内容为: 仓库简介, 仓库站点, 仓库主题, 开源许可证 访问令牌调用此接口需包含以下权限  repo-manage:rw
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="repo">仓库路径</param>
        /// <param name="request">仓库信息</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRepoApiResponse"/>&gt;</returns>
        public async Task<IUpdateRepoApiResponse> UpdateRepoAsync(string repo, DtoRepoPatch request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateRepo(repo, request);

                FormatUpdateRepo(ref repo, request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{repo}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{repo}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepo%7D", Uri.EscapeDataString(repo.ToString()));

                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateRepoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateRepoApiResponse>();

                        UpdateRepoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{repo}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateRepoDefaultImplementation(apiResponseLocalVar, repo, request);

                        Events.ExecuteOnUpdateRepo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateRepoDefaultImplementation(e, "/{repo}", uriBuilderLocalVar.Path, repo, request);
                Events.ExecuteOnErrorUpdateRepo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateRepoApiResponse"/>
        /// </summary>
        public partial class UpdateRepoApiResponse : CNBOpenApi.Client.ApiResponse, IUpdateRepoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateRepoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateRepoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateRepoApiResponse(ILogger<UpdateRepoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
