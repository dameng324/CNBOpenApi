/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using CNBOpenApi.Api;
using CNBOpenApi.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace CNBOpenApi.Test.Api
{
    /// <summary>
    ///  Class for testing RepositoriesApi
    /// </summary>
    public sealed class RepositoriesApiTests : ApiTestsBase
    {
        private readonly IRepositoriesApi _instance;

        public RepositoriesApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IRepositoriesApi>();
        }

        /// <summary>
        /// Test CreateAFork
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateAForkAsyncTest()
        {
            string repo = default!;
            DtoForkReq request = default!;
            await _instance.CreateAForkAsync(repo, request);
        }

        /// <summary>
        /// Test CreateRepo
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateRepoAsyncTest()
        {
            DtoCreateRepoReq request = default!;
            string group = default!;
            await _instance.CreateRepoAsync(request, group);
        }

        /// <summary>
        /// Test DeleteRepo
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteRepoAsyncTest()
        {
            string repo = default!;
            Client.Option<string> xCnbIdentityTicket = default!;
            await _instance.DeleteRepoAsync(repo, xCnbIdentityTicket);
        }

        /// <summary>
        /// Test GetGroupSubRepos
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetGroupSubReposAsyncTest()
        {
            string group = default!;
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            Client.Option<string> filterType = default!;
            Client.Option<string> orderBy = default!;
            Client.Option<bool> desc = default!;
            Client.Option<string> descendant = default!;
            Client.Option<string> search = default!;
            var response = await _instance.GetGroupSubReposAsync(group, page, pageSize, filterType, orderBy, desc, descendant, search);
            var model = response.Ok();
            Assert.IsType<List<DtoRepos4UserBase>>(model);
        }

        /// <summary>
        /// Test GetPinnedRepoByGroup
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPinnedRepoByGroupAsyncTest()
        {
            string group = default!;
            var response = await _instance.GetPinnedRepoByGroupAsync(group);
            var model = response.Ok();
            Assert.IsType<List<DtoRepos4UserBase>>(model);
        }

        /// <summary>
        /// Test GetPinnedRepoByID
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPinnedRepoByIDAsyncTest()
        {
            string username = default!;
            var response = await _instance.GetPinnedRepoByIDAsync(username);
            var model = response.Ok();
            Assert.IsType<List<DtoRepos4User>>(model);
        }

        /// <summary>
        /// Test GetRepo
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetRepoAsyncTest()
        {
            string repo = default!;
            var response = await _instance.GetRepoAsync(repo);
            var model = response.Ok();
            Assert.IsType<DtoRepos4User>(model);
        }

        /// <summary>
        /// Test GetRepos
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReposAsyncTest()
        {
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            Client.Option<string> search = default!;
            Client.Option<string> filterType = default!;
            Client.Option<string> role = default!;
            Client.Option<string> orderBy = default!;
            Client.Option<bool> desc = default!;
            var response = await _instance.GetReposAsync(page, pageSize, search, filterType, role, orderBy, desc);
            var model = response.Ok();
            Assert.IsType<List<DtoRepos4User>>(model);
        }

        /// <summary>
        /// Test GetReposByUserName
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReposByUserNameAsyncTest()
        {
            string username = default!;
            Client.Option<string> search = default!;
            Client.Option<string> role = default!;
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            Client.Option<bool> desc = default!;
            Client.Option<string> orderBy = default!;
            var response = await _instance.GetReposByUserNameAsync(username, search, role, page, pageSize, desc, orderBy);
            var model = response.Ok();
            Assert.IsType<List<DtoRepos4User>>(model);
        }

        /// <summary>
        /// Test GetUserAllStaredRepos
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUserAllStaredReposAsyncTest()
        {
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            Client.Option<string> search = default!;
            Client.Option<bool> desc = default!;
            Client.Option<string> orderBy = default!;
            var response = await _instance.GetUserAllStaredReposAsync(page, pageSize, search, desc, orderBy);
            var model = response.Ok();
            Assert.IsType<List<DtoRepos4UserBase>>(model);
        }

        /// <summary>
        /// Test ListForksRepos
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListForksReposAsyncTest()
        {
            string repo = default!;
            int page = default!;
            int pageSize = default!;
            var response = await _instance.ListForksReposAsync(repo, page, pageSize);
            var model = response.Ok();
            Assert.IsType<List<DtoForks>>(model);
        }

        /// <summary>
        /// Test SetPinnedRepoByGroup
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetPinnedRepoByGroupAsyncTest()
        {
            string group = default!;
            List<string> request = default!;
            var response = await _instance.SetPinnedRepoByGroupAsync(group, request);
            var model = response.Ok();
            Assert.IsType<List<DtoRepos4UserBase>>(model);
        }

        /// <summary>
        /// Test UpdateRepo
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateRepoAsyncTest()
        {
            string repo = default!;
            DtoRepoPatch request = default!;
            await _instance.UpdateRepoAsync(repo, request);
        }
    }
}
