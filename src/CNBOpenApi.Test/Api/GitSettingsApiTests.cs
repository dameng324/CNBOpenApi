/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using CNBOpenApi.Api;
using CNBOpenApi.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace CNBOpenApi.Test.Api
{
    /// <summary>
    ///  Class for testing GitSettingsApi
    /// </summary>
    public sealed class GitSettingsApiTests : ApiTestsBase
    {
        private readonly IGitSettingsApi _instance;

        public GitSettingsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IGitSettingsApi>();
        }

        /// <summary>
        /// Test DeleteBranchProtection
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteBranchProtectionAsyncTest()
        {
            string repo = default!;
            string id = default!;
            await _instance.DeleteBranchProtectionAsync(repo, id);
        }

        /// <summary>
        /// Test GetBranchProtection
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetBranchProtectionAsyncTest()
        {
            string repo = default!;
            string id = default!;
            var response = await _instance.GetBranchProtectionAsync(repo, id);
            var model = response.Ok();
            Assert.IsType<ApiBranchProtection>(model);
        }

        /// <summary>
        /// Test GetPipelineSettings
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelineSettingsAsyncTest()
        {
            string repo = default!;
            var response = await _instance.GetPipelineSettingsAsync(repo);
            var model = response.Ok();
            Assert.IsType<ApiPipelineSettings>(model);
        }

        /// <summary>
        /// Test GetPullRequestSettings
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPullRequestSettingsAsyncTest()
        {
            string repo = default!;
            var response = await _instance.GetPullRequestSettingsAsync(repo);
            var model = response.Ok();
            Assert.IsType<ApiPullRequestSettings>(model);
        }

        /// <summary>
        /// Test GetPushLimitSettings
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPushLimitSettingsAsyncTest()
        {
            string repo = default!;
            var response = await _instance.GetPushLimitSettingsAsync(repo);
            var model = response.Ok();
            Assert.IsType<ApiPushLimitSettings>(model);
        }

        /// <summary>
        /// Test ListBranchProtections
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListBranchProtectionsAsyncTest()
        {
            string repo = default!;
            var response = await _instance.ListBranchProtectionsAsync(repo);
            var model = response.Ok();
            Assert.IsType<List<ApiBranchProtection>>(model);
        }

        /// <summary>
        /// Test PatchBranchProtection
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PatchBranchProtectionAsyncTest()
        {
            string repo = default!;
            string id = default!;
            ApiBranchProtection branchProtectionForm = default!;
            await _instance.PatchBranchProtectionAsync(repo, id, branchProtectionForm);
        }

        /// <summary>
        /// Test PostBranchProtection
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostBranchProtectionAsyncTest()
        {
            string repo = default!;
            ApiBranchProtection branchProtectionForm = default!;
            await _instance.PostBranchProtectionAsync(repo, branchProtectionForm);
        }

        /// <summary>
        /// Test PutPipelineSettings
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PutPipelineSettingsAsyncTest()
        {
            string repo = default!;
            WebPipelineSettings pipelineForm = default!;
            await _instance.PutPipelineSettingsAsync(repo, pipelineForm);
        }

        /// <summary>
        /// Test PutPullRequestSettings
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PutPullRequestSettingsAsyncTest()
        {
            string repo = default!;
            ApiPullRequestSettings pullRequestForm = default!;
            await _instance.PutPullRequestSettingsAsync(repo, pullRequestForm);
        }

        /// <summary>
        /// Test PutPushLimitSettings
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PutPushLimitSettingsAsyncTest()
        {
            string repo = default!;
            ApiPushLimitSettings pushLimitForm = default!;
            await _instance.PutPushLimitSettingsAsync(repo, pushLimitForm);
        }
    }
}
