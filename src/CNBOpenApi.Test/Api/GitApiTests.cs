/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using CNBOpenApi.Api;
using CNBOpenApi.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace CNBOpenApi.Test.Api
{
    /// <summary>
    ///  Class for testing GitApi
    /// </summary>
    public sealed class GitApiTests : ApiTestsBase
    {
        private readonly IGitApi _instance;

        public GitApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IGitApi>();
        }

        /// <summary>
        /// Test CreateBlob
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateBlobAsyncTest()
        {
            string repo = default!;
            ApiPostBlobForm postBlobForm = default!;
            var response = await _instance.CreateBlobAsync(repo, postBlobForm);
            var model = response.Created();
            Assert.IsType<ApiBlob>(model);
        }

        /// <summary>
        /// Test CreateBranch
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateBranchAsyncTest()
        {
            string repo = default!;
            OpenapiCreateBranchForm createBranchForm = default!;
            await _instance.CreateBranchAsync(repo, createBranchForm);
        }

        /// <summary>
        /// Test CreateTag
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateTagAsyncTest()
        {
            string repo = default!;
            ApiPostTagFrom postTagForm = default!;
            var response = await _instance.CreateTagAsync(repo, postTagForm);
            var model = response.Created();
            Assert.IsType<ApiTag>(model);
        }

        /// <summary>
        /// Test DeleteBranch
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteBranchAsyncTest()
        {
            string repo = default!;
            string branch = default!;
            await _instance.DeleteBranchAsync(repo, branch);
        }

        /// <summary>
        /// Test DeleteCommitAnnotation
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteCommitAnnotationAsyncTest()
        {
            string repo = default!;
            string sha = default!;
            string key = default!;
            await _instance.DeleteCommitAnnotationAsync(repo, sha, key);
        }

        /// <summary>
        /// Test DeleteCommitAsset
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteCommitAssetAsyncTest()
        {
            string repo = default!;
            string sha1 = default!;
            int assetId = default!;
            await _instance.DeleteCommitAssetAsync(repo, sha1, assetId);
        }

        /// <summary>
        /// Test DeleteTag
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteTagAsyncTest()
        {
            string repo = default!;
            string tag = default!;
            await _instance.DeleteTagAsync(repo, tag);
        }

        /// <summary>
        /// Test DeleteTagAnnotation
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteTagAnnotationAsyncTest()
        {
            string repo = default!;
            string tagWithKey = default!;
            await _instance.DeleteTagAnnotationAsync(repo, tagWithKey);
        }

        /// <summary>
        /// Test GetArchiveCommitChangedFiles
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetArchiveCommitChangedFilesAsyncTest()
        {
            string repo = default!;
            string sha1 = default!;
            await _instance.GetArchiveCommitChangedFilesAsync(repo, sha1);
        }

        /// <summary>
        /// Test GetArchiveCompareChangedFiles
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetArchiveCompareChangedFilesAsyncTest()
        {
            string repo = default!;
            string baseHead = default!;
            await _instance.GetArchiveCompareChangedFilesAsync(repo, baseHead);
        }

        /// <summary>
        /// Test GetBranch
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetBranchAsyncTest()
        {
            string repo = default!;
            string branch = default!;
            var response = await _instance.GetBranchAsync(repo, branch);
            var model = response.Ok();
            Assert.IsType<ApiBranchDetail>(model);
        }

        /// <summary>
        /// Test GetCommit
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetCommitAsyncTest()
        {
            string repo = default!;
            string varRef = default!;
            var response = await _instance.GetCommitAsync(repo, varRef);
            var model = response.Ok();
            Assert.IsType<ApiCommit>(model);
        }

        /// <summary>
        /// Test GetCommitAnnotations
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetCommitAnnotationsAsyncTest()
        {
            string repo = default!;
            string sha = default!;
            var response = await _instance.GetCommitAnnotationsAsync(repo, sha);
            var model = response.Ok();
            Assert.IsType<List<WebCommitAnnotation>>(model);
        }

        /// <summary>
        /// Test GetCommitAnnotationsInBatch
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetCommitAnnotationsInBatchAsyncTest()
        {
            string repo = default!;
            WebGetCommitAnnotationsInBatchForm getCommitAnnotationsForm = default!;
            var response = await _instance.GetCommitAnnotationsInBatchAsync(repo, getCommitAnnotationsForm);
            var model = response.Ok();
            Assert.IsType<List<WebCommitAnnotationInBatch>>(model);
        }

        /// <summary>
        /// Test GetCommitAssetsBySha
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetCommitAssetsByShaAsyncTest()
        {
            string repo = default!;
            string sha1 = default!;
            var response = await _instance.GetCommitAssetsByShaAsync(repo, sha1);
            var model = response.Ok();
            Assert.IsType<List<ApiCommitAsset>>(model);
        }

        /// <summary>
        /// Test GetCommitStatuses
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetCommitStatusesAsyncTest()
        {
            string repo = default!;
            string commitish = default!;
            var response = await _instance.GetCommitStatusesAsync(repo, commitish);
            var model = response.Ok();
            Assert.IsType<List<ApiCommitStatus>>(model);
        }

        /// <summary>
        /// Test GetCompareCommits
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetCompareCommitsAsyncTest()
        {
            string repo = default!;
            string baseHead = default!;
            var response = await _instance.GetCompareCommitsAsync(repo, baseHead);
            var model = response.Ok();
            Assert.IsType<ApiCompareResponse>(model);
        }

        /// <summary>
        /// Test GetContent
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetContentAsyncTest()
        {
            string repo = default!;
            string filePath = default!;
            Client.Option<string> varRef = default!;
            var response = await _instance.GetContentAsync(repo, filePath, varRef);
            var model = response.Ok();
            Assert.IsType<ApiContent>(model);
        }

        /// <summary>
        /// Test GetHead
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetHeadAsyncTest()
        {
            string repo = default!;
            var response = await _instance.GetHeadAsync(repo);
            var model = response.Ok();
            Assert.IsType<OpenapiHeadRef>(model);
        }

        /// <summary>
        /// Test GetTag
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTagAsyncTest()
        {
            string repo = default!;
            string tag = default!;
            var response = await _instance.GetTagAsync(repo, tag);
            var model = response.Ok();
            Assert.IsType<ApiTag>(model);
        }

        /// <summary>
        /// Test GetTagAnnotations
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTagAnnotationsAsyncTest()
        {
            string repo = default!;
            string tag = default!;
            var response = await _instance.GetTagAnnotationsAsync(repo, tag);
            var model = response.Ok();
            Assert.IsType<List<WebTagAnnotation>>(model);
        }

        /// <summary>
        /// Test ListBranches
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListBranchesAsyncTest()
        {
            string repo = default!;
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            var response = await _instance.ListBranchesAsync(repo, page, pageSize);
            var model = response.Ok();
            Assert.IsType<List<ApiBranch>>(model);
        }

        /// <summary>
        /// Test ListCommits
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListCommitsAsyncTest()
        {
            string repo = default!;
            Client.Option<string> sha = default!;
            Client.Option<string> author = default!;
            Client.Option<string> committer = default!;
            Client.Option<string> since = default!;
            Client.Option<string> until = default!;
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            var response = await _instance.ListCommitsAsync(repo, sha, author, committer, since, until, page, pageSize);
            var model = response.Ok();
            Assert.IsType<List<ApiCommit>>(model);
        }

        /// <summary>
        /// Test ListTags
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListTagsAsyncTest()
        {
            string repo = default!;
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            var response = await _instance.ListTagsAsync(repo, page, pageSize);
            var model = response.Ok();
            Assert.IsType<List<ApiTag>>(model);
        }

        /// <summary>
        /// Test PostCommitAssetUploadConfirmation
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostCommitAssetUploadConfirmationAsyncTest()
        {
            string repo = default!;
            int sha1 = default!;
            string token = default!;
            string assetPath = default!;
            await _instance.PostCommitAssetUploadConfirmationAsync(repo, sha1, token, assetPath);
        }

        /// <summary>
        /// Test PostCommitAssetUploadURL
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostCommitAssetUploadURLAsyncTest()
        {
            string repo = default!;
            int sha1 = default!;
            OpenapiPostCommitAssetUploadURLForm createCommitAssetUploadUrlForm = default!;
            var response = await _instance.PostCommitAssetUploadURLAsync(repo, sha1, createCommitAssetUploadUrlForm);
            var model = response.Created();
            Assert.IsType<OpenapiCommitAssetUploadURL>(model);
        }

        /// <summary>
        /// Test PutCommitAnnotations
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PutCommitAnnotationsAsyncTest()
        {
            string repo = default!;
            string sha = default!;
            OpenapiPutCommitAnnotationsForm putCommitAnnotationsForm = default!;
            await _instance.PutCommitAnnotationsAsync(repo, sha, putCommitAnnotationsForm);
        }

        /// <summary>
        /// Test PutTagAnnotations
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PutTagAnnotationsAsyncTest()
        {
            string repo = default!;
            string tag = default!;
            OpenapiPutTagAnnotationsForm putTagAnnotationsForm = default!;
            await _instance.PutTagAnnotationsAsync(repo, tag, putTagAnnotationsForm);
        }
    }
}
