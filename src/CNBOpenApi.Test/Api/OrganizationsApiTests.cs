/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using CNBOpenApi.Api;
using CNBOpenApi.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace CNBOpenApi.Test.Api
{
    /// <summary>
    ///  Class for testing OrganizationsApi
    /// </summary>
    public sealed class OrganizationsApiTests : ApiTestsBase
    {
        private readonly IOrganizationsApi _instance;

        public OrganizationsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IOrganizationsApi>();
        }

        /// <summary>
        /// Test CreateOrganization
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateOrganizationAsyncTest()
        {
            DtoCreateGroupReq request = default!;
            await _instance.CreateOrganizationAsync(request);
        }

        /// <summary>
        /// Test DeleteOrganization
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteOrganizationAsyncTest()
        {
            string group = default!;
            Client.Option<string> xCnbIdentityTicket = default!;
            await _instance.DeleteOrganizationAsync(group, xCnbIdentityTicket);
        }

        /// <summary>
        /// Test GetGroup
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetGroupAsyncTest()
        {
            string group = default!;
            var response = await _instance.GetGroupAsync(group);
            var model = response.Ok();
            Assert.IsType<DtoOrganizationAccess>(model);
        }

        /// <summary>
        /// Test GetGroupSetting
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetGroupSettingAsyncTest()
        {
            string group = default!;
            var response = await _instance.GetGroupSettingAsync(group);
            var model = response.Ok();
            Assert.IsType<DtoOrganizationSettingWithParent>(model);
        }

        /// <summary>
        /// Test GetGroupsByUserID
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetGroupsByUserIDAsyncTest()
        {
            string username = default!;
            Client.Option<string> search = default!;
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            Client.Option<bool> desc = default!;
            Client.Option<string> orderBy = default!;
            var response = await _instance.GetGroupsByUserIDAsync(username, search, page, pageSize, desc, orderBy);
            var model = response.Ok();
            Assert.IsType<DtoOrganizationUnion>(model);
        }

        /// <summary>
        /// Test ListGroups
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListGroupsAsyncTest()
        {
            string group = default!;
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            Client.Option<int> access = default!;
            var response = await _instance.ListGroupsAsync(group, page, pageSize, access);
            var model = response.Ok();
            Assert.IsType<List<DtoOrganizationAccess>>(model);
        }

        /// <summary>
        /// Test ListSubgroups
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListSubgroupsAsyncTest()
        {
            string group = default!;
            int page = default!;
            int pageSize = default!;
            Client.Option<string> search = default!;
            var response = await _instance.ListSubgroupsAsync(group, page, pageSize, search);
            var model = response.Ok();
            Assert.IsType<List<DtoOrganizationUnion>>(model);
        }

        /// <summary>
        /// Test ListTopGroups
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListTopGroupsAsyncTest()
        {
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            Client.Option<string> search = default!;
            Client.Option<string> role = default!;
            var response = await _instance.ListTopGroupsAsync(page, pageSize, search, role);
            var model = response.Ok();
            Assert.IsType<List<DtoOrganizationAccess>>(model);
        }

        /// <summary>
        /// Test UpdateGroupAvatar
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateGroupAvatarAsyncTest()
        {
            string group = default!;
            DtoUpdateGroupAvatarReq request = default!;
            await _instance.UpdateGroupAvatarAsync(group, request);
        }

        /// <summary>
        /// Test UpdateGroupSetting
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateGroupSettingAsyncTest()
        {
            string group = default!;
            DtoGroupSettingReq request = default!;
            await _instance.UpdateGroupSettingAsync(group, request);
        }

        /// <summary>
        /// Test UpdateOrganization
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateOrganizationAsyncTest()
        {
            string group = default!;
            DtoUpdateGroupReq request = default!;
            await _instance.UpdateOrganizationAsync(group, request);
        }
    }
}
