/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using CNBOpenApi.Api;
using CNBOpenApi.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace CNBOpenApi.Test.Api
{
    /// <summary>
    ///  Class for testing IssuesApi
    /// </summary>
    public sealed class IssuesApiTests : ApiTestsBase
    {
        private readonly IIssuesApi _instance;

        public IssuesApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IIssuesApi>();
        }

        /// <summary>
        /// Test CreateIssue
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateIssueAsyncTest()
        {
            string repo = default!;
            ApiPostIssueForm postIssueForm = default!;
            var response = await _instance.CreateIssueAsync(repo, postIssueForm);
            var model = response.Created();
            Assert.IsType<ApiIssueDetail>(model);
        }

        /// <summary>
        /// Test DeleteIssueLabel
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteIssueLabelAsyncTest()
        {
            string repo = default!;
            int number = default!;
            string name = default!;
            var response = await _instance.DeleteIssueLabelAsync(repo, number, name);
            var model = response.Ok();
            Assert.IsType<ApiLabel>(model);
        }

        /// <summary>
        /// Test DeleteIssueLabels
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteIssueLabelsAsyncTest()
        {
            string repo = default!;
            int number = default!;
            await _instance.DeleteIssueLabelsAsync(repo, number);
        }

        /// <summary>
        /// Test GetIssue
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetIssueAsyncTest()
        {
            string repo = default!;
            int number = default!;
            var response = await _instance.GetIssueAsync(repo, number);
            var model = response.Ok();
            Assert.IsType<ApiIssueDetail>(model);
        }

        /// <summary>
        /// Test GetIssueComment
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetIssueCommentAsyncTest()
        {
            string repo = default!;
            int number = default!;
            int commentId = default!;
            var response = await _instance.GetIssueCommentAsync(repo, number, commentId);
            var model = response.Ok();
            Assert.IsType<ApiIssueComment>(model);
        }

        /// <summary>
        /// Test ListIssueComments
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListIssueCommentsAsyncTest()
        {
            string repo = default!;
            int number = default!;
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            var response = await _instance.ListIssueCommentsAsync(repo, number, page, pageSize);
            var model = response.Ok();
            Assert.IsType<List<ApiIssueComment>>(model);
        }

        /// <summary>
        /// Test ListIssueLabels
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListIssueLabelsAsyncTest()
        {
            string repo = default!;
            int number = default!;
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            var response = await _instance.ListIssueLabelsAsync(repo, number, page, pageSize);
            var model = response.Ok();
            Assert.IsType<List<ApiLabel>>(model);
        }

        /// <summary>
        /// Test ListIssues
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListIssuesAsyncTest()
        {
            string repo = default!;
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            Client.Option<string> state = default!;
            Client.Option<string> keyword = default!;
            Client.Option<string> priority = default!;
            Client.Option<string> labels = default!;
            Client.Option<string> authors = default!;
            Client.Option<string> assignees = default!;
            Client.Option<string> updatedTimeBegin = default!;
            Client.Option<string> updatedTimeEnd = default!;
            Client.Option<string> orderBy = default!;
            var response = await _instance.ListIssuesAsync(repo, page, pageSize, state, keyword, priority, labels, authors, assignees, updatedTimeBegin, updatedTimeEnd, orderBy);
            var model = response.Ok();
            Assert.IsType<List<ApiIssue>>(model);
        }

        /// <summary>
        /// Test PatchIssueComment
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PatchIssueCommentAsyncTest()
        {
            string repo = default!;
            int number = default!;
            int commentId = default!;
            ApiPatchIssueCommentForm patchIssueCommentForm = default!;
            var response = await _instance.PatchIssueCommentAsync(repo, number, commentId, patchIssueCommentForm);
            var model = response.Ok();
            Assert.IsType<ApiIssueComment>(model);
        }

        /// <summary>
        /// Test PostIssueComment
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostIssueCommentAsyncTest()
        {
            string repo = default!;
            int number = default!;
            ApiPostIssueCommentForm postIssueCommentForm = default!;
            var response = await _instance.PostIssueCommentAsync(repo, number, postIssueCommentForm);
            var model = response.Created();
            Assert.IsType<ApiIssueComment>(model);
        }

        /// <summary>
        /// Test PostIssueLabels
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostIssueLabelsAsyncTest()
        {
            string repo = default!;
            int number = default!;
            ApiPostIssueLabelsForm postIssueLabelsForm = default!;
            var response = await _instance.PostIssueLabelsAsync(repo, number, postIssueLabelsForm);
            var model = response.Ok();
            Assert.IsType<ApiLabel>(model);
        }

        /// <summary>
        /// Test PutIssueLabels
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PutIssueLabelsAsyncTest()
        {
            string repo = default!;
            int number = default!;
            ApiPutIssueLabelsForm putIssueLabelsForm = default!;
            var response = await _instance.PutIssueLabelsAsync(repo, number, putIssueLabelsForm);
            var model = response.Ok();
            Assert.IsType<ApiLabel>(model);
        }

        /// <summary>
        /// Test UpdateIssue
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateIssueAsyncTest()
        {
            string repo = default!;
            int number = default!;
            ApiPatchIssueForm patchIssueForm = default!;
            var response = await _instance.UpdateIssueAsync(repo, number, patchIssueForm);
            var model = response.Ok();
            Assert.IsType<ApiIssueDetail>(model);
        }
    }
}
