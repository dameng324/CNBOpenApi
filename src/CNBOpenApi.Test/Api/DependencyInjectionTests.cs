/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using CNBOpenApi.Client;
using CNBOpenApi.Api;
using CNBOpenApi.Extensions;
using Xunit;

namespace CNBOpenApi.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.Authorization, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken1);
            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.Authorization, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken1);
                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.Authorization, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken1);
                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.Authorization, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken1);
                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var artifactoryApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IArtifactoryApi>();
            Assert.True(artifactoryApi.HttpClient.BaseAddress != null);

            var assetsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAssetsApi>();
            Assert.True(assetsApi.HttpClient.BaseAddress != null);

            var buildApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IBuildApi>();
            Assert.True(buildApi.HttpClient.BaseAddress != null);

            var collaboratorsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICollaboratorsApi>();
            Assert.True(collaboratorsApi.HttpClient.BaseAddress != null);

            var contributorsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IContributorsApi>();
            Assert.True(contributorsApi.HttpClient.BaseAddress != null);

            var followersApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IFollowersApi>();
            Assert.True(followersApi.HttpClient.BaseAddress != null);

            var gitApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IGitApi>();
            Assert.True(gitApi.HttpClient.BaseAddress != null);

            var gitSettingsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IGitSettingsApi>();
            Assert.True(gitSettingsApi.HttpClient.BaseAddress != null);

            var issuesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IIssuesApi>();
            Assert.True(issuesApi.HttpClient.BaseAddress != null);

            var missionsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IMissionsApi>();
            Assert.True(missionsApi.HttpClient.BaseAddress != null);

            var organizationsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IOrganizationsApi>();
            Assert.True(organizationsApi.HttpClient.BaseAddress != null);

            var pullsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPullsApi>();
            Assert.True(pullsApi.HttpClient.BaseAddress != null);

            var releasesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IReleasesApi>();
            Assert.True(releasesApi.HttpClient.BaseAddress != null);

            var repoContributorApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IRepoContributorApi>();
            Assert.True(repoContributorApi.HttpClient.BaseAddress != null);

            var repoLabelsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IRepoLabelsApi>();
            Assert.True(repoLabelsApi.HttpClient.BaseAddress != null);

            var repositoriesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IRepositoriesApi>();
            Assert.True(repositoriesApi.HttpClient.BaseAddress != null);

            var starringApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IStarringApi>();
            Assert.True(starringApi.HttpClient.BaseAddress != null);

            var usersApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IUsersApi>();
            Assert.True(usersApi.HttpClient.BaseAddress != null);

            var workspaceApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IWorkspaceApi>();
            Assert.True(workspaceApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var artifactoryApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IArtifactoryApi>();
            Assert.True(artifactoryApi.HttpClient.BaseAddress != null);

            var assetsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAssetsApi>();
            Assert.True(assetsApi.HttpClient.BaseAddress != null);

            var buildApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IBuildApi>();
            Assert.True(buildApi.HttpClient.BaseAddress != null);

            var collaboratorsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICollaboratorsApi>();
            Assert.True(collaboratorsApi.HttpClient.BaseAddress != null);

            var contributorsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IContributorsApi>();
            Assert.True(contributorsApi.HttpClient.BaseAddress != null);

            var followersApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IFollowersApi>();
            Assert.True(followersApi.HttpClient.BaseAddress != null);

            var gitApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IGitApi>();
            Assert.True(gitApi.HttpClient.BaseAddress != null);

            var gitSettingsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IGitSettingsApi>();
            Assert.True(gitSettingsApi.HttpClient.BaseAddress != null);

            var issuesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IIssuesApi>();
            Assert.True(issuesApi.HttpClient.BaseAddress != null);

            var missionsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IMissionsApi>();
            Assert.True(missionsApi.HttpClient.BaseAddress != null);

            var organizationsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IOrganizationsApi>();
            Assert.True(organizationsApi.HttpClient.BaseAddress != null);

            var pullsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPullsApi>();
            Assert.True(pullsApi.HttpClient.BaseAddress != null);

            var releasesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IReleasesApi>();
            Assert.True(releasesApi.HttpClient.BaseAddress != null);

            var repoContributorApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IRepoContributorApi>();
            Assert.True(repoContributorApi.HttpClient.BaseAddress != null);

            var repoLabelsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IRepoLabelsApi>();
            Assert.True(repoLabelsApi.HttpClient.BaseAddress != null);

            var repositoriesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IRepositoriesApi>();
            Assert.True(repositoriesApi.HttpClient.BaseAddress != null);

            var starringApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IStarringApi>();
            Assert.True(starringApi.HttpClient.BaseAddress != null);

            var usersApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IUsersApi>();
            Assert.True(usersApi.HttpClient.BaseAddress != null);

            var workspaceApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IWorkspaceApi>();
            Assert.True(workspaceApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var artifactoryApi = _hostUsingAddWithAClient.Services.GetRequiredService<IArtifactoryApi>();
            Assert.True(artifactoryApi.HttpClient.BaseAddress != null);
            
            var assetsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAssetsApi>();
            Assert.True(assetsApi.HttpClient.BaseAddress != null);
            
            var buildApi = _hostUsingAddWithAClient.Services.GetRequiredService<IBuildApi>();
            Assert.True(buildApi.HttpClient.BaseAddress != null);
            
            var collaboratorsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICollaboratorsApi>();
            Assert.True(collaboratorsApi.HttpClient.BaseAddress != null);
            
            var contributorsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IContributorsApi>();
            Assert.True(contributorsApi.HttpClient.BaseAddress != null);
            
            var followersApi = _hostUsingAddWithAClient.Services.GetRequiredService<IFollowersApi>();
            Assert.True(followersApi.HttpClient.BaseAddress != null);
            
            var gitApi = _hostUsingAddWithAClient.Services.GetRequiredService<IGitApi>();
            Assert.True(gitApi.HttpClient.BaseAddress != null);
            
            var gitSettingsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IGitSettingsApi>();
            Assert.True(gitSettingsApi.HttpClient.BaseAddress != null);
            
            var issuesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IIssuesApi>();
            Assert.True(issuesApi.HttpClient.BaseAddress != null);
            
            var missionsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IMissionsApi>();
            Assert.True(missionsApi.HttpClient.BaseAddress != null);
            
            var organizationsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IOrganizationsApi>();
            Assert.True(organizationsApi.HttpClient.BaseAddress != null);
            
            var pullsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPullsApi>();
            Assert.True(pullsApi.HttpClient.BaseAddress != null);
            
            var releasesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IReleasesApi>();
            Assert.True(releasesApi.HttpClient.BaseAddress != null);
            
            var repoContributorApi = _hostUsingAddWithAClient.Services.GetRequiredService<IRepoContributorApi>();
            Assert.True(repoContributorApi.HttpClient.BaseAddress != null);
            
            var repoLabelsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IRepoLabelsApi>();
            Assert.True(repoLabelsApi.HttpClient.BaseAddress != null);
            
            var repositoriesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IRepositoriesApi>();
            Assert.True(repositoriesApi.HttpClient.BaseAddress != null);
            
            var starringApi = _hostUsingAddWithAClient.Services.GetRequiredService<IStarringApi>();
            Assert.True(starringApi.HttpClient.BaseAddress != null);
            
            var usersApi = _hostUsingAddWithAClient.Services.GetRequiredService<IUsersApi>();
            Assert.True(usersApi.HttpClient.BaseAddress != null);
            
            var workspaceApi = _hostUsingAddWithAClient.Services.GetRequiredService<IWorkspaceApi>();
            Assert.True(workspaceApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var artifactoryApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IArtifactoryApi>();
            Assert.True(artifactoryApi.HttpClient.BaseAddress != null);

            var assetsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAssetsApi>();
            Assert.True(assetsApi.HttpClient.BaseAddress != null);

            var buildApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IBuildApi>();
            Assert.True(buildApi.HttpClient.BaseAddress != null);

            var collaboratorsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICollaboratorsApi>();
            Assert.True(collaboratorsApi.HttpClient.BaseAddress != null);

            var contributorsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IContributorsApi>();
            Assert.True(contributorsApi.HttpClient.BaseAddress != null);

            var followersApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IFollowersApi>();
            Assert.True(followersApi.HttpClient.BaseAddress != null);

            var gitApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IGitApi>();
            Assert.True(gitApi.HttpClient.BaseAddress != null);

            var gitSettingsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IGitSettingsApi>();
            Assert.True(gitSettingsApi.HttpClient.BaseAddress != null);

            var issuesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IIssuesApi>();
            Assert.True(issuesApi.HttpClient.BaseAddress != null);

            var missionsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IMissionsApi>();
            Assert.True(missionsApi.HttpClient.BaseAddress != null);

            var organizationsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IOrganizationsApi>();
            Assert.True(organizationsApi.HttpClient.BaseAddress != null);

            var pullsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPullsApi>();
            Assert.True(pullsApi.HttpClient.BaseAddress != null);

            var releasesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IReleasesApi>();
            Assert.True(releasesApi.HttpClient.BaseAddress != null);

            var repoContributorApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IRepoContributorApi>();
            Assert.True(repoContributorApi.HttpClient.BaseAddress != null);

            var repoLabelsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IRepoLabelsApi>();
            Assert.True(repoLabelsApi.HttpClient.BaseAddress != null);

            var repositoriesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IRepositoriesApi>();
            Assert.True(repositoriesApi.HttpClient.BaseAddress != null);

            var starringApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IStarringApi>();
            Assert.True(starringApi.HttpClient.BaseAddress != null);

            var usersApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IUsersApi>();
            Assert.True(usersApi.HttpClient.BaseAddress != null);

            var workspaceApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IWorkspaceApi>();
            Assert.True(workspaceApi.HttpClient.BaseAddress != null);
        }
    }
}
