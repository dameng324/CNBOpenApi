/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using CNBOpenApi.Api;
using CNBOpenApi.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace CNBOpenApi.Test.Api
{
    /// <summary>
    ///  Class for testing AssetsApi
    /// </summary>
    public sealed class AssetsApiTests : ApiTestsBase
    {
        private readonly IAssetsApi _instance;

        public AssetsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IAssetsApi>();
        }

        /// <summary>
        /// Test GetCommitAssets
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetCommitAssetsAsyncTest()
        {
            string fileName = default!;
            string repo = default!;
            await _instance.GetCommitAssetsAsync(fileName, repo);
        }

        /// <summary>
        /// Test GetFiles
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFilesAsyncTest()
        {
            string userIdKey = default!;
            string randomUUID = default!;
            string fileName = default!;
            string repo = default!;
            await _instance.GetFilesAsync(userIdKey, randomUUID, fileName, repo);
        }

        /// <summary>
        /// Test GetImgs
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetImgsAsyncTest()
        {
            string userIdKey = default!;
            string fileName = default!;
            string repo = default!;
            await _instance.GetImgsAsync(userIdKey, fileName, repo);
        }

        /// <summary>
        /// Test GetLatestReleasesAsset
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetLatestReleasesAssetAsyncTest()
        {
            string fileName = default!;
            string repo = default!;
            await _instance.GetLatestReleasesAssetAsync(fileName, repo);
        }

        /// <summary>
        /// Test GetLogos
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetLogosAsyncTest()
        {
            string size = default!;
            string group = default!;
            await _instance.GetLogosAsync(size, group);
        }

        /// <summary>
        /// Test GetReleasesAsset
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReleasesAssetAsyncTest()
        {
            string fileName = default!;
            string repo = default!;
            await _instance.GetReleasesAssetAsync(fileName, repo);
        }

        /// <summary>
        /// Test PutFiles
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PutFilesAsyncTest()
        {
            string userIdKey = default!;
            string randomUUID = default!;
            string fileName = default!;
            string token = default!;
            string repo = default!;
            await _instance.PutFilesAsync(userIdKey, randomUUID, fileName, token, repo);
        }

        /// <summary>
        /// Test PutImgs
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PutImgsAsyncTest()
        {
            string userIdKey = default!;
            string fileName = default!;
            string token = default!;
            string repo = default!;
            await _instance.PutImgsAsync(userIdKey, fileName, token, repo);
        }

        /// <summary>
        /// Test PutLogos
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PutLogosAsyncTest()
        {
            string token = default!;
            string group = default!;
            await _instance.PutLogosAsync(token, group);
        }

        /// <summary>
        /// Test UploadFiles
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UploadFilesAsyncTest()
        {
            DtoUploadRequestParams request = default!;
            string repo = default!;
            var response = await _instance.UploadFilesAsync(request, repo);
            var model = response.Ok();
            Assert.IsType<DtoUploadAssetsResponse>(model);
        }

        /// <summary>
        /// Test UploadImgs
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UploadImgsAsyncTest()
        {
            DtoUploadRequestParams request = default!;
            string repo = default!;
            var response = await _instance.UploadImgsAsync(request, repo);
            var model = response.Ok();
            Assert.IsType<DtoUploadAssetsResponse>(model);
        }

        /// <summary>
        /// Test UploadLogos
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UploadLogosAsyncTest()
        {
            DtoUploadRequestParams request = default!;
            string group = default!;
            var response = await _instance.UploadLogosAsync(request, group);
            var model = response.Ok();
            Assert.IsType<DtoUploadAssetsResponse>(model);
        }

        /// <summary>
        /// Test UploadReleases
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UploadReleasesAsyncTest()
        {
            string tagName = default!;
            DtoUploadRequestParams request = default!;
            string repo = default!;
            var response = await _instance.UploadReleasesAsync(tagName, request, repo);
            var model = response.Ok();
            Assert.IsType<DtoUploadAssetsResponse>(model);
        }
    }
}
