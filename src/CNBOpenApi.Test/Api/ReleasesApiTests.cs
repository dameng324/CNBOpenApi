/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using CNBOpenApi.Api;
using CNBOpenApi.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace CNBOpenApi.Test.Api
{
    /// <summary>
    ///  Class for testing ReleasesApi
    /// </summary>
    public sealed class ReleasesApiTests : ApiTestsBase
    {
        private readonly IReleasesApi _instance;

        public ReleasesApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IReleasesApi>();
        }

        /// <summary>
        /// Test DeleteRelease
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteReleaseAsyncTest()
        {
            string repo = default!;
            int releaseId = default!;
            await _instance.DeleteReleaseAsync(repo, releaseId);
        }

        /// <summary>
        /// Test DeleteReleaseAsset
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteReleaseAssetAsyncTest()
        {
            string repo = default!;
            int releaseId = default!;
            int assetId = default!;
            await _instance.DeleteReleaseAssetAsync(repo, releaseId, assetId);
        }

        /// <summary>
        /// Test GetLatestRelease
        /// </summary>
        [Fact ()]
        public async Task GetLatestReleaseAsyncTest()
        {
            string repo = "dameng324/WindRangerRelease";
            var response = await _instance.GetLatestReleaseAsync(repo);
            var model = response.Ok();
            Assert.IsType<ApiRelease>(model);
        }

        /// <summary>
        /// Test GetReleaseAsset
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReleaseAssetAsyncTest()
        {
            string repo = default!;
            int releaseId = default!;
            int assetId = default!;
            var response = await _instance.GetReleaseAssetAsync(repo, releaseId, assetId);
            var model = response.Ok();
            Assert.IsType<ApiReleaseAsset>(model);
        }

        /// <summary>
        /// Test GetReleaseByID
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReleaseByIDAsyncTest()
        {
            string repo = default!;
            int releaseId = default!;
            var response = await _instance.GetReleaseByIDAsync(repo, releaseId);
            var model = response.Ok();
            Assert.IsType<ApiRelease>(model);
        }

        /// <summary>
        /// Test GetReleaseByTag
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReleaseByTagAsyncTest()
        {
            string repo = default!;
            string tag = default!;
            var response = await _instance.GetReleaseByTagAsync(repo, tag);
            var model = response.Ok();
            Assert.IsType<ApiRelease>(model);
        }

        /// <summary>
        /// Test ListReleases
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListReleasesAsyncTest()
        {
            string repo = default!;
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            var response = await _instance.ListReleasesAsync(repo, page, pageSize);
            var model = response.Ok();
            Assert.IsType<List<ApiRelease>>(model);
        }

        /// <summary>
        /// Test PatchRelease
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PatchReleaseAsyncTest()
        {
            string repo = default!;
            int releaseId = default!;
            OpenapiPatchReleaseForm patchReleaseForm = default!;
            await _instance.PatchReleaseAsync(repo, releaseId, patchReleaseForm);
        }

        /// <summary>
        /// Test PostRelease
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostReleaseAsyncTest()
        {
            string repo = default!;
            OpenapiPostReleaseForm createReleaseForm = default!;
            var response = await _instance.PostReleaseAsync(repo, createReleaseForm);
            var model = response.Created();
            Assert.IsType<ApiRelease>(model);
        }

        /// <summary>
        /// Test PostReleaseAssetUploadConfirmation
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostReleaseAssetUploadConfirmationAsyncTest()
        {
            string repo = default!;
            int releaseId = default!;
            string token = default!;
            string assetPath = default!;
            await _instance.PostReleaseAssetUploadConfirmationAsync(repo, releaseId, token, assetPath);
        }

        /// <summary>
        /// Test PostReleaseAssetUploadURL
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostReleaseAssetUploadURLAsyncTest()
        {
            string repo = default!;
            int releaseId = default!;
            OpenapiPostReleaseAssetUploadURLForm createReleaseAssetUploadUrlForm = default!;
            var response = await _instance.PostReleaseAssetUploadURLAsync(repo, releaseId, createReleaseAssetUploadUrlForm);
            var model = response.Created();
            Assert.IsType<OpenapiReleaseAssetUploadURL>(model);
        }
    }
}
