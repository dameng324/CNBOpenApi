/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using CNBOpenApi.Api;
using CNBOpenApi.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace CNBOpenApi.Test.Api
{
    /// <summary>
    ///  Class for testing PullsApi
    /// </summary>
    public sealed class PullsApiTests : ApiTestsBase
    {
        private readonly IPullsApi _instance;

        public PullsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IPullsApi>();
        }

        /// <summary>
        /// Test DeletePullLabel
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeletePullLabelAsyncTest()
        {
            string repo = default!;
            int number = default!;
            string name = default!;
            var response = await _instance.DeletePullLabelAsync(repo, number, name);
            var model = response.Ok();
            Assert.IsType<ApiLabel>(model);
        }

        /// <summary>
        /// Test DeletePullLabels
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeletePullLabelsAsyncTest()
        {
            string repo = default!;
            int number = default!;
            await _instance.DeletePullLabelsAsync(repo, number);
        }

        /// <summary>
        /// Test GetPull
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPullAsyncTest()
        {
            string repo = default!;
            int number = default!;
            var response = await _instance.GetPullAsync(repo, number);
            var model = response.Ok();
            Assert.IsType<ApiPull>(model);
        }

        /// <summary>
        /// Test ListPullComments
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListPullCommentsAsyncTest()
        {
            string repo = default!;
            string number = default!;
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            var response = await _instance.ListPullCommentsAsync(repo, number, page, pageSize);
            var model = response.Ok();
            Assert.IsType<List<ApiPullRequestComment>>(model);
        }

        /// <summary>
        /// Test ListPullLabels
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListPullLabelsAsyncTest()
        {
            string repo = default!;
            int number = default!;
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            var response = await _instance.ListPullLabelsAsync(repo, number, page, pageSize);
            var model = response.Ok();
            Assert.IsType<List<ApiLabel>>(model);
        }

        /// <summary>
        /// Test ListPulls
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListPullsAsyncTest()
        {
            string repo = default!;
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            Client.Option<string> state = default!;
            Client.Option<string> authors = default!;
            Client.Option<string> reviewers = default!;
            Client.Option<string> assignees = default!;
            Client.Option<string> baseRef = default!;
            var response = await _instance.ListPullsAsync(repo, page, pageSize, state, authors, reviewers, assignees, baseRef);
            var model = response.Ok();
            Assert.IsType<List<ApiPullRequest>>(model);
        }

        /// <summary>
        /// Test ListPullsByNumbers
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListPullsByNumbersAsyncTest()
        {
            string repo = default!;
            List<string> n = default!;
            var response = await _instance.ListPullsByNumbersAsync(repo, n);
            var model = response.Ok();
            Assert.IsType<List<ApiPullRequestInfo>>(model);
        }

        /// <summary>
        /// Test MergePull
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MergePullAsyncTest()
        {
            string repo = default!;
            int number = default!;
            ApiMergePullRequest mergePullRequestForm = default!;
            var response = await _instance.MergePullAsync(repo, number, mergePullRequestForm);
            var model = response.Ok();
            Assert.IsType<ApiMergePullResponse>(model);
        }

        /// <summary>
        /// Test PatchPull
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PatchPullAsyncTest()
        {
            string repo = default!;
            int number = default!;
            ApiPatchPullRequest updatePullRequestForm = default!;
            var response = await _instance.PatchPullAsync(repo, number, updatePullRequestForm);
            var model = response.Ok();
            Assert.IsType<ApiPull>(model);
        }

        /// <summary>
        /// Test PostPull
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostPullAsyncTest()
        {
            string repo = default!;
            ApiPullCreationForm postPullForm = default!;
            var response = await _instance.PostPullAsync(repo, postPullForm);
            var model = response.Created();
            Assert.IsType<ApiPull>(model);
        }

        /// <summary>
        /// Test PostPullComment
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostPullCommentAsyncTest()
        {
            string repo = default!;
            int number = default!;
            ApiPullCommentCreationForm postPullCommentForm = default!;
            await _instance.PostPullCommentAsync(repo, number, postPullCommentForm);
        }

        /// <summary>
        /// Test PostPullLabels
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostPullLabelsAsyncTest()
        {
            string repo = default!;
            int number = default!;
            ApiPostPullLabelsForm postPullLabelsForm = default!;
            var response = await _instance.PostPullLabelsAsync(repo, number, postPullLabelsForm);
            var model = response.Ok();
            Assert.IsType<ApiLabel>(model);
        }

        /// <summary>
        /// Test PostPullReview
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostPullReviewAsyncTest()
        {
            string repo = default!;
            int number = default!;
            ApiPullReviewCreationForm postPullReviewForm = default!;
            await _instance.PostPullReviewAsync(repo, number, postPullReviewForm);
        }

        /// <summary>
        /// Test PutPullLabels
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PutPullLabelsAsyncTest()
        {
            string repo = default!;
            int number = default!;
            ApiPutPullLabelsForm putPullLabelsForm = default!;
            var response = await _instance.PutPullLabelsAsync(repo, number, putPullLabelsForm);
            var model = response.Ok();
            Assert.IsType<ApiLabel>(model);
        }
    }
}
