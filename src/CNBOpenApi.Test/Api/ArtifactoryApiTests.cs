/*
 * CNB OPENAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cnb@tencent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using CNBOpenApi.Api;
using CNBOpenApi.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace CNBOpenApi.Test.Api
{
    /// <summary>
    ///  Class for testing ArtifactoryApi
    /// </summary>
    public sealed class ArtifactoryApiTests : ApiTestsBase
    {
        private readonly IArtifactoryApi _instance;

        public ArtifactoryApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IArtifactoryApi>();
        }

        /// <summary>
        /// Test DeletePackageTag
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeletePackageTagAsyncTest()
        {
            string slug = default!;
            string type = default!;
            string name = default!;
            string tag = default!;
            await _instance.DeletePackageTagAsync(slug, type, name, tag);
        }

        /// <summary>
        /// Test DeleteRegistry
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteRegistryAsyncTest()
        {
            string registry = default!;
            Client.Option<string> xCnbIdentityTicket = default!;
            await _instance.DeleteRegistryAsync(registry, xCnbIdentityTicket);
        }

        /// <summary>
        /// Test DownloadQuotasByProjectName
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DownloadQuotasByProjectNameAsyncTest()
        {
            string slug = default!;
            string type = default!;
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            Client.Option<string> ordering = default!;
            var response = await _instance.DownloadQuotasByProjectNameAsync(slug, type, page, pageSize, ordering);
            var model = response.Ok();
            Assert.IsType<List<DtoQuotaRsp>>(model);
        }

        /// <summary>
        /// Test GetPackage
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPackageAsyncTest()
        {
            string slug = default!;
            string type = default!;
            string name = default!;
            var response = await _instance.GetPackageAsync(slug, type, name);
            var model = response.Ok();
            Assert.IsType<DtoPackageDetail>(model);
        }

        /// <summary>
        /// Test GetPackageTagDetail
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPackageTagDetailAsyncTest()
        {
            string slug = default!;
            string type = default!;
            string name = default!;
            string tag = default!;
            Client.Option<string> sha256 = default!;
            var response = await _instance.GetPackageTagDetailAsync(slug, type, name, tag, sha256);
            var model = response.Ok();
            Assert.IsType<DtoTagDetail>(model);
        }

        /// <summary>
        /// Test GetQuotaByProjectName
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetQuotaByProjectNameAsyncTest()
        {
            string slug = default!;
            string type = default!;
            var response = await _instance.GetQuotaByProjectNameAsync(slug, type);
            var model = response.Ok();
            Assert.IsType<DtoQuotaRsp>(model);
        }

        /// <summary>
        /// Test GetQuotasByProjectName
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetQuotasByProjectNameAsyncTest()
        {
            string slug = default!;
            string type = default!;
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            Client.Option<string> ordering = default!;
            var response = await _instance.GetQuotasByProjectNameAsync(slug, type, page, pageSize, ordering);
            var model = response.Ok();
            Assert.IsType<List<DtoQuotaRsp>>(model);
        }

        /// <summary>
        /// Test HeadPackages
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task HeadPackagesAsyncTest()
        {
            string slug = default!;
            string type = default!;
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            Client.Option<string> ordering = default!;
            Client.Option<string> name = default!;
            await _instance.HeadPackagesAsync(slug, type, page, pageSize, ordering, name);
        }

        /// <summary>
        /// Test ListPackageTags
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListPackageTagsAsyncTest()
        {
            string slug = default!;
            string type = default!;
            string pkgname = default!;
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            Client.Option<string> ordering = default!;
            Client.Option<string> name = default!;
            var response = await _instance.ListPackageTagsAsync(slug, type, pkgname, page, pageSize, ordering, name);
            var model = response.Ok();
            Assert.IsType<DtoTag>(model);
        }

        /// <summary>
        /// Test ListPackages
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListPackagesAsyncTest()
        {
            string slug = default!;
            string type = default!;
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            Client.Option<string> ordering = default!;
            Client.Option<string> name = default!;
            var response = await _instance.ListPackagesAsync(slug, type, page, pageSize, ordering, name);
            var model = response.Ok();
            Assert.IsType<List<DtoPackage>>(model);
        }
    }
}
